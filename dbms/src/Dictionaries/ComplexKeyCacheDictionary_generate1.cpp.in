#include <Dictionaries/ComplexKeyCacheDictionary.h>

namespace DB
{
namespace ErrorCodes
{
    extern const int TYPE_MISMATCH;
}

using TYPE = @NAME@;
void ComplexKeyCacheDictionary::get@NAME@(const std::string & attribute_name, const Columns & key_columns, const DataTypes & key_types, ResultArrayType<TYPE> & out) const
{
    dict_struct.validateKeyTypes(key_types);

    auto & attribute = getAttribute(attribute_name);
    if (!isAttributeTypeConvertibleTo(attribute.type, AttributeUnderlyingType::@NAME@))
        throw Exception {name + ": type mismatch: attribute " + attribute_name + " has type " + toString(attribute.type),
                         ErrorCodes::TYPE_MISMATCH};

    const auto null_value = std::get<TYPE>(attribute.null_values);

    getItemsNumber<TYPE>(attribute, key_columns, out, [&](const size_t) { return null_value; });
}
}
