<test>
    <name>json_extract_without_simdjson</name>
    <type>once</type>

    <stop_conditions>
        <any_of>
            <average_speed_not_changing_for_ms>1000</average_speed_not_changing_for_ms>
            <total_time_ms>2000</total_time_ms>
        </any_of>
    </stop_conditions>

    <main_metric>
        <max_rows_per_second />
        <max_bytes_per_second />
        <avg_rows_per_second />
        <avg_bytes_per_second />
    </main_metric>

    <substitutions>
        <substitution>
           <name>json</name>
           <values>
               <value>'{"sparam":"test_string","nparam": 772}'</value>
               <value>'{"sparam":{"nested_1":"test_string","nested_2":"test_2"}, "nparam":8495, "fparam":{"nested_1":91.15,"nested_2":[334, 89.05, 1000.01]}, "bparam":false}'</value>
           </values>
        </substitution>
    </substitutions>

    <settings>
        <allow_simdjson>0</allow_simdjson>
    </settings>

    <query>SELECT count() FROM system.numbers WHERE NOT ignore(JSONExtractString(materialize({json}), 'sparam'))</query>
    <query>SELECT count() FROM system.numbers WHERE NOT ignore(JSONExtractInt(materialize({json}), 'nparam'))</query>
    <query>SELECT count() FROM system.numbers WHERE NOT ignore(JSONExtractUInt(materialize({json}), 'nparam'))</query>
    <query>SELECT count() FROM system.numbers WHERE NOT ignore(JSONExtractFloat(materialize({json}), 'fparam'))</query>
    <query>SELECT count() FROM system.numbers WHERE NOT ignore(JSONExtractBool(materialize({json}), 'bparam'))</query>
    <query>SELECT count() FROM system.numbers WHERE NOT ignore(JSONExtractString(materialize({json}), 'sparam', 'nested_1'))</query>
    <query>SELECT count() FROM system.numbers WHERE NOT ignore(JSONExtractFloat(materialize({json}), 'fparam', 'nested_2', -2))</query>
    <query>SELECT count() FROM system.numbers WHERE NOT ignore(JSONExtractRaw(materialize({json}), 'fparam'))</query>
</test>
