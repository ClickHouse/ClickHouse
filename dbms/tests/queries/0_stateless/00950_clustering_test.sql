CREATE DATABASE IF NOT EXISTS test;
DROP TABLE IF EXISTS test.defaults;
CREATE TABLE IF NOT EXISTS test.defaults
(
    param1 Float64,
    param2 Float64,
    param3 Float64,
    param4 Float64
) ENGINE = Memory;

/* 
6 clusters with 50 points per cluster. cluster centers:
[0, 0, 1, 1]
[0, 1, 0, 1]
[0, 1, 1, 0]
[1, 0, 0, 1]
[1, 0, 1, 0]
[1, 1, 0, 0]
*/
insert into test.defaults values (-0.0593,0.0857,1.3233,0.9540),(0.7805,1.2164,0.1841,0.2614),(-0.4475,1.1131,1.1560,0.3499),(0.3701,-0.0582,0.9397,1.0401),(0.3375,0.0421,1.0707,0.7485),(0.9945,0.7995,-0.2746,-0.3948),(-0.1521,1.2065,1.1087,-0.1292),(1.0271,0.9989,-0.0984,0.1182),(1.0427,0.2815,0.6889,0.0877),(0.0838,0.1414,0.9266,1.1647),(-0.1113,1.1828,-0.0409,0.7472),(-0.1189,0.9739,-0.1069,0.8473),(-0.1607,0.8727,0.9026,-0.1834),(0.2099,1.1682,1.1141,0.0611),(-0.1357,0.0827,0.9650,1.1046),(1.0309,1.1590,-0.2363,-0.0417),(-0.2538,0.9102,-0.1106,0.8105),(1.0172,0.9529,-0.0336,0.2322),(0.9695,-0.2013,0.1457,1.2179),(0.0968,1.0635,-0.2592,1.1788),(0.7985,-0.1261,0.2226,1.2136),(1.1694,0.0348,0.9121,0.1244),(0.9724,-0.1024,0.7832,-0.3766),(-0.2442,0.7954,0.2885,1.2478),(-0.1813,1.0026,1.2097,-0.2655),(0.0213,-0.0973,0.8301,1.0663),(0.2815,-0.1115,0.9306,0.9751),(1.0034,0.3929,-0.2350,0.9790),(-0.0183,0.7219,0.0293,0.9563),(-0.0664,0.1639,0.6786,0.8307),(1.0512,0.2965,-0.1012,1.0525),(-0.1211,0.9934,1.0371,0.1363),(0.9018,0.9142,-0.2611,-0.1084),(1.0377,1.0957,-0.2288,-0.2851),(-0.0879,-0.0981,1.1347,1.1773),(-0.1040,-0.0516,1.2192,1.2026),(0.0759,1.1646,-0.0124,1.1619),(0.1264,0.8748,1.1064,0.2408),(0.7608,-0.1867,1.0878,0.2089),(0.7697,-0.0594,0.0475,1.3564),(0.2847,1.0127,0.2120,1.2681),(0.9057,1.2506,-0.0620,-0.1381),(0.0471,0.9796,-0.0365,1.1076),(0.9282,0.0835,1.4961,-0.3199),(0.0878,0.8093,1.2485,-0.0904),(-0.1005,0.7228,0.1259,1.0185),(0.5320,1.2570,0.1027,0.1977),(-0.0132,0.9643,0.9419,0.0383),(-0.3972,1.1349,1.1920,0.2741),(-0.0833,-0.1888,0.8623,1.3583),(1.0785,-0.0631,0.4991,-0.1277),(-0.2989,-0.3644,1.3102,1.1395),(1.0029,0.1626,1.2428,-0.1820),(1.3875,1.2851,-0.1144,-0.2661),(1.2909,-0.0019,0.8475,-0.0002),(0.8616,0.3193,0.8969,0.1750),(1.2206,-0.2406,0.8641,-0.0012),(0.8246,0.0383,0.0035,1.1436),(0.9749,0.1291,0.0361,0.8369),(0.9409,0.0323,0.9106,0.0955),(-0.2079,1.2523,-0.0266,0.8436),(0.8485,1.0745,0.1986,0.4949),(1.0451,-0.0379,0.9614,-0.0169),(0.1158,-0.0307,0.9144,1.3188),(0.8911,-0.0132,-0.1950,1.0735),(0.5837,0.1101,0.3698,1.1684),(0.0512,0.9378,0.9860,0.4470),(-0.3340,1.0199,1.3090,-0.0522),(0.9950,0.3265,0.8441,-0.1986),(1.2745,-0.0128,-0.1560,1.4035),(0.7684,1.0063,0.2002,-0.0094),(0.0868,-0.1264,0.5835,1.1373),(1.0956,-0.0311,0.0338,1.4971),(1.0024,-0.1984,1.2649,-0.1931),(0.3052,0.9664,1.2673,-0.1869),(0.1968,1.0454,1.1579,-0.1743),(1.0409,-0.0680,1.0382,0.0994),(-0.4172,0.9089,-0.1788,0.7831),(0.8695,1.1272,0.2762,-0.0652),(0.5396,0.3814,-0.0706,1.0529),(0.9617,0.1233,1.2798,0.1593),(0.6422,0.0259,0.9905,-0.0314),(0.7495,0.0429,0.9708,0.1537),(0.8279,-0.0592,0.6012,0.1890),(1.1066,-0.1505,0.9872,0.2362),(0.0147,-0.1566,0.9554,1.0900),(0.0680,0.7582,0.8710,-0.0790),(1.0603,0.0239,0.0202,0.9626),(0.8009,-0.0184,0.2121,1.0112),(0.5346,1.3684,1.1650,0.1682),(-0.2218,0.1095,1.2041,0.7708),(1.1278,1.2873,-0.1629,0.4306),(0.0371,-0.2766,1.0613,0.8459),(-0.2255,1.1542,0.8709,0.0093),(-0.1157,0.7393,0.3399,0.7452),(1.0652,0.1607,0.8624,-0.1157),(1.0461,-0.1109,1.0839,-0.0302),(0.3111,1.2571,1.2822,-0.0433),(0.7824,1.0784,-0.4017,-0.0756),(-0.0872,0.9794,0.9284,-0.0282),(-0.0810,0.7019,-0.0189,1.0703),(1.4548,0.0881,0.7024,-0.0314),(1.0622,-0.0121,0.8378,0.0666),(1.0642,-0.1705,-0.1571,1.2378),(0.8424,0.1938,1.1673,-0.4072),(0.0997,0.8744,0.8588,-0.2423),(1.2992,0.7959,-0.1289,0.1874),(0.0045,1.1487,0.1565,0.5657),(0.1335,1.0891,-0.2407,0.7714),(0.3100,1.0159,0.8344,0.3501),(-0.0085,0.8222,-0.2508,0.9524),(0.9706,0.0807,0.9440,0.2566),(0.9020,0.8691,-0.3121,0.0601),(0.0893,0.7874,0.1692,0.9172),(0.0286,0.8457,0.3344,0.9369),(0.9425,-0.3385,1.0069,0.3463),(1.0906,-0.4190,0.8348,-0.1165),(1.0509,0.0394,1.1141,-0.1369),(1.0054,0.0360,0.2142,0.9180),(0.2655,0.2067,1.1716,0.9396),(1.0018,0.8618,0.1012,-0.1274),(1.2032,1.2360,0.1789,0.2455),(0.1697,1.2579,-0.0921,0.7065),(0.0674,1.3421,1.3212,0.1138),(-0.1276,1.1685,1.3398,-0.0950),(0.1249,1.0194,0.6855,-0.0678),(0.0948,0.3763,1.0166,0.8701),(0.7583,1.1723,0.1128,0.0996),(-0.6276,0.1972,0.9164,1.0642),(1.1849,0.4532,-0.0000,0.1013),(0.1176,-0.2164,1.3696,0.8205),(0.9081,1.0994,0.2194,-0.0277),(0.2259,-0.0250,1.2638,0.7884),(0.5597,1.4057,0.0761,1.0466),(1.1934,-0.2006,0.8826,-0.0408),(1.1728,0.2005,0.0619,0.8768),(0.2587,0.8200,0.2144,1.0810),(-0.0445,0.0422,1.2902,0.7750),(0.0187,0.0030,0.8738,1.0877),(-0.1682,0.9951,1.2511,0.0217),(0.1374,0.2143,1.0250,0.9810),(-0.1843,-0.2672,0.7501,0.7442),(-0.0522,1.2227,-0.1441,0.7713),(0.1931,1.3366,-0.1650,1.0538),(-0.1761,-0.0647,0.8595,0.8761),(-0.1063,0.8357,0.9638,-0.1582),(1.0281,0.1254,0.0088,0.8660),(0.9438,0.3303,0.0679,0.8297),(1.2865,-0.0328,-0.0638,0.9431),(1.1253,1.1381,-0.1741,0.0483),(1.0725,0.1371,0.7053,0.2844),(0.2831,-0.4658,0.8140,1.0747),(0.7957,0.2364,-0.0523,0.7423),(1.2098,1.7214,0.1802,0.0470),(0.3750,1.1325,0.6651,-0.2457),(0.8850,1.2916,0.0884,-0.2963),(-0.1364,1.2654,-0.1958,1.0541),(0.4932,-0.0068,1.3434,0.9296),(0.8204,-0.2569,1.2482,-0.3226),(0.3815,-0.0786,0.7685,1.0134),(0.9324,0.9490,0.1572,0.0789),(0.7921,0.0029,0.0914,1.0201),(-0.0067,1.1043,0.7600,-0.5101),(1.2329,-0.4292,1.1080,0.3041),(0.2379,0.9010,0.5184,0.7139),(-0.1390,1.1017,-0.1139,1.1532),(0.7712,0.1520,0.0908,0.8714),(0.8294,1.2969,-0.1144,-0.6190),(0.1939,0.2720,0.9269,1.0012),(0.2856,0.7823,0.9998,0.2013),(0.9700,0.2053,1.0932,-0.4257),(1.0297,-0.0446,1.1103,0.0706),(1.2853,1.2310,-0.1298,0.3327),(0.0156,0.8204,0.9611,-0.0543),(0.2463,1.1486,-0.0057,1.1357),(1.0729,-0.1783,1.0210,0.0744),(1.0531,0.0813,0.1286,0.9362),(-0.0826,1.1536,0.0827,0.9814),(1.0241,0.8836,-0.0146,-0.1997),(0.0857,-0.3733,0.9652,0.9189),(1.2441,0.1527,-0.1100,1.1369),(1.0574,0.0182,0.7882,-0.1818),(0.2655,1.3855,-0.2242,0.9046),(0.0501,0.1962,0.7249,0.7762),(-0.2667,-0.1062,1.1292,0.8126),(-0.0781,0.9041,-0.1121,0.8035),(0.2318,1.3387,-0.0851,0.6330),(1.0641,0.0651,0.2116,0.7810),(-0.2245,1.0951,0.1479,1.0123),(1.2052,-0.0507,0.1078,1.1303),(1.0953,1.0267,0.1430,-0.1036),(0.9925,0.1741,0.9384,0.1991),(1.2000,0.9198,0.3208,-0.0780),(0.0170,0.7761,-0.1293,0.7121),(1.1111,-0.0281,1.3180,0.1578),(0.8347,0.0705,0.1009,1.0323),(1.2139,1.0691,0.4183,0.1809),(-0.1931,0.1597,1.3359,0.9974),(0.8862,-0.2048,0.9806,-0.1371),(-0.2557,1.1124,-0.3238,1.1003),(0.8017,1.1480,0.0397,0.0929),(-0.0064,1.1145,0.0814,1.3362),(1.1058,0.1218,0.0178,1.2027),(0.0304,0.6776,0.0896,1.0645),(0.7302,-0.2143,0.7244,-0.2507),(0.8521,0.2232,0.3769,1.1748),(1.0726,-0.1213,0.1362,1.0978),(0.0921,1.2447,0.0990,1.1771),(-0.2976,1.2640,-0.1433,0.9804),(0.8766,1.1158,-0.1109,0.0642),(0.9303,0.2417,0.2339,0.6603),(1.0060,1.0851,-0.1020,0.3066),(0.9739,1.0391,0.0817,0.2050),(-0.0038,1.1977,0.7564,0.1394),(0.9135,1.1102,-0.3260,0.1488),(-0.1142,1.1172,0.0769,1.3022),(0.5651,-0.2160,-0.2527,1.0181),(-0.1469,1.2227,0.8703,0.4024),(-0.3103,1.0339,0.7941,-0.1210),(0.9106,0.9369,-0.0718,0.1658),(0.9949,1.1472,0.0685,0.1708),(0.0990,-0.0941,1.3642,1.0619),(1.3528,0.0177,0.1031,1.4885),(-0.3460,0.9816,0.8838,-0.0508),(0.7884,-0.1055,1.1553,0.0669),(0.1279,0.2351,1.3427,0.8104),(0.5689,-0.0636,1.2856,-0.0795),(1.1375,-0.0825,0.3772,0.8396),(0.3611,0.8936,-0.3650,0.9017),(-0.3885,1.2452,1.3397,0.0148),(0.0152,1.0359,-0.0483,1.1000),(0.2321,0.9148,0.9989,-0.0750),(1.2989,0.1810,0.4608,1.1541),(0.3235,-0.1418,0.9717,1.3566),(0.8592,1.3860,0.2409,-0.0086),(0.1468,1.0145,1.1833,0.2727),(0.8365,-0.0734,1.2027,0.0341),(0.1318,0.8704,1.1828,0.0858),(-0.1187,0.0051,0.9882,0.5652),(0.1052,-0.2501,0.8199,1.1336),(1.0335,-0.4253,-0.1295,0.6658),(1.0673,0.4592,-0.1886,0.8384),(0.7885,1.3067,-0.2997,0.3539),(0.8463,-0.1279,1.0718,-0.0820),(0.7541,1.0090,0.2200,-0.0753),(-0.0963,1.0839,1.0655,0.2879),(1.3754,0.1214,0.0272,0.9497),(0.9449,0.2415,-0.2395,1.3288),(1.4203,-0.0292,0.0887,1.0950),(0.2736,1.1333,0.9996,-0.0488),(0.7185,-0.1311,1.2909,0.2866),(1.2955,0.0725,-0.1113,0.9987),(-0.1126,-0.5222,0.8263,1.3535),(1.2066,0.8996,0.1884,-0.2245),(0.0763,0.8146,0.8613,-0.2249),(-0.2837,-0.1502,0.9445,1.1994),(-0.0885,0.9631,0.1489,0.6935),(-0.1267,1.0651,-0.4072,0.8540),(-0.1631,1.0819,1.0233,0.2495),(-0.0697,1.1285,-0.1320,1.1693),(-0.3630,1.2559,-0.4461,0.9751),(-0.3206,1.0426,0.9825,-0.1314),(-0.3473,-0.0111,0.9309,0.8836),(0.0947,0.0650,0.9696,0.7991),(-0.1218,0.9856,0.0289,0.9825),(0.8534,0.8823,0.0741,-0.0806),(-0.1877,0.0060,0.7682,0.9438),(0.9777,0.9509,-0.2856,-0.1434),(0.8064,-0.0835,-0.0022,1.1139),(0.4356,-0.0085,0.0364,0.9260),(-0.1630,0.8912,1.0998,0.0381),(1.0908,0.1195,-0.0416,0.8251),(0.0191,1.1996,1.1546,0.0470),(0.2633,1.1048,0.0277,0.7794),(0.9695,0.9252,0.1664,-0.1421),(0.3060,0.0617,0.4406,0.9363),(0.9917,1.0960,0.1321,-0.0897),(0.8211,0.6963,0.2749,-0.2925),(-0.2670,0.6274,0.8510,-0.3545),(-0.0922,0.9248,0.9750,0.2369),(1.1202,0.7740,-0.4052,0.1693),(0.0151,0.1024,1.1916,0.7115),(-0.0045,1.0480,0.8832,0.1413),(0.0938,-0.0638,0.7880,1.0696),(0.9161,-0.4157,0.3193,1.0381),(-0.1315,-0.2712,0.7475,1.0160),(-0.1231,0.9865,-0.2975,0.7741),(1.0968,-0.0836,0.5348,1.1298),(0.7457,-0.2808,0.8544,-0.0127),(0.7441,0.8255,-0.2095,0.1160),(0.8246,-0.2769,0.0850,1.3101),(1.0872,0.0157,1.2655,0.3266),(0.8605,-0.0183,-0.1693,1.0678),(-0.1381,0.7215,0.0592,0.8207),(-0.0141,1.1049,0.7139,0.1337),(1.2735,0.2598,0.4347,0.7775),(1.1891,0.0548,1.3653,0.3649),(-0.0482,-0.1596,0.7966,0.7983),(0.7006,0.0648,0.9342,-0.1920),(-0.3811,1.1993,0.9855,-0.1776);

DROP TABLE IF EXISTS test.model;
CREATE TABLE test.model ENGINE = Memory AS SELECT IncrementalClusteringState(6)(param1, param2, param3, param4) AS state FROM test.defaults;

DROP TABLE IF EXISTS test.defaults;
CREATE TABLE IF NOT EXISTS test.defaults
(
    param1 Float64,
    param2 Float64,
    param3 Float64,
    param4 Float64
) ENGINE = Memory;
insert into test.defaults values (0,0,1,1),(0,1,0,1),(0,1,1,0),(1,0,0,1),(1,0,1,0),(1,1,0,0);

with (select state from test.model) as model select evalMLMethod(model, param1, param2, param3, param4) as ans from test.defaults order by ans;
