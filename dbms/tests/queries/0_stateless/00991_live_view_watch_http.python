#!/usr/bin/env python

import subprocess
import threading
import Queue as queue
import os
import sys


CLICKHOUSE_CLIENT = os.environ.get('CLICKHOUSE_CLIENT')
CLICKHOUSE_CURL = os.environ.get('CLICKHOUSE_CURL')
CLICKHOUSE_URL = os.environ.get('CLICKHOUSE_URL')


def send_query(query):
    cmd = list(CLICKHOUSE_CLIENT.split())
    cmd += ['--query', query]
    # print(cmd)
    return subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)


def send_http_query(query):
    cmd =  list(CLICKHOUSE_CURL.split()) # list(['curl', '-sSN', '--max-time', '10'])
    cmd += ['-sSN', CLICKHOUSE_URL, '-d', query]
    return subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)


def read_lines_and_push_to_queue(p, queue):
    pipe = p.stdout
    sys.stdout.flush()

    for line in iter(pipe.readline, ''):
        line = line.strip()
        print(line)
        sys.stdout.flush()
        queue.put(line)

    queue.put(None)
    p.wait()


def test():
    send_query('DROP TABLE IF EXISTS test.lv').stdout.read()
    send_query('DROP TABLE IF EXISTS test.mt').stdout.read()
    send_query('CREATE TABLE test.mt (a Int32) Engine=MergeTree order by tuple()').stdout.read()
    send_query('CREATE LIVE VIEW test.lv AS SELECT sum(a) FROM test.mt').stdout.read()

    q = queue.Queue()
    pipe = send_http_query('WATCH test.lv')
    thread = threading.Thread(target=read_lines_and_push_to_queue, args=(pipe, q))
    thread.start()

    line = q.get()
    print(line)
    assert (line == '0\t1')

    p = send_query('INSERT INTO test.mt VALUES (1),(2),(3)')
    p.stdout.read()
    p.wait()
    line = q.get()
    print(line)
    assert (line == '6\t2')

    p = send_query('DROP TABLE if exitst test.lv')
    p.stdout.read()
    p.wait()
    p = send_query('DROP TABLE if exitst test.mt')
    p.stdout.read()
    p.wait()
    thread.join()

test()
