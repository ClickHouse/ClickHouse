# generated by praktika

name: NightlyJepsen
on:
  schedule:
    - cron: 13 4 * * *
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}

env:
  PYTHONUNBUFFERED: 1
  CHECKOUT_REF: ""

jobs:

  config_workflow:
    runs-on: [self-hosted, altinity-on-demand, altinity-style-checker-aarch64]
    needs: []
    name: "Config Workflow"
    outputs:
      data: ${{ steps.run.outputs.DATA }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ env.CHECKOUT_REF }}

      - name: Setup
        uses: ./.github/actions/runner_setup
      - name: Docker setup
        uses: ./.github/actions/docker_setup
        with:
          test_name: "{JOB_NAME_GH}"

      - name: Note report location to summary
        env:
          PR_NUMBER: ${{ github.event.pull_request.number || 0 }}
          COMMIT_SHA: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}
        run: |
          REPORT_LINK=https://s3.amazonaws.com/altinity-build-artifacts/$PR_NUMBER/$COMMIT_SHA/ci_run_report.html
          echo "Workflow Run Report: [View Report]($REPORT_LINK)" >> $GITHUB_STEP_SUMMARY

      - name: Docker setup
        uses: ./.github/actions/docker_setup
        with:
          test_name: "Config Workflow"
      - name: Prepare env script
        run: |
          rm -rf ./ci/tmp ./ci/tmp ./ci/tmp
          mkdir -p ./ci/tmp ./ci/tmp ./ci/tmp
          cat > ./ci/tmp/praktika_setup_env.sh << 'ENV_SETUP_SCRIPT_EOF'
          export PYTHONPATH=./ci:.:
          cat > ./ci/tmp/workflow_config_nightlyjepsen.json << 'EOF'
          ${{ needs.config_workflow.outputs.data }}
          EOF
          cat > ./ci/tmp/workflow_status.json << 'EOF'
          ${{ toJson(needs) }}
          EOF
          ENV_SETUP_SCRIPT_EOF

      - name: Run
        id: run
        run: |
          . ./ci/tmp/praktika_setup_env.sh
          set -o pipefail
          if command -v ts &> /dev/null; then
            python3 -m praktika run 'Config Workflow' --workflow "NightlyJepsen" --ci |& ts '[%Y-%m-%d %H:%M:%S]' | tee ./ci/tmp/job.log
          else
            python3 -m praktika run 'Config Workflow' --workflow "NightlyJepsen" --ci |& tee ./ci/tmp/job.log
          fi

  dockers_build_amd:
    runs-on: [self-hosted, altinity-on-demand, altinity-style-checker]
    needs: [config_workflow]
    if: ${{ !failure() && !cancelled() && !contains(fromJson(needs.config_workflow.outputs.data).cache_success_base64, 'RG9ja2VycyBCdWlsZCAoYW1kKQ==') }}
    name: "Dockers Build (amd)"
    outputs:
      data: ${{ steps.run.outputs.DATA }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ env.CHECKOUT_REF }}

      - name: Setup
        uses: ./.github/actions/runner_setup
      - name: Docker setup
        uses: ./.github/actions/docker_setup
        with:
          test_name: "{JOB_NAME_GH}"

      - name: Docker setup
        uses: ./.github/actions/docker_setup
        with:
          test_name: "Dockers Build (amd)"
      - name: Prepare env script
        run: |
          rm -rf ./ci/tmp ./ci/tmp ./ci/tmp
          mkdir -p ./ci/tmp ./ci/tmp ./ci/tmp
          cat > ./ci/tmp/praktika_setup_env.sh << 'ENV_SETUP_SCRIPT_EOF'
          export PYTHONPATH=./ci:.:
          cat > ./ci/tmp/workflow_config_nightlyjepsen.json << 'EOF'
          ${{ needs.config_workflow.outputs.data }}
          EOF
          cat > ./ci/tmp/workflow_status.json << 'EOF'
          ${{ toJson(needs) }}
          EOF
          ENV_SETUP_SCRIPT_EOF

      - name: Run
        id: run
        run: |
          . ./ci/tmp/praktika_setup_env.sh
          set -o pipefail
          if command -v ts &> /dev/null; then
            python3 -m praktika run 'Dockers Build (amd)' --workflow "NightlyJepsen" --ci |& ts '[%Y-%m-%d %H:%M:%S]' | tee ./ci/tmp/job.log
          else
            python3 -m praktika run 'Dockers Build (amd)' --workflow "NightlyJepsen" --ci |& tee ./ci/tmp/job.log
          fi

  dockers_build_arm:
    runs-on: [self-hosted, altinity-on-demand, altinity-style-checker-aarch64]
    needs: [config_workflow]
    if: ${{ !failure() && !cancelled() && !contains(fromJson(needs.config_workflow.outputs.data).cache_success_base64, 'RG9ja2VycyBCdWlsZCAoYXJtKQ==') }}
    name: "Dockers Build (arm)"
    outputs:
      data: ${{ steps.run.outputs.DATA }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ env.CHECKOUT_REF }}

      - name: Setup
        uses: ./.github/actions/runner_setup
      - name: Docker setup
        uses: ./.github/actions/docker_setup
        with:
          test_name: "{JOB_NAME_GH}"

      - name: Docker setup
        uses: ./.github/actions/docker_setup
        with:
          test_name: "Dockers Build (arm)"
      - name: Prepare env script
        run: |
          rm -rf ./ci/tmp ./ci/tmp ./ci/tmp
          mkdir -p ./ci/tmp ./ci/tmp ./ci/tmp
          cat > ./ci/tmp/praktika_setup_env.sh << 'ENV_SETUP_SCRIPT_EOF'
          export PYTHONPATH=./ci:.:
          cat > ./ci/tmp/workflow_config_nightlyjepsen.json << 'EOF'
          ${{ needs.config_workflow.outputs.data }}
          EOF
          cat > ./ci/tmp/workflow_status.json << 'EOF'
          ${{ toJson(needs) }}
          EOF
          ENV_SETUP_SCRIPT_EOF

      - name: Run
        id: run
        run: |
          . ./ci/tmp/praktika_setup_env.sh
          set -o pipefail
          if command -v ts &> /dev/null; then
            python3 -m praktika run 'Dockers Build (arm)' --workflow "NightlyJepsen" --ci |& ts '[%Y-%m-%d %H:%M:%S]' | tee ./ci/tmp/job.log
          else
            python3 -m praktika run 'Dockers Build (arm)' --workflow "NightlyJepsen" --ci |& tee ./ci/tmp/job.log
          fi

  build_amd_binary:
    runs-on: [self-hosted, altinity-on-demand, altinity-builder]
    needs: [config_workflow, dockers_build_amd, dockers_build_arm]
    if: ${{ !failure() && !cancelled() && !contains(fromJson(needs.config_workflow.outputs.data).cache_success_base64, 'QnVpbGQgKGFtZF9iaW5hcnkp') }}
    name: "Build (amd_binary)"
    outputs:
      data: ${{ steps.run.outputs.DATA }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ env.CHECKOUT_REF }}

      - name: Setup
        uses: ./.github/actions/runner_setup
      - name: Docker setup
        uses: ./.github/actions/docker_setup
        with:
          test_name: "{JOB_NAME_GH}"

      - name: Docker setup
        uses: ./.github/actions/docker_setup
        with:
          test_name: "Build (amd_binary)"
      - name: Prepare env script
        run: |
          rm -rf ./ci/tmp ./ci/tmp ./ci/tmp
          mkdir -p ./ci/tmp ./ci/tmp ./ci/tmp
          cat > ./ci/tmp/praktika_setup_env.sh << 'ENV_SETUP_SCRIPT_EOF'
          export PYTHONPATH=./ci:.:
          cat > ./ci/tmp/workflow_config_nightlyjepsen.json << 'EOF'
          ${{ needs.config_workflow.outputs.data }}
          EOF
          cat > ./ci/tmp/workflow_status.json << 'EOF'
          ${{ toJson(needs) }}
          EOF
          ENV_SETUP_SCRIPT_EOF

      - name: Run
        id: run
        run: |
          . ./ci/tmp/praktika_setup_env.sh
          set -o pipefail
          if command -v ts &> /dev/null; then
            python3 -m praktika run 'Build (amd_binary)' --workflow "NightlyJepsen" --ci |& ts '[%Y-%m-%d %H:%M:%S]' | tee ./ci/tmp/job.log
          else
            python3 -m praktika run 'Build (amd_binary)' --workflow "NightlyJepsen" --ci |& tee ./ci/tmp/job.log
          fi

  clickhouse_keeper_jepsen:
    runs-on: [self-hosted, altinity-on-demand, altinity-style-checker-aarch64]
    needs: [config_workflow, dockers_build_amd, dockers_build_arm, build_amd_binary]
    if: ${{ !failure() && !cancelled() && !contains(fromJson(needs.config_workflow.outputs.data).cache_success_base64, 'Q2xpY2tIb3VzZSBLZWVwZXIgSmVwc2Vu') }}
    name: "ClickHouse Keeper Jepsen"
    outputs:
      data: ${{ steps.run.outputs.DATA }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ env.CHECKOUT_REF }}

      - name: Setup
        uses: ./.github/actions/runner_setup
      - name: Docker setup
        uses: ./.github/actions/docker_setup
        with:
          test_name: "{JOB_NAME_GH}"

      - name: Docker setup
        uses: ./.github/actions/docker_setup
        with:
          test_name: "ClickHouse Keeper Jepsen"
      - name: Prepare env script
        run: |
          rm -rf ./ci/tmp ./ci/tmp ./ci/tmp
          mkdir -p ./ci/tmp ./ci/tmp ./ci/tmp
          cat > ./ci/tmp/praktika_setup_env.sh << 'ENV_SETUP_SCRIPT_EOF'
          export PYTHONPATH=./ci:.:
          cat > ./ci/tmp/workflow_config_nightlyjepsen.json << 'EOF'
          ${{ needs.config_workflow.outputs.data }}
          EOF
          cat > ./ci/tmp/workflow_status.json << 'EOF'
          ${{ toJson(needs) }}
          EOF
          ENV_SETUP_SCRIPT_EOF

      - name: Run
        id: run
        run: |
          . ./ci/tmp/praktika_setup_env.sh
          set -o pipefail
          if command -v ts &> /dev/null; then
            python3 -m praktika run 'ClickHouse Keeper Jepsen' --workflow "NightlyJepsen" --ci |& ts '[%Y-%m-%d %H:%M:%S]' | tee ./ci/tmp/job.log
          else
            python3 -m praktika run 'ClickHouse Keeper Jepsen' --workflow "NightlyJepsen" --ci |& tee ./ci/tmp/job.log
          fi

##########################################################################################
##################################### ALTINITY JOBS ######################################
##########################################################################################
  GrypeScanServer:
    needs: [config_workflow, docker_server_image]
    if: ${{ !failure() && !cancelled() && !contains(fromJson(needs.config_workflow.outputs.data).cache_success_base64, 'RG9ja2VyIHNlcnZlciBpbWFnZQ==') }}
    strategy:
      fail-fast: false
      matrix:
        suffix: ['', '-alpine']
    uses: ./.github/workflows/grype_scan.yml
    secrets: inherit
    with:
      docker_image: altinityinfra/clickhouse-server
      # version: ${{ fromJson(needs.config_workflow.outputs.data).custom_data.version.string }}
      tag-suffix: ${{ matrix.suffix }}
  GrypeScanKeeper:
      needs: [config_workflow, docker_keeper_image]
      if: ${{ !failure() && !cancelled() && !contains(fromJson(needs.config_workflow.outputs.data).cache_success_base64, 'RG9ja2VyIGtlZXBlciBpbWFnZQ==') }}
      uses: ./.github/workflows/grype_scan.yml
      secrets: inherit
      with:
        docker_image: altinityinfra/clickhouse-keeper
        # version: ${{ fromJson(needs.config_workflow.outputs.data).custom_data.version.string }}

  RegressionTestsRelease:
    needs: [config_workflow, build_amd_release]
    if: ${{ !failure() && !cancelled() && !contains(fromJson(needs.config_workflow.outputs.data).cache_success_base64, 'QnVpbGQgKGFtZF9yZWxlYXNlKQ==') && !contains(fromJson(needs.config_workflow.outputs.data).pull_request.body, '[x] <!---ci_exclude_regression-->')}}
    uses: ./.github/workflows/regression.yml
    secrets: inherit
    with:
      runner_type: altinity-on-demand, altinity-regression-tester
      commit: 38b4f3c4cbcf7b38c97e16793c210a1496075af7
      arch: release
      build_sha: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}
      timeout_minutes: 300
      workflow_config: ${{ needs.config_workflow.outputs.data }}
  RegressionTestsAarch64:
    needs: [config_workflow, build_arm_release]
    if: ${{ !failure() && !cancelled() && !contains(fromJson(needs.config_workflow.outputs.data).cache_success_base64, 'QnVpbGQgKGFybV9yZWxlYXNlKQ==') && !contains(fromJson(needs.config_workflow.outputs.data).pull_request.body, '[x] <!---ci_exclude_regression-->') && !contains(fromJson(needs.config_workflow.outputs.data).pull_request.body, '[x] <!---ci_exclude_aarch64-->')}}
    uses: ./.github/workflows/regression.yml
    secrets: inherit
    with:
      runner_type: altinity-on-demand, altinity-regression-tester-aarch64
      commit: 38b4f3c4cbcf7b38c97e16793c210a1496075af7
      arch: aarch64
      build_sha: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}
      timeout_minutes: 300
      workflow_config: ${{ needs.config_workflow.outputs.data }}

  SignRelease:
    needs: [config_workflow, build_amd_release]
    if: ${{ !failure() && !cancelled() }}
    uses: ./.github/workflows/reusable_sign.yml
    secrets: inherit
    with:
      test_name: Sign release
      runner_type: altinity-style-checker
      data: ${{ needs.config_workflow.outputs.data }}
  SignAarch64:
    needs: [config_workflow, build_arm_release]
    if: ${{ !failure() && !cancelled() }}
    uses: ./.github/workflows/reusable_sign.yml
    secrets: inherit
    with:
      test_name: Sign aarch64
      runner_type: altinity-style-checker-aarch64
      data: ${{ needs.config_workflow.outputs.data }}

  FinishCIReport:
    if: ${{ !cancelled() }}
    needs:
      - config_workflow
      - dockers_build_amd
      - dockers_build_arm
      - build_amd_binary
      - clickhouse_keeper_jepsen
      - SignRelease
      - SignAarch64
      - RegressionTestsRelease
      - RegressionTestsAarch64
      - GrypeScanServer
      - GrypeScanKeeper
    runs-on: [self-hosted, altinity-on-demand, altinity-style-checker-aarch64]
    steps:
      - name: Check out repository code
        uses: Altinity/checkout@19599efdf36c4f3f30eb55d5bb388896faea69f6
        with:
          clear-repository: true
      - name: Finalize workflow report
        if: ${{ !cancelled() }}
        uses: ./.github/actions/create_workflow_report
        with:
          workflow_config: ${{ needs.config_workflow.outputs.data }}
          final: true
