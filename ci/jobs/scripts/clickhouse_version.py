import re
import sys
import os
from pathlib import Path

from praktika.info import Info
from praktika.utils import Shell

# NOTE(vnemkov): extremely hackish, buts allows to reuse code from version_helper and git_helper with our modifications.

# allow to import other packages that are located in `tests/ci` directory, like `git_helper`
import tests.ci
sys.path.append(os.path.abspath(tests.ci.__path__._path[0]))
from tests.ci.version_helper import (
    read_versions,
    get_version_from_repo
)

class CHVersion:
    FILE_WITH_VERSION_PATH = "./cmake/autogenerated_versions.txt"
    VERSIONS_TEMPLATE = """\
# Autogenerated code

SET(VERSION_REVISION {revision})
SET(VERSION_MAJOR {major})
SET(VERSION_MINOR {minor})
SET(VERSION_PATCH {patch})
SET(VERSION_GITHASH {githash})
SET(VERSION_TWEAK {tweak})
SET(VERSION_FLAVOUR {flavour})
SET(VERSION_DESCRIBE {describe})
SET(VERSION_STRING {string})
"""

    @classmethod
    def get_release_version_as_dict(cls):
        return read_versions()

    @classmethod
    def get_current_version_as_dict(cls):
        version_from_file = read_versions()
        try:
            version = version_from_file
            tweak = int(
                Shell.get_output(
                    f"git rev-list --count {version['githash']}..HEAD", verbose=True
                )
            )
        except ValueError:
            # Shallow checkout
            tweak = 0

        version = get_version_from_repo()
        version.tweak += tweak

        # relying on ClickHouseVersion to generate proper `description` and `string` with updated `tweak`` value.
        version = version.with_description(version.flavour)
        version_dict = version.as_dict()

        # preserve githash, not sure if that is goign to be usefull, but mimics original implementation
        version_dict['githash'] = version_from_file['githash']

        return version_dict

    @classmethod
    def get_version(cls):
        return cls.get_current_version_as_dict()["string"]

    @classmethod
    def set_binary_version(cls, version_dict=None):
        version_dict = version_dict or cls.get_current_version_as_dict()
        Path(cls.FILE_WITH_VERSION_PATH).write_text(
            cls.VERSIONS_TEMPLATE.format_map(version_dict), encoding="utf-8"
        )

    @classmethod
    def get_release_sha(cls):
        return cls.get_release_version_as_dict()["githash"]

    @classmethod
    def store_version_data_in_ci_pipeline(cls):
        Info().store_custom_data("version", cls.get_current_version_as_dict())
