import re
from pathlib import Path

from praktika.info import Info
from praktika.utils import Shell


class CHVersion:
    FILE_WITH_VERSION_PATH = "./cmake/autogenerated_versions.txt"
    VERSIONS_TEMPLATE = """\
# This variables autochanged by tests/ci/version_helper.py:

# NOTE: VERSION_REVISION has nothing common with DBMS_TCP_PROTOCOL_VERSION,
# only DBMS_TCP_PROTOCOL_VERSION should be incremented on protocol changes.
SET(VERSION_REVISION {revision})
SET(VERSION_MAJOR {major})
SET(VERSION_MINOR {minor})
SET(VERSION_PATCH {patch})
SET(VERSION_GITHASH {githash})
SET(VERSION_DESCRIBE {describe})
SET(VERSION_STRING {string})
# end of autochange
"""

    @classmethod
    def get_release_version_as_dict(cls):
        versions = {}
        for line in (
            Path(cls.FILE_WITH_VERSION_PATH).read_text(encoding="utf-8").splitlines()
        ):
            line = line.strip()
            if not line.startswith("SET("):
                continue

            name, value = line[4:-1].split(maxsplit=1)
            name = name.removeprefix("VERSION_").lower()
            if name in ("major", "minor", "patch"):
                value = int(value)
            versions[name] = value

        result = {
            "major": versions["major"],
            "minor": versions["minor"],
            "patch": versions["patch"],
            "revision": versions["revision"],
            "githash": versions["githash"],
            "describe": versions["describe"],
            "string": versions["string"],
        }
        return result

    @classmethod
    def get_curent_version_as_dict(cls):
        version = cls.get_release_version_as_dict()
        info = Info()
        version_sha = info.sha
        if info.pr_number == 0:
            tweak = int(
                Shell.get_output(
                    f"git rev-list --count {version_sha}..HEAD", verbose=True
                )
            )
        else:
            tweak = 1
        version_type = "testing"
        if info.pr_number == 0 and bool(
            re.match(r"^\d{2}\.\d+$", info.git_branch.removeprefix("release/"))
        ):
            if version["minor"] % 5 == 3:
                version_type = "lts"
            else:
                version_type = "stable"
        version_string = (
            f'{version["major"]}.{version["minor"]}.{version["patch"]}.{tweak}'
        )
        version_description = f"v{version_string}-{version_type}"
        version["githash"] = info.sha
        version["tweak"] = tweak
        version["describe"] = version_description
        version["string"] = version_string
        return version

    @classmethod
    def get_version(cls):
        return cls.get_curent_version_as_dict()["string"]

    @classmethod
    def get_release_sha(cls):
        return cls.get_release_version_as_dict()["githash"]

    @classmethod
    def store_version_data_in_ci_pipeline(cls):
        Info().store_custom_data("clickhouse_version", cls.get_curent_version_as_dict())

    @classmethod
    def set_build_version(cls):
        info = Info()
        if not info.is_local_run:
            version_dict = Info().get_custom_data("clickhouse_version")
        else:
            return
        with open(cls.FILE_WITH_VERSION_PATH, "w", encoding="utf-8") as f:
            f.write(cls.VERSIONS_TEMPLATE.format_map(version_dict))

    @classmethod
    def get_latest_release_major_minor_sha(cls):
        version_dict = cls.get_curent_version_as_dict()
        return version_dict["major"], version_dict["minor"], version_dict["githash"]
