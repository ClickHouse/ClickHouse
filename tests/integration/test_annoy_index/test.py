import pytest
from helpers.cluster import ClickHouseCluster
from helpers.client import QueryRuntimeException
from helpers.test_tools import assert_eq_with_retry

cluster = ClickHouseCluster(__file__)

node = cluster.add_instance("node")


@pytest.fixture(scope="module")
def start_cluster():
    try:
        cluster.start()
        yield cluster

    finally:
        cluster.shutdown()

# big boi
embedding = (
    0.06024,0.01686,0.005325,-0.009544,0.004116,-0.01059,-0.002037,0.0376,
    -0.02249,0.02478,0.01913,0.0183,0.04434,-0.0577,0.05887,0.0167,0.07904,
    0.0228,0.005283,-0.002245,-0.0008516,-0.02882,-0.0198,0.02747,-0.002686,
    -0.00536,0.01132,-0.00846,-0.01865,-0.015526,0.0487,0.02243,-0.02321,
    0.03735,-0.05173,-0.0252,-0.00805,0.003412,0.007347,0.02107,-0.04788,
    -0.00452,-0.012054,-0.03558,0.03452,-0.0546,-0.03079,0.007328,0.01706,
    -0.002962,0.00498,0.003387,0.01302,-0.02638,-0.02522,-0.02483,0.10315,
    -0.02751,-0.001883,0.002201,0.04135,0.0008435,-0.01659,0.00714,-0.01947,
    -0.05148,-0.04926,0.0841,-0.02086,0.02118,-0.04044,-0.003202,-0.00819,
    -0.00533,0.0203,0.03656,-0.01473,0.01258,0.000288,-0.0363,0.005714,0.0348,
    -0.01167,0.02007,0.002924,0.0451,-0.001959,-0.008896,0.01941,-0.001381,
    0.01935,-0.02231,-0.708,0.02777,0.0373,-0.003986,0.00877,-0.001664,-0.05478,
    0.02263,-0.02516,-0.02475,0.0544,-0.00831,0.03105,0.006763,-0.0461,0.013016,
    -0.031,-0.03116,0.0461,0.0337,-0.0005875,0.00904,0.02382,-0.01491,0.01015,
    0.00158,0.05084,-0.015305,-0.00772,0.0362,0.0334,0.01004,0.01723,0.03235,
    0.02106,0.04752,-0.03262,0.01752,-0.00647,0.02199,-0.0373,0.09296,-0.02605,
    -0.00794,0.0574,-0.02608,0.01345,-0.011566,0.01906,-0.03476,-0.00737,
    -0.002981,-0.01936,0.008125,-0.00888,0.079,-0.00604,-0.002335,0.0366,
    -0.02048,0.0789,-0.03958,-0.01469,0.02269,-0.013565,0.028,-0.03482,
    -0.0006204,-0.0421,0.003387,-0.01933,-0.05478,0.01213,-0.0411,-0.02231,
    -0.00218,0.01604,0.01663,0.001544,-0.0342,0.002089,-0.02547,-0.01056,
    -0.06604,-0.006977,-0.010376,0.073,-0.01637,-0.02267,-0.0318,0.012085,
    0.003386,0.01008,-0.008766,0.0008154,-0.00428,-0.01167,-0.0083,-0.009926,
    -0.00000775,0.01651,-0.001198,-0.01701,0.01174,0.001672,-0.05197,-0.02385,
    0.01889,0.0348,-0.02522,0.0536,-0.02635,0.02159,0.00805,-0.01534,-0.05832,
    0.02022,0.01154,-0.033,0.1327,-0.04324,0.02092,-0.00683,-0.02008,0.008736,
    -0.01342,0.0803,0.006012,0.11017,0.02551,0.01124,0.02985,0.01203,0.01788,
    0.003204,0.0402,0.05145,-0.004402,-0.0342,0.01015,0.003265,-0.02858,0.01515,
    -0.02948,-0.00684,-0.01243,0.002657,0.01743,0.00338,-0.00969,-0.0235,
    -0.04434,0.03458,-0.05057,-0.02028,-0.0113,-0.01645,0.02066,0.02963,0.0312,
    0.02374,-0.00571,0.01656,0.0004306,0.01631,-0.00118,-0.06586,-0.0466,
    0.02402,0.0010395,-0.0394,0.002724,0.06775,0.00805,0.02908,-0.002623,
    0.02457,0.04343,-0.02614,0.001141,-0.0151,0.03436,0.02481,0.002968,-0.0231,
    0.005814,-0.01952,0.0003521,-0.00462,0.01246,0.002914,0.006153,0.004726,
    -0.008766,0.06186,-0.04285,-0.02795,-0.0195,0.02283,-0.01532,-0.03906,
    0.002748,0.01968,0.01927,-0.02249,0.00863,0.00987,-0.04395,-0.07904,-0.0738,
    0.05325,0.01749,-0.002647,0.004536,-0.01665,-0.004314,-0.001041,0.00579,
    -0.00928,-0.001073,0.09283,-0.02007,0.00432,0.02092,0.03033,-0.0007863,
    -0.0231,-0.1035,0.00817,0.1106,-0.005802,0.01897,0.004032,-0.03586,0.01208,
    -0.06464,-0.01122,0.05148,-0.0217,-0.01566,-0.003944,-0.001542,-0.02379,
    0.03598,-0.009705,0.03702,0.0321,-0.01825,0.01926,0.02225,-0.02588,0.01026,
    -0.010605,0.05063,0.04077,0.005386,0.001807,0.04764,-0.0485,0.02492,0.04214,
    -0.02666,-0.00834,0.01569,-0.02435,0.03268,0.01855,0.0464,0.074,-0.0323,
    0.02478,0.02812,-0.05862,-0.01484,-0.02225,0.07074,-0.083,0.00886,0.002829,
    -0.0373,0.0133,0.02077,0.00789,-0.006886,0.09766,0.01718,-0.01507,0.004738,
    -0.03513,-0.02435,-0.02284,0.007626,0.006992,0.02643,0.0242,-0.0139,
    -0.01314,0.02092,-0.0473,-0.02531,0.02649,-0.03482,0.01254,-0.01962,
    -0.006905,-0.03497,-0.03674,-0.09265,-0.01799,0.01627,0.0000971,-0.0395,
    -0.0337,-0.01645,-0.01813,-0.0163,0.03937,0.01613,0.0967,0.03467,0.008644,
    -0.004112,-0.003628,0.02989,-0.00684,-0.001299,0.002989,-0.0436,0.008316,
    0.02017,0.00948,-0.03998,-0.05066,0.02573,-0.005447,-0.02568,-0.0223,
    -0.02321,0.0241,0.005386,0.0535,-0.05148,0.01955,-0.00326,-0.005287,-0.0311,
    0.01846,-0.009895,0.02252,0.0754,0.02232,-0.000737,-0.03012,0.01865,
    -0.03506,0.012535,-0.00781,-0.01258,0.000363,-0.00882,0.03604,0.02089,
    -0.02872,0.04346,0.01015,0.02193,0.00512,0.01068,-0.01743,0.0000452,
    0.02278,0.01685,0.01034,0.03096,0.00968,0.007385,0.0209,-0.015114,0.04517,
    0.0466,-0.003426,-0.0418,-0.00539,-0.01247,-0.02144,-0.006763,-0.02197,
    0.001221,-0.00834,-0.00472,-0.02126,0.01529,0.02715,0.005226,-0.01617,
    0.05203,0.0003045,-0.02583,-0.04303,-0.01749,-0.02094,-0.0336,0.04303,
    0.0175,-0.02184,0.02324,-0.01173,-0.001993,-0.006622,-0.02744,0.009125,
    -0.00701,-0.04028,0.01695,-0.03084,0.02217,0.00815,0.0363,-0.00158,-0.02916

)

def test_condition(start_cluster):
    node.query(
        f"""
        CREATE TABLE annoy_test (
            id UInt32, 
            url String, 
            embedding Tuple({"Float64, " * (len(embedding) - 1)}Float64)
        ) Engine=MergeTree ORDER BY id;
        """
    )

    assert len(embedding) == 512, "Laion is 512 dim embedding"

    node.query(
        """
        INSERT INTO annoy_test FROM INFILE './test_annoy_index/laion_cut.csv';
        """
    )

    select_query = f"""
    
    select url from annoy_test where 
    L2Distance(embedding, {str(embedding)}) < 0.0001
    
    """

    image_url = "http://media.vector4free.com/mini/pixel77-free-vector-bird-1004-270x200.jpg"
    assert node.query(select_query).split("\n")[0] == image_url, "Didn't find correct nearest picture"
