#!/usr/bin/expect -f
# This is the regression for the concurrent access in ProgressIndication,
# so it is important to read enough rows here (10e6).
#
# Initially there was 100e6, but under thread fuzzer 10min may be not enough sometimes,
# but I believe that CI will catch possible issues even with less rows anyway.

set basedir [file dirname $argv0]
set basename [file tail $argv0]
if {[info exists env(CLICKHOUSE_TMP)]} {
    set CLICKHOUSE_TMP $env(CLICKHOUSE_TMP)
} else {
    set CLICKHOUSE_TMP "."
}
exp_internal -f $CLICKHOUSE_TMP/$basename.debuglog 0

log_user 0
set timeout 60
match_max 100000
set stty_init "rows 25 cols 120"

expect_after {
    -i $any_spawn_id eof { exp_continue }
    -i $any_spawn_id timeout { exit 1 }
}

# We use min_chunk_bytes_for_parallel_parsing and input_format_parallel_parsing
# to form tiny blocks and make progress output more interactive.
#
# Using standard chunk sizes would require pushing much larger data amounts, which
# would be too slow on sanitizer and debug builds, potentially causing timeouts.
#
# interactive_delay allows progress to be printed more frequently.
# The sleep command in the bash loop ensures that interactive_delay will be reached.
spawn bash -c "
    source $basedir/../shell_config.sh; \
    for i in {1..20}; do \
        yes | head -n 500; \
        sleep 0.05; \
    done | \$CLICKHOUSE_LOCAL \
            --progress \
            --interactive_delay=100 \
            --min_chunk_bytes_for_parallel_parsing=1 \
            --input_format_parallel_parsing=1 \
            --query \"insert into function null('foo String') format TSV\"
"

expect "Progress: "
expect eof
