-- { echoOn }
drop table if exists funnel_test;
create table funnel_test (timestamp UInt32, event UInt32) engine=Memory;
insert into funnel_test values (0,1000),(1,1001),(2,1002),(3,1003),(4,1004),(5,1005),(6,1006),(7,1007),(8,1008);
select 1 = windowFunnel(10000)(timestamp, event = 1000) from funnel_test;
1
select 2 = windowFunnel(10000)(timestamp, event = 1000, event = 1001) from funnel_test;
1
select 3 = windowFunnel(10000)(timestamp, event = 1000, event = 1001, event = 1002) from funnel_test;
1
select 4 = windowFunnel(10000)(timestamp, event = 1000, event = 1001, event = 1002, event = 1008) from funnel_test;
1
select 1 = windowFunnel(1)(timestamp, event = 1000) from funnel_test;
1
select 3 = windowFunnel(2)(timestamp, event = 1003, event = 1004, event = 1005, event = 1006, event = 1007) from funnel_test;
1
select 4 = windowFunnel(3)(timestamp, event = 1003, event = 1004, event = 1005, event = 1006, event = 1007) from funnel_test;
1
select 5 = windowFunnel(4)(timestamp, event = 1003, event = 1004, event = 1005, event = 1006, event = 1007) from funnel_test;
1
drop table if exists funnel_test2;
create table funnel_test2 (uid UInt32 default 1,timestamp DateTime, event UInt32) engine=Memory;
insert into funnel_test2(timestamp, event) values  ('2018-01-01 01:01:01',1001),('2018-01-01 01:01:02',1002),('2018-01-01 01:01:03',1003),('2018-01-01 01:01:04',1004),('2018-01-01 01:01:05',1005),('2018-01-01 01:01:06',1006),('2018-01-01 01:01:07',1007),('2018-01-01 01:01:08',1008);
select 5 = windowFunnel(4)(timestamp, event = 1003, event = 1004, event = 1005, event = 1006, event = 1007) from funnel_test2;
1
select 2 = windowFunnel(10000)(timestamp, event = 1001, event = 1008) from funnel_test2;
1
select 1 = windowFunnel(10000)(timestamp, event = 1008, event = 1001) from funnel_test2;
1
select 5 = windowFunnel(4)(timestamp, event = 1003, event = 1004, event = 1005, event = 1006, event = 1007) from funnel_test2;
1
select 4 = windowFunnel(4)(timestamp, event <= 1007, event >= 1002, event <= 1006, event >= 1004) from funnel_test2;
1
drop table if exists funnel_test_u64;
create table funnel_test_u64 (uid UInt32 default 1,timestamp UInt64, event UInt32) engine=Memory;
insert into funnel_test_u64(timestamp, event) values  ( 1e14 + 1 ,1001),(1e14 + 2,1002),(1e14 + 3,1003),(1e14 + 4,1004),(1e14 + 5,1005),(1e14 + 6,1006),(1e14 + 7,1007),(1e14 + 8,1008);
select 5 = windowFunnel(4)(timestamp, event = 1003, event = 1004, event = 1005, event = 1006, event = 1007) from funnel_test_u64;
1
select 2 = windowFunnel(10000)(timestamp, event = 1001, event = 1008) from funnel_test_u64;
1
select 1 = windowFunnel(10000)(timestamp, event = 1008, event = 1001) from funnel_test_u64;
1
select 5 = windowFunnel(4)(timestamp, event = 1003, event = 1004, event = 1005, event = 1006, event = 1007) from funnel_test_u64;
1
select 4 = windowFunnel(4)(timestamp, event <= 1007, event >= 1002, event <= 1006, event >= 1004) from funnel_test_u64;
1
drop table if exists funnel_test_strict;
create table funnel_test_strict (timestamp UInt32, event UInt32) engine=Memory;
insert into funnel_test_strict values (00,1000),(10,1001),(20,1002),(30,1003),(40,1004),(50,1005),(51,1005),(60,1006),(70,1007),(80,1008);
select 6 = windowFunnel(10000, 'strict_deduplication')(timestamp, event = 1000, event = 1001, event = 1002, event = 1003, event = 1004, event = 1005, event = 1006) from funnel_test_strict;
1
select 7 = windowFunnel(10000)(timestamp, event = 1000, event = 1001, event = 1002, event = 1003, event = 1004, event = 1005, event = 1006) from funnel_test_strict;
1
drop table funnel_test;
drop table funnel_test2;
drop table funnel_test_u64;
drop table funnel_test_strict;
drop table if exists funnel_test_strict_order;
create table funnel_test_strict_order (dt DateTime, user int, event String) engine = MergeTree() partition by dt order by user;
insert into funnel_test_strict_order values (1, 1, 'a') (2, 1, 'b') (3, 1, 'c');
insert into funnel_test_strict_order values (1, 2, 'a') (2, 2, 'd') (3, 2, 'b') (4, 2, 'c');
insert into funnel_test_strict_order values (1, 3, 'a') (2, 3, 'a') (3, 3, 'b') (4, 3, 'b') (5, 3, 'c') (6, 3, 'c');
insert into funnel_test_strict_order values (1, 4, 'a') (2, 4, 'a') (3, 4, 'a') (4, 4, 'a') (5, 4, 'b') (6, 4, 'b') (7, 4, 'c') (8, 4, 'c');
insert into funnel_test_strict_order values (1, 5, 'a') (2, 5, 'a') (3, 5, 'b') (4, 5, 'b') (5, 5, 'd') (6, 5, 'c') (7, 5, 'c');
insert into funnel_test_strict_order values (1, 6, 'c') (2, 6, 'c') (3, 6, 'b') (4, 6, 'b') (5, 6, 'a') (6, 6, 'a');
select user, windowFunnel(86400)(dt, event='a', event='b', event='c') as s from funnel_test_strict_order group by user order by user format JSONCompactEachRow;
[1, 3]
[2, 3]
[3, 3]
[4, 3]
[5, 3]
[6, 1]
select user, windowFunnel(86400, 'strict_order')(dt, event='a', event='b', event='c') as s from funnel_test_strict_order group by user order by user format JSONCompactEachRow;
[1, 3]
[2, 1]
[3, 3]
[4, 3]
[5, 2]
[6, 1]
select user, windowFunnel(86400, 'strict_deduplication', 'strict_order')(dt, event='a', event='b', event='c') as s from funnel_test_strict_order group by user order by user format JSONCompactEachRow;
[1, 3]
[2, 1]
[3, 2]
[4, 2]
[5, 2]
[6, 1]
insert into funnel_test_strict_order values (1, 7, 'a') (2, 7, 'c') (3, 7, 'b');
select user, windowFunnel(10, 'strict_order')(dt, event = 'a', event = 'b', event = 'c') as s from funnel_test_strict_order where user = 7 group by user format JSONCompactEachRow;
[7, 1]
drop table funnel_test_strict_order;
--https://github.com/ClickHouse/ClickHouse/issues/27469
drop table if exists strict_BiteTheDDDD;
create table strict_BiteTheDDDD (ts UInt64, event String) engine = Log();
insert into strict_BiteTheDDDD values (1,'a') (2,'b') (3,'c') (4,'b') (5,'d');
select 3 = windowFunnel(86400, 'strict_deduplication')(ts, event='a', event='b', event='c', event='d') from strict_BiteTheDDDD format JSONCompactEachRow;
[1]
drop table strict_BiteTheDDDD;
drop table if exists funnel_test_non_null;
create table funnel_test_non_null (`dt` DateTime, `u` int, `a` Nullable(String), `b` Nullable(String)) engine = MergeTree() partition by dt order by u;
insert into funnel_test_non_null values (1, 1, 'a1', 'b1') (2, 1, 'a2', 'b2');
insert into funnel_test_non_null values (1, 2, 'a1', null) (2, 2, 'a2', null);
insert into funnel_test_non_null values (1, 3, null, null);
insert into funnel_test_non_null values (1, 4, null, 'b1') (2, 4, 'a2', null) (3, 4, null, 'b3');
select u, windowFunnel(86400)(dt, COALESCE(a, '') = 'a1', COALESCE(a, '') = 'a2') as s from funnel_test_non_null group by u order by u format JSONCompactEachRow;
[1, 2]
[2, 2]
[3, 0]
[4, 0]
select u, windowFunnel(86400)(dt, COALESCE(a, '') = 'a1', COALESCE(b, '') = 'b2') as s from funnel_test_non_null group by u order by u format JSONCompactEachRow;
[1, 2]
[2, 1]
[3, 0]
[4, 0]
select u, windowFunnel(86400)(dt, a is null and b is null) as s from funnel_test_non_null group by u order by u format JSONCompactEachRow;
[1, 0]
[2, 0]
[3, 1]
[4, 0]
select u, windowFunnel(86400)(dt, a is null, COALESCE(b, '') = 'b3') as s from funnel_test_non_null group by u order by u format JSONCompactEachRow;
[1, 0]
[2, 0]
[3, 1]
[4, 2]
select u, windowFunnel(86400, 'strict_order')(dt, a is null, COALESCE(b, '') = 'b3') as s from funnel_test_non_null group by u order by u format JSONCompactEachRow;
[1, 0]
[2, 0]
[3, 1]
[4, 1]
drop table funnel_test_non_null;
create table funnel_test_strict_increase (timestamp UInt32, event UInt32) engine=Memory;
insert into funnel_test_strict_increase values (0,1000),(1,1001),(1,1002),(1,1003),(2,1004);
select 5 = windowFunnel(10000)(timestamp, event = 1000, event = 1001, event = 1002, event = 1003, event = 1004) from funnel_test_strict_increase;
1
select 2 = windowFunnel(10000, 'strict_increase')(timestamp, event = 1000, event = 1001, event = 1002, event = 1003, event = 1004) from funnel_test_strict_increase;
1
select 3 = windowFunnel(10000)(timestamp, event = 1004, event = 1004, event = 1004) from funnel_test_strict_increase;
1
select 1 = windowFunnel(10000, 'strict_once')(timestamp, event = 1004, event = 1004, event = 1004) from funnel_test_strict_increase;
1
select 1 = windowFunnel(10000, 'strict_increase')(timestamp, event = 1004, event = 1004, event = 1004) from funnel_test_strict_increase;
1
DROP TABLE IF EXISTS funnel_test2;
create table funnel_test2 (event_ts UInt32, result String, uid UInt32) engine=Memory;
insert into funnel_test2 SELECT data.1, data.2, data.3  FROM (
        SELECT arrayJoin([
            (100, 'failure', 234),
            (200, 'success', 345),
            (210, 'failure', 345),
            (230, 'success', 345),
            (250, 'failure', 234),
            (180, 'failure', 123),
            (220, 'failure', 123),
            (250, 'success', 123)
        ]) data);
SELECT '-';
-
SELECT uid, windowFunnel(200, 'strict_once', 'strict_increase')( toUInt32(event_ts), result='failure', result='failure', result='success' )
FROM funnel_test2 WHERE event_ts >= 0 AND event_ts <= 300 GROUP BY uid ORDER BY uid;
123	3
234	2
345	1
SELECT '-';
-
SELECT uid, windowFunnel(200, 'strict_once')( toUInt32(event_ts), result='failure', result='failure', result='success' )
FROM funnel_test2 WHERE event_ts >= 0 AND event_ts <= 300 GROUP BY uid ORDER BY uid;
123	3
234	2
345	1
SELECT '-';
-
SELECT uid, windowFunnel(200, 'strict_once', 'strict_deduplication')( toUInt32(event_ts), result='failure', result='failure', result='success' )
FROM funnel_test2 WHERE event_ts >= 0 AND event_ts <= 300 GROUP BY uid ORDER BY uid;
123	3
234	2
345	1
SELECT '-';
-
DROP TABLE IF EXISTS funnel_test2;
drop table funnel_test_strict_increase;
-- Test allow_reentry mode
drop table if exists funnel_test_allow_reentry;
create table funnel_test_allow_reentry (dt DateTime, user int, event String) engine = MergeTree() partition by dt order by user;
-- Test case 1: Basic reentry pattern - a->b->a->c (should reach level 3 with allow_reentry)
insert into funnel_test_allow_reentry values (1, 1, 'a') (2, 1, 'b') (3, 1, 'a') (4, 1, 'c');
-- Test case 2: Multiple reentries - a->b->a->b->c (should reach level 3 with allow_reentry)
insert into funnel_test_allow_reentry values (1, 2, 'a') (2, 2, 'b') (3, 2, 'a') (4, 2, 'b') (5, 2, 'c');
-- Test case 3: Reentry to later completed step - a->b->c->b->d (should reach level 4 with allow_reentry)
insert into funnel_test_allow_reentry values (1, 3, 'a') (2, 3, 'b') (3, 3, 'c') (4, 3, 'b') (5, 3, 'd');
-- Test case 4: Invalid jump (not reentry) - a->c->b (should stop at level 1 even with allow_reentry)
insert into funnel_test_allow_reentry values (1, 4, 'a') (2, 4, 'c') (3, 4, 'b');
-- Test case 5: Complex reentry pattern - a->b->c->a->b->c->d (should reach level 4 with allow_reentry)
insert into funnel_test_allow_reentry values (1, 5, 'a') (2, 5, 'b') (3, 5, 'c') (4, 5, 'a') (5, 5, 'b') (6, 5, 'c') (7, 5, 'd');
-- Compare strict_order vs strict_order + allow_reentry
select user, windowFunnel(86400, 'strict_order')(dt, event='a', event='b', event='c') as strict_order_result from funnel_test_allow_reentry group by user order by user format JSONCompactEachRow;
[1, 2]
[2, 2]
[3, 3]
[4, 1]
[5, 3]
select user, windowFunnel(86400, 'strict_order', 'allow_reentry')(dt, event='a', event='b', event='c') as allow_reentry_result from funnel_test_allow_reentry group by user order by user format JSONCompactEachRow;
[1, 3]
[2, 3]
[3, 3]
[4, 1]
[5, 3]
-- Test 4-step funnel with reentry
select user, windowFunnel(86400, 'strict_order')(dt, event='a', event='b', event='c', event='d') as strict_order_4step from funnel_test_allow_reentry group by user order by user format JSONCompactEachRow;
[1, 0]
[2, 0]
[3, 3]
[4, 1]
[5, 3]
select user, windowFunnel(86400, 'strict_order', 'allow_reentry')(dt, event='a', event='b', event='c', event='d') as allow_reentry_4step from funnel_test_allow_reentry group by user order by user format JSONCompactEachRow;
[1, 0]
[2, 0]
[3, 4]
[4, 1]
[5, 4]
-- Test combination with other modes
select user, windowFunnel(86400, 'strict_order', 'allow_reentry', 'strict_deduplication')(dt, event='a', event='b', event='c') as combined_modes from funnel_test_allow_reentry group by user order by user format JSONCompactEachRow;
[1, 2]
[2, 2]
[3, 3]
[4, 1]
[5, 3]
drop table funnel_test_allow_reentry;
-- Test real-world e-commerce reentry scenario
drop table if exists funnel_test_ecommerce;
create table funnel_test_ecommerce (timestamp UInt32, user_id UInt32, action String) engine=Memory;
-- User 1: Typical reentry pattern - checkout -> product_detail -> checkout -> payment
insert into funnel_test_ecommerce values (100, 1, 'begin_checkout') (200, 1, 'view_product_detail') (300, 1, 'begin_checkout') (400, 1, 'complete_payment');
-- User 2: Multiple product views with reentry - checkout -> product1 -> product2 -> checkout -> payment  
insert into funnel_test_ecommerce values (100, 2, 'begin_checkout') (200, 2, 'view_product_detail') (250, 2, 'view_product_detail') (300, 2, 'begin_checkout') (400, 2, 'complete_payment');
-- User 3: No reentry, normal flow - checkout -> product_detail -> payment
insert into funnel_test_ecommerce values (100, 3, 'begin_checkout') (200, 3, 'view_product_detail') (300, 3, 'complete_payment');
-- Test the e-commerce funnel with window of 600 seconds
select user_id, windowFunnel(600, 'strict_order')(timestamp, action='begin_checkout', action='view_product_detail', action='complete_payment') as normal_funnel from funnel_test_ecommerce group by user_id order by user_id format JSONCompactEachRow;
[1, 2]
[2, 2]
[3, 3]
select user_id, windowFunnel(600, 'strict_order', 'allow_reentry')(timestamp, action='begin_checkout', action='view_product_detail', action='complete_payment') as reentry_funnel from funnel_test_ecommerce group by user_id order by user_id format JSONCompactEachRow;
[1, 3]
[2, 3]
[3, 3]
-- Test 4-step e-commerce funnel
select user_id, windowFunnel(600, 'strict_order')(timestamp, action='begin_checkout', action='view_product_detail', action='begin_checkout', action='complete_payment') as normal_4step from funnel_test_ecommerce group by user_id order by user_id format JSONCompactEachRow;
[1, 2]
[2, 2]
[3, 0]
select user_id, windowFunnel(600, 'strict_order', 'allow_reentry')(timestamp, action='begin_checkout', action='view_product_detail', action='begin_checkout', action='complete_payment') as reentry_4step from funnel_test_ecommerce group by user_id order by user_id format JSONCompactEachRow;
[1, 4]
[2, 4]
[3, 0]
drop table funnel_test_ecommerce;
