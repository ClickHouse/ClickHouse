#!/usr/bin/env python3

import clickhouse_driver
from threading import *
import random

def create():
    client = clickhouse_driver.Client('localhost')
    result = client.execute(f"""DROP DATABASE IF EXISTS deleteme""")
    result = client.execute(f"""CREATE DATABASE deleteme""")
    result = client.execute(f"""CREATE TABLE deleteme.target (number Int64) Engine=MergeTree ORDER BY number""")
    result = client.execute(f"""CREATE TABLE deleteme.landing (number Int64, n String, n2 String) Engine=MergeTree ORDER BY number""")


def destroy():
    client = clickhouse_driver.Client('localhost')
    result = client.execute(f"""DROP DATABASE IF EXISTS deleteme""")


class Insert(Thread):
    def __init__(self, poison_pill, number_inserts = 1e6):
        self.poison_pill = poison_pill
        self.number_inserts = number_inserts
        super().__init__()

    def run(self):
        client = clickhouse_driver.Client('localhost')
        ea = 0
        i = 0
        offset = 500

        while i < self.number_inserts:
            try:
                result = client.execute(f"""INSERT INTO deleteme.landing SELECT number, toString(number), toString(number) from system.numbers limit {i}, {offset}""")
                i += random.randint(400,500)

                if self.poison_pill.is_set():
                    break

            except clickhouse_driver.errors.ServerException as e:
                print(str(e).splitlines()[1])
                print(f"Inserted {i} rows")
                self.poison_pill.set()
                break

        self.poison_pill.set()


class CreateAndDropMVs(Thread):
    def __init__(self, poison_pill):
        self.poison_pill = poison_pill
        super().__init__()

    def run(self):
        try:
            client = clickhouse_driver.Client('localhost')
            while True:
                drop="DROP TABLE IF EXISTS deleteme.mv"
                result = client.execute(drop)
                matview="CREATE MATERIALIZED VIEW IF NOT EXISTS deleteme.mv1 TO deleteme.target AS select count() as number FROM (SELECT a.number, a.n, a.n2, b.number, b.n, b.n2, c.number, c.n, c.n2 FROM deleteme.landing a CROSS JOIN deleteme.landing b CROSS JOIN deleteme.landing c)"
                result = client.execute(matview)

                drop="DROP TABLE IF EXISTS deleteme.mv1"
                result = client.execute(drop)
                matview="CREATE MATERIALIZED VIEW IF NOT EXISTS deleteme.mv TO deleteme.target AS select count() as number FROM (SELECT a.number, a.n, a.n2, b.number, b.n, b.n2, c.number, c.n, c.n2 FROM deleteme.landing a CROSS JOIN deleteme.landing b CROSS JOIN deleteme.landing c)"
                result = client.execute(matview)
                if self.poison_pill.is_set():
                    break

        except clickhouse_driver.errors.ServerException as e:
            print(str(e).splitlines()[1])
            self.poison_pill.set()

def main():
    create()

    poison_pill = Event()
    number_insert_threads = 1
    number_create_and_drop_mvs_threads = 1

    threads = []

    for _ in range(0, number_insert_threads):
        insert = Insert(poison_pill, 1e6)
        insert.start()
        threads.append(insert)

    for _ in range(0, number_create_and_drop_mvs_threads):
        mv = CreateAndDropMVs(poison_pill)
        mv.start()
        threads.append(mv)

    for thread in threads:
        thread.join()

    destroy()

    print("PASSED")


if __name__ == "__main__":
    try:
        main()
    except Exception as ex:
        exc_type, exc_value, exc_traceback = sys.exc_info()
        traceback.print_tb(exc_traceback, file=sys.stderr)
        print(ex, file=sys.stderr)
        sys.stderr.flush()

        os._exit(1)
