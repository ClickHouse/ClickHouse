-- { echoOn }
EXPLAIN actions=1
    (
        SELECT round(avg(log(2) * number), 6) AS k
        FROM numbers(10000000)
        GROUP BY number % 3, number % 2
    )
SETTINGS allow_experimental_analyzer=1;
Expression ((Project names + Projection))
Actions: INPUT : 0 -> avg(number_0) Float64 : 0
         COLUMN Const(Float64) -> 0.6931471805599453_Float64 Float64 : 1
         COLUMN Const(UInt8) -> 6_UInt8 UInt8 : 2
         FUNCTION multiply(0.6931471805599453_Float64 :: 1, avg(number_0) :: 0) -> multiply(0.6931471805599453_Float64, avg(number_0)) Float64 : 3
         FUNCTION round(multiply(0.6931471805599453_Float64, avg(number_0)) :: 3, 6_UInt8 :: 2) -> round(multiply(0.6931471805599453_Float64, avg(number_0)), 6_UInt8) Float64 : 0
         ALIAS round(multiply(0.6931471805599453_Float64, avg(number_0)), 6_UInt8) :: 0 -> k Float64 : 2
Positions: 2
  Aggregating
  Keys: modulo(number_0, 3_UInt8), modulo(number_0, 2_UInt8)
  Aggregates:
      avg(number_0)
        Function: avg(UInt64) → Float64
        Arguments: number_0
    Expression ((Before GROUP BY + Change column names to column identifiers))
    Actions: INPUT : 0 -> number UInt64 : 0
             COLUMN Const(UInt8) -> 3_UInt8 UInt8 : 1
             COLUMN Const(UInt8) -> 2_UInt8 UInt8 : 2
             ALIAS number :: 0 -> number_0 UInt64 : 3
             FUNCTION modulo(number_0 : 3, 3_UInt8 :: 1) -> modulo(number_0, 3_UInt8) UInt8 : 0
             FUNCTION modulo(number_0 : 3, 2_UInt8 :: 2) -> modulo(number_0, 2_UInt8) UInt8 : 1
    Positions: 0 1 3
      ReadFromStorage (SystemNumbers)
EXPLAIN actions=1
    (
        SELECT round(log(2) * avg(number), 6) AS k
        FROM numbers(10000000)
        GROUP BY number % 3, number % 2
    )
SETTINGS allow_experimental_analyzer=1;
Expression ((Project names + Projection))
Actions: INPUT : 0 -> avg(number_0) Float64 : 0
         COLUMN Const(Float64) -> 0.6931471805599453_Float64 Float64 : 1
         COLUMN Const(UInt8) -> 6_UInt8 UInt8 : 2
         FUNCTION multiply(0.6931471805599453_Float64 :: 1, avg(number_0) :: 0) -> multiply(0.6931471805599453_Float64, avg(number_0)) Float64 : 3
         FUNCTION round(multiply(0.6931471805599453_Float64, avg(number_0)) :: 3, 6_UInt8 :: 2) -> round(multiply(0.6931471805599453_Float64, avg(number_0)), 6_UInt8) Float64 : 0
         ALIAS round(multiply(0.6931471805599453_Float64, avg(number_0)), 6_UInt8) :: 0 -> k Float64 : 2
Positions: 2
  Aggregating
  Keys: modulo(number_0, 3_UInt8), modulo(number_0, 2_UInt8)
  Aggregates:
      avg(number_0)
        Function: avg(UInt64) → Float64
        Arguments: number_0
    Expression ((Before GROUP BY + Change column names to column identifiers))
    Actions: INPUT : 0 -> number UInt64 : 0
             COLUMN Const(UInt8) -> 3_UInt8 UInt8 : 1
             COLUMN Const(UInt8) -> 2_UInt8 UInt8 : 2
             ALIAS number :: 0 -> number_0 UInt64 : 3
             FUNCTION modulo(number_0 : 3, 3_UInt8 :: 1) -> modulo(number_0, 3_UInt8) UInt8 : 0
             FUNCTION modulo(number_0 : 3, 2_UInt8 :: 2) -> modulo(number_0, 2_UInt8) UInt8 : 1
    Positions: 0 1 3
      ReadFromStorage (SystemNumbers)
SELECT round(avg(log(2) * number), 6) AS k
FROM numbers(10000000)
GROUP BY number % 3, number % 2
SETTINGS allow_experimental_analyzer=1;
3465734.516505
3465735.209653
3465735.9028
3465736.595947
3465735.209653
3465735.9028
SELECT round(log(2) * avg(number), 6) AS k
FROM numbers(10000000)
GROUP BY number % 3, number % 2
SETTINGS allow_experimental_analyzer=0;
3465734.516505
3465735.209653
3465735.9028
3465736.595947
3465735.209653
3465735.9028
