#!/usr/bin/env python3

import json
import os
import sys

CURDIR = os.path.dirname(os.path.realpath(__file__))
sys.path.insert(0, os.path.join(CURDIR, "helpers"))

from tcp_client import TCPClient


class Progress:
    def __init__(
        self,
        read_rows=0,
        read_bytes=0,
        total_rows_to_read=0,
        written_rows=0,
        written_bytes=0,
    ):
        # NOTE: this is done in ctor to initialize __dict__
        self.read_rows = read_rows
        self.read_bytes = read_bytes
        self.total_rows_to_read = total_rows_to_read
        self.written_rows = written_rows
        self.written_bytes = written_bytes

    def __str__(self):
        return json.dumps(self.__dict__)

    def __add__(self, b):
        self.read_rows += b.read_rows
        self.read_bytes += b.read_bytes
        self.total_rows_to_read += b.total_rows_to_read
        self.written_rows += b.written_rows
        self.written_bytes += b.written_bytes
        return self

    def __bool__(self):
        return (
            self.read_rows > 0
            or self.read_bytes > 0
            or self.total_rows_to_read > 0
            or self.written_rows > 0
            or self.written_bytes > 0
        )


def main():
    with TCPClient() as client:
        # For 1 second sleep and 1000ms of interactive_delay we definitelly should have non zero progress packet.
        # NOTE: interactive_delay=0 cannot be used since in this case CompletedPipelineExecutor will not call cancelled callback.
        client.sendQuery(
            "insert into function null('_ Int') select sleep(1) from numbers(2) settings max_block_size=1, interactive_delay=1000",
        )

        # external tables
        client.sendEmptyBlock()

        summary_progress = Progress()
        non_empty_progress_packets = 0
        while True:
            progress_info = client.readProgress()
            if progress_info is None:
                break

            progress = Progress(*progress_info)
            summary_progress += progress
            if progress:
                non_empty_progress_packets += 1

        print(summary_progress)
        # Print only non empty progress packets, eventually we should have at least 3 of them
        # - 2 for each INSERT block (one of them can be merged with read block, heance 3 or for)
        # - 1 or 2 for each SELECT block
        assert non_empty_progress_packets in (3, 4), f"{non_empty_progress_packets=:}"


if __name__ == "__main__":
    main()
