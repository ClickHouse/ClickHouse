DROP TABLE IF EXISTS t1;
DROP TABLE IF EXISTS t2;

CREATE TABLE t1 (key UInt32, s String) engine = MergeTree ORDER BY key;
CREATE TABLE t2 (key UInt32, s String) engine = MergeTree ORDER BY key;

{% set ltable_size = 10000000 -%}
{% set rtable_size = 1000000 -%}

INSERT INTO t1
    SELECT key, any(s) as s FROM (
    SELECT
        sipHash64(number, 'x') % {{ ltable_size }} + 1 as key,
        'val' || toString(number) as s
    FROM numbers_mt({{ ltable_size }})
    ) group by key
;

INSERT INTO t2
    SELECT key, any(s) as s FROM (
    SELECT
        sipHash64(number, 'y') % {{ rtable_size }} + 1 as key,
        'val' || toString(number) as s
    FROM numbers_mt({{ rtable_size }})
    ) group by key
;

-- SET join_algorithm = 'hash';
-- SET join_algorithm = 'full_sorting_merge';

{% for block_size in [32001, 65505, 65536, range(32001, 65536) | random] %}

SET max_block_size = {{ block_size }};

SELECT 'ANY INNER';
SELECT sum(t1.key), sum(t2.key), count(), countIf(t1.key != 0), countIf(t2.key != 0) FROM t1
ANY INNER JOIN t2
ON t1.key == t2.key
;

SELECT 'ANY LEFT';
SELECT sum(t1.key), sum(t2.key), count(), countIf(t1.key != 0), countIf(t2.key != 0) FROM t1
ANY LEFT JOIN t2
ON t1.key == t2.key
;

SELECT 'ANY RIGHT';
SELECT sum(t1.key), sum(t2.key), count(), countIf(t1.key != 0), countIf(t2.key != 0) FROM t1
ANY RIGHT JOIN t2
ON t1.key == t2.key
;

{% endfor %}
