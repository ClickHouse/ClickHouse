1000
bloom filter is off, all row groups should be read
expect rows_read = select count()
{
  "data": [
    {
      "string": "AZSR",
      "flba": "WNMM"
    },
    {
      "string": "PFJH",
      "flba": "GKJC"
    }
  ],
  "rows": 2,
  "statistics": {
    "rows_read": 1000,
    "bytes_read": 41492
  }
}
bloom filter is on, some row groups should be skipped
expect rows_read much less than select count()
{
  "data": [
    {
      "string": "AZSR",
      "flba": "WNMM"
    },
    {
      "string": "PFJH",
      "flba": "GKJC"
    }
  ],
  "rows": 2,
  "statistics": {
    "rows_read": 464,
    "bytes_read": 18944
  }
}
bloom filter is on, but where predicate contains data from 2 row groups out of 3.
Rows read should be less than select count, but greater than previous selects
{
  "data": [
    {
      "string": "PFJH",
      "flba": "GKJC"
    },
    {
      "string": "ZHZK",
      "flba": "HRWD"
    }
  ],
  "rows": 2,
  "statistics": {
    "rows_read": 536,
    "bytes_read": 22549
  }
}
bloom filter is on, but where predicate contains data from all row groups
expect rows_read = select count()
{
  "data": [
    {
      "string": "PFJH",
      "flba": "GKJC"
    },
    {
      "string": "CPKP",
      "flba": "BEAQ"
    },
    {
      "string": "JQDK",
      "flba": "DDEE"
    },
    {
      "string": "LTSO",
      "flba": "QWWO"
    },
    {
      "string": "EIYH",
      "flba": "BRCO"
    },
    {
      "string": "ELRK",
      "flba": "BVLD"
    },
    {
      "string": "ZHZK",
      "flba": "HRWD"
    },
    {
      "string": "AQRQ",
      "flba": "OPXK"
    }
  ],
  "rows": 8,
  "statistics": {
    "rows_read": 1000,
    "bytes_read": 41492
  }
}
IN check
{
  "data": [
    {
      "string": "PFJH",
      "flba": "GKJC"
    },
    {
      "string": "ZHZK",
      "flba": "HRWD"
    }
  ],
  "rows": 2,
  "statistics": {
    "rows_read": 536,
    "bytes_read": 22549
  }
}
tuple in case, bf is off.
{
  "data": [
    {
      "string": "PFJH",
      "flba": "GKJC"
    }
  ],
  "rows": 1,
  "statistics": {
    "rows_read": 1000,
    "bytes_read": 41492
  }
}
tuple in case, bf is on.
{
  "data": [
    {
      "string": "PFJH",
      "flba": "GKJC"
    }
  ],
  "rows": 1,
  "statistics": {
    "rows_read": 464,
    "bytes_read": 18944
  }
}
complex tuple in case, bf is off
{
  "data": [
    {
      "string": "PFJH",
      "flba": "GKJC"
    }
  ],
  "rows": 1,
  "statistics": {
    "rows_read": 1000,
    "bytes_read": 41492
  }
}
complex tuple in case, bf is on
{
  "data": [
    {
      "string": "PFJH",
      "flba": "GKJC"
    }
  ],
  "rows": 1,
  "statistics": {
    "rows_read": 464,
    "bytes_read": 18944
  }
}
complex tuple in case, bf is on. Non existent
{
  "data": [],
  "rows": 0,
  "statistics": {
    "rows_read": 0,
    "bytes_read": 0
  }
}
Bloom filter for json column. BF is off
{
  "data": [
    {
      "json": "{\"key\":38, \"value\":\"NXONM\"}"
    }
  ],
  "rows": 1,
  "statistics": {
    "rows_read": 1000,
    "bytes_read": 41492
  }
}
Bloom filter for json column. BF is on
{
  "data": [
    {
      "json": "{\"key\":38, \"value\":\"NXONM\"}"
    }
  ],
  "rows": 1,
  "statistics": {
    "rows_read": 72,
    "bytes_read": 3605
  }
}
Bloom filter for ipv4 column. BF is off
{
  "data": [
    {
      "json": "{\"key\":38, \"value\":\"NXONM\"}"
    }
  ],
  "rows": 1,
  "statistics": {
    "rows_read": 1000,
    "bytes_read": 41492
  }
}
Bloom filter for ipv4 column. BF is on
{
  "data": [
    {
      "json": "{\"key\":38, \"value\":\"NXONM\"}"
    }
  ],
  "rows": 1,
  "statistics": {
    "rows_read": 72,
    "bytes_read": 3605
  }
}
Bloom filter for ipv4 column. BF is on, but toIPv4(ipv4) = toIPv4('0.0.1.143') is not supported. Should read everything
{
  "data": [
    {
      "json": "{\"key\":38, \"value\":\"NXONM\"}"
    }
  ],
  "rows": 1,
  "statistics": {
    "rows_read": 1000,
    "bytes_read": 41492
  }
}
Bloom filter for ipv4 column. BF is on, but (toIPv4(ipv4)) in (toIPv4('0.0.1.143')) is not supported. Should read everything
{
  "data": [
    {
      "json": "{\"key\":38, \"value\":\"NXONM\"}"
    }
  ],
  "rows": 1,
  "statistics": {
    "rows_read": 1000,
    "bytes_read": 41492
  }
}
