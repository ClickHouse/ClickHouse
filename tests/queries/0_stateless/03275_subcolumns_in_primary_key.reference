create table test (id UInt64, a Tuple(b Tuple(c UInt32, d String, e Array(UInt32))), data String) engine=MergeTree order by (a.b.c, a.b.d) settings min_rows_for_wide_part=100000000, min_bytes_for_wide_part=1000000000, index_granularity = 1;
0	((0,'str_0',[]))	Hello, World!
2	((0,'str_2',[0,1]))	Hello, World!
1	((1,'str_1',[0]))	Hello, World!
3	((1,'str_0',[0,1,2]))	Hello, World!
4	((4,'str_5',[0,1,2,3]))	Hello, World!
6	((4,'str_4',[0,1,2,3,4,5]))	Hello, World!
5	((5,'str_6',[0,1,2,3,4]))	Hello, World!
7	((5,'str_5',[0,1,2,3,4,5,6]))	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.a.b.c ASC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: a.b.c ASC
5	((5,'str_6',[0,1,2,3,4]))	Hello, World!
7	((5,'str_5',[0,1,2,3,4,5,6]))	Hello, World!
4	((4,'str_5',[0,1,2,3]))	Hello, World!
6	((4,'str_4',[0,1,2,3,4,5]))	Hello, World!
1	((1,'str_1',[0]))	Hello, World!
3	((1,'str_0',[0,1,2]))	Hello, World!
0	((0,'str_0',[]))	Hello, World!
2	((0,'str_2',[0,1]))	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.a.b.c DESC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: a.b.c DESC
0	((0,'str_0',[]))	Hello, World!
2	((0,'str_2',[0,1]))	Hello, World!
3	((1,'str_0',[0,1,2]))	Hello, World!
1	((1,'str_1',[0]))	Hello, World!
6	((4,'str_4',[0,1,2,3,4,5]))	Hello, World!
4	((4,'str_5',[0,1,2,3]))	Hello, World!
7	((5,'str_5',[0,1,2,3,4,5,6]))	Hello, World!
5	((5,'str_6',[0,1,2,3,4]))	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.a.b.c ASC, __table1.a.b.d ASC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: a.b.c ASC, a.b.d ASC
7	((5,'str_5',[0,1,2,3,4,5,6]))	Hello, World!
5	((5,'str_6',[0,1,2,3,4]))	Hello, World!
6	((4,'str_4',[0,1,2,3,4,5]))	Hello, World!
4	((4,'str_5',[0,1,2,3]))	Hello, World!
3	((1,'str_0',[0,1,2]))	Hello, World!
1	((1,'str_1',[0]))	Hello, World!
0	((0,'str_0',[]))	Hello, World!
2	((0,'str_2',[0,1]))	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.a.b.c DESC, __table1.a.b.d ASC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: a.b.c DESC, a.b.d DESC
2	((0,'str_2',[0,1]))	Hello, World!
0	((0,'str_0',[]))	Hello, World!
1	((1,'str_1',[0]))	Hello, World!
3	((1,'str_0',[0,1,2]))	Hello, World!
4	((4,'str_5',[0,1,2,3]))	Hello, World!
6	((4,'str_4',[0,1,2,3,4,5]))	Hello, World!
5	((5,'str_6',[0,1,2,3,4]))	Hello, World!
7	((5,'str_5',[0,1,2,3,4,5,6]))	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.a.b.c ASC, __table1.a.b.d DESC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: a.b.c ASC, a.b.d ASC
5	((5,'str_6',[0,1,2,3,4]))	Hello, World!
7	((5,'str_5',[0,1,2,3,4,5,6]))	Hello, World!
4	((4,'str_5',[0,1,2,3]))	Hello, World!
6	((4,'str_4',[0,1,2,3,4,5]))	Hello, World!
1	((1,'str_1',[0]))	Hello, World!
3	((1,'str_0',[0,1,2]))	Hello, World!
2	((0,'str_2',[0,1]))	Hello, World!
0	((0,'str_0',[]))	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.a.b.c DESC, __table1.a.b.d DESC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: a.b.c DESC, a.b.d DESC
0	((0,'str_0',[]))	Hello, World!
2	((0,'str_2',[0,1]))	Hello, World!
Expression ((Project names + Projection))
Filter ((WHERE + Change column names to column identifiers))
ReadFromMergeTree (default.test)
Indexes:
PrimaryKey
Keys: 
a.b.c
Condition: (a.b.c in [0, 0])
Parts: 1/2
Granules: 2/8
0	((0,'str_0',[]))	Hello, World!
Expression ((Project names + Projection))
Filter ((WHERE + Change column names to column identifiers))
ReadFromMergeTree (default.test)
Indexes:
PrimaryKey
Keys: 
a.b.c
a.b.d
Condition: and((a.b.d in [\'str_0\', \'str_0\']), (a.b.c in [0, 0]))
Parts: 1/2
Granules: 1/8
2
Expression ((Project names + Projection))
AggregatingProjection
Expression (Before GROUP BY)
Filter ((WHERE + Change column names to column identifiers))
ReadFromMergeTree (default.test)
Indexes:
PrimaryKey
Keys: 
a.b.c
Condition: (a.b.c in [0, 0])
Parts: 1/2
Granules: 2/8
ReadFromPreparedSource (_minmax_count_projection)
1
Expression ((Project names + Projection))
Aggregating
Expression (Before GROUP BY)
Filter ((WHERE + Change column names to column identifiers))
ReadFromMergeTree (default.test)
Indexes:
PrimaryKey
Keys: 
a.b.c
a.b.d
Condition: and((a.b.d in [\'str_0\', \'str_0\']), (a.b.c in [0, 0]))
Parts: 1/2
Granules: 1/8
1
0	((0,'str_0',[]))	Hello, World!
2	((0,'str_2',[0,1]))	Hello, World!
1	((1,'str_1',[0]))	Hello, World!
3	((1,'str_0',[0,1,2]))	Hello, World!
4	((4,'str_5',[0,1,2,3]))	Hello, World!
6	((4,'str_4',[0,1,2,3,4,5]))	Hello, World!
5	((5,'str_6',[0,1,2,3,4]))	Hello, World!
7	((5,'str_5',[0,1,2,3,4,5,6]))	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.a.b.c ASC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: a.b.c ASC
5	((5,'str_6',[0,1,2,3,4]))	Hello, World!
7	((5,'str_5',[0,1,2,3,4,5,6]))	Hello, World!
4	((4,'str_5',[0,1,2,3]))	Hello, World!
6	((4,'str_4',[0,1,2,3,4,5]))	Hello, World!
1	((1,'str_1',[0]))	Hello, World!
3	((1,'str_0',[0,1,2]))	Hello, World!
0	((0,'str_0',[]))	Hello, World!
2	((0,'str_2',[0,1]))	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.a.b.c DESC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: a.b.c DESC
0	((0,'str_0',[]))	Hello, World!
3	((1,'str_0',[0,1,2]))	Hello, World!
1	((1,'str_1',[0]))	Hello, World!
2	((0,'str_2',[0,1]))	Hello, World!
6	((4,'str_4',[0,1,2,3,4,5]))	Hello, World!
4	((4,'str_5',[0,1,2,3]))	Hello, World!
7	((5,'str_5',[0,1,2,3,4,5,6]))	Hello, World!
5	((5,'str_6',[0,1,2,3,4]))	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.a.b.d ASC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
5	((5,'str_6',[0,1,2,3,4]))	Hello, World!
4	((4,'str_5',[0,1,2,3]))	Hello, World!
7	((5,'str_5',[0,1,2,3,4,5,6]))	Hello, World!
6	((4,'str_4',[0,1,2,3,4,5]))	Hello, World!
2	((0,'str_2',[0,1]))	Hello, World!
1	((1,'str_1',[0]))	Hello, World!
0	((0,'str_0',[]))	Hello, World!
3	((1,'str_0',[0,1,2]))	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.a.b.d DESC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
0	((0,'str_0',[]))	Hello, World!
2	((0,'str_2',[0,1]))	Hello, World!
3	((1,'str_0',[0,1,2]))	Hello, World!
1	((1,'str_1',[0]))	Hello, World!
6	((4,'str_4',[0,1,2,3,4,5]))	Hello, World!
4	((4,'str_5',[0,1,2,3]))	Hello, World!
7	((5,'str_5',[0,1,2,3,4,5,6]))	Hello, World!
5	((5,'str_6',[0,1,2,3,4]))	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.a.b.c ASC, __table1.a.b.d ASC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: a.b.c ASC, a.b.d ASC
7	((5,'str_5',[0,1,2,3,4,5,6]))	Hello, World!
5	((5,'str_6',[0,1,2,3,4]))	Hello, World!
6	((4,'str_4',[0,1,2,3,4,5]))	Hello, World!
4	((4,'str_5',[0,1,2,3]))	Hello, World!
3	((1,'str_0',[0,1,2]))	Hello, World!
1	((1,'str_1',[0]))	Hello, World!
0	((0,'str_0',[]))	Hello, World!
2	((0,'str_2',[0,1]))	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.a.b.c DESC, __table1.a.b.d ASC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: a.b.c DESC, a.b.d DESC
2	((0,'str_2',[0,1]))	Hello, World!
0	((0,'str_0',[]))	Hello, World!
1	((1,'str_1',[0]))	Hello, World!
3	((1,'str_0',[0,1,2]))	Hello, World!
4	((4,'str_5',[0,1,2,3]))	Hello, World!
6	((4,'str_4',[0,1,2,3,4,5]))	Hello, World!
5	((5,'str_6',[0,1,2,3,4]))	Hello, World!
7	((5,'str_5',[0,1,2,3,4,5,6]))	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.a.b.c ASC, __table1.a.b.d DESC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: a.b.c ASC, a.b.d ASC
5	((5,'str_6',[0,1,2,3,4]))	Hello, World!
7	((5,'str_5',[0,1,2,3,4,5,6]))	Hello, World!
4	((4,'str_5',[0,1,2,3]))	Hello, World!
6	((4,'str_4',[0,1,2,3,4,5]))	Hello, World!
1	((1,'str_1',[0]))	Hello, World!
3	((1,'str_0',[0,1,2]))	Hello, World!
2	((0,'str_2',[0,1]))	Hello, World!
0	((0,'str_0',[]))	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.a.b.c DESC, __table1.a.b.d DESC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: a.b.c DESC, a.b.d DESC
0	((0,'str_0',[]))	Hello, World!
2	((0,'str_2',[0,1]))	Hello, World!
Expression ((Project names + Projection))
Filter ((WHERE + Change column names to column identifiers))
ReadFromMergeTree (default.test)
Indexes:
PrimaryKey
Keys: 
a.b.c
Condition: (a.b.c in [0, 0])
Parts: 1/1
Granules: 2/8
0	((0,'str_0',[]))	Hello, World!
Expression ((Project names + Projection))
Filter ((WHERE + Change column names to column identifiers))
ReadFromMergeTree (default.test)
Indexes:
PrimaryKey
Keys: 
a.b.c
a.b.d
Condition: and((a.b.d in [\'str_0\', \'str_0\']), (a.b.c in [0, 0]))
Parts: 1/1
Granules: 1/8
2
Expression ((Project names + Projection))
AggregatingProjection
Expression (Before GROUP BY)
Filter ((WHERE + Change column names to column identifiers))
ReadFromMergeTree (default.test)
Indexes:
PrimaryKey
Keys: 
a.b.c
Condition: (a.b.c in [0, 0])
Parts: 1/1
Granules: 2/8
ReadFromPreparedSource (_minmax_count_projection)
1
Expression ((Project names + Projection))
Aggregating
Expression (Before GROUP BY)
Filter ((WHERE + Change column names to column identifiers))
ReadFromMergeTree (default.test)
Indexes:
PrimaryKey
Keys: 
a.b.c
a.b.d
Condition: and((a.b.d in [\'str_0\', \'str_0\']), (a.b.c in [0, 0]))
Parts: 1/1
Granules: 1/8
create table test (id UInt64, a Tuple(b Tuple(c UInt32, d String, e Array(UInt32))), data String) engine=MergeTree order by (a.b.c, a.b.d) settings min_rows_for_wide_part=1, min_bytes_for_wide_part=1, vertical_merge_algorithm_min_columns_to_activate=10, vertical_merge_algorithm_min_rows_to_activate=10000000000, index_granularity = 1;
0	((0,'str_0',[]))	Hello, World!
2	((0,'str_2',[0,1]))	Hello, World!
1	((1,'str_1',[0]))	Hello, World!
3	((1,'str_0',[0,1,2]))	Hello, World!
4	((4,'str_5',[0,1,2,3]))	Hello, World!
6	((4,'str_4',[0,1,2,3,4,5]))	Hello, World!
5	((5,'str_6',[0,1,2,3,4]))	Hello, World!
7	((5,'str_5',[0,1,2,3,4,5,6]))	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.a.b.c ASC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: a.b.c ASC
5	((5,'str_6',[0,1,2,3,4]))	Hello, World!
7	((5,'str_5',[0,1,2,3,4,5,6]))	Hello, World!
4	((4,'str_5',[0,1,2,3]))	Hello, World!
6	((4,'str_4',[0,1,2,3,4,5]))	Hello, World!
1	((1,'str_1',[0]))	Hello, World!
3	((1,'str_0',[0,1,2]))	Hello, World!
0	((0,'str_0',[]))	Hello, World!
2	((0,'str_2',[0,1]))	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.a.b.c DESC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: a.b.c DESC
0	((0,'str_0',[]))	Hello, World!
2	((0,'str_2',[0,1]))	Hello, World!
3	((1,'str_0',[0,1,2]))	Hello, World!
1	((1,'str_1',[0]))	Hello, World!
6	((4,'str_4',[0,1,2,3,4,5]))	Hello, World!
4	((4,'str_5',[0,1,2,3]))	Hello, World!
7	((5,'str_5',[0,1,2,3,4,5,6]))	Hello, World!
5	((5,'str_6',[0,1,2,3,4]))	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.a.b.c ASC, __table1.a.b.d ASC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: a.b.c ASC, a.b.d ASC
7	((5,'str_5',[0,1,2,3,4,5,6]))	Hello, World!
5	((5,'str_6',[0,1,2,3,4]))	Hello, World!
6	((4,'str_4',[0,1,2,3,4,5]))	Hello, World!
4	((4,'str_5',[0,1,2,3]))	Hello, World!
3	((1,'str_0',[0,1,2]))	Hello, World!
1	((1,'str_1',[0]))	Hello, World!
0	((0,'str_0',[]))	Hello, World!
2	((0,'str_2',[0,1]))	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.a.b.c DESC, __table1.a.b.d ASC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: a.b.c DESC, a.b.d DESC
2	((0,'str_2',[0,1]))	Hello, World!
0	((0,'str_0',[]))	Hello, World!
1	((1,'str_1',[0]))	Hello, World!
3	((1,'str_0',[0,1,2]))	Hello, World!
4	((4,'str_5',[0,1,2,3]))	Hello, World!
6	((4,'str_4',[0,1,2,3,4,5]))	Hello, World!
5	((5,'str_6',[0,1,2,3,4]))	Hello, World!
7	((5,'str_5',[0,1,2,3,4,5,6]))	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.a.b.c ASC, __table1.a.b.d DESC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: a.b.c ASC, a.b.d ASC
5	((5,'str_6',[0,1,2,3,4]))	Hello, World!
7	((5,'str_5',[0,1,2,3,4,5,6]))	Hello, World!
4	((4,'str_5',[0,1,2,3]))	Hello, World!
6	((4,'str_4',[0,1,2,3,4,5]))	Hello, World!
1	((1,'str_1',[0]))	Hello, World!
3	((1,'str_0',[0,1,2]))	Hello, World!
2	((0,'str_2',[0,1]))	Hello, World!
0	((0,'str_0',[]))	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.a.b.c DESC, __table1.a.b.d DESC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: a.b.c DESC, a.b.d DESC
0	((0,'str_0',[]))	Hello, World!
2	((0,'str_2',[0,1]))	Hello, World!
Expression ((Project names + Projection))
Filter ((WHERE + Change column names to column identifiers))
ReadFromMergeTree (default.test)
Indexes:
PrimaryKey
Keys: 
a.b.c
Condition: (a.b.c in [0, 0])
Parts: 1/2
Granules: 2/8
0	((0,'str_0',[]))	Hello, World!
Expression ((Project names + Projection))
Filter ((WHERE + Change column names to column identifiers))
ReadFromMergeTree (default.test)
Indexes:
PrimaryKey
Keys: 
a.b.c
a.b.d
Condition: and((a.b.d in [\'str_0\', \'str_0\']), (a.b.c in [0, 0]))
Parts: 1/2
Granules: 1/8
2
Expression ((Project names + Projection))
AggregatingProjection
Expression (Before GROUP BY)
Filter ((WHERE + Change column names to column identifiers))
ReadFromMergeTree (default.test)
Indexes:
PrimaryKey
Keys: 
a.b.c
Condition: (a.b.c in [0, 0])
Parts: 1/2
Granules: 2/8
ReadFromPreparedSource (_minmax_count_projection)
1
Expression ((Project names + Projection))
Aggregating
Expression (Before GROUP BY)
Filter ((WHERE + Change column names to column identifiers))
ReadFromMergeTree (default.test)
Indexes:
PrimaryKey
Keys: 
a.b.c
a.b.d
Condition: and((a.b.d in [\'str_0\', \'str_0\']), (a.b.c in [0, 0]))
Parts: 1/2
Granules: 1/8
1
0	((0,'str_0',[]))	Hello, World!
2	((0,'str_2',[0,1]))	Hello, World!
1	((1,'str_1',[0]))	Hello, World!
3	((1,'str_0',[0,1,2]))	Hello, World!
4	((4,'str_5',[0,1,2,3]))	Hello, World!
6	((4,'str_4',[0,1,2,3,4,5]))	Hello, World!
5	((5,'str_6',[0,1,2,3,4]))	Hello, World!
7	((5,'str_5',[0,1,2,3,4,5,6]))	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.a.b.c ASC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: a.b.c ASC
5	((5,'str_6',[0,1,2,3,4]))	Hello, World!
7	((5,'str_5',[0,1,2,3,4,5,6]))	Hello, World!
4	((4,'str_5',[0,1,2,3]))	Hello, World!
6	((4,'str_4',[0,1,2,3,4,5]))	Hello, World!
1	((1,'str_1',[0]))	Hello, World!
3	((1,'str_0',[0,1,2]))	Hello, World!
0	((0,'str_0',[]))	Hello, World!
2	((0,'str_2',[0,1]))	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.a.b.c DESC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: a.b.c DESC
0	((0,'str_0',[]))	Hello, World!
3	((1,'str_0',[0,1,2]))	Hello, World!
1	((1,'str_1',[0]))	Hello, World!
2	((0,'str_2',[0,1]))	Hello, World!
6	((4,'str_4',[0,1,2,3,4,5]))	Hello, World!
4	((4,'str_5',[0,1,2,3]))	Hello, World!
7	((5,'str_5',[0,1,2,3,4,5,6]))	Hello, World!
5	((5,'str_6',[0,1,2,3,4]))	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.a.b.d ASC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
5	((5,'str_6',[0,1,2,3,4]))	Hello, World!
4	((4,'str_5',[0,1,2,3]))	Hello, World!
7	((5,'str_5',[0,1,2,3,4,5,6]))	Hello, World!
6	((4,'str_4',[0,1,2,3,4,5]))	Hello, World!
2	((0,'str_2',[0,1]))	Hello, World!
1	((1,'str_1',[0]))	Hello, World!
0	((0,'str_0',[]))	Hello, World!
3	((1,'str_0',[0,1,2]))	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.a.b.d DESC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
0	((0,'str_0',[]))	Hello, World!
2	((0,'str_2',[0,1]))	Hello, World!
3	((1,'str_0',[0,1,2]))	Hello, World!
1	((1,'str_1',[0]))	Hello, World!
6	((4,'str_4',[0,1,2,3,4,5]))	Hello, World!
4	((4,'str_5',[0,1,2,3]))	Hello, World!
7	((5,'str_5',[0,1,2,3,4,5,6]))	Hello, World!
5	((5,'str_6',[0,1,2,3,4]))	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.a.b.c ASC, __table1.a.b.d ASC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: a.b.c ASC, a.b.d ASC
7	((5,'str_5',[0,1,2,3,4,5,6]))	Hello, World!
5	((5,'str_6',[0,1,2,3,4]))	Hello, World!
6	((4,'str_4',[0,1,2,3,4,5]))	Hello, World!
4	((4,'str_5',[0,1,2,3]))	Hello, World!
3	((1,'str_0',[0,1,2]))	Hello, World!
1	((1,'str_1',[0]))	Hello, World!
0	((0,'str_0',[]))	Hello, World!
2	((0,'str_2',[0,1]))	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.a.b.c DESC, __table1.a.b.d ASC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: a.b.c DESC, a.b.d DESC
2	((0,'str_2',[0,1]))	Hello, World!
0	((0,'str_0',[]))	Hello, World!
1	((1,'str_1',[0]))	Hello, World!
3	((1,'str_0',[0,1,2]))	Hello, World!
4	((4,'str_5',[0,1,2,3]))	Hello, World!
6	((4,'str_4',[0,1,2,3,4,5]))	Hello, World!
5	((5,'str_6',[0,1,2,3,4]))	Hello, World!
7	((5,'str_5',[0,1,2,3,4,5,6]))	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.a.b.c ASC, __table1.a.b.d DESC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: a.b.c ASC, a.b.d ASC
5	((5,'str_6',[0,1,2,3,4]))	Hello, World!
7	((5,'str_5',[0,1,2,3,4,5,6]))	Hello, World!
4	((4,'str_5',[0,1,2,3]))	Hello, World!
6	((4,'str_4',[0,1,2,3,4,5]))	Hello, World!
1	((1,'str_1',[0]))	Hello, World!
3	((1,'str_0',[0,1,2]))	Hello, World!
2	((0,'str_2',[0,1]))	Hello, World!
0	((0,'str_0',[]))	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.a.b.c DESC, __table1.a.b.d DESC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: a.b.c DESC, a.b.d DESC
0	((0,'str_0',[]))	Hello, World!
2	((0,'str_2',[0,1]))	Hello, World!
Expression ((Project names + Projection))
Filter ((WHERE + Change column names to column identifiers))
ReadFromMergeTree (default.test)
Indexes:
PrimaryKey
Keys: 
a.b.c
Condition: (a.b.c in [0, 0])
Parts: 1/1
Granules: 2/8
0	((0,'str_0',[]))	Hello, World!
Expression ((Project names + Projection))
Filter ((WHERE + Change column names to column identifiers))
ReadFromMergeTree (default.test)
Indexes:
PrimaryKey
Keys: 
a.b.c
a.b.d
Condition: and((a.b.d in [\'str_0\', \'str_0\']), (a.b.c in [0, 0]))
Parts: 1/1
Granules: 1/8
2
Expression ((Project names + Projection))
AggregatingProjection
Expression (Before GROUP BY)
Filter ((WHERE + Change column names to column identifiers))
ReadFromMergeTree (default.test)
Indexes:
PrimaryKey
Keys: 
a.b.c
Condition: (a.b.c in [0, 0])
Parts: 1/1
Granules: 2/8
ReadFromPreparedSource (_minmax_count_projection)
1
Expression ((Project names + Projection))
Aggregating
Expression (Before GROUP BY)
Filter ((WHERE + Change column names to column identifiers))
ReadFromMergeTree (default.test)
Indexes:
PrimaryKey
Keys: 
a.b.c
a.b.d
Condition: and((a.b.d in [\'str_0\', \'str_0\']), (a.b.c in [0, 0]))
Parts: 1/1
Granules: 1/8
create table test (id UInt64, a Tuple(b Tuple(c UInt32, d String, e Array(UInt32))), data String) engine=MergeTree order by (a.b.c, a.b.d) settings min_rows_for_wide_part=1, min_bytes_for_wide_part=1, vertical_merge_algorithm_min_columns_to_activate=1, vertical_merge_algorithm_min_rows_to_activate=1, index_granularity = 1;
0	((0,'str_0',[]))	Hello, World!
2	((0,'str_2',[0,1]))	Hello, World!
1	((1,'str_1',[0]))	Hello, World!
3	((1,'str_0',[0,1,2]))	Hello, World!
4	((4,'str_5',[0,1,2,3]))	Hello, World!
6	((4,'str_4',[0,1,2,3,4,5]))	Hello, World!
5	((5,'str_6',[0,1,2,3,4]))	Hello, World!
7	((5,'str_5',[0,1,2,3,4,5,6]))	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.a.b.c ASC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: a.b.c ASC
5	((5,'str_6',[0,1,2,3,4]))	Hello, World!
7	((5,'str_5',[0,1,2,3,4,5,6]))	Hello, World!
4	((4,'str_5',[0,1,2,3]))	Hello, World!
6	((4,'str_4',[0,1,2,3,4,5]))	Hello, World!
1	((1,'str_1',[0]))	Hello, World!
3	((1,'str_0',[0,1,2]))	Hello, World!
0	((0,'str_0',[]))	Hello, World!
2	((0,'str_2',[0,1]))	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.a.b.c DESC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: a.b.c DESC
0	((0,'str_0',[]))	Hello, World!
2	((0,'str_2',[0,1]))	Hello, World!
3	((1,'str_0',[0,1,2]))	Hello, World!
1	((1,'str_1',[0]))	Hello, World!
6	((4,'str_4',[0,1,2,3,4,5]))	Hello, World!
4	((4,'str_5',[0,1,2,3]))	Hello, World!
7	((5,'str_5',[0,1,2,3,4,5,6]))	Hello, World!
5	((5,'str_6',[0,1,2,3,4]))	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.a.b.c ASC, __table1.a.b.d ASC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: a.b.c ASC, a.b.d ASC
7	((5,'str_5',[0,1,2,3,4,5,6]))	Hello, World!
5	((5,'str_6',[0,1,2,3,4]))	Hello, World!
6	((4,'str_4',[0,1,2,3,4,5]))	Hello, World!
4	((4,'str_5',[0,1,2,3]))	Hello, World!
3	((1,'str_0',[0,1,2]))	Hello, World!
1	((1,'str_1',[0]))	Hello, World!
0	((0,'str_0',[]))	Hello, World!
2	((0,'str_2',[0,1]))	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.a.b.c DESC, __table1.a.b.d ASC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: a.b.c DESC, a.b.d DESC
2	((0,'str_2',[0,1]))	Hello, World!
0	((0,'str_0',[]))	Hello, World!
1	((1,'str_1',[0]))	Hello, World!
3	((1,'str_0',[0,1,2]))	Hello, World!
4	((4,'str_5',[0,1,2,3]))	Hello, World!
6	((4,'str_4',[0,1,2,3,4,5]))	Hello, World!
5	((5,'str_6',[0,1,2,3,4]))	Hello, World!
7	((5,'str_5',[0,1,2,3,4,5,6]))	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.a.b.c ASC, __table1.a.b.d DESC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: a.b.c ASC, a.b.d ASC
5	((5,'str_6',[0,1,2,3,4]))	Hello, World!
7	((5,'str_5',[0,1,2,3,4,5,6]))	Hello, World!
4	((4,'str_5',[0,1,2,3]))	Hello, World!
6	((4,'str_4',[0,1,2,3,4,5]))	Hello, World!
1	((1,'str_1',[0]))	Hello, World!
3	((1,'str_0',[0,1,2]))	Hello, World!
2	((0,'str_2',[0,1]))	Hello, World!
0	((0,'str_0',[]))	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.a.b.c DESC, __table1.a.b.d DESC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: a.b.c DESC, a.b.d DESC
0	((0,'str_0',[]))	Hello, World!
2	((0,'str_2',[0,1]))	Hello, World!
Expression ((Project names + Projection))
Filter ((WHERE + Change column names to column identifiers))
ReadFromMergeTree (default.test)
Indexes:
PrimaryKey
Keys: 
a.b.c
Condition: (a.b.c in [0, 0])
Parts: 1/2
Granules: 2/8
0	((0,'str_0',[]))	Hello, World!
Expression ((Project names + Projection))
Filter ((WHERE + Change column names to column identifiers))
ReadFromMergeTree (default.test)
Indexes:
PrimaryKey
Keys: 
a.b.c
a.b.d
Condition: and((a.b.d in [\'str_0\', \'str_0\']), (a.b.c in [0, 0]))
Parts: 1/2
Granules: 1/8
2
Expression ((Project names + Projection))
AggregatingProjection
Expression (Before GROUP BY)
Filter ((WHERE + Change column names to column identifiers))
ReadFromMergeTree (default.test)
Indexes:
PrimaryKey
Keys: 
a.b.c
Condition: (a.b.c in [0, 0])
Parts: 1/2
Granules: 2/8
ReadFromPreparedSource (_minmax_count_projection)
1
Expression ((Project names + Projection))
Aggregating
Expression (Before GROUP BY)
Filter ((WHERE + Change column names to column identifiers))
ReadFromMergeTree (default.test)
Indexes:
PrimaryKey
Keys: 
a.b.c
a.b.d
Condition: and((a.b.d in [\'str_0\', \'str_0\']), (a.b.c in [0, 0]))
Parts: 1/2
Granules: 1/8
1
0	((0,'str_0',[]))	Hello, World!
2	((0,'str_2',[0,1]))	Hello, World!
1	((1,'str_1',[0]))	Hello, World!
3	((1,'str_0',[0,1,2]))	Hello, World!
4	((4,'str_5',[0,1,2,3]))	Hello, World!
6	((4,'str_4',[0,1,2,3,4,5]))	Hello, World!
5	((5,'str_6',[0,1,2,3,4]))	Hello, World!
7	((5,'str_5',[0,1,2,3,4,5,6]))	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.a.b.c ASC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: a.b.c ASC
5	((5,'str_6',[0,1,2,3,4]))	Hello, World!
7	((5,'str_5',[0,1,2,3,4,5,6]))	Hello, World!
4	((4,'str_5',[0,1,2,3]))	Hello, World!
6	((4,'str_4',[0,1,2,3,4,5]))	Hello, World!
1	((1,'str_1',[0]))	Hello, World!
3	((1,'str_0',[0,1,2]))	Hello, World!
0	((0,'str_0',[]))	Hello, World!
2	((0,'str_2',[0,1]))	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.a.b.c DESC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: a.b.c DESC
0	((0,'str_0',[]))	Hello, World!
3	((1,'str_0',[0,1,2]))	Hello, World!
1	((1,'str_1',[0]))	Hello, World!
2	((0,'str_2',[0,1]))	Hello, World!
6	((4,'str_4',[0,1,2,3,4,5]))	Hello, World!
4	((4,'str_5',[0,1,2,3]))	Hello, World!
7	((5,'str_5',[0,1,2,3,4,5,6]))	Hello, World!
5	((5,'str_6',[0,1,2,3,4]))	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.a.b.d ASC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
5	((5,'str_6',[0,1,2,3,4]))	Hello, World!
4	((4,'str_5',[0,1,2,3]))	Hello, World!
7	((5,'str_5',[0,1,2,3,4,5,6]))	Hello, World!
6	((4,'str_4',[0,1,2,3,4,5]))	Hello, World!
2	((0,'str_2',[0,1]))	Hello, World!
1	((1,'str_1',[0]))	Hello, World!
0	((0,'str_0',[]))	Hello, World!
3	((1,'str_0',[0,1,2]))	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.a.b.d DESC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
0	((0,'str_0',[]))	Hello, World!
2	((0,'str_2',[0,1]))	Hello, World!
3	((1,'str_0',[0,1,2]))	Hello, World!
1	((1,'str_1',[0]))	Hello, World!
6	((4,'str_4',[0,1,2,3,4,5]))	Hello, World!
4	((4,'str_5',[0,1,2,3]))	Hello, World!
7	((5,'str_5',[0,1,2,3,4,5,6]))	Hello, World!
5	((5,'str_6',[0,1,2,3,4]))	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.a.b.c ASC, __table1.a.b.d ASC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: a.b.c ASC, a.b.d ASC
7	((5,'str_5',[0,1,2,3,4,5,6]))	Hello, World!
5	((5,'str_6',[0,1,2,3,4]))	Hello, World!
6	((4,'str_4',[0,1,2,3,4,5]))	Hello, World!
4	((4,'str_5',[0,1,2,3]))	Hello, World!
3	((1,'str_0',[0,1,2]))	Hello, World!
1	((1,'str_1',[0]))	Hello, World!
0	((0,'str_0',[]))	Hello, World!
2	((0,'str_2',[0,1]))	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.a.b.c DESC, __table1.a.b.d ASC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: a.b.c DESC, a.b.d DESC
2	((0,'str_2',[0,1]))	Hello, World!
0	((0,'str_0',[]))	Hello, World!
1	((1,'str_1',[0]))	Hello, World!
3	((1,'str_0',[0,1,2]))	Hello, World!
4	((4,'str_5',[0,1,2,3]))	Hello, World!
6	((4,'str_4',[0,1,2,3,4,5]))	Hello, World!
5	((5,'str_6',[0,1,2,3,4]))	Hello, World!
7	((5,'str_5',[0,1,2,3,4,5,6]))	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.a.b.c ASC, __table1.a.b.d DESC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: a.b.c ASC, a.b.d ASC
5	((5,'str_6',[0,1,2,3,4]))	Hello, World!
7	((5,'str_5',[0,1,2,3,4,5,6]))	Hello, World!
4	((4,'str_5',[0,1,2,3]))	Hello, World!
6	((4,'str_4',[0,1,2,3,4,5]))	Hello, World!
1	((1,'str_1',[0]))	Hello, World!
3	((1,'str_0',[0,1,2]))	Hello, World!
2	((0,'str_2',[0,1]))	Hello, World!
0	((0,'str_0',[]))	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.a.b.c DESC, __table1.a.b.d DESC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: a.b.c DESC, a.b.d DESC
0	((0,'str_0',[]))	Hello, World!
2	((0,'str_2',[0,1]))	Hello, World!
Expression ((Project names + Projection))
Filter ((WHERE + Change column names to column identifiers))
ReadFromMergeTree (default.test)
Indexes:
PrimaryKey
Keys: 
a.b.c
Condition: (a.b.c in [0, 0])
Parts: 1/1
Granules: 2/8
0	((0,'str_0',[]))	Hello, World!
Expression ((Project names + Projection))
Filter ((WHERE + Change column names to column identifiers))
ReadFromMergeTree (default.test)
Indexes:
PrimaryKey
Keys: 
a.b.c
a.b.d
Condition: and((a.b.d in [\'str_0\', \'str_0\']), (a.b.c in [0, 0]))
Parts: 1/1
Granules: 1/8
2
Expression ((Project names + Projection))
AggregatingProjection
Expression (Before GROUP BY)
Filter ((WHERE + Change column names to column identifiers))
ReadFromMergeTree (default.test)
Indexes:
PrimaryKey
Keys: 
a.b.c
Condition: (a.b.c in [0, 0])
Parts: 1/1
Granules: 2/8
ReadFromPreparedSource (_minmax_count_projection)
1
Expression ((Project names + Projection))
Aggregating
Expression (Before GROUP BY)
Filter ((WHERE + Change column names to column identifiers))
ReadFromMergeTree (default.test)
Indexes:
PrimaryKey
Keys: 
a.b.c
a.b.d
Condition: and((a.b.d in [\'str_0\', \'str_0\']), (a.b.c in [0, 0]))
Parts: 1/1
Granules: 1/8
