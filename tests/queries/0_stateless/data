0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreePrefetchedReadPool::getTask(unsigned long, DB::MergeTreeReadTask*);DB::MergeTreePrefetchedReadPool::startPrefetches();DB::MergeTreePrefetchedReadPool::createPrefetchedReadersForTask(DB::MergeTreePrefetchedReadPool::ThreadTask&);DB::MergeTreeReadTask::createReaders(std::__1::shared_ptr<DB::MergeTreeReadTaskInfo const> const&, DB::MergeTreeReadTask::Extras const&, DB::MarkRanges const&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>> const&);DB::MergeTreeReadTask::createReaders(std::__1::shared_ptr<DB::MergeTreeReadTaskInfo const> const&, DB::MergeTreeReadTask::Extras const&, DB::MarkRanges const&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>> const&)::$_0::operator()(DB::NamesAndTypesList const&, bool) const;DB::createMergeTreeReaderCompact(std::__1::shared_ptr<DB::IMergeTreeDataPartInfoForReader> const&, DB::NamesAndTypesList const&, std::__1::shared_ptr<DB::StorageSnapshot> const&, DB::MarkRanges const&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, DB::Field, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, DB::Field>>> const&, DB::UncompressedCache*, DB::MarkCache*, DB::DeserializationPrefixesCache*, DB::MergeTreeReaderSettings const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, double>>> const&, std::__1::function<void (DB::ReadBufferFromFileBase::ProfileInfo)> const&);DB::MergeTreeReaderCompactMultiBuffer::MergeTreeReaderCompactMultiBuffer<std::__1::shared_ptr<DB::IMergeTreeDataPartInfoForReader> const&, DB::NamesAndTypesList const&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, DB::Field, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, DB::Field>>> const&, std::__1::shared_ptr<DB::StorageSnapshot> const&, DB::UncompressedCache*&, DB::MarkCache*&, DB::DeserializationPrefixesCache*&, DB::MarkRanges const&, DB::MergeTreeReaderSettings const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, double>>> const&, std::__1::function<void (DB::ReadBufferFromFileBase::ProfileInfo)> const&, int>(std::__1::shared_ptr<DB::IMergeTreeDataPartInfoForReader> const&, DB::NamesAndTypesList const&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, DB::Field, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, DB::Field>>> const&, std::__1::shared_ptr<DB::StorageSnapshot> const&, DB::UncompressedCache*&, DB::MarkCache*&, DB::DeserializationPrefixesCache*&, DB::MarkRanges const&, DB::MergeTreeReaderSettings const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, double>>> const&, std::__1::function<void (DB::ReadBufferFromFileBase::ProfileInfo)> const&, int&&);DB::MergeTreeReaderCompact::MergeTreeReaderCompact(std::__1::shared_ptr<DB::IMergeTreeDataPartInfoForReader>, DB::NamesAndTypesList, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, DB::Field, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, DB::Field>>> const&, std::__1::shared_ptr<DB::StorageSnapshot> const&, DB::UncompressedCache*, DB::MarkCache*, DB::DeserializationPrefixesCache*, DB::MarkRanges, DB::MergeTreeReaderSettings, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, double>>>, std::__1::function<void (DB::ReadBufferFromFileBase::ProfileInfo)> const&, int);DB::IMergeTreeReader::IMergeTreeReader(std::__1::shared_ptr<DB::IMergeTreeDataPartInfoForReader>, DB::NamesAndTypesList const&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, DB::Field, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, DB::Field>>> const&, std::__1::shared_ptr<DB::StorageSnapshot> const&, DB::UncompressedCache*, DB::MarkCache*, DB::MarkRanges const&, DB::MergeTreeReaderSettings const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, double>>> const&);DB::IMergeTreeReader::getSerializationInPart(DB::NameAndTypePair const&) const;DB::IDataType::getSerialization(DB::NameAndTypePair const&);DB::IDataType::getSubcolumnSerialization(std::__1::basic_string_view<char, std::__1::char_traits<char>>, std::__1::shared_ptr<DB::ISerialization const> const&) const;DB::IDataType::getSubcolumnData(std::__1::basic_string_view<char, std::__1::char_traits<char>>, DB::ISerialization::SubstreamData const&, bool);DB::SerializationObject::enumerateStreams(DB::ISerialization::EnumerateStreamsSettings&, std::__1::function<void (DB::ISerialization::SubstreamPath const&)> const&, DB::ISerialization::SubstreamData const&) const;DB::ISerialization::Substream* std::__1::vector<DB::ISerialization::Substream, std::__1::allocator<DB::ISerialization::Substream>>::__push_back_slow_path<DB::ISerialization::Substream>(DB::ISerialization::Substream&&) 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 4
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 3
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 2
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 2
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 2
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 2
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 6
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 3
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 9
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 2
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 2
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 3
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 5
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 2
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 3
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 2
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 2
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 2
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decodeLiteralsBlock;HUF_decompress4X_hufOnly_wksp;HUF_readDTableX2_wksp 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decodeLiteralsBlock;HUF_decompress4X_hufOnly_wksp;HUF_readDTableX2_wksp 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decodeLiteralsBlock;HUF_decompress4X2_usingDTable_internal 2
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decodeLiteralsBlock;HUF_decompress4X2_usingDTable_internal 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decodeLiteralsBlock;HUF_decompress4X2_usingDTable_internal 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decodeLiteralsBlock;HUF_decompress4X1_usingDTable_internal 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decodeLiteralsBlock;HUF_decompress4X1_usingDTable_internal 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decodeLiteralsBlock;HUF_decompress4X2_usingDTable_internal 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decodeLiteralsBlock;HUF_decompress4X1_usingDTable_internal 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decodeLiteralsBlock;HUF_decompress4X2_usingDTable_internal 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decodeLiteralsBlock;HUF_decompress4X2_usingDTable_internal 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decodeLiteralsBlock;HUF_decompress4X2_usingDTable_internal 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decodeLiteralsBlock;HUF_decompress4X2_usingDTable_internal 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decodeLiteralsBlock;HUF_decompress4X2_usingDTable_internal 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decodeLiteralsBlock;HUF_decompress4X2_usingDTable_internal;HUF_DecompressFastArgs_init 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decodeSeqHeaders;ZSTD_buildSeqTable;FSE_readNCount_bmi2 2
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decodeSeqHeaders;ZSTD_buildSeqTable;ZSTD_buildFSETable 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decodeSeqHeaders;ZSTD_buildSeqTable;ZSTD_buildFSETable 2
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decodeSeqHeaders;ZSTD_buildSeqTable;ZSTD_buildFSETable 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decodeSeqHeaders;ZSTD_buildSeqTable;ZSTD_buildFSETable 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decodeSeqHeaders;ZSTD_buildSeqTable;ZSTD_buildFSETable 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;malloc_default;prof_tctx_create;prof_backtrace;prof_backtrace_impl;unw_backtrace;libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_arm64>::step(bool);libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_arm64>::setInfoBasedOnIPRegister(bool);dl_iterate_phdr;libunwind::findUnwindSectionsByPhdr(dl_phdr_info*, unsigned long, void*);libunwind::EHHeaderParser<libunwind::LocalAddressSpace>::decodeEHHdr(libunwind::LocalAddressSpace&, unsigned long, unsigned long, libunwind::EHHeaderParser<libunwind::LocalAddressSpace>::EHHeaderInfo&);libunwind::LocalAddressSpace::getEncodedP(unsigned long&, unsigned long, unsigned char, unsigned long) 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;malloc_default;prof_tctx_create;prof_backtrace;prof_backtrace_impl;unw_backtrace;libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_arm64>::step(bool);libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_arm64>::setInfoBasedOnIPRegister(bool);libunwind::CFI_Parser<libunwind::LocalAddressSpace>::parseFDEInstructions(libunwind::LocalAddressSpace&, libunwind::CFI_Parser<libunwind::LocalAddressSpace>::FDE_Info const&, libunwind::CFI_Parser<libunwind::LocalAddressSpace>::CIE_Info const&, unsigned long, int, libunwind::CFI_Parser<libunwind::LocalAddressSpace>::PrologInfo*) 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;malloc_default;prof_tctx_create;prof_backtrace;prof_backtrace_impl;unw_backtrace;libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_arm64>::step(bool);libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_arm64>::setInfoBasedOnIPRegister(bool);libunwind::EHHeaderParser<libunwind::LocalAddressSpace>::findFDE(libunwind::LocalAddressSpace&, unsigned long, unsigned long, unsigned int, libunwind::CFI_Parser<libunwind::LocalAddressSpace>::FDE_Info*, libunwind::CFI_Parser<libunwind::LocalAddressSpace>::CIE_Info*);libunwind::LocalAddressSpace::getEncodedP(unsigned long&, unsigned long, unsigned char, unsigned long) 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;malloc_default;prof_tctx_create;prof_backtrace;prof_backtrace_impl;unw_backtrace;unw_init_local;libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_arm64>::setInfoBasedOnIPRegister(bool);libunwind::EHHeaderParser<libunwind::LocalAddressSpace>::findFDE(libunwind::LocalAddressSpace&, unsigned long, unsigned long, unsigned int, libunwind::CFI_Parser<libunwind::LocalAddressSpace>::FDE_Info*, libunwind::CFI_Parser<libunwind::LocalAddressSpace>::CIE_Info*);libunwind::LocalAddressSpace::getEncodedP(unsigned long&, unsigned long, unsigned char, unsigned long) 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;malloc_default;te_event_trigger;tcache_event;tcache_bin_flush_small 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_freeDCtx;free_default;te_event_trigger;tcache_event;tcache_bin_flush_small;0x0000ffffb3a71508;0x0000ffffb3b1fb25 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);Poco::Net::SecureSocketImpl::getMaxTimeoutOrLimit();pthread_mutex_unlock 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);Poco::Net::SecureSocketImpl::getMaxTimeoutOrLimit();pthread_mutex_unlock;0x0000ffffb3a7201d 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;0x0000ffffb3a87ec9 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;0x0000ffffb3a87ed5 2
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;0x0000ffffb3a87ecd 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;0x0000ffffb3a87ec5 3
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;SSL_in_init 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);Poco::Net::RemainingTimeCounter::~RemainingTimeCounter() 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);Poco::Net::SecureSocketImpl::mustRetry(int, Poco::Timespan&);std::__1::recursive_mutex::lock();pthread_mutex_lock;0x0000ffffb3a705f5 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);Poco::Net::SecureSocketImpl::mustRetry(int, Poco::Timespan&) 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);std::__1::recursive_mutex::lock();pthread_mutex_lock 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();ProfileEvents::increment(StrongTypedef<unsigned long, ProfileEvents::EventTag>, unsigned long);DB::CurrentThread::getProfileEvents() 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::validateChecksum(char*, unsigned long, CityHash_v1_0_2::uint128, bool);CityHash_v1_0_2::CityHash128WithSeed(char const*, unsigned long, CityHash_v1_0_2::uint128) 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::ReadBuffer::readStrict(char*, unsigned long);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;0x0000ffffb3a87ec9 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);void DB::PODArrayBase<1ul, 4096ul, Allocator<false, false>, 0ul, 0ul>::resize<>(unsigned long);Allocator<false, false>::realloc(void*, unsigned long, unsigned long, unsigned long);do_rallocx;prof_tctx_create;prof_backtrace;prof_backtrace_impl;unw_backtrace;libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_arm64>::step(bool);libunwind::DwarfInstructions<libunwind::LocalAddressSpace, libunwind::Registers_arm64>::stepWithDwarf(libunwind::LocalAddressSpace&, unsigned long, unsigned long, libunwind::Registers_arm64&, bool&, bool) 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;malloc_default;prof_tctx_create;prof_backtrace;prof_backtrace_impl;unw_backtrace;libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_arm64>::step(bool);libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_arm64>::setInfoBasedOnIPRegister(bool);libunwind::EHHeaderParser<libunwind::LocalAddressSpace>::findFDE(libunwind::LocalAddressSpace&, unsigned long, unsigned long, unsigned int, libunwind::CFI_Parser<libunwind::LocalAddressSpace>::FDE_Info*, libunwind::CFI_Parser<libunwind::LocalAddressSpace>::CIE_Info*);libunwind::LocalAddressSpace::getEncodedP(unsigned long&, unsigned long, unsigned char, unsigned long) 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;malloc_default;prof_tctx_create;prof_backtrace;prof_backtrace_impl;unw_backtrace;unw_init_local;libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_arm64>::setInfoBasedOnIPRegister(bool);libunwind::CFI_Parser<libunwind::LocalAddressSpace>::parseFDEInstructions(libunwind::LocalAddressSpace&, libunwind::CFI_Parser<libunwind::LocalAddressSpace>::FDE_Info const&, libunwind::CFI_Parser<libunwind::LocalAddressSpace>::CIE_Info const&, unsigned long, int, libunwind::CFI_Parser<libunwind::LocalAddressSpace>::PrologInfo*) 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 3
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 13
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 2
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences;0x0000ffffb3a87ecd 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 3
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 2
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 2
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 2
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 2
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 3
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 6
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 2
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 2
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 4
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 2
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 2
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 3
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 3
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 3
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 2
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 2
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 2
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 5
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 2
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 2
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 2
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 2
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decodeLiteralsBlock;HUF_decompress4X2_usingDTable_internal 4
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decodeLiteralsBlock;HUF_decompress4X2_usingDTable_internal 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decodeLiteralsBlock;HUF_decompress4X1_usingDTable_internal 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decodeLiteralsBlock;HUF_decompress4X2_usingDTable_internal 3
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decodeLiteralsBlock;HUF_decompress4X2_usingDTable_internal 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decodeLiteralsBlock;HUF_decompress4X_hufOnly_wksp;HUF_readDTableX2_wksp 2
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decodeLiteralsBlock;HUF_decompress4X_hufOnly_wksp;HUF_readDTableX2_wksp 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decodeLiteralsBlock;HUF_decompress4X_hufOnly_wksp;HUF_readDTableX2_wksp 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decodeLiteralsBlock;HUF_decompress4X_hufOnly_wksp;HUF_readDTableX2_wksp 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decodeLiteralsBlock;HUF_decompress4X_hufOnly_wksp;HUF_readDTableX2_wksp 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decodeLiteralsBlock;HUF_decompress4X2_usingDTable_internal 4
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decodeLiteralsBlock;HUF_decompress4X2_usingDTable_internal 4
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decodeLiteralsBlock;HUF_decompress4X1_usingDTable_internal 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decodeLiteralsBlock;HUF_decompress4X2_usingDTable_internal 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decodeLiteralsBlock;HUF_decompress4X2_usingDTable_internal 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decodeLiteralsBlock;HUF_decompress4X2_usingDTable_internal 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decodeLiteralsBlock;HUF_decompress4X2_usingDTable_internal 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decodeLiteralsBlock;HUF_decompress4X2_usingDTable_internal 2
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decodeLiteralsBlock;HUF_decompress4X2_usingDTable_internal 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decodeLiteralsBlock;HUF_decompress4X2_usingDTable_internal 2
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decodeLiteralsBlock;HUF_decompress4X2_usingDTable_internal 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decodeLiteralsBlock;HUF_decompress4X2_usingDTable_internal 4
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decodeLiteralsBlock;HUF_decompress4X2_usingDTable_internal 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decodeLiteralsBlock;HUF_decompress4X2_usingDTable_internal 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decodeLiteralsBlock;HUF_decompress4X2_usingDTable_internal 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decodeLiteralsBlock;HUF_decompress4X2_usingDTable_internal 7
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decodeLiteralsBlock;HUF_decompress4X_hufOnly_wksp;HUF_readDTableX1_wksp 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decodeLiteralsBlock;HUF_decompress4X_hufOnly_wksp;HUF_readDTableX1_wksp;HUF_readStats_wksp;FSE_decompress_wksp_bmi2 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decodeLiteralsBlock;HUF_decompress4X_hufOnly_wksp;HUF_readDTableX1_wksp 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decodeLiteralsBlock;HUF_decompress4X2_usingDTable_internal 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decodeLiteralsBlock;HUF_decompress4X2_usingDTable_internal 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decodeLiteralsBlock;HUF_decompress4X2_usingDTable_internal 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decodeLiteralsBlock;HUF_decompress4X2_usingDTable_internal 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decodeLiteralsBlock;HUF_decompress4X2_usingDTable_internal 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decodeLiteralsBlock;HUF_decompress4X1_usingDTable_internal 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decodeLiteralsBlock 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decodeSeqHeaders;ZSTD_buildSeqTable;FSE_readNCount_bmi2;0x0000ffffb3a89045 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decodeSeqHeaders;ZSTD_buildSeqTable;ZSTD_buildFSETable 2
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decodeSeqHeaders;ZSTD_buildSeqTable;ZSTD_buildFSETable 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decodeSeqHeaders;ZSTD_buildSeqTable;ZSTD_buildFSETable 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decodeSeqHeaders;ZSTD_buildSeqTable;ZSTD_buildFSETable 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::decompress(DB::BufferBase::Buffer&, unsigned long, unsigned long);DB::readHeaderAndGetCodec(char const*, unsigned long, std::__1::shared_ptr<DB::ICompressionCodec>&, bool, bool) 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::validateChecksum(char*, unsigned long, CityHash_v1_0_2::uint128, bool);CityHash_v1_0_2::CityHash128WithSeed(char const*, unsigned long, CityHash_v1_0_2::uint128) 2
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::validateChecksum(char*, unsigned long, CityHash_v1_0_2::uint128, bool);CityHash_v1_0_2::CityHash128WithSeed(char const*, unsigned long, CityHash_v1_0_2::uint128) 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::validateChecksum(char*, unsigned long, CityHash_v1_0_2::uint128, bool);CityHash_v1_0_2::CityHash128WithSeed(char const*, unsigned long, CityHash_v1_0_2::uint128) 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::validateChecksum(char*, unsigned long, CityHash_v1_0_2::uint128, bool);CityHash_v1_0_2::CityHash128WithSeed(char const*, unsigned long, CityHash_v1_0_2::uint128) 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;0x0000ffffb3a87ecd 6
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;0x0000ffffb3a87ec5 3
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;0x0000ffffb3a87ee9 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;0x0000ffffb3a87e9d 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;0x0000ffffb3a87ec9 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;0x0000ffffb3a87edd 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls13_cipher 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;EVP_MD_CTX_get0_md 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;ossl_tls_handle_rlayer_return 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_release_record 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl_read_internal;ossl_statem_check_finish_init 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);Poco::Net::SecureSocketImpl::mustRetry(int, Poco::Timespan&) 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);Poco::Net::SecureSocketImpl::mustRetry(int, Poco::Timespan&);std::__1::recursive_mutex::lock();pthread_mutex_lock;0x0000ffffb3a70605 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);Poco::Net::SecureSocketImpl::mustRetry(int, Poco::Timespan&);std::__1::recursive_mutex::lock();pthread_mutex_lock 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);std::__1::recursive_mutex::lock();pthread_mutex_lock;0x0000ffffb3a706cd 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);Poco::Net::SecureSocketImpl::getMaxTimeoutOrLimit();Poco::Timespan::Timespan(long) 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureStreamSocketImpl::receiveBytes(void*, int, int) 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);Poco::Timestamp::update() 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);Poco::Net::RemainingTimeCounter::~RemainingTimeCounter();Poco::Timestamp::update();clock_gettime 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int) 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long) 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long) 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);operator new(unsigned long);CurrentMemoryTracker::allocImpl(long, bool) 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);operator delete(void*, unsigned long) 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::ReadBuffer::readStrict(char*, unsigned long);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;0x0000ffffb3a87ec9 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::Memory<Allocator<false, false>>::alloc(unsigned long);Allocator<false, false>::alloc(unsigned long, unsigned long);malloc_default;prof_tctx_create;prof_backtrace;prof_backtrace_impl;unw_backtrace;libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_arm64>::step(bool);libunwind::DwarfInstructions<libunwind::LocalAddressSpace, libunwind::Registers_arm64>::stepWithDwarf(libunwind::LocalAddressSpace&, unsigned long, unsigned long, libunwind::Registers_arm64&, bool&, bool) 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::Memory<Allocator<false, false>>::alloc(unsigned long);Allocator<false, false>::alloc(unsigned long, unsigned long);malloc_default;te_event_trigger;tcache_event;tcache_bin_flush_small;0x0000ffffb3a714e1 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);std::__1::__hash_const_iterator<std::__1::__hash_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, void*>*> std::__1::__hash_table<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::find<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&) const 4
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);std::__1::__hash_const_iterator<std::__1::__hash_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, void*>*> std::__1::__hash_table<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::find<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&) const 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);std::__1::__hash_const_iterator<std::__1::__hash_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, void*>*> std::__1::__hash_table<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::find<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&) const 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::ReadBuffer::readStrict(char*, unsigned long);0x0000ffffb3a87de5 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::readStringBinary(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&, DB::ReadBuffer&, unsigned long) 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::ReadBuffer::readStrict(char*, unsigned long) 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::readStringBinary(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&, DB::ReadBuffer&, unsigned long) 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::readStringBinary(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&, DB::ReadBuffer&, unsigned long);std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::append(unsigned long, char) 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer* std::__1::__function::__policy_invoker<DB::ReadBuffer* (DB::ISerialization::SubstreamPath const&)>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*)::$_0, DB::ReadBuffer* (DB::ISerialization::SubstreamPath const&)>>(std::__1::__function::__policy_storage const*, DB::ISerialization::SubstreamPath const&);DB::MergeTreeReaderStream::getDataBuffer() 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer* std::__1::__function::__policy_invoker<DB::ReadBuffer* (DB::ISerialization::SubstreamPath const&)>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*)::$_0, DB::ReadBuffer* (DB::ISerialization::SubstreamPath const&)>>(std::__1::__function::__policy_storage const*, DB::ISerialization::SubstreamPath const&);DB::MergeTreeReaderStream::seekToMarkAndColumn(unsigned long, unsigned long);DB::CompressedReadBufferFromFile::seek(unsigned long, unsigned long);DB::AsynchronousBoundedReadBuffer::seek(long, int);DB::AsynchronousBoundedReadBuffer::nextImpl();std::__1::__assoc_state<DB::IAsynchronousReader::Result>::move() 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer* std::__1::__function::__policy_invoker<DB::ReadBuffer* (DB::ISerialization::SubstreamPath const&)>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*)::$_0, DB::ReadBuffer* (DB::ISerialization::SubstreamPath const&)>>(std::__1::__function::__policy_storage const*, DB::ISerialization::SubstreamPath const&);DB::MergeTreeReaderStream::seekToMarkAndColumn(unsigned long, unsigned long);DB::CompressedReadBufferFromFile::seek(unsigned long, unsigned long);DB::AsynchronousBoundedReadBuffer::seek(long, int);DB::AsynchronousBoundedReadBuffer::nextImpl();std::__1::__assoc_state<DB::IAsynchronousReader::Result>::move();std::__1::__assoc_sub_state::__sub_wait(std::__1::unique_lock<std::__1::mutex>&);std::__1::condition_variable::wait(std::__1::unique_lock<std::__1::mutex>&);0x0000ffffb3a6c8ec;0x0000ffffb3a69de9 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer* std::__1::__function::__policy_invoker<DB::ReadBuffer* (DB::ISerialization::SubstreamPath const&)>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*)::$_0, DB::ReadBuffer* (DB::ISerialization::SubstreamPath const&)>>(std::__1::__function::__policy_storage const*, DB::ISerialization::SubstreamPath const&);DB::MergeTreeReaderStream::seekToMarkAndColumn(unsigned long, unsigned long);DB::CompressedReadBufferFromFile::seek(unsigned long, unsigned long);DB::AsynchronousBoundedReadBuffer::seek(long, int);DB::AsynchronousBoundedReadBuffer::nextImpl() 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer* std::__1::__function::__policy_invoker<DB::ReadBuffer* (DB::ISerialization::SubstreamPath const&)>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*)::$_0, DB::ReadBuffer* (DB::ISerialization::SubstreamPath const&)>>(std::__1::__function::__policy_storage const*, DB::ISerialization::SubstreamPath const&);DB::MergeTreeReaderStream::seekToMarkAndColumn(unsigned long, unsigned long);DB::CompressedReadBufferFromFile::seek(unsigned long, unsigned long);DB::AsynchronousBoundedReadBuffer::seek(long, int);DB::AsynchronousBoundedReadBuffer::nextImpl();ProfileEvents::increment(StrongTypedef<unsigned long, ProfileEvents::EventTag>, unsigned long) 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer* std::__1::__function::__policy_invoker<DB::ReadBuffer* (DB::ISerialization::SubstreamPath const&)>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*)::$_0, DB::ReadBuffer* (DB::ISerialization::SubstreamPath const&)>>(std::__1::__function::__policy_storage const*, DB::ISerialization::SubstreamPath const&);DB::MergeTreeReaderStream::seekToMarkAndColumn(unsigned long, unsigned long);DB::CompressedReadBufferFromFile::seek(unsigned long, unsigned long);DB::AsynchronousBoundedReadBuffer::seek(long, int) 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);void std::__1::__destroy_at[abi:ne190107]<DB::ISerialization::Substream, 0>(DB::ISerialization::Substream*) 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode) 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::ReadBuffer* std::__1::__function::__policy_invoker<DB::ReadBuffer* (DB::ISerialization::SubstreamPath const&)>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*)::$_0, DB::ReadBuffer* (DB::ISerialization::SubstreamPath const&)>>(std::__1::__function::__policy_storage const*, DB::ISerialization::SubstreamPath const&);DB::MergeTreeReaderStream::seekToMarkAndColumn(unsigned long, unsigned long);DB::CompressedReadBufferFromFile::seek(unsigned long, unsigned long);DB::AsynchronousBoundedReadBuffer::seek(long, int);DB::ReadBufferFromRemoteFSGather::seek(long, int);DB::ReadBufferFromRemoteFSGather::reset();DB::ReadBufferFromS3::~ReadBufferFromS3();DB::ReadBufferFromS3::~ReadBufferFromS3();DB::S3::ReadBufferFromGetObjectResult::~ReadBufferFromGetObjectResult();Aws::Utils::Stream::ResponseStream::~ResponseStream();DB::SessionAwareIOStream<std::__1::shared_ptr<Poco::Net::HTTPClientSession>>::~SessionAwareIOStream();Poco::Net::HTTPSClientSession::~HTTPSClientSession();Poco::Net::HTTPClientSession::~HTTPClientSession();Poco::Net::HTTPSession::~HTTPSession();Poco::Net::SecureSocketImpl::close();Poco::Net::SocketImpl::close();0x0000ffffb3ac85bd 11
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::ReadBuffer* std::__1::__function::__policy_invoker<DB::ReadBuffer* (DB::ISerialization::SubstreamPath const&)>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*)::$_0, DB::ReadBuffer* (DB::ISerialization::SubstreamPath const&)>>(std::__1::__function::__policy_storage const*, DB::ISerialization::SubstreamPath const&);DB::MergeTreeReaderStream::seekToMarkAndColumn(unsigned long, unsigned long);DB::CompressedReadBufferFromFile::seek(unsigned long, unsigned long);DB::AsynchronousBoundedReadBuffer::seek(long, int);DB::ReadBufferFromRemoteFSGather::seek(long, int);DB::ReadBufferFromRemoteFSGather::reset();DB::ReadBufferFromS3::~ReadBufferFromS3();DB::ReadBufferFromS3::~ReadBufferFromS3();DB::S3::ReadBufferFromGetObjectResult::~ReadBufferFromGetObjectResult();Aws::Utils::Stream::ResponseStream::~ResponseStream();DB::SessionAwareIOStream<std::__1::shared_ptr<Poco::Net::HTTPClientSession>>::~SessionAwareIOStream();Poco::Net::HTTPSClientSession::~HTTPSClientSession();Poco::Net::HTTPClientSession::~HTTPClientSession();Poco::Net::HTTPSession::~HTTPSession();Poco::Net::SecureSocketImpl::close();Poco::Net::SecureSocketImpl::shutdown();Poco::Net::SocketImpl::shutdown();0x0000ffffb3ad828d 7
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::ReadBuffer* std::__1::__function::__policy_invoker<DB::ReadBuffer* (DB::ISerialization::SubstreamPath const&)>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*)::$_0, DB::ReadBuffer* (DB::ISerialization::SubstreamPath const&)>>(std::__1::__function::__policy_storage const*, DB::ISerialization::SubstreamPath const&);DB::MergeTreeReaderStream::seekToMarkAndColumn(unsigned long, unsigned long);DB::CompressedReadBufferFromFile::seek(unsigned long, unsigned long);DB::AsynchronousBoundedReadBuffer::seek(long, int);DB::ReadBufferFromRemoteFSGather::seek(long, int);DB::ReadBufferFromRemoteFSGather::reset();DB::ReadBufferFromS3::~ReadBufferFromS3();DB::ReadBufferFromS3::~ReadBufferFromS3();DB::S3::ReadBufferFromGetObjectResult::~ReadBufferFromGetObjectResult();Aws::S3::Model::GetObjectResult::~GetObjectResult() 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::ReadBuffer* std::__1::__function::__policy_invoker<DB::ReadBuffer* (DB::ISerialization::SubstreamPath const&)>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*)::$_0, DB::ReadBuffer* (DB::ISerialization::SubstreamPath const&)>>(std::__1::__function::__policy_storage const*, DB::ISerialization::SubstreamPath const&);DB::ISerialization::getFileNameForStream(DB::NameAndTypePair const&, DB::ISerialization::SubstreamPath const&);DB::ISerialization::getFileNameForStream(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, DB::ISerialization::SubstreamPath const&);DB::Nested::extractTableName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);DB::Nested::splitName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, bool);0x0000ffffb3a89711 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::PODArray<unsigned long, 4096ul, Allocator<false, false>, 63ul, 64ul>::resize_fill(unsigned long);Allocator<false, false>::realloc(void*, unsigned long, unsigned long, unsigned long);do_rallocx;prof_tctx_create;prof_backtrace;prof_backtrace_impl;unw_backtrace;libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_arm64>::step(bool);libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_arm64>::setInfoBasedOnIPRegister(bool);libunwind::EHHeaderParser<libunwind::LocalAddressSpace>::findFDE(libunwind::LocalAddressSpace&, unsigned long, unsigned long, unsigned int, libunwind::CFI_Parser<libunwind::LocalAddressSpace>::FDE_Info*, libunwind::CFI_Parser<libunwind::LocalAddressSpace>::CIE_Info*);libunwind::LocalAddressSpace::getEncodedP(unsigned long&, unsigned long, unsigned char, unsigned long) 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::PODArray<unsigned long, 4096ul, Allocator<false, false>, 63ul, 64ul>::resize_fill(unsigned long);0x0000ffffb3a890d1 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::AsynchronousBoundedReadBuffer::prefetch(Priority);DB::AsynchronousBoundedReadBuffer::readAsync(char*, unsigned long, Priority);DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request);std::__1::future<DB::IAsynchronousReader::Result> std::__1::__function::__policy_invoker<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority), std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)>>(std::__1::__function::__policy_storage const*, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority&&);ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::scheduleOrThrowOnError(std::__1::function<void ()>, Priority);void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool);0x0000ffffb3a6c019 5
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::AsynchronousBoundedReadBuffer::prefetch(Priority);DB::AsynchronousBoundedReadBuffer::readAsync(char*, unsigned long, Priority);DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request);std::__1::future<DB::IAsynchronousReader::Result> std::__1::__function::__policy_invoker<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority), std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)>>(std::__1::__function::__policy_storage const*, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority&&);ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::scheduleOrThrowOnError(std::__1::function<void ()>, Priority);void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool) 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::AsynchronousBoundedReadBuffer::prefetch(Priority);DB::AsynchronousBoundedReadBuffer::readAsync(char*, unsigned long, Priority);DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request);std::__1::future<DB::IAsynchronousReader::Result> std::__1::__function::__policy_invoker<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority), std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)>>(std::__1::__function::__policy_storage const*, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority&&);std::__1::mutex::lock();pthread_mutex_lock;0x0000ffffb3a70640;0x0000ffffb3b1fb25 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::AsynchronousBoundedReadBuffer::prefetch(Priority);DB::AsynchronousBoundedReadBuffer::readAsync(char*, unsigned long, Priority) 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::AsynchronousBoundedReadBuffer::prefetch(Priority);DB::Memory<Allocator<false, false>>::alloc(unsigned long);Allocator<false, false>::alloc(unsigned long, unsigned long);malloc_default;prof_tctx_create;prof_backtrace;prof_backtrace_impl;unw_backtrace;libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_arm64>::step(bool);libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_arm64>::setInfoBasedOnIPRegister(bool);libunwind::EHHeaderParser<libunwind::LocalAddressSpace>::findFDE(libunwind::LocalAddressSpace&, unsigned long, unsigned long, unsigned int, libunwind::CFI_Parser<libunwind::LocalAddressSpace>::FDE_Info*, libunwind::CFI_Parser<libunwind::LocalAddressSpace>::CIE_Info*);libunwind::CFI_Parser<libunwind::LocalAddressSpace>::decodeFDE(libunwind::LocalAddressSpace&, unsigned long, libunwind::CFI_Parser<libunwind::LocalAddressSpace>::FDE_Info*, libunwind::CFI_Parser<libunwind::LocalAddressSpace>::CIE_Info*, bool) 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::AsynchronousBoundedReadBuffer::prefetch(Priority);DB::Memory<Allocator<false, false>>::alloc(unsigned long);Allocator<false, false>::alloc(unsigned long, unsigned long);malloc_default;prof_malloc_sample_object;large_prof_info_set;nstime_prof_init_update 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::seekToMarkAndDeserializePrefix(unsigned long, unsigned long, bool);DB::MergeTreeReaderCompactMultiBuffer::getStream(DB::NameAndTypePair const&) 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::seekToMarkAndDeserializePrefix(unsigned long, unsigned long, bool);std::__1::__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>>, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>>>>::clear();DB::DeserializeBinaryBulkStateObjectDynamicPath::~DeserializeBinaryBulkStateObjectDynamicPath();std::__1::__shared_ptr_emplace<DB::DeserializeBinaryBulkStateObjectSharedDataPath, std::__1::allocator<DB::DeserializeBinaryBulkStateObjectSharedDataPath>>::__on_zero_shared() 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::ICompressionCodec::decompress(char const*, unsigned int, char*) const;DB::CompressionCodecZSTD::doDecompressData(char const*, unsigned int, char*, unsigned int) const;ZSTD_decompress;ZSTD_decompressMultiFrame;ZSTD_decompressBlock_internal;ZSTD_decompressSequences 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeReadersChain::executeActionsBeforePrewhere(DB::MergeTreeRangeReader::ReadResult&, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&, DB::MergeTreeRangeReader&, DB::Block&, DB::Block const&, unsigned long) const;DB::IMergeTreeReader::fillVirtualColumns(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&, unsigned long) const 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeSelectProcessor::initializeReadersChain();DB::MergeTreeReadTask::initializeReadersChain(DB::PrewhereExprInfo const&, DB::ReadStepsPerformanceCounters&);DB::MergeTreeReadTask::createReadersChain(DB::MergeTreeReadTask::Readers const&, DB::PrewhereExprInfo const&, DB::ReadStepsPerformanceCounters&);DB::MergeTreeRangeReader* std::__1::construct_at[abi:ne190107]<DB::MergeTreeRangeReader, DB::IMergeTreeReader*, DB::Block const, std::nullptr_t, std::__1::shared_ptr<DB::ReadStepPerformanceCounters>, bool, DB::MergeTreeRangeReader*>(DB::MergeTreeRangeReader*, DB::IMergeTreeReader*&&, DB::Block const&&, std::nullptr_t&&, std::__1::shared_ptr<DB::ReadStepPerformanceCounters>&&, bool&&);DB::MergeTreeRangeReader::MergeTreeRangeReader(DB::IMergeTreeReader*, DB::Block, DB::PrewhereExprStep const*, std::__1::shared_ptr<DB::ReadStepPerformanceCounters>, bool);DB::DataTypeDynamic::createColumn() const;DB::ColumnDynamic::ColumnDynamic(unsigned long);std::__1::shared_ptr<DB::DataTypeVariant> std::__1::allocate_shared[abi:ne190107]<DB::DataTypeVariant, std::__1::allocator<DB::DataTypeVariant>, std::__1::vector<std::__1::shared_ptr<DB::IDataType const>, std::__1::allocator<std::__1::shared_ptr<DB::IDataType const>>>, 0>(std::__1::allocator<DB::DataTypeVariant> const&, std::__1::vector<std::__1::shared_ptr<DB::IDataType const>, std::__1::allocator<std::__1::shared_ptr<DB::IDataType const>>>&&);DB::DataTypeVariant::DataTypeVariant(std::__1::vector<std::__1::shared_ptr<DB::IDataType const>, std::__1::allocator<std::__1::shared_ptr<DB::IDataType const>>> const&);DB::IDataType::getName() const 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeSelectProcessor::initializeReadersChain();DB::MergeTreeReadTask::initializeReadersChain(DB::PrewhereExprInfo const&, DB::ReadStepsPerformanceCounters&);DB::MergeTreeReadTask::createReadersChain(DB::MergeTreeReadTask::Readers const&, DB::PrewhereExprInfo const&, DB::ReadStepsPerformanceCounters&);DB::MergeTreeRangeReader* std::__1::construct_at[abi:ne190107]<DB::MergeTreeRangeReader, DB::IMergeTreeReader*, DB::Block const, std::nullptr_t, std::__1::shared_ptr<DB::ReadStepPerformanceCounters>, bool, DB::MergeTreeRangeReader*>(DB::MergeTreeRangeReader*, DB::IMergeTreeReader*&&, DB::Block const&&, std::nullptr_t&&, std::__1::shared_ptr<DB::ReadStepPerformanceCounters>&&, bool&&);DB::MergeTreeRangeReader::MergeTreeRangeReader(DB::IMergeTreeReader*, DB::Block, DB::PrewhereExprStep const*, std::__1::shared_ptr<DB::ReadStepPerformanceCounters>, bool);DB::DataTypeDynamic::createColumn() const;DB::ColumnDynamic::ColumnDynamic(unsigned long);DB::ColumnDynamic::setVariantType(std::__1::shared_ptr<DB::IDataType const> const&);DB::DataTypeVariant::createColumn() const;std::__1::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn>>>::reserve(unsigned long) 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ReadProgressCallback::onProgress(unsigned long, unsigned long, std::__1::list<DB::StorageLimits, std::__1::allocator<DB::StorageLimits>> const&);DB::ThreadStatus::updatePerformanceCountersIfNeeded();DB::ThreadStatus::updatePerformanceCounters();DB::TasksStatsCounters::updateCounters(ProfileEvents::Counters&);DB::ProcfsMetricsProvider::getTaskStats(taskstats&) const;DB::ProcfsMetricsProvider::readParseAndSetThreadBlkIOStat(taskstats&, char*, unsigned long) const;DB::(anonymous namespace)::readFromFD(int, char const*, char*, unsigned long);0x0000ffffb3ac5ea1 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutingGraph::updateNode(unsigned long, std::__1::queue<DB::ExecutingGraph::Node*, std::__1::deque<DB::ExecutingGraph::Node*, AllocatorWithMemoryTracking<DB::ExecutingGraph::Node*>>>&, std::__1::queue<DB::ExecutingGraph::Node*, std::__1::deque<DB::ExecutingGraph::Node*, AllocatorWithMemoryTracking<DB::ExecutingGraph::Node*>>>&);std::__1::deque<DB::ExecutingGraph::Node*, AllocatorWithMemoryTracking<DB::ExecutingGraph::Node*>>::__add_back_capacity();std::__1::__split_buffer<DB::ExecutingGraph::Node**, AllocatorWithMemoryTracking<DB::ExecutingGraph::Node**>&>::push_back(DB::ExecutingGraph::Node**&&) 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();std::__1::packaged_task<DB::IAsynchronousReader::Result ()>::operator()();std::__1::__packaged_task_func<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'(), std::__1::allocator<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'()>, DB::IAsynchronousReader::Result ()>::operator()();DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls_default_read_n;BIO_read;bio_read_intern;bread_conv;sock_read;0x0000ffffb3ac7d85 50
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();std::__1::packaged_task<DB::IAsynchronousReader::Result ()>::operator()();std::__1::__packaged_task_func<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'(), std::__1::allocator<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'()>, DB::IAsynchronousReader::Result ()>::operator()();DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls_default_read_n;BIO_read;bio_read_intern;bread_conv;sock_read;0x0000ffffb3ac7d85 13
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();std::__1::packaged_task<DB::IAsynchronousReader::Result ()>::operator()();std::__1::__packaged_task_func<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'(), std::__1::allocator<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'()>, DB::IAsynchronousReader::Result ()>::operator()();DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls13_cipher;WPACKET_init_static_len;CRYPTO_zalloc 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();std::__1::packaged_task<DB::IAsynchronousReader::Result ()>::operator()();std::__1::__packaged_task_func<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'(), std::__1::allocator<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'()>, DB::IAsynchronousReader::Result ()>::operator()();DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls13_cipher;EVP_DecryptUpdate;ossl_gcm_stream_update;gcm_cipher_internal;generic_aes_gcm_cipher_update;armv8_aes_gcm_decrypt 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();std::__1::packaged_task<DB::IAsynchronousReader::Result ()>::operator()();std::__1::__packaged_task_func<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'(), std::__1::allocator<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'()>, DB::IAsynchronousReader::Result ()>::operator()();DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls13_cipher;EVP_DecryptUpdate;ossl_gcm_stream_update;gcm_cipher_internal;generic_aes_gcm_cipher_update;CRYPTO_gcm128_decrypt_ctr32 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();std::__1::packaged_task<DB::IAsynchronousReader::Result ()>::operator()();std::__1::__packaged_task_func<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'(), std::__1::allocator<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'()>, DB::IAsynchronousReader::Result ()>::operator()();DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();std::__1::packaged_task<DB::IAsynchronousReader::Result ()>::operator()();std::__1::__packaged_task_func<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'(), std::__1::allocator<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'()>, DB::IAsynchronousReader::Result ()>::operator()();DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();std::__1::packaged_task<DB::IAsynchronousReader::Result ()>::operator()();std::__1::__packaged_task_func<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'(), std::__1::allocator<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'()>, DB::IAsynchronousReader::Result ()>::operator()();DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;0x0000ffffb3a87ec9 3
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();std::__1::packaged_task<DB::IAsynchronousReader::Result ()>::operator()();std::__1::__packaged_task_func<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'(), std::__1::allocator<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'()>, DB::IAsynchronousReader::Result ()>::operator()();DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;0x0000ffffb3a87ec1 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();std::__1::packaged_task<DB::IAsynchronousReader::Result ()>::operator()();std::__1::__packaged_task_func<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'(), std::__1::allocator<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'()>, DB::IAsynchronousReader::Result ()>::operator()();DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;0x0000ffffb3a87ed5 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();std::__1::packaged_task<DB::IAsynchronousReader::Result ()>::operator()();std::__1::__packaged_task_func<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'(), std::__1::allocator<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'()>, DB::IAsynchronousReader::Result ()>::operator()();DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;0x0000ffffb3a87ecd 2
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();std::__1::packaged_task<DB::IAsynchronousReader::Result ()>::operator()();std::__1::__packaged_task_func<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'(), std::__1::allocator<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'()>, DB::IAsynchronousReader::Result ()>::operator()();DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;0x0000ffffb3a87ed9 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();std::__1::packaged_task<DB::IAsynchronousReader::Result ()>::operator()();std::__1::__packaged_task_func<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'(), std::__1::allocator<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'()>, DB::IAsynchronousReader::Result ()>::operator()();DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_processed_read_pending 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();std::__1::packaged_task<DB::IAsynchronousReader::Result ()>::operator()();std::__1::__packaged_task_func<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'(), std::__1::allocator<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'()>, DB::IAsynchronousReader::Result ()>::operator()();DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl_read_internal 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();std::__1::packaged_task<DB::IAsynchronousReader::Result ()>::operator()();std::__1::__packaged_task_func<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'(), std::__1::allocator<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'()>, DB::IAsynchronousReader::Result ()>::operator()();DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);Poco::Net::SecureSocketImpl::mustRetry(int, Poco::Timespan&) 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();std::__1::packaged_task<DB::IAsynchronousReader::Result ()>::operator()();std::__1::__packaged_task_func<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'(), std::__1::allocator<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'()>, DB::IAsynchronousReader::Result ()>::operator()();DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int) 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();std::__1::packaged_task<DB::IAsynchronousReader::Result ()>::operator()();std::__1::__packaged_task_func<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'(), std::__1::allocator<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'()>, DB::IAsynchronousReader::Result ()>::operator()();DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromS3::initialize(unsigned long);DB::ReadBufferFromS3::sendRequest(unsigned long, unsigned long, std::__1::optional<unsigned long>) const;DB::S3::Client::GetObject(DB::S3::ExtendedRequest<Aws::S3::Model::GetObjectRequest>&) const;Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const;Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> smithy::components::tracing::TracingUtils::MakeCallWithTiming<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error>>(std::__1::function<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> std::__1::__function::__policy_invoker<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const::$_0, Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>>(std::__1::__function::__policy_storage const*);Aws::Client::AWSClient::MakeRequestWithUnparsedResponse(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptExhaustively(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptOneRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::AmazonWebServiceRequest const&, char const*, char const*, char const*) const;std::__1::shared_ptr<Aws::Http::HttpResponse> smithy::components::tracing::TracingUtils::MakeCallWithTiming<std::__1::shared_ptr<Aws::Http::HttpResponse>>(std::__1::function<std::__1::shared_ptr<Aws::Http::HttpResponse> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);DB::S3::PocoHTTPClient::MakeRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::S3::PocoHTTPClient::makeRequestInternalImpl(Aws::Http::HttpRequest&, std::__1::shared_ptr<DB::S3::PocoHTTPResponse>&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::makeHTTPSession(DB::HTTPConnectionGroupType, Poco::URI const&, DB::ConnectionTimeouts const&, DB::ProxyConfiguration const&, unsigned long*);DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::getConnection(DB::ConnectionTimeouts const&, unsigned long*);DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::prepareNewConnection(DB::ConnectionTimeouts const&, unsigned long*);Poco::Net::HTTPClientSession::reconnect(unsigned long*);Poco::Net::HTTPSClientSession::connect(Poco::Net::SocketAddress const&);Poco::Net::HTTPSession::connect(Poco::Net::SocketAddress const&);Poco::Net::SecureStreamSocketImpl::connect(Poco::Net::SocketAddress const&, Poco::Timespan const&);Poco::Net::SecureSocketImpl::connect(Poco::Net::SocketAddress const&, Poco::Timespan const&, bool);Poco::Net::SocketImpl::connect(Poco::Net::SocketAddress const&, Poco::Timespan const&);0x0000ffffb3ad7b59 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();std::__1::packaged_task<DB::IAsynchronousReader::Result ()>::operator()();std::__1::__packaged_task_func<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'(), std::__1::allocator<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'()>, DB::IAsynchronousReader::Result ()>::operator()();DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromS3::initialize(unsigned long);DB::ReadBufferFromS3::sendRequest(unsigned long, unsigned long, std::__1::optional<unsigned long>) const;DB::S3::Client::GetObject(DB::S3::ExtendedRequest<Aws::S3::Model::GetObjectRequest>&) const;Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const;Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> smithy::components::tracing::TracingUtils::MakeCallWithTiming<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error>>(std::__1::function<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> std::__1::__function::__policy_invoker<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const::$_0, Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>>(std::__1::__function::__policy_storage const*);Aws::Client::AWSClient::MakeRequestWithUnparsedResponse(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptExhaustively(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptOneRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::AmazonWebServiceRequest const&, char const*, char const*, char const*) const;std::__1::shared_ptr<Aws::Http::HttpResponse> smithy::components::tracing::TracingUtils::MakeCallWithTiming<std::__1::shared_ptr<Aws::Http::HttpResponse>>(std::__1::function<std::__1::shared_ptr<Aws::Http::HttpResponse> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);DB::S3::PocoHTTPClient::MakeRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::S3::PocoHTTPClient::makeRequestInternalImpl(Aws::Http::HttpRequest&, std::__1::shared_ptr<DB::S3::PocoHTTPResponse>&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::makeHTTPSession(DB::HTTPConnectionGroupType, Poco::URI const&, DB::ConnectionTimeouts const&, DB::ProxyConfiguration const&, unsigned long*);DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::getConnection(DB::ConnectionTimeouts const&, unsigned long*);DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::prepareNewConnection(DB::ConnectionTimeouts const&, unsigned long*);Poco::Net::HTTPClientSession::reconnect(unsigned long*);Poco::Net::HTTPSClientSession::connect(Poco::Net::SocketAddress const&);Poco::Net::HTTPSession::connect(Poco::Net::SocketAddress const&);Poco::Net::SecureStreamSocketImpl::connect(Poco::Net::SocketAddress const&, Poco::Timespan const&);Poco::Net::SecureSocketImpl::connect(Poco::Net::SocketAddress const&, Poco::Timespan const&, bool);Poco::Net::SecureSocketImpl::connectSSL(bool);state_machine;tls_process_server_certificate;ASN1_item_d2i;asn1_item_embed_d2i;asn1_template_noexp_d2i 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();std::__1::packaged_task<DB::IAsynchronousReader::Result ()>::operator()();std::__1::__packaged_task_func<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'(), std::__1::allocator<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'()>, DB::IAsynchronousReader::Result ()>::operator()();DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromS3::initialize(unsigned long);DB::ReadBufferFromS3::sendRequest(unsigned long, unsigned long, std::__1::optional<unsigned long>) const;DB::S3::Client::GetObject(DB::S3::ExtendedRequest<Aws::S3::Model::GetObjectRequest>&) const;Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const;Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> smithy::components::tracing::TracingUtils::MakeCallWithTiming<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error>>(std::__1::function<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> std::__1::__function::__policy_invoker<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const::$_0, Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>>(std::__1::__function::__policy_storage const*);Aws::Client::AWSClient::MakeRequestWithUnparsedResponse(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptExhaustively(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptOneRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::AmazonWebServiceRequest const&, char const*, char const*, char const*) const;std::__1::shared_ptr<Aws::Http::HttpResponse> smithy::components::tracing::TracingUtils::MakeCallWithTiming<std::__1::shared_ptr<Aws::Http::HttpResponse>>(std::__1::function<std::__1::shared_ptr<Aws::Http::HttpResponse> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);DB::S3::PocoHTTPClient::MakeRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::S3::PocoHTTPClient::makeRequestInternalImpl(Aws::Http::HttpRequest&, std::__1::shared_ptr<DB::S3::PocoHTTPResponse>&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::makeHTTPSession(DB::HTTPConnectionGroupType, Poco::URI const&, DB::ConnectionTimeouts const&, DB::ProxyConfiguration const&, unsigned long*);DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::getConnection(DB::ConnectionTimeouts const&, unsigned long*);DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::prepareNewConnection(DB::ConnectionTimeouts const&, unsigned long*);Poco::Net::HTTPClientSession::reconnect(unsigned long*);Poco::Net::HTTPSClientSession::connect(Poco::Net::SocketAddress const&);Poco::Net::HTTPSession::connect(Poco::Net::SocketAddress const&);Poco::Net::SecureStreamSocketImpl::connect(Poco::Net::SocketAddress const&, Poco::Timespan const&);Poco::Net::SecureSocketImpl::connect(Poco::Net::SocketAddress const&, Poco::Timespan const&, bool);Poco::Net::SecureSocketImpl::connectSSL(bool);state_machine;tls_process_cert_verify;evp_pkey_ctx_ctrl_to_param;rsa_set_ctx_params;OSSL_PARAM_locate_const;0x0000ffffb3a8009d 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();std::__1::packaged_task<DB::IAsynchronousReader::Result ()>::operator()();std::__1::__packaged_task_func<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'(), std::__1::allocator<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'()>, DB::IAsynchronousReader::Result ()>::operator()();DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromS3::initialize(unsigned long);DB::ReadBufferFromS3::sendRequest(unsigned long, unsigned long, std::__1::optional<unsigned long>) const;DB::S3::Client::GetObject(DB::S3::ExtendedRequest<Aws::S3::Model::GetObjectRequest>&) const;Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const;Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> smithy::components::tracing::TracingUtils::MakeCallWithTiming<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error>>(std::__1::function<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> std::__1::__function::__policy_invoker<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const::$_0, Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>>(std::__1::__function::__policy_storage const*);Aws::Client::AWSClient::MakeRequestWithUnparsedResponse(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptExhaustively(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptOneRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::AmazonWebServiceRequest const&, char const*, char const*, char const*) const;std::__1::shared_ptr<Aws::Http::HttpResponse> smithy::components::tracing::TracingUtils::MakeCallWithTiming<std::__1::shared_ptr<Aws::Http::HttpResponse>>(std::__1::function<std::__1::shared_ptr<Aws::Http::HttpResponse> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);DB::S3::PocoHTTPClient::MakeRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::S3::PocoHTTPClient::makeRequestInternalImpl(Aws::Http::HttpRequest&, std::__1::shared_ptr<DB::S3::PocoHTTPResponse>&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::makeHTTPSession(DB::HTTPConnectionGroupType, Poco::URI const&, DB::ConnectionTimeouts const&, DB::ProxyConfiguration const&, unsigned long*);DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::getConnection(DB::ConnectionTimeouts const&, unsigned long*);DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::prepareNewConnection(DB::ConnectionTimeouts const&, unsigned long*);Poco::Net::HTTPClientSession::reconnect(unsigned long*);Poco::Net::HTTPSClientSession::connect(Poco::Net::SocketAddress const&);Poco::Net::HTTPSession::connect(Poco::Net::SocketAddress const&);Poco::Net::SecureStreamSocketImpl::connect(Poco::Net::SocketAddress const&, Poco::Timespan const&);Poco::Net::SecureSocketImpl::connect(Poco::Net::SocketAddress const&, Poco::Timespan const&, bool);Poco::Net::SecureSocketImpl::connectSSL(bool);state_machine;tls_process_server_hello;tls_parse_all_extensions;tls_parse_stoc_key_share;ssl_derive;tls13_generate_secret;EVP_KDF_CTX_new 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();std::__1::packaged_task<DB::IAsynchronousReader::Result ()>::operator()();std::__1::__packaged_task_func<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'(), std::__1::allocator<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'()>, DB::IAsynchronousReader::Result ()>::operator()();DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromS3::initialize(unsigned long);DB::ReadBufferFromS3::sendRequest(unsigned long, unsigned long, std::__1::optional<unsigned long>) const;DB::S3::Client::GetObject(DB::S3::ExtendedRequest<Aws::S3::Model::GetObjectRequest>&) const;Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const;Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> smithy::components::tracing::TracingUtils::MakeCallWithTiming<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error>>(std::__1::function<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> std::__1::__function::__policy_invoker<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const::$_0, Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>>(std::__1::__function::__policy_storage const*);Aws::Client::AWSClient::MakeRequestWithUnparsedResponse(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptExhaustively(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptOneRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::AmazonWebServiceRequest const&, char const*, char const*, char const*) const;std::__1::shared_ptr<Aws::Http::HttpResponse> smithy::components::tracing::TracingUtils::MakeCallWithTiming<std::__1::shared_ptr<Aws::Http::HttpResponse>>(std::__1::function<std::__1::shared_ptr<Aws::Http::HttpResponse> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);DB::S3::PocoHTTPClient::MakeRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::S3::PocoHTTPClient::makeRequestInternalImpl(Aws::Http::HttpRequest&, std::__1::shared_ptr<DB::S3::PocoHTTPResponse>&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::makeHTTPSession(DB::HTTPConnectionGroupType, Poco::URI const&, DB::ConnectionTimeouts const&, DB::ProxyConfiguration const&, unsigned long*);DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::getConnection(DB::ConnectionTimeouts const&, unsigned long*);DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::prepareNewConnection(DB::ConnectionTimeouts const&, unsigned long*);Poco::Net::HTTPClientSession::reconnect(unsigned long*);Poco::Net::HTTPSClientSession::connect(Poco::Net::SocketAddress const&);Poco::Net::HTTPSession::connect(Poco::Net::SocketAddress const&);Poco::Net::SecureStreamSocketImpl::connect(Poco::Net::SocketAddress const&, Poco::Timespan const&);Poco::Net::SecureSocketImpl::connect(Poco::Net::SocketAddress const&, Poco::Timespan const&, bool);Poco::Net::SecureSocketImpl::connectSSL(bool);state_machine;tls_construct_client_hello;ssl_fill_hello_random;EVP_RAND_generate;evp_rand_generate_locked;ossl_prov_drbg_generate;0x0000ffffb3aa808d 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();std::__1::packaged_task<DB::IAsynchronousReader::Result ()>::operator()();std::__1::__packaged_task_func<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'(), std::__1::allocator<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'()>, DB::IAsynchronousReader::Result ()>::operator()();DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromS3::initialize(unsigned long);DB::ReadBufferFromS3::sendRequest(unsigned long, unsigned long, std::__1::optional<unsigned long>) const;DB::S3::Client::GetObject(DB::S3::ExtendedRequest<Aws::S3::Model::GetObjectRequest>&) const;Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const;Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> smithy::components::tracing::TracingUtils::MakeCallWithTiming<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error>>(std::__1::function<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> std::__1::__function::__policy_invoker<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const::$_0, Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>>(std::__1::__function::__policy_storage const*);Aws::Client::AWSClient::MakeRequestWithUnparsedResponse(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptExhaustively(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptOneRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::AmazonWebServiceRequest const&, char const*, char const*, char const*) const;std::__1::shared_ptr<Aws::Http::HttpResponse> smithy::components::tracing::TracingUtils::MakeCallWithTiming<std::__1::shared_ptr<Aws::Http::HttpResponse>>(std::__1::function<std::__1::shared_ptr<Aws::Http::HttpResponse> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);DB::S3::PocoHTTPClient::MakeRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::S3::PocoHTTPClient::makeRequestInternalImpl(Aws::Http::HttpRequest&, std::__1::shared_ptr<DB::S3::PocoHTTPResponse>&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::makeHTTPSession(DB::HTTPConnectionGroupType, Poco::URI const&, DB::ConnectionTimeouts const&, DB::ProxyConfiguration const&, unsigned long*);DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::getConnection(DB::ConnectionTimeouts const&, unsigned long*);DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::prepareNewConnection(DB::ConnectionTimeouts const&, unsigned long*);Poco::Net::HTTPClientSession::reconnect(unsigned long*);Poco::Net::HTTPSClientSession::connect(Poco::Net::SocketAddress const&);Poco::Net::HTTPSession::connect(Poco::Net::SocketAddress const&);Poco::Net::SecureStreamSocketImpl::connect(Poco::Net::SocketAddress const&, Poco::Timespan const&);Poco::Net::SecureSocketImpl::connect(Poco::Net::SocketAddress const&, Poco::Timespan const&, bool);Poco::Net::SecureSocketImpl::connectSSL(bool);state_machine;tls_construct_client_hello;ssl_cipher_list_to_bytes;ssl_set_client_disabled;ssl_set_sig_mask;ssl_cert_lookup_by_idx 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();std::__1::packaged_task<DB::IAsynchronousReader::Result ()>::operator()();std::__1::__packaged_task_func<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'(), std::__1::allocator<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'()>, DB::IAsynchronousReader::Result ()>::operator()();DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromS3::initialize(unsigned long);DB::ReadBufferFromS3::sendRequest(unsigned long, unsigned long, std::__1::optional<unsigned long>) const;DB::S3::Client::GetObject(DB::S3::ExtendedRequest<Aws::S3::Model::GetObjectRequest>&) const;Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const;Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> smithy::components::tracing::TracingUtils::MakeCallWithTiming<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error>>(std::__1::function<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> std::__1::__function::__policy_invoker<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const::$_0, Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>>(std::__1::__function::__policy_storage const*);Aws::Client::AWSClient::MakeRequestWithUnparsedResponse(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptExhaustively(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptOneRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::AmazonWebServiceRequest const&, char const*, char const*, char const*) const;std::__1::shared_ptr<Aws::Http::HttpResponse> smithy::components::tracing::TracingUtils::MakeCallWithTiming<std::__1::shared_ptr<Aws::Http::HttpResponse>>(std::__1::function<std::__1::shared_ptr<Aws::Http::HttpResponse> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);DB::S3::PocoHTTPClient::MakeRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::S3::PocoHTTPClient::makeRequestInternalImpl(Aws::Http::HttpRequest&, std::__1::shared_ptr<DB::S3::PocoHTTPResponse>&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::makeHTTPSession(DB::HTTPConnectionGroupType, Poco::URI const&, DB::ConnectionTimeouts const&, DB::ProxyConfiguration const&, unsigned long*);DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::getConnection(DB::ConnectionTimeouts const&, unsigned long*);DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::prepareNewConnection(DB::ConnectionTimeouts const&, unsigned long*);Poco::Net::HTTPClientSession::reconnect(unsigned long*);Poco::Net::HTTPSClientSession::connect(Poco::Net::SocketAddress const&);Poco::Net::HTTPSession::connect(Poco::Net::SocketAddress const&);Poco::Net::SecureStreamSocketImpl::connect(Poco::Net::SocketAddress const&, Poco::Timespan const&);Poco::Net::SecureSocketImpl::connect(Poco::Net::SocketAddress const&, Poco::Timespan const&, bool);Poco::Net::SecureSocketImpl::connectSSL(bool);state_machine;ossl_statem_client_post_work;tls13_change_cipher_state;tls13_hkdf_expand_ex;kdf_tls1_3_derive;kdf_tls1_3_set_ctx_params;hkdf_common_set_ctx_params;ossl_prov_ctx_get0_libctx 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();std::__1::packaged_task<DB::IAsynchronousReader::Result ()>::operator()();std::__1::__packaged_task_func<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'(), std::__1::allocator<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'()>, DB::IAsynchronousReader::Result ()>::operator()();DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromS3::initialize(unsigned long);DB::ReadBufferFromS3::sendRequest(unsigned long, unsigned long, std::__1::optional<unsigned long>) const;DB::S3::Client::GetObject(DB::S3::ExtendedRequest<Aws::S3::Model::GetObjectRequest>&) const;Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const;Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> smithy::components::tracing::TracingUtils::MakeCallWithTiming<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error>>(std::__1::function<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> std::__1::__function::__policy_invoker<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const::$_0, Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>>(std::__1::__function::__policy_storage const*);Aws::Client::AWSClient::MakeRequestWithUnparsedResponse(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptExhaustively(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptOneRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::AmazonWebServiceRequest const&, char const*, char const*, char const*) const;std::__1::shared_ptr<Aws::Http::HttpResponse> smithy::components::tracing::TracingUtils::MakeCallWithTiming<std::__1::shared_ptr<Aws::Http::HttpResponse>>(std::__1::function<std::__1::shared_ptr<Aws::Http::HttpResponse> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);DB::S3::PocoHTTPClient::MakeRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::S3::PocoHTTPClient::makeRequestInternalImpl(Aws::Http::HttpRequest&, std::__1::shared_ptr<DB::S3::PocoHTTPResponse>&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::makeHTTPSession(DB::HTTPConnectionGroupType, Poco::URI const&, DB::ConnectionTimeouts const&, DB::ProxyConfiguration const&, unsigned long*);DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::getConnection(DB::ConnectionTimeouts const&, unsigned long*);DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::prepareNewConnection(DB::ConnectionTimeouts const&, unsigned long*);Poco::Net::HTTPClientSession::reconnect(unsigned long*);Poco::Net::HTTPSClientSession::connect(Poco::Net::SocketAddress const&);Poco::Net::HTTPSession::connect(Poco::Net::SocketAddress const&);Poco::Net::SecureStreamSocketImpl::connect(Poco::Net::SocketAddress const&, Poco::Timespan const&);Poco::Net::SecureSocketImpl::connect(Poco::Net::SocketAddress const&, Poco::Timespan const&, bool);Poco::Net::SecureSocketImpl::connectSSL(bool);state_machine;tls_get_message_header;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls13_cipher;EVP_DecryptFinal_ex 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();std::__1::packaged_task<DB::IAsynchronousReader::Result ()>::operator()();std::__1::__packaged_task_func<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'(), std::__1::allocator<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'()>, DB::IAsynchronousReader::Result ()>::operator()();DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromS3::initialize(unsigned long);DB::ReadBufferFromS3::sendRequest(unsigned long, unsigned long, std::__1::optional<unsigned long>) const;DB::S3::Client::GetObject(DB::S3::ExtendedRequest<Aws::S3::Model::GetObjectRequest>&) const;Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const;Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> smithy::components::tracing::TracingUtils::MakeCallWithTiming<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error>>(std::__1::function<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> std::__1::__function::__policy_invoker<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const::$_0, Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>>(std::__1::__function::__policy_storage const*);Aws::Client::AWSClient::MakeRequestWithUnparsedResponse(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptExhaustively(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptOneRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::AmazonWebServiceRequest const&, char const*, char const*, char const*) const;std::__1::shared_ptr<Aws::Http::HttpResponse> smithy::components::tracing::TracingUtils::MakeCallWithTiming<std::__1::shared_ptr<Aws::Http::HttpResponse>>(std::__1::function<std::__1::shared_ptr<Aws::Http::HttpResponse> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);DB::S3::PocoHTTPClient::MakeRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::S3::PocoHTTPClient::makeRequestInternalImpl(Aws::Http::HttpRequest&, std::__1::shared_ptr<DB::S3::PocoHTTPResponse>&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::makeHTTPSession(DB::HTTPConnectionGroupType, Poco::URI const&, DB::ConnectionTimeouts const&, DB::ProxyConfiguration const&, unsigned long*);DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::getConnection(DB::ConnectionTimeouts const&, unsigned long*);DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::prepareNewConnection(DB::ConnectionTimeouts const&, unsigned long*);Poco::Net::HTTPClientSession::reconnect(unsigned long*);Poco::Net::HTTPSClientSession::connect(Poco::Net::SocketAddress const&);Poco::Net::HTTPSession::connect(Poco::Net::SocketAddress const&);Poco::Net::SecureStreamSocketImpl::connect(Poco::Net::SocketAddress const&, Poco::Timespan const&);Poco::Net::SecureSocketImpl::connect(Poco::Net::SocketAddress const&, Poco::Timespan const&, bool);Poco::Net::SecureSocketImpl::connectSSL(bool);state_machine;ossl_statem_client_write_transition 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();std::__1::packaged_task<DB::IAsynchronousReader::Result ()>::operator()();std::__1::__packaged_task_func<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'(), std::__1::allocator<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'()>, DB::IAsynchronousReader::Result ()>::operator()();DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromS3::initialize(unsigned long);DB::ReadBufferFromS3::sendRequest(unsigned long, unsigned long, std::__1::optional<unsigned long>) const;DB::S3::Client::GetObject(DB::S3::ExtendedRequest<Aws::S3::Model::GetObjectRequest>&) const;Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const;Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> smithy::components::tracing::TracingUtils::MakeCallWithTiming<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error>>(std::__1::function<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> std::__1::__function::__policy_invoker<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const::$_0, Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>>(std::__1::__function::__policy_storage const*);Aws::Client::AWSClient::MakeRequestWithUnparsedResponse(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptExhaustively(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptOneRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::AmazonWebServiceRequest const&, char const*, char const*, char const*) const;std::__1::shared_ptr<Aws::Http::HttpResponse> smithy::components::tracing::TracingUtils::MakeCallWithTiming<std::__1::shared_ptr<Aws::Http::HttpResponse>>(std::__1::function<std::__1::shared_ptr<Aws::Http::HttpResponse> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);DB::S3::PocoHTTPClient::MakeRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::S3::PocoHTTPClient::makeRequestInternalImpl(Aws::Http::HttpRequest&, std::__1::shared_ptr<DB::S3::PocoHTTPResponse>&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::makeHTTPSession(DB::HTTPConnectionGroupType, Poco::URI const&, DB::ConnectionTimeouts const&, DB::ProxyConfiguration const&, unsigned long*);DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::getConnection(DB::ConnectionTimeouts const&, unsigned long*);DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::prepareNewConnection(DB::ConnectionTimeouts const&, unsigned long*);Poco::Net::HTTPClientSession::reconnect(unsigned long*);Poco::Net::HTTPSClientSession::connect(Poco::Net::SocketAddress const&);Poco::Net::HTTPSession::connect(Poco::Net::SocketAddress const&);Poco::Net::SecureStreamSocketImpl::connect(Poco::Net::SocketAddress const&, Poco::Timespan const&);Poco::Net::SecureSocketImpl::connect(Poco::Net::SocketAddress const&, Poco::Timespan const&, bool);Poco::Net::SecureSocketImpl::connectSSL(bool);SSL_new 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();std::__1::packaged_task<DB::IAsynchronousReader::Result ()>::operator()();std::__1::__packaged_task_func<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'(), std::__1::allocator<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'()>, DB::IAsynchronousReader::Result ()>::operator()();DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromS3::initialize(unsigned long);DB::ReadBufferFromS3::sendRequest(unsigned long, unsigned long, std::__1::optional<unsigned long>) const;DB::S3::Client::GetObject(DB::S3::ExtendedRequest<Aws::S3::Model::GetObjectRequest>&) const;Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const;Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> smithy::components::tracing::TracingUtils::MakeCallWithTiming<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error>>(std::__1::function<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> std::__1::__function::__policy_invoker<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const::$_0, Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>>(std::__1::__function::__policy_storage const*);Aws::Client::AWSClient::MakeRequestWithUnparsedResponse(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptExhaustively(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptOneRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::AmazonWebServiceRequest const&, char const*, char const*, char const*) const;std::__1::shared_ptr<Aws::Http::HttpResponse> smithy::components::tracing::TracingUtils::MakeCallWithTiming<std::__1::shared_ptr<Aws::Http::HttpResponse>>(std::__1::function<std::__1::shared_ptr<Aws::Http::HttpResponse> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);DB::S3::PocoHTTPClient::MakeRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::S3::PocoHTTPClient::makeRequestInternalImpl(Aws::Http::HttpRequest&, std::__1::shared_ptr<DB::S3::PocoHTTPResponse>&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::makeHTTPSession(DB::HTTPConnectionGroupType, Poco::URI const&, DB::ConnectionTimeouts const&, DB::ProxyConfiguration const&, unsigned long*);DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::getConnection(DB::ConnectionTimeouts const&, unsigned long*);DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::prepareNewConnection(DB::ConnectionTimeouts const&, unsigned long*);Poco::Net::HTTPClientSession::reconnect(unsigned long*);Poco::Net::HTTPSClientSession::connect(Poco::Net::SocketAddress const&);Poco::Net::Socket::~Socket() 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();std::__1::packaged_task<DB::IAsynchronousReader::Result ()>::operator()();std::__1::__packaged_task_func<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'(), std::__1::allocator<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'()>, DB::IAsynchronousReader::Result ()>::operator()();DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromS3::initialize(unsigned long);DB::ReadBufferFromS3::sendRequest(unsigned long, unsigned long, std::__1::optional<unsigned long>) const;DB::S3::Client::GetObject(DB::S3::ExtendedRequest<Aws::S3::Model::GetObjectRequest>&) const;Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const;Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> smithy::components::tracing::TracingUtils::MakeCallWithTiming<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error>>(std::__1::function<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> std::__1::__function::__policy_invoker<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const::$_0, Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>>(std::__1::__function::__policy_storage const*);Aws::Client::AWSClient::MakeRequestWithUnparsedResponse(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptExhaustively(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptOneRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::AmazonWebServiceRequest const&, char const*, char const*, char const*) const;std::__1::shared_ptr<Aws::Http::HttpResponse> smithy::components::tracing::TracingUtils::MakeCallWithTiming<std::__1::shared_ptr<Aws::Http::HttpResponse>>(std::__1::function<std::__1::shared_ptr<Aws::Http::HttpResponse> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);DB::S3::PocoHTTPClient::MakeRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::S3::PocoHTTPClient::makeRequestInternalImpl(Aws::Http::HttpRequest&, std::__1::shared_ptr<DB::S3::PocoHTTPResponse>&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();std::__1::packaged_task<DB::IAsynchronousReader::Result ()>::operator()();std::__1::__packaged_task_func<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'(), std::__1::allocator<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'()>, DB::IAsynchronousReader::Result ()>::operator()();DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromS3::initialize(unsigned long);DB::ReadBufferFromS3::sendRequest(unsigned long, unsigned long, std::__1::optional<unsigned long>) const;DB::S3::Client::GetObject(DB::S3::ExtendedRequest<Aws::S3::Model::GetObjectRequest>&) const;Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const;Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> smithy::components::tracing::TracingUtils::MakeCallWithTiming<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error>>(std::__1::function<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> std::__1::__function::__policy_invoker<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const::$_0, Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>>(std::__1::__function::__policy_storage const*);Aws::Client::AWSClient::MakeRequestWithUnparsedResponse(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptExhaustively(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptOneRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::AmazonWebServiceRequest const&, char const*, char const*, char const*) const;std::__1::shared_ptr<Aws::Http::HttpResponse> smithy::components::tracing::TracingUtils::MakeCallWithTiming<std::__1::shared_ptr<Aws::Http::HttpResponse>>(std::__1::function<std::__1::shared_ptr<Aws::Http::HttpResponse> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);DB::S3::PocoHTTPClient::MakeRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::S3::PocoHTTPClient::makeRequestInternalImpl(Aws::Http::HttpRequest&, std::__1::shared_ptr<DB::S3::PocoHTTPResponse>&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::PooledConnection::receiveResponse(Poco::Net::HTTPResponse&);Poco::Net::HTTPClientSession::receiveResponse(Poco::Net::HTTPResponse&);DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::PooledConnection::flushRequest();std::__1::basic_ostream<char, std::__1::char_traits<char>>::flush();Poco::BasicBufferedStreamBuf<char, std::__1::char_traits<char>, Poco::BufferAllocator<char>>::sync();Poco::Net::HTTPFixedLengthStreamBuf::writeToDevice(char const*, long);Poco::Net::HTTPClientSession::write(char const*, long);Poco::Net::HTTPSession::write(char const*, long);Poco::Net::SecureSocketImpl::sendBytes(void const*, int, int);SSL_write;ssl3_write_bytes;tls_retry_write_records;BIO_write;bio_write_intern;bwrite_conv;sock_write;0x0000ffffb3ac7e55 2
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();std::__1::packaged_task<DB::IAsynchronousReader::Result ()>::operator()();std::__1::__packaged_task_func<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'(), std::__1::allocator<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'()>, DB::IAsynchronousReader::Result ()>::operator()();DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromS3::initialize(unsigned long);DB::ReadBufferFromS3::sendRequest(unsigned long, unsigned long, std::__1::optional<unsigned long>) const;DB::S3::Client::GetObject(DB::S3::ExtendedRequest<Aws::S3::Model::GetObjectRequest>&) const;Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const;Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> smithy::components::tracing::TracingUtils::MakeCallWithTiming<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error>>(std::__1::function<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> std::__1::__function::__policy_invoker<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const::$_0, Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>>(std::__1::__function::__policy_storage const*);Aws::Client::AWSClient::MakeRequestWithUnparsedResponse(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptExhaustively(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptOneRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::AmazonWebServiceRequest const&, char const*, char const*, char const*) const;std::__1::shared_ptr<Aws::Http::HttpResponse> smithy::components::tracing::TracingUtils::MakeCallWithTiming<std::__1::shared_ptr<Aws::Http::HttpResponse>>(std::__1::function<std::__1::shared_ptr<Aws::Http::HttpResponse> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);DB::S3::PocoHTTPClient::MakeRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::S3::PocoHTTPClient::makeRequestInternalImpl(Aws::Http::HttpRequest&, std::__1::shared_ptr<DB::S3::PocoHTTPResponse>&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::PooledConnection::receiveResponse(Poco::Net::HTTPResponse&);Poco::Net::HTTPClientSession::receiveResponse(Poco::Net::HTTPResponse&);DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::PooledConnection::flushRequest();std::__1::basic_ostream<char, std::__1::char_traits<char>>::flush();Poco::BasicBufferedStreamBuf<char, std::__1::char_traits<char>, Poco::BufferAllocator<char>>::sync();Poco::Net::HTTPFixedLengthStreamBuf::writeToDevice(char const*, long);Poco::Net::HTTPClientSession::write(char const*, long);Poco::Net::HTTPSession::write(char const*, long);Poco::Net::SecureSocketImpl::sendBytes(void const*, int, int);SSL_write;ssl3_write_bytes;tls_retry_write_records;BIO_write;bio_write_intern;bwrite_conv;sock_write 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();std::__1::packaged_task<DB::IAsynchronousReader::Result ()>::operator()();std::__1::__packaged_task_func<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'(), std::__1::allocator<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'()>, DB::IAsynchronousReader::Result ()>::operator()();DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromS3::initialize(unsigned long);DB::ReadBufferFromS3::sendRequest(unsigned long, unsigned long, std::__1::optional<unsigned long>) const;DB::S3::Client::GetObject(DB::S3::ExtendedRequest<Aws::S3::Model::GetObjectRequest>&) const;Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const;Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> smithy::components::tracing::TracingUtils::MakeCallWithTiming<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error>>(std::__1::function<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> std::__1::__function::__policy_invoker<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const::$_0, Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>>(std::__1::__function::__policy_storage const*);Aws::Client::AWSClient::MakeRequestWithUnparsedResponse(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptExhaustively(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptOneRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::AmazonWebServiceRequest const&, char const*, char const*, char const*) const;std::__1::shared_ptr<Aws::Http::HttpResponse> smithy::components::tracing::TracingUtils::MakeCallWithTiming<std::__1::shared_ptr<Aws::Http::HttpResponse>>(std::__1::function<std::__1::shared_ptr<Aws::Http::HttpResponse> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);DB::S3::PocoHTTPClient::MakeRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::S3::PocoHTTPClient::makeRequestInternalImpl(Aws::Http::HttpRequest&, std::__1::shared_ptr<DB::S3::PocoHTTPResponse>&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::PooledConnection::receiveResponse(Poco::Net::HTTPResponse&);Poco::Net::HTTPClientSession::receiveResponse(Poco::Net::HTTPResponse&);Poco::Net::HTTPResponse::read(std::__1::basic_istream<char, std::__1::char_traits<char>>&);Poco::Net::MessageHeader::read(std::__1::basic_istream<char, std::__1::char_traits<char>>&);Poco::Net::MessageHeader::decodeWord(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__init_copy_ctor_external(char const*, unsigned long);operator new(unsigned long);__libc_malloc 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();std::__1::packaged_task<DB::IAsynchronousReader::Result ()>::operator()();std::__1::__packaged_task_func<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'(), std::__1::allocator<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'()>, DB::IAsynchronousReader::Result ()>::operator()();DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromS3::initialize(unsigned long);DB::ReadBufferFromS3::sendRequest(unsigned long, unsigned long, std::__1::optional<unsigned long>) const;DB::S3::Client::GetObject(DB::S3::ExtendedRequest<Aws::S3::Model::GetObjectRequest>&) const;Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const;Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> smithy::components::tracing::TracingUtils::MakeCallWithTiming<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error>>(std::__1::function<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> std::__1::__function::__policy_invoker<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const::$_0, Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>>(std::__1::__function::__policy_storage const*);Aws::Client::AWSClient::MakeRequestWithUnparsedResponse(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptExhaustively(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptOneRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::AmazonWebServiceRequest const&, char const*, char const*, char const*) const;std::__1::shared_ptr<Aws::Http::HttpResponse> smithy::components::tracing::TracingUtils::MakeCallWithTiming<std::__1::shared_ptr<Aws::Http::HttpResponse>>(std::__1::function<std::__1::shared_ptr<Aws::Http::HttpResponse> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);DB::S3::PocoHTTPClient::MakeRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::S3::PocoHTTPClient::makeRequestInternalImpl(Aws::Http::HttpRequest&, std::__1::shared_ptr<DB::S3::PocoHTTPResponse>&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::PooledConnection::receiveResponse(Poco::Net::HTTPResponse&);Poco::Net::HTTPClientSession::receiveResponse(Poco::Net::HTTPResponse&);Poco::Net::HTTPResponse::read(std::__1::basic_istream<char, std::__1::char_traits<char>>&);std::__1::basic_istream<char, std::__1::char_traits<char>>::get();std::__1::basic_istream<char, std::__1::char_traits<char>>::sentry::sentry(std::__1::basic_istream<char, std::__1::char_traits<char>>&, bool) 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();std::__1::packaged_task<DB::IAsynchronousReader::Result ()>::operator()();std::__1::__packaged_task_func<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'(), std::__1::allocator<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'()>, DB::IAsynchronousReader::Result ()>::operator()();DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromS3::initialize(unsigned long);DB::ReadBufferFromS3::sendRequest(unsigned long, unsigned long, std::__1::optional<unsigned long>) const;DB::S3::Client::GetObject(DB::S3::ExtendedRequest<Aws::S3::Model::GetObjectRequest>&) const;Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const;Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> smithy::components::tracing::TracingUtils::MakeCallWithTiming<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error>>(std::__1::function<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> std::__1::__function::__policy_invoker<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const::$_0, Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>>(std::__1::__function::__policy_storage const*);Aws::Client::AWSClient::MakeRequestWithUnparsedResponse(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptExhaustively(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptOneRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::AmazonWebServiceRequest const&, char const*, char const*, char const*) const;std::__1::shared_ptr<Aws::Http::HttpResponse> smithy::components::tracing::TracingUtils::MakeCallWithTiming<std::__1::shared_ptr<Aws::Http::HttpResponse>>(std::__1::function<std::__1::shared_ptr<Aws::Http::HttpResponse> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);DB::S3::PocoHTTPClient::MakeRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::S3::PocoHTTPClient::makeRequestInternalImpl(Aws::Http::HttpRequest&, std::__1::shared_ptr<DB::S3::PocoHTTPResponse>&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::PooledConnection::receiveResponse(Poco::Net::HTTPResponse&);Poco::Net::HTTPClientSession::receiveResponse(Poco::Net::HTTPResponse&);Poco::Net::HTTPFixedLengthInputStream::HTTPFixedLengthInputStream(Poco::Net::HTTPSession&, long);Poco::Net::HTTPFixedLengthStreamBuf::HTTPFixedLengthStreamBuf(Poco::Net::HTTPSession&, long, unsigned int);operator new[](unsigned long);malloc_default;prof_tctx_create;prof_backtrace;prof_backtrace_impl;unw_backtrace;libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_arm64>::step(bool);libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_arm64>::setInfoBasedOnIPRegister(bool);libunwind::EHHeaderParser<libunwind::LocalAddressSpace>::findFDE(libunwind::LocalAddressSpace&, unsigned long, unsigned long, unsigned int, libunwind::CFI_Parser<libunwind::LocalAddressSpace>::FDE_Info*, libunwind::CFI_Parser<libunwind::LocalAddressSpace>::CIE_Info*);libunwind::LocalAddressSpace::getEncodedP(unsigned long&, unsigned long, unsigned char, unsigned long) 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();std::__1::packaged_task<DB::IAsynchronousReader::Result ()>::operator()();std::__1::__packaged_task_func<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'(), std::__1::allocator<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'()>, DB::IAsynchronousReader::Result ()>::operator()();DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromS3::initialize(unsigned long);DB::ReadBufferFromS3::sendRequest(unsigned long, unsigned long, std::__1::optional<unsigned long>) const;DB::S3::Client::GetObject(DB::S3::ExtendedRequest<Aws::S3::Model::GetObjectRequest>&) const;Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const;Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> smithy::components::tracing::TracingUtils::MakeCallWithTiming<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error>>(std::__1::function<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> std::__1::__function::__policy_invoker<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const::$_0, Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>>(std::__1::__function::__policy_storage const*);Aws::Client::AWSClient::MakeRequestWithUnparsedResponse(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptExhaustively(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptOneRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::AmazonWebServiceRequest const&, char const*, char const*, char const*) const;std::__1::shared_ptr<Aws::Http::HttpResponse> smithy::components::tracing::TracingUtils::MakeCallWithTiming<std::__1::shared_ptr<Aws::Http::HttpResponse>>(std::__1::function<std::__1::shared_ptr<Aws::Http::HttpResponse> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);DB::S3::PocoHTTPClient::MakeRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::S3::PocoHTTPClient::makeRequestInternalImpl(Aws::Http::HttpRequest&, std::__1::shared_ptr<DB::S3::PocoHTTPResponse>&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;Aws::Http::Standard::StandardHttpResponse::AddHeader(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);Aws::Utils::StringUtils::ToLower(char const*);std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::append(unsigned long, char) 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();std::__1::packaged_task<DB::IAsynchronousReader::Result ()>::operator()();std::__1::__packaged_task_func<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'(), std::__1::allocator<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'()>, DB::IAsynchronousReader::Result ()>::operator()();DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromS3::initialize(unsigned long);DB::ReadBufferFromS3::sendRequest(unsigned long, unsigned long, std::__1::optional<unsigned long>) const;DB::S3::Client::GetObject(DB::S3::ExtendedRequest<Aws::S3::Model::GetObjectRequest>&) const;Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const;Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> smithy::components::tracing::TracingUtils::MakeCallWithTiming<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error>>(std::__1::function<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> std::__1::__function::__policy_invoker<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const::$_0, Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>>(std::__1::__function::__policy_storage const*);Aws::Client::AWSClient::MakeRequestWithUnparsedResponse(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptExhaustively(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptOneRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::AmazonWebServiceRequest const&, char const*, char const*, char const*) const;std::__1::shared_ptr<Aws::Http::HttpResponse> smithy::components::tracing::TracingUtils::MakeCallWithTiming<std::__1::shared_ptr<Aws::Http::HttpResponse>>(std::__1::function<std::__1::shared_ptr<Aws::Http::HttpResponse> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);DB::S3::PocoHTTPClient::MakeRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::S3::PocoHTTPClient::makeRequestInternalImpl(Aws::Http::HttpRequest&, std::__1::shared_ptr<DB::S3::PocoHTTPResponse>&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;Poco::URI::encode(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&) 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();std::__1::packaged_task<DB::IAsynchronousReader::Result ()>::operator()();std::__1::__packaged_task_func<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'(), std::__1::allocator<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'()>, DB::IAsynchronousReader::Result ()>::operator()();DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromS3::initialize(unsigned long);DB::ReadBufferFromS3::sendRequest(unsigned long, unsigned long, std::__1::optional<unsigned long>) const;DB::S3::Client::GetObject(DB::S3::ExtendedRequest<Aws::S3::Model::GetObjectRequest>&) const;Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const;Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> smithy::components::tracing::TracingUtils::MakeCallWithTiming<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error>>(std::__1::function<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> std::__1::__function::__policy_invoker<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const::$_0, Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>>(std::__1::__function::__policy_storage const*);Aws::Client::AWSClient::MakeRequestWithUnparsedResponse(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptExhaustively(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptOneRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::AmazonWebServiceRequest const&, char const*, char const*, char const*) const;std::__1::shared_ptr<Aws::Http::HttpResponse> smithy::components::tracing::TracingUtils::MakeCallWithTiming<std::__1::shared_ptr<Aws::Http::HttpResponse>>(std::__1::function<std::__1::shared_ptr<Aws::Http::HttpResponse> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);DB::S3::PocoHTTPClient::MakeRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::S3::PocoHTTPClient::makeRequestInternalImpl(Aws::Http::HttpRequest&, std::__1::shared_ptr<DB::S3::PocoHTTPResponse>&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::PooledConnection::sendRequest(Poco::Net::HTTPRequest&, unsigned long*, unsigned long*);Poco::Net::HTTPClientSession::sendRequest(Poco::Net::HTTPRequest&, unsigned long*, unsigned long*);Poco::SharedPtr<std::__1::basic_ostream<char, std::__1::char_traits<char>>, Poco::ReferenceCounter, Poco::ReleasePolicy<std::__1::basic_ostream<char, std::__1::char_traits<char>>>>::SharedPtr(std::__1::basic_ostream<char, std::__1::char_traits<char>>*);operator new(unsigned long) 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();std::__1::packaged_task<DB::IAsynchronousReader::Result ()>::operator()();std::__1::__packaged_task_func<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'(), std::__1::allocator<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'()>, DB::IAsynchronousReader::Result ()>::operator()();DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromS3::initialize(unsigned long);DB::ReadBufferFromS3::sendRequest(unsigned long, unsigned long, std::__1::optional<unsigned long>) const;DB::S3::Client::GetObject(DB::S3::ExtendedRequest<Aws::S3::Model::GetObjectRequest>&) const;Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const;Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> smithy::components::tracing::TracingUtils::MakeCallWithTiming<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error>>(std::__1::function<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> std::__1::__function::__policy_invoker<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const::$_0, Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>>(std::__1::__function::__policy_storage const*);Aws::Client::AWSClient::MakeRequestWithUnparsedResponse(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptExhaustively(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptOneRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::AmazonWebServiceRequest const&, char const*, char const*, char const*) const;std::__1::shared_ptr<Aws::Http::HttpResponse> smithy::components::tracing::TracingUtils::MakeCallWithTiming<std::__1::shared_ptr<Aws::Http::HttpResponse>>(std::__1::function<std::__1::shared_ptr<Aws::Http::HttpResponse> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);DB::S3::PocoHTTPClient::MakeRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::S3::PocoHTTPClient::makeRequestInternalImpl(Aws::Http::HttpRequest&, std::__1::shared_ptr<DB::S3::PocoHTTPResponse>&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::PooledConnection::sendRequest(Poco::Net::HTTPRequest&, unsigned long*, unsigned long*);Poco::Net::HTTPClientSession::sendRequest(Poco::Net::HTTPRequest&, unsigned long*, unsigned long*);Poco::Net::HTTPRequest::write(std::__1::basic_ostream<char, std::__1::char_traits<char>>&) const;Poco::Net::MessageHeader::write(std::__1::basic_ostream<char, std::__1::char_traits<char>>&) const;std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ne190107]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long);std::__1::ostreambuf_iterator<char, std::__1::char_traits<char>> std::__1::__pad_and_output[abi:ne190107]<char, std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char, std::__1::char_traits<char>>, char const*, char const*, char const*, std::__1::ios_base&, char);std::__1::basic_streambuf<char, std::__1::char_traits<char>>::xsputn(char const*, long) 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();std::__1::packaged_task<DB::IAsynchronousReader::Result ()>::operator()();std::__1::__packaged_task_func<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'(), std::__1::allocator<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'()>, DB::IAsynchronousReader::Result ()>::operator()();DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromS3::initialize(unsigned long);DB::ReadBufferFromS3::sendRequest(unsigned long, unsigned long, std::__1::optional<unsigned long>) const;DB::S3::Client::GetObject(DB::S3::ExtendedRequest<Aws::S3::Model::GetObjectRequest>&) const;Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const;Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> smithy::components::tracing::TracingUtils::MakeCallWithTiming<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error>>(std::__1::function<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> std::__1::__function::__policy_invoker<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const::$_0, Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>>(std::__1::__function::__policy_storage const*);Aws::Client::AWSClient::MakeRequestWithUnparsedResponse(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptExhaustively(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptOneRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::AmazonWebServiceRequest const&, char const*, char const*, char const*) const;std::__1::shared_ptr<Aws::Http::HttpResponse> smithy::components::tracing::TracingUtils::MakeCallWithTiming<std::__1::shared_ptr<Aws::Http::HttpResponse>>(std::__1::function<std::__1::shared_ptr<Aws::Http::HttpResponse> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);DB::S3::PocoHTTPClient::MakeRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::S3::PocoHTTPClient::makeRequestInternalImpl(Aws::Http::HttpRequest&, std::__1::shared_ptr<DB::S3::PocoHTTPResponse>&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;Poco::Net::NameValueCollection::set(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__init_copy_ctor_external(char const*, unsigned long);operator new(unsigned long);malloc_default;tcache_alloc_small_hard;arena_cache_bin_fill_small 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();std::__1::packaged_task<DB::IAsynchronousReader::Result ()>::operator()();std::__1::__packaged_task_func<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'(), std::__1::allocator<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'()>, DB::IAsynchronousReader::Result ()>::operator()();DB::ThreadGroupSwitcher::~ThreadGroupSwitcher();DB::ThreadStatus::detachFromGroup();DB::QueryProfilerBase<DB::QueryProfilerReal>::~QueryProfilerBase();DB::Timer::stop();0x0000ffffb3a79271 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;Poco::ThreadImpl::runnableEntry(void*);Poco::PooledThread::run();Poco::Net::TCPServerDispatcher::run();Poco::Net::TCPServerConnection::start();DB::TCPProtocolStackHandler::run();DB::TCPHandler::run();DB::TCPHandler::runImpl();DB::TCPHandler::processOrdinaryQuery(DB::QueryState&);DB::TCPHandler::sendProfileEvents(DB::QueryState&);DB::WriteBuffer::next();DB::WriteBufferFromPocoSocket::nextImpl();DB::WriteBufferFromPocoSocket::socketSendBytesImpl(char const*, unsigned long);Poco::Net::StreamSocketImpl::sendBytes(void const*, int, int);Poco::Net::SocketImpl::sendBytes(void const*, int, int);0x0000ffffb3ad7ff5 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;Poco::ThreadImpl::runnableEntry(void*);Poco::PooledThread::run();Poco::Net::TCPServerDispatcher::run();Poco::Net::TCPServerConnection::start();DB::TCPProtocolStackHandler::run();DB::TCPHandler::run();DB::TCPHandler::runImpl();DB::TCPHandler::processOrdinaryQuery(DB::QueryState&);DB::TCPHandler::sendProfileEvents(DB::QueryState&);DB::NativeWriter::write(DB::Block const&);DB::IDataType::getSerializationInfo(DB::IColumn const&) const 1
0x0000ffffb3ad5edc;0x0000ffffb3a6d5b8;Poco::ThreadImpl::runnableEntry(void*);Poco::PooledThread::run();Poco::Net::TCPServerDispatcher::run();Poco::Net::TCPServerConnection::start();DB::TCPProtocolStackHandler::run();DB::TCPHandler::run();DB::TCPHandler::runImpl();DB::TCPHandler::processOrdinaryQuery(DB::QueryState&);DB::TCPHandler::sendProfileEvents(DB::QueryState&);DB::NativeWriter::write(DB::Block const&);DB::NativeWriter::writeData(DB::ISerialization const&, COW<DB::IColumn>::immutable_ptr<DB::IColumn> const&, DB::WriteBuffer&, std::__1::optional<DB::FormatSettings> const&, unsigned long, unsigned long, unsigned long);DB::ISerialization::serializeBinaryBulkWithMultipleStreams(DB::IColumn const&, unsigned long, unsigned long, DB::ISerialization::SerializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::SerializeBinaryBulkState>&) const;DB::WriteBuffer* std::__1::__function::__policy_invoker<DB::WriteBuffer* (DB::ISerialization::SubstreamPath const&)>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::NativeWriter::writeData(DB::ISerialization const&, COW<DB::IColumn>::immutable_ptr<DB::IColumn> const&, DB::WriteBuffer&, std::__1::optional<DB::FormatSettings> const&, unsigned long, unsigned long, unsigned long)::$_0, DB::WriteBuffer* (DB::ISerialization::SubstreamPath const&)>>(std::__1::__function::__policy_storage const*, DB::ISerialization::SubstreamPath const&);void std::__1::__destroy_at[abi:ne190107]<DB::ISerialization::Substream, 0>(DB::ISerialization::Substream*);DB::ISerialization::SubstreamData::~SubstreamData() 1
0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();std::__1::packaged_task<DB::IAsynchronousReader::Result ()>::operator()();std::__1::__packaged_task_func<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'(), std::__1::allocator<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'()>, DB::IAsynchronousReader::Result ()>::operator()();DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromS3::initialize(unsigned long);DB::ReadBufferFromS3::sendRequest(unsigned long, unsigned long, std::__1::optional<unsigned long>) const;DB::S3::Client::GetObject(DB::S3::ExtendedRequest<Aws::S3::Model::GetObjectRequest>&) const;Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const;Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> smithy::components::tracing::TracingUtils::MakeCallWithTiming<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error>>(std::__1::function<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> std::__1::__function::__policy_invoker<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const::$_0, Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>>(std::__1::__function::__policy_storage const*);Aws::Client::AWSClient::MakeRequestWithUnparsedResponse(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptExhaustively(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptOneRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::AmazonWebServiceRequest const&, char const*, char const*, char const*) const;std::__1::shared_ptr<Aws::Http::HttpResponse> smithy::components::tracing::TracingUtils::MakeCallWithTiming<std::__1::shared_ptr<Aws::Http::HttpResponse>>(std::__1::function<std::__1::shared_ptr<Aws::Http::HttpResponse> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);DB::S3::PocoHTTPClient::MakeRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::S3::PocoHTTPClient::makeRequestInternalImpl(Aws::Http::HttpRequest&, std::__1::shared_ptr<DB::S3::PocoHTTPResponse>&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::makeHTTPSession(DB::HTTPConnectionGroupType, Poco::URI const&, DB::ConnectionTimeouts const&, DB::ProxyConfiguration const&, unsigned long*);DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::getConnection(DB::ConnectionTimeouts const&, unsigned long*);DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::prepareNewConnection(DB::ConnectionTimeouts const&, unsigned long*);Poco::Net::HTTPClientSession::reconnect(unsigned long*);Poco::Net::HTTPSClientSession::connect(Poco::Net::SocketAddress const&);Poco::Net::HTTPSession::connect(Poco::Net::SocketAddress const&);Poco::Net::SecureStreamSocketImpl::connect(Poco::Net::SocketAddress const&, Poco::Timespan const&);Poco::Net::SecureSocketImpl::connect(Poco::Net::SocketAddress const&, Poco::Timespan const&, bool);Poco::Net::SecureSocketImpl::connectSSL(bool);state_machine;ossl_statem_client_post_work;statem_flush;BIO_ctrl;buffer_ctrl;BIO_write;bio_write_intern;bwrite_conv;sock_write;0x0000ffffb3ac7e55 3
0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();std::__1::packaged_task<DB::IAsynchronousReader::Result ()>::operator()();std::__1::__packaged_task_func<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'(), std::__1::allocator<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'()>, DB::IAsynchronousReader::Result ()>::operator()();DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromS3::initialize(unsigned long);DB::ReadBufferFromS3::sendRequest(unsigned long, unsigned long, std::__1::optional<unsigned long>) const;DB::S3::Client::GetObject(DB::S3::ExtendedRequest<Aws::S3::Model::GetObjectRequest>&) const;Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const;Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> smithy::components::tracing::TracingUtils::MakeCallWithTiming<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error>>(std::__1::function<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> std::__1::__function::__policy_invoker<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const::$_0, Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>>(std::__1::__function::__policy_storage const*);Aws::Client::AWSClient::MakeRequestWithUnparsedResponse(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptExhaustively(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptOneRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::AmazonWebServiceRequest const&, char const*, char const*, char const*) const;std::__1::shared_ptr<Aws::Http::HttpResponse> smithy::components::tracing::TracingUtils::MakeCallWithTiming<std::__1::shared_ptr<Aws::Http::HttpResponse>>(std::__1::function<std::__1::shared_ptr<Aws::Http::HttpResponse> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);DB::S3::PocoHTTPClient::MakeRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::S3::PocoHTTPClient::makeRequestInternalImpl(Aws::Http::HttpRequest&, std::__1::shared_ptr<DB::S3::PocoHTTPResponse>&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::makeHTTPSession(DB::HTTPConnectionGroupType, Poco::URI const&, DB::ConnectionTimeouts const&, DB::ProxyConfiguration const&, unsigned long*);DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::getConnection(DB::ConnectionTimeouts const&, unsigned long*);DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::prepareNewConnection(DB::ConnectionTimeouts const&, unsigned long*);Poco::Net::HTTPClientSession::reconnect(unsigned long*);Poco::Net::HTTPSClientSession::connect(Poco::Net::SocketAddress const&);Poco::Net::HTTPSession::connect(Poco::Net::SocketAddress const&);Poco::Net::SecureStreamSocketImpl::connect(Poco::Net::SocketAddress const&, Poco::Timespan const&);Poco::Net::SecureSocketImpl::connect(Poco::Net::SocketAddress const&, Poco::Timespan const&, bool);Poco::Net::SecureSocketImpl::connectSSL(bool);state_machine;ossl_statem_client_post_work;statem_flush;BIO_ctrl;buffer_ctrl;BIO_write;bio_write_intern;bwrite_conv;sock_write;0x0000ffffb3ac7e55 1
0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();std::__1::packaged_task<DB::IAsynchronousReader::Result ()>::operator()();std::__1::__packaged_task_func<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'(), std::__1::allocator<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'()>, DB::IAsynchronousReader::Result ()>::operator()();DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromS3::initialize(unsigned long);DB::ReadBufferFromS3::sendRequest(unsigned long, unsigned long, std::__1::optional<unsigned long>) const;DB::S3::Client::GetObject(DB::S3::ExtendedRequest<Aws::S3::Model::GetObjectRequest>&) const;Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const;Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> smithy::components::tracing::TracingUtils::MakeCallWithTiming<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error>>(std::__1::function<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> std::__1::__function::__policy_invoker<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const::$_0, Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>>(std::__1::__function::__policy_storage const*);Aws::Client::AWSClient::MakeRequestWithUnparsedResponse(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptExhaustively(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptOneRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::AmazonWebServiceRequest const&, char const*, char const*, char const*) const;std::__1::shared_ptr<Aws::Http::HttpResponse> smithy::components::tracing::TracingUtils::MakeCallWithTiming<std::__1::shared_ptr<Aws::Http::HttpResponse>>(std::__1::function<std::__1::shared_ptr<Aws::Http::HttpResponse> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);DB::S3::PocoHTTPClient::MakeRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::S3::PocoHTTPClient::makeRequestInternalImpl(Aws::Http::HttpRequest&, std::__1::shared_ptr<DB::S3::PocoHTTPResponse>&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::makeHTTPSession(DB::HTTPConnectionGroupType, Poco::URI const&, DB::ConnectionTimeouts const&, DB::ProxyConfiguration const&, unsigned long*);DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::getConnection(DB::ConnectionTimeouts const&, unsigned long*);DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::prepareNewConnection(DB::ConnectionTimeouts const&, unsigned long*);Poco::Net::HTTPClientSession::reconnect(unsigned long*);Poco::Net::HTTPSClientSession::connect(Poco::Net::SocketAddress const&);Poco::Net::HTTPSession::connect(Poco::Net::SocketAddress const&);Poco::Net::SecureStreamSocketImpl::connect(Poco::Net::SocketAddress const&, Poco::Timespan const&);Poco::Net::SecureSocketImpl::connect(Poco::Net::SocketAddress const&, Poco::Timespan const&, bool);Poco::Net::SecureSocketImpl::connectSSL(bool);state_machine;tls_process_finished;tls13_change_cipher_state;derive_secret_key_and_iv;tls13_hkdf_expand_ex;kdf_tls1_3_derive;prov_tls13_hkdf_expand;HKDF_Expand;HMAC_CTX_free;EVP_MD_CTX_reset 1
0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();std::__1::packaged_task<DB::IAsynchronousReader::Result ()>::operator()();std::__1::__packaged_task_func<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'(), std::__1::allocator<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'()>, DB::IAsynchronousReader::Result ()>::operator()();DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromS3::initialize(unsigned long);DB::ReadBufferFromS3::sendRequest(unsigned long, unsigned long, std::__1::optional<unsigned long>) const;DB::S3::Client::GetObject(DB::S3::ExtendedRequest<Aws::S3::Model::GetObjectRequest>&) const;Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const;Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> smithy::components::tracing::TracingUtils::MakeCallWithTiming<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error>>(std::__1::function<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> std::__1::__function::__policy_invoker<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const::$_0, Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>>(std::__1::__function::__policy_storage const*);Aws::Client::AWSClient::MakeRequestWithUnparsedResponse(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptExhaustively(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptOneRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::AmazonWebServiceRequest const&, char const*, char const*, char const*) const;std::__1::shared_ptr<Aws::Http::HttpResponse> smithy::components::tracing::TracingUtils::MakeCallWithTiming<std::__1::shared_ptr<Aws::Http::HttpResponse>>(std::__1::function<std::__1::shared_ptr<Aws::Http::HttpResponse> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);DB::S3::PocoHTTPClient::MakeRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::S3::PocoHTTPClient::makeRequestInternalImpl(Aws::Http::HttpRequest&, std::__1::shared_ptr<DB::S3::PocoHTTPResponse>&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::makeHTTPSession(DB::HTTPConnectionGroupType, Poco::URI const&, DB::ConnectionTimeouts const&, DB::ProxyConfiguration const&, unsigned long*);DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::getConnection(DB::ConnectionTimeouts const&, unsigned long*);DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::prepareNewConnection(DB::ConnectionTimeouts const&, unsigned long*);Poco::Net::HTTPClientSession::reconnect(unsigned long*);Poco::Net::HTTPSClientSession::connect(Poco::Net::SocketAddress const&);Poco::Net::HTTPSession::connect(Poco::Net::SocketAddress const&);Poco::Net::SecureStreamSocketImpl::connect(Poco::Net::SocketAddress const&, Poco::Timespan const&);Poco::Net::SecureSocketImpl::connect(Poco::Net::SocketAddress const&, Poco::Timespan const&, bool);Poco::Net::SecureSocketImpl::connectSSL(bool);state_machine;tls_post_process_server_certificate;ssl_verify_internal;x509_verify_x509;verify_chain;build_chain;X509_STORE_CTX_get1_issuer;ossl_x509_store_ctx_get_by_subject;get_cert_by_subject_ex;0x0000ffffb3ad69e5 1
0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls13_cipher;EVP_CIPHER_CTX_ctrl 1
0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls13_cipher;EVP_CIPHER_CTX_ctrl 1
0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls13_cipher;EVP_CIPHER_CTX_ctrl 1
0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls13_cipher;evp_cipher_init_internal 1
0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls13_cipher;evp_cipher_init_internal 1
0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls13_cipher;WPACKET_put_bytes__ 1
0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls13_cipher;WPACKET_finish 1
0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls13_post_process_record;tls13_common_post_process_record 1
0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;ERR_set_mark;ossl_err_get_state_int 1
0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls13_post_process_record 1
0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;ERR_set_mark 1
0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls_default_read_n 1
0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::ReadBuffer* std::__1::__function::__policy_invoker<DB::ReadBuffer* (DB::ISerialization::SubstreamPath const&)>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*)::$_0, DB::ReadBuffer* (DB::ISerialization::SubstreamPath const&)>>(std::__1::__function::__policy_storage const*, DB::ISerialization::SubstreamPath const&);DB::MergeTreeReaderStream::seekToMarkAndColumn(unsigned long, unsigned long);DB::CompressedReadBufferFromFile::seek(unsigned long, unsigned long);DB::AsynchronousBoundedReadBuffer::seek(long, int);DB::ReadBufferFromRemoteFSGather::seek(long, int);DB::ReadBufferFromRemoteFSGather::reset();DB::ReadBufferFromS3::~ReadBufferFromS3();DB::ReadBufferFromS3::~ReadBufferFromS3();DB::S3::ReadBufferFromGetObjectResult::~ReadBufferFromGetObjectResult();Aws::Utils::Stream::ResponseStream::~ResponseStream();DB::SessionAwareIOStream<std::__1::shared_ptr<Poco::Net::HTTPClientSession>>::~SessionAwareIOStream();Poco::Net::HTTPSClientSession::~HTTPSClientSession();Poco::Net::HTTPClientSession::~HTTPClientSession();Poco::Net::SecureStreamSocketImpl::~SecureStreamSocketImpl();Poco::Net::SecureStreamSocketImpl::~SecureStreamSocketImpl();Poco::Net::SecureSocketImpl::~SecureSocketImpl();SSL_free;ossl_ssl_connection_free;RECORD_LAYER_clear;tls_free;tls_int_free;free_default;prof_free_sampled_object 1
0x0000ffffb3a6d5b8;void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::ReadBuffer* std::__1::__function::__policy_invoker<DB::ReadBuffer* (DB::ISerialization::SubstreamPath const&)>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*)::$_0, DB::ReadBuffer* (DB::ISerialization::SubstreamPath const&)>>(std::__1::__function::__policy_storage const*, DB::ISerialization::SubstreamPath const&);DB::MergeTreeReaderStream::seekToMarkAndColumn(unsigned long, unsigned long);DB::CompressedReadBufferFromFile::seek(unsigned long, unsigned long);DB::AsynchronousBoundedReadBuffer::seek(long, int);DB::ReadBufferFromRemoteFSGather::seek(long, int);DB::ReadBufferFromRemoteFSGather::reset();DB::ReadBufferFromS3::~ReadBufferFromS3();DB::ReadBufferFromS3::~ReadBufferFromS3();DB::S3::ReadBufferFromGetObjectResult::~ReadBufferFromGetObjectResult();Aws::Utils::Stream::ResponseStream::~ResponseStream();DB::SessionAwareIOStream<std::__1::shared_ptr<Poco::Net::HTTPClientSession>>::~SessionAwareIOStream();Poco::Net::HTTPSClientSession::~HTTPSClientSession();Poco::Net::HTTPClientSession::~HTTPClientSession();Poco::Net::SecureStreamSocketImpl::~SecureStreamSocketImpl();Poco::Net::SecureStreamSocketImpl::~SecureStreamSocketImpl();Poco::Net::SecureSocketImpl::~SecureSocketImpl();SSL_free;ossl_ssl_connection_free;SSL_SESSION_free;OPENSSL_sk_pop_free;ASN1_item_free;ossl_asn1_item_embed_free;ossl_asn1_do_lock 1
0x0000ffffb3c3a850;DB::(anonymous namespace)::writeTraceInfo(DB::TraceType, int, siginfo_t*, void*);StackTrace::StackTrace(ucontext_t const&) 167
ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls_default_read_n;BIO_read;bio_read_intern;bread_conv;sock_read;0x0000ffffb3ac7d85 218
ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls_default_read_n;BIO_read;bio_read_intern;bread_conv;sock_read;0x0000ffffb3ac7d85 76
ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls_default_read_n;BIO_read;bio_read_intern;bread_conv;sock_read;BIO_clear_flags 1
ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls13_cipher;EVP_DecryptUpdate;ossl_gcm_stream_update;gcm_cipher_internal;ossl_gcm_aad_update;CRYPTO_gcm128_aad 1
ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls13_cipher;EVP_DecryptUpdate;ossl_gcm_stream_update;gcm_cipher_internal;generic_aes_gcm_cipher_update;CRYPTO_gcm128_decrypt_ctr32 1
ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls13_cipher;EVP_DecryptUpdate;ossl_gcm_stream_update;gcm_cipher_internal;generic_aes_gcm_cipher_update;CRYPTO_gcm128_decrypt_ctr32 1
ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls13_cipher;EVP_DecryptUpdate;ossl_gcm_stream_update;gcm_cipher_internal;generic_aes_gcm_cipher_update;CRYPTO_gcm128_decrypt 1
ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls13_cipher;EVP_DecryptUpdate;ossl_gcm_stream_update;gcm_cipher_internal;generic_aes_gcm_cipher_update;CRYPTO_gcm128_decrypt 1
ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls13_cipher;EVP_DecryptFinal_ex;ossl_gcm_stream_final;gcm_cipher_internal;ossl_gcm_cipher_final;CRYPTO_gcm128_finish 1
ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls13_cipher;EVP_DecryptUpdate;ossl_gcm_stream_update;gcm_cipher_internal;ossl_gcm_setiv 1
ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::ReadBuffer* std::__1::__function::__policy_invoker<DB::ReadBuffer* (DB::ISerialization::SubstreamPath const&)>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*)::$_0, DB::ReadBuffer* (DB::ISerialization::SubstreamPath const&)>>(std::__1::__function::__policy_storage const*, DB::ISerialization::SubstreamPath const&);DB::MergeTreeReaderStream::seekToMarkAndColumn(unsigned long, unsigned long);DB::CompressedReadBufferFromFile::seek(unsigned long, unsigned long);DB::AsynchronousBoundedReadBuffer::seek(long, int);DB::ReadBufferFromRemoteFSGather::seek(long, int);DB::ReadBufferFromRemoteFSGather::reset();DB::ReadBufferFromS3::~ReadBufferFromS3();DB::ReadBufferFromS3::~ReadBufferFromS3();DB::S3::ReadBufferFromGetObjectResult::~ReadBufferFromGetObjectResult();Aws::Utils::Stream::ResponseStream::~ResponseStream();DB::SessionAwareIOStream<std::__1::shared_ptr<Poco::Net::HTTPClientSession>>::~SessionAwareIOStream();Poco::Net::HTTPSClientSession::~HTTPSClientSession();Poco::Net::HTTPClientSession::~HTTPClientSession();Poco::Net::SecureStreamSocketImpl::~SecureStreamSocketImpl();Poco::Net::SecureStreamSocketImpl::~SecureStreamSocketImpl();Poco::Net::SecureSocketImpl::~SecureSocketImpl();SSL_free;ossl_ssl_connection_free;OPENSSL_sk_pop_free;ASN1_item_free;ossl_asn1_item_embed_free;ossl_asn1_template_free;ossl_asn1_item_embed_free;ossl_asn1_template_free;ossl_asn1_item_embed_free;free_default;tcache_bin_flush_small 1
ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls_default_read_n;BIO_read;bio_read_intern;bread_conv;sock_read;0x0000ffffb3ac7d85 1
ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls13_cipher;WPACKET_finish;wpacket_intern_close 1
ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls13_cipher;EVP_DecryptUpdate;ossl_gcm_stream_update 1
ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls13_cipher;EVP_CIPHER_CTX_ctrl;ossl_gcm_set_ctx_params 1
ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls13_cipher;WPACKET_init_static_len;0x0000ffffb3a8901d 1
ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls13_cipher;WPACKET_init_static_len;CRYPTO_zalloc 1
ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls13_cipher;evp_cipher_init_internal;gcm_init 1
ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls_default_read_n;BIO_read;bio_read_intern 1
ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls13_cipher;EVP_CIPHER_CTX_ctrl;ossl_gcm_set_ctx_params;ossl_param_find_pidx 3
ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls13_cipher;EVP_CIPHER_CTX_ctrl;ossl_gcm_set_ctx_params;OSSL_PARAM_get_octet_string 1
ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls13_cipher;evp_cipher_init_internal;gcm_init;ossl_prov_is_running 1
ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls13_cipher;EVP_DecryptUpdate;ossl_gcm_stream_update;gcm_cipher_internal 1
ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls13_cipher;WPACKET_finish;wpacket_intern_close;free 1
ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls_default_read_n;BIO_read;bio_read_intern;bread_conv 1
ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();std::__1::packaged_task<DB::IAsynchronousReader::Result ()>::operator()();std::__1::__packaged_task_func<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'(), std::__1::allocator<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'()>, DB::IAsynchronousReader::Result ()>::operator()();DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromS3::initialize(unsigned long);DB::ReadBufferFromS3::sendRequest(unsigned long, unsigned long, std::__1::optional<unsigned long>) const;DB::S3::Client::GetObject(DB::S3::ExtendedRequest<Aws::S3::Model::GetObjectRequest>&) const;Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const;Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> smithy::components::tracing::TracingUtils::MakeCallWithTiming<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error>>(std::__1::function<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> std::__1::__function::__policy_invoker<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const::$_0, Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>>(std::__1::__function::__policy_storage const*);Aws::Client::AWSClient::MakeRequestWithUnparsedResponse(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptExhaustively(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptOneRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::AmazonWebServiceRequest const&, char const*, char const*, char const*) const;std::__1::shared_ptr<Aws::Http::HttpResponse> smithy::components::tracing::TracingUtils::MakeCallWithTiming<std::__1::shared_ptr<Aws::Http::HttpResponse>>(std::__1::function<std::__1::shared_ptr<Aws::Http::HttpResponse> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);DB::S3::PocoHTTPClient::MakeRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::S3::PocoHTTPClient::makeRequestInternalImpl(Aws::Http::HttpRequest&, std::__1::shared_ptr<DB::S3::PocoHTTPResponse>&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::PooledConnection::receiveResponse(Poco::Net::HTTPResponse&);Poco::Net::HTTPClientSession::receiveResponse(Poco::Net::HTTPResponse&);Poco::Net::HTTPResponse::read(std::__1::basic_istream<char, std::__1::char_traits<char>>&);std::__1::basic_istream<char, std::__1::char_traits<char>>::get();std::__1::basic_streambuf<char, std::__1::char_traits<char>>::uflow();Poco::BasicBufferedStreamBuf<char, std::__1::char_traits<char>, Poco::BufferAllocator<char>>::underflow();Poco::Net::HTTPHeaderStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSession::get();Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls_default_read_n;BIO_read;bio_read_intern;bread_conv;sock_read;0x0000ffffb3ac7d85 2
void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls_default_read_n;BIO_read;bio_read_intern;bread_conv;sock_read;0x0000ffffb3ac7d85 55
void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls13_cipher;EVP_DecryptUpdate;ossl_gcm_stream_update;gcm_cipher_internal;generic_aes_gcm_cipher_update;CRYPTO_gcm128_decrypt_ctr32 1
void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls13_cipher;EVP_DecryptUpdate;ossl_gcm_stream_update;gcm_cipher_internal;generic_aes_gcm_cipher_update;CRYPTO_gcm128_decrypt_ctr32 1
void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls13_cipher;EVP_DecryptUpdate;ossl_gcm_stream_update;gcm_cipher_internal;generic_aes_gcm_cipher_update;armv8_aes_gcm_decrypt 1
void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls13_cipher;EVP_DecryptUpdate;ossl_gcm_stream_update;gcm_cipher_internal;generic_aes_gcm_cipher_update;armv8_aes_gcm_decrypt 1
void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls13_cipher;EVP_DecryptUpdate;ossl_gcm_stream_update;gcm_cipher_internal;ossl_gcm_aad_update;CRYPTO_gcm128_aad 1
void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls13_cipher;EVP_DecryptUpdate;ossl_gcm_stream_update;gcm_cipher_internal;ossl_gcm_aad_update;CRYPTO_gcm128_aad 1
void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls13_cipher;EVP_DecryptUpdate;ossl_gcm_stream_update;gcm_cipher_internal;ossl_gcm_aad_update;CRYPTO_gcm128_aad 1
void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls_default_read_n;BIO_read;bio_read_intern;bread_conv;sock_read;0x0000ffffb3ac7d85 88
void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls_default_read_n;BIO_read;bio_read_intern;bread_conv;sock_read;0x0000ffffb3ac7d91 1
void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::ReadBuffer::readStrict(char*, unsigned long);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls_default_read_n;BIO_read;bio_read_intern;bread_conv;sock_read;0x0000ffffb3ac7d85 5
void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::ReadBuffer::readStrict(char*, unsigned long);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls_default_read_n;BIO_read;bio_read_intern;bread_conv;sock_read;0x0000ffffb3ac7d85 14
void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls_default_read_n;BIO_read;bio_read_intern;bread_conv;sock_read;0x0000ffffb3ac7d98;0x0000ffffb3a69b61 1
void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::ReadBuffer* std::__1::__function::__policy_invoker<DB::ReadBuffer* (DB::ISerialization::SubstreamPath const&)>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*)::$_0, DB::ReadBuffer* (DB::ISerialization::SubstreamPath const&)>>(std::__1::__function::__policy_storage const*, DB::ISerialization::SubstreamPath const&);DB::MergeTreeReaderStream::seekToMarkAndColumn(unsigned long, unsigned long);DB::CompressedReadBufferFromFile::seek(unsigned long, unsigned long);DB::AsynchronousBoundedReadBuffer::seek(long, int);DB::ReadBufferFromRemoteFSGather::seek(long, int);DB::ReadBufferFromRemoteFSGather::reset();DB::ReadBufferFromS3::~ReadBufferFromS3();DB::ReadBufferFromS3::~ReadBufferFromS3();DB::S3::ReadBufferFromGetObjectResult::~ReadBufferFromGetObjectResult();Aws::Utils::Stream::ResponseStream::~ResponseStream();DB::SessionAwareIOStream<std::__1::shared_ptr<Poco::Net::HTTPClientSession>>::~SessionAwareIOStream();Poco::Net::HTTPSClientSession::~HTTPSClientSession();Poco::Net::HTTPClientSession::~HTTPClientSession();Poco::Net::SecureStreamSocketImpl::~SecureStreamSocketImpl();Poco::Net::SecureStreamSocketImpl::~SecureStreamSocketImpl();Poco::Net::SecureSocketImpl::~SecureSocketImpl();SSL_free;ossl_ssl_connection_free;OPENSSL_sk_pop_free;ASN1_item_free;ossl_asn1_item_embed_free;ossl_asn1_template_free;ossl_asn1_item_embed_free;ossl_asn1_template_free;x509_name_ex_free;free_default;tcache_bin_flush_small;tcache_bin_flush_edatas_lookup 1
void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::ReadBuffer* std::__1::__function::__policy_invoker<DB::ReadBuffer* (DB::ISerialization::SubstreamPath const&)>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*)::$_0, DB::ReadBuffer* (DB::ISerialization::SubstreamPath const&)>>(std::__1::__function::__policy_storage const*, DB::ISerialization::SubstreamPath const&);DB::MergeTreeReaderStream::seekToMarkAndColumn(unsigned long, unsigned long);DB::CompressedReadBufferFromFile::seek(unsigned long, unsigned long);DB::AsynchronousBoundedReadBuffer::seek(long, int);DB::ReadBufferFromRemoteFSGather::seek(long, int);DB::ReadBufferFromRemoteFSGather::reset();DB::ReadBufferFromS3::~ReadBufferFromS3();DB::ReadBufferFromS3::~ReadBufferFromS3();DB::S3::ReadBufferFromGetObjectResult::~ReadBufferFromGetObjectResult();Aws::Utils::Stream::ResponseStream::~ResponseStream();DB::SessionAwareIOStream<std::__1::shared_ptr<Poco::Net::HTTPClientSession>>::~SessionAwareIOStream();Poco::Net::HTTPSClientSession::~HTTPSClientSession();Poco::Net::HTTPClientSession::~HTTPClientSession();Poco::Net::SecureStreamSocketImpl::~SecureStreamSocketImpl();Poco::Net::SecureStreamSocketImpl::~SecureStreamSocketImpl();Poco::Net::SecureSocketImpl::~SecureSocketImpl();SSL_free;ossl_ssl_connection_free;OPENSSL_sk_pop_free;ASN1_item_free;ossl_asn1_item_embed_free;ossl_asn1_template_free;ossl_asn1_item_embed_free;ossl_asn1_template_free;ossl_asn1_item_embed_free;ossl_asn1_template_free;ossl_asn1_primitive_free;ossl_asn1_primitive_free 1
void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls_default_read_n;BIO_read;bio_read_intern;bread_conv;sock_read;0x0000ffffb3ac7d85 1
void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls13_cipher;evp_cipher_init_internal;gcm_init 1
void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls13_cipher;WPACKET_finish;free 1
void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls13_cipher;WPACKET_init_static_len;CRYPTO_zalloc 1
void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls13_cipher;EVP_DecryptUpdate;ossl_gcm_stream_update 1
void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls_default_read_n;BIO_read;bio_read_intern 1
void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls_default_read_n;BIO_read;bio_read_intern 1
void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls13_cipher;EVP_DecryptUpdate 1
void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls13_cipher;evp_cipher_init_internal 1
void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls13_cipher;WPACKET_put_bytes__ 1
void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls13_post_process_record;tls13_common_post_process_record 1
void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::ReadBuffer* std::__1::__function::__policy_invoker<DB::ReadBuffer* (DB::ISerialization::SubstreamPath const&)>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*)::$_0, DB::ReadBuffer* (DB::ISerialization::SubstreamPath const&)>>(std::__1::__function::__policy_storage const*, DB::ISerialization::SubstreamPath const&);DB::MergeTreeReaderStream::seekToMarkAndColumn(unsigned long, unsigned long);DB::CompressedReadBufferFromFile::seek(unsigned long, unsigned long);DB::AsynchronousBoundedReadBuffer::seek(long, int);DB::ReadBufferFromRemoteFSGather::seek(long, int);DB::ReadBufferFromRemoteFSGather::reset();DB::ReadBufferFromS3::~ReadBufferFromS3();DB::ReadBufferFromS3::~ReadBufferFromS3();DB::S3::ReadBufferFromGetObjectResult::~ReadBufferFromGetObjectResult();Aws::Utils::Stream::ResponseStream::~ResponseStream();DB::SessionAwareIOStream<std::__1::shared_ptr<Poco::Net::HTTPClientSession>>::~SessionAwareIOStream();Poco::Net::HTTPSClientSession::~HTTPSClientSession();Poco::Net::HTTPClientSession::~HTTPClientSession();Poco::Net::HTTPSession::~HTTPSession();Poco::Net::SecureSocketImpl::close();Poco::Net::SecureSocketImpl::shutdown();ssl3_shutdown;ssl3_dispatch_alert;tls_retry_write_records;BIO_write;bio_write_intern;bwrite_conv;sock_write;0x0000ffffb3ac7e55 2
void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();std::__1::packaged_task<DB::IAsynchronousReader::Result ()>::operator()();std::__1::__packaged_task_func<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'(), std::__1::allocator<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'()>, DB::IAsynchronousReader::Result ()>::operator()();DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromS3::initialize(unsigned long);DB::ReadBufferFromS3::sendRequest(unsigned long, unsigned long, std::__1::optional<unsigned long>) const;DB::S3::Client::GetObject(DB::S3::ExtendedRequest<Aws::S3::Model::GetObjectRequest>&) const;Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const;Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> smithy::components::tracing::TracingUtils::MakeCallWithTiming<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error>>(std::__1::function<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> std::__1::__function::__policy_invoker<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const::$_0, Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>>(std::__1::__function::__policy_storage const*);Aws::Client::AWSClient::MakeRequestWithUnparsedResponse(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptExhaustively(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptOneRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::AmazonWebServiceRequest const&, char const*, char const*, char const*) const;std::__1::shared_ptr<Aws::Http::HttpResponse> smithy::components::tracing::TracingUtils::MakeCallWithTiming<std::__1::shared_ptr<Aws::Http::HttpResponse>>(std::__1::function<std::__1::shared_ptr<Aws::Http::HttpResponse> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);DB::S3::PocoHTTPClient::MakeRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::S3::PocoHTTPClient::makeRequestInternalImpl(Aws::Http::HttpRequest&, std::__1::shared_ptr<DB::S3::PocoHTTPResponse>&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::makeHTTPSession(DB::HTTPConnectionGroupType, Poco::URI const&, DB::ConnectionTimeouts const&, DB::ProxyConfiguration const&, unsigned long*);DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::getConnection(DB::ConnectionTimeouts const&, unsigned long*);DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::prepareNewConnection(DB::ConnectionTimeouts const&, unsigned long*);Poco::Net::HTTPClientSession::reconnect(unsigned long*);Poco::Net::HTTPSClientSession::connect(Poco::Net::SocketAddress const&);Poco::Net::HTTPSession::connect(Poco::Net::SocketAddress const&);Poco::Net::SecureStreamSocketImpl::connect(Poco::Net::SocketAddress const&, Poco::Timespan const&);Poco::Net::SecureSocketImpl::connect(Poco::Net::SocketAddress const&, Poco::Timespan const&, bool);Poco::Net::SecureSocketImpl::connectSSL(bool);state_machine;tls_get_message_header;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls_default_read_n;BIO_read;bio_read_intern;bread_conv;sock_read;0x0000ffffb3ac7d85 3
void* std::__1::__thread_proxy[abi:ne190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>>(void*);ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker();ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();std::__1::packaged_task<DB::IAsynchronousReader::Result ()>::operator()();std::__1::__packaged_task_func<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'(), std::__1::allocator<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'()>, DB::IAsynchronousReader::Result ()>::operator()();DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromS3::initialize(unsigned long);DB::ReadBufferFromS3::sendRequest(unsigned long, unsigned long, std::__1::optional<unsigned long>) const;DB::S3::Client::GetObject(DB::S3::ExtendedRequest<Aws::S3::Model::GetObjectRequest>&) const;Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const;Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> smithy::components::tracing::TracingUtils::MakeCallWithTiming<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error>>(std::__1::function<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> std::__1::__function::__policy_invoker<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const::$_0, Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>>(std::__1::__function::__policy_storage const*);Aws::Client::AWSClient::MakeRequestWithUnparsedResponse(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptExhaustively(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptOneRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::AmazonWebServiceRequest const&, char const*, char const*, char const*) const;std::__1::shared_ptr<Aws::Http::HttpResponse> smithy::components::tracing::TracingUtils::MakeCallWithTiming<std::__1::shared_ptr<Aws::Http::HttpResponse>>(std::__1::function<std::__1::shared_ptr<Aws::Http::HttpResponse> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);DB::S3::PocoHTTPClient::MakeRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::S3::PocoHTTPClient::makeRequestInternalImpl(Aws::Http::HttpRequest&, std::__1::shared_ptr<DB::S3::PocoHTTPResponse>&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::makeHTTPSession(DB::HTTPConnectionGroupType, Poco::URI const&, DB::ConnectionTimeouts const&, DB::ProxyConfiguration const&, unsigned long*);DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::getConnection(DB::ConnectionTimeouts const&, unsigned long*);DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::prepareNewConnection(DB::ConnectionTimeouts const&, unsigned long*);Poco::Net::HTTPClientSession::reconnect(unsigned long*);Poco::Net::HTTPSClientSession::connect(Poco::Net::SocketAddress const&);Poco::Net::HTTPSession::connect(Poco::Net::SocketAddress const&);Poco::Net::SecureStreamSocketImpl::connect(Poco::Net::SocketAddress const&, Poco::Timespan const&);Poco::Net::SecureSocketImpl::connect(Poco::Net::SocketAddress const&, Poco::Timespan const&, bool);Poco::Net::SecureSocketImpl::connectSSL(bool);state_machine;tls_post_process_server_certificate;ssl_verify_internal;x509_verify_x509;verify_chain;internal_verify;ASN1_item_verify_ex;evp_md_ctx_new_ex;int_ctx_new;ossl_namemap_doall_names;OPENSSL_LH_doall_arg 1
ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls13_cipher;EVP_DecryptUpdate;ossl_gcm_stream_update;gcm_cipher_internal;generic_aes_gcm_cipher_update 1
ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls13_cipher;EVP_DecryptUpdate;ossl_gcm_stream_update;gcm_cipher_internal;generic_aes_gcm_cipher_update 1
ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls13_cipher;EVP_CIPHER_CTX_ctrl;ossl_gcm_set_ctx_params;ossl_param_find_pidx 1
ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls13_cipher;EVP_DecryptFinal_ex;ossl_gcm_stream_final;gcm_cipher_internal 2
ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::ReadBuffer* std::__1::__function::__policy_invoker<DB::ReadBuffer* (DB::ISerialization::SubstreamPath const&)>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*)::$_0, DB::ReadBuffer* (DB::ISerialization::SubstreamPath const&)>>(std::__1::__function::__policy_storage const*, DB::ISerialization::SubstreamPath const&);DB::MergeTreeReaderStream::seekToMarkAndColumn(unsigned long, unsigned long);DB::CompressedReadBufferFromFile::seek(unsigned long, unsigned long);DB::AsynchronousBoundedReadBuffer::seek(long, int);DB::ReadBufferFromRemoteFSGather::seek(long, int);DB::ReadBufferFromRemoteFSGather::reset();DB::ReadBufferFromS3::~ReadBufferFromS3();DB::ReadBufferFromS3::~ReadBufferFromS3();DB::S3::ReadBufferFromGetObjectResult::~ReadBufferFromGetObjectResult();Aws::Utils::Stream::ResponseStream::~ResponseStream();DB::SessionAwareIOStream<std::__1::shared_ptr<Poco::Net::HTTPClientSession>>::~SessionAwareIOStream();Poco::Net::HTTPSClientSession::~HTTPSClientSession();Poco::Net::HTTPClientSession::~HTTPClientSession();Poco::Net::SecureStreamSocketImpl::~SecureStreamSocketImpl();Poco::Net::SecureStreamSocketImpl::~SecureStreamSocketImpl();Poco::Net::SecureSocketImpl::~SecureSocketImpl();SSL_free;ossl_ssl_connection_free;OPENSSL_sk_pop_free;ASN1_item_free;ossl_asn1_item_embed_free;ossl_asn1_template_free;ossl_asn1_item_embed_free;ossl_asn1_template_free;ossl_asn1_primitive_free;ossl_asn1_primitive_free 1
ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::ReadBuffer* std::__1::__function::__policy_invoker<DB::ReadBuffer* (DB::ISerialization::SubstreamPath const&)>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*)::$_0, DB::ReadBuffer* (DB::ISerialization::SubstreamPath const&)>>(std::__1::__function::__policy_storage const*, DB::ISerialization::SubstreamPath const&);DB::MergeTreeReaderStream::seekToMarkAndColumn(unsigned long, unsigned long);DB::CompressedReadBufferFromFile::seek(unsigned long, unsigned long);DB::AsynchronousBoundedReadBuffer::seek(long, int);DB::ReadBufferFromRemoteFSGather::seek(long, int);DB::ReadBufferFromRemoteFSGather::reset();DB::ReadBufferFromS3::~ReadBufferFromS3();DB::ReadBufferFromS3::~ReadBufferFromS3();DB::S3::ReadBufferFromGetObjectResult::~ReadBufferFromGetObjectResult();Aws::Utils::Stream::ResponseStream::~ResponseStream();DB::SessionAwareIOStream<std::__1::shared_ptr<Poco::Net::HTTPClientSession>>::~SessionAwareIOStream();Poco::Net::HTTPSClientSession::~HTTPSClientSession();Poco::Net::HTTPClientSession::~HTTPClientSession();Poco::Net::SecureStreamSocketImpl::~SecureStreamSocketImpl();Poco::Net::SecureStreamSocketImpl::~SecureStreamSocketImpl();Poco::Net::SecureSocketImpl::~SecureSocketImpl();SSL_free;ossl_ssl_connection_free;RECORD_LAYER_clear;tls_free;tls_int_free;free_default;te_event_trigger;tcache_event;tcache_bin_flush_small;tcache_bin_flush_edatas_lookup 1
ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();void std::__1::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl(std::__1::shared_ptr<DB::IAcquiredSlot>)::$_0, void ()>>(std::__1::__function::__policy_storage const*);DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::ReadBuffer* std::__1::__function::__policy_invoker<DB::ReadBuffer* (DB::ISerialization::SubstreamPath const&)>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*)::$_0, DB::ReadBuffer* (DB::ISerialization::SubstreamPath const&)>>(std::__1::__function::__policy_storage const*, DB::ISerialization::SubstreamPath const&);DB::MergeTreeReaderStream::seekToMarkAndColumn(unsigned long, unsigned long);DB::CompressedReadBufferFromFile::seek(unsigned long, unsigned long);DB::AsynchronousBoundedReadBuffer::seek(long, int);DB::ReadBufferFromRemoteFSGather::seek(long, int);DB::ReadBufferFromRemoteFSGather::reset();DB::ReadBufferFromS3::~ReadBufferFromS3();DB::ReadBufferFromS3::~ReadBufferFromS3();DB::S3::ReadBufferFromGetObjectResult::~ReadBufferFromGetObjectResult();Aws::Utils::Stream::ResponseStream::~ResponseStream();DB::SessionAwareIOStream<std::__1::shared_ptr<Poco::Net::HTTPClientSession>>::~SessionAwareIOStream();Poco::Net::HTTPSClientSession::~HTTPSClientSession();Poco::Net::HTTPClientSession::~HTTPClientSession();Poco::Net::SecureStreamSocketImpl::~SecureStreamSocketImpl();Poco::Net::SecureStreamSocketImpl::~SecureStreamSocketImpl();Poco::Net::SecureSocketImpl::~SecureSocketImpl();SSL_free;ossl_ssl_connection_free;RECORD_LAYER_clear;tls_free;tls_int_free;free_default;te_event_trigger;tcache_event;tcache_bin_flush_small;tcache_bin_flush_edatas_lookup 1
ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();std::__1::packaged_task<DB::IAsynchronousReader::Result ()>::operator()();std::__1::__packaged_task_func<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'(), std::__1::allocator<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'()>, DB::IAsynchronousReader::Result ()>::operator()();DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromS3::initialize(unsigned long);DB::ReadBufferFromS3::sendRequest(unsigned long, unsigned long, std::__1::optional<unsigned long>) const;DB::S3::Client::GetObject(DB::S3::ExtendedRequest<Aws::S3::Model::GetObjectRequest>&) const;Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const;Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> smithy::components::tracing::TracingUtils::MakeCallWithTiming<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error>>(std::__1::function<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> std::__1::__function::__policy_invoker<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const::$_0, Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>>(std::__1::__function::__policy_storage const*);Aws::Client::AWSClient::MakeRequestWithUnparsedResponse(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptExhaustively(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptOneRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::AmazonWebServiceRequest const&, char const*, char const*, char const*) const;std::__1::shared_ptr<Aws::Http::HttpResponse> smithy::components::tracing::TracingUtils::MakeCallWithTiming<std::__1::shared_ptr<Aws::Http::HttpResponse>>(std::__1::function<std::__1::shared_ptr<Aws::Http::HttpResponse> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);DB::S3::PocoHTTPClient::MakeRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::S3::PocoHTTPClient::makeRequestInternalImpl(Aws::Http::HttpRequest&, std::__1::shared_ptr<DB::S3::PocoHTTPResponse>&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::makeHTTPSession(DB::HTTPConnectionGroupType, Poco::URI const&, DB::ConnectionTimeouts const&, DB::ProxyConfiguration const&, unsigned long*);DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::getConnection(DB::ConnectionTimeouts const&, unsigned long*);DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::prepareNewConnection(DB::ConnectionTimeouts const&, unsigned long*);Poco::Net::HTTPClientSession::reconnect(unsigned long*);Poco::Net::HTTPSClientSession::connect(Poco::Net::SocketAddress const&);Poco::Net::HTTPSession::connect(Poco::Net::SocketAddress const&);Poco::Net::SecureStreamSocketImpl::connect(Poco::Net::SocketAddress const&, Poco::Timespan const&);Poco::Net::SecureSocketImpl::connect(Poco::Net::SocketAddress const&, Poco::Timespan const&, bool);Poco::Net::SecureSocketImpl::connectSSL(bool);state_machine;tls_process_server_certificate;ASN1_item_d2i;asn1_item_embed_d2i;asn1_template_noexp_d2i;asn1_item_embed_d2i;asn1_template_noexp_d2i;x509_pubkey_ex_d2i_ex;ASN1_item_ex_d2i;asn1_item_embed_d2i;asn1_template_noexp_d2i;asn1_d2i_ex_primitive;ossl_c2i_ASN1_BIT_STRING 1
ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();std::__1::packaged_task<DB::IAsynchronousReader::Result ()>::operator()();std::__1::__packaged_task_func<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'(), std::__1::allocator<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'()>, DB::IAsynchronousReader::Result ()>::operator()();DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromS3::initialize(unsigned long);DB::ReadBufferFromS3::sendRequest(unsigned long, unsigned long, std::__1::optional<unsigned long>) const;DB::S3::Client::GetObject(DB::S3::ExtendedRequest<Aws::S3::Model::GetObjectRequest>&) const;Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const;Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> smithy::components::tracing::TracingUtils::MakeCallWithTiming<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error>>(std::__1::function<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> std::__1::__function::__policy_invoker<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const::$_0, Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>>(std::__1::__function::__policy_storage const*);Aws::Client::AWSClient::MakeRequestWithUnparsedResponse(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptExhaustively(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptOneRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::AmazonWebServiceRequest const&, char const*, char const*, char const*) const;std::__1::shared_ptr<Aws::Http::HttpResponse> smithy::components::tracing::TracingUtils::MakeCallWithTiming<std::__1::shared_ptr<Aws::Http::HttpResponse>>(std::__1::function<std::__1::shared_ptr<Aws::Http::HttpResponse> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);DB::S3::PocoHTTPClient::MakeRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::S3::PocoHTTPClient::makeRequestInternalImpl(Aws::Http::HttpRequest&, std::__1::shared_ptr<DB::S3::PocoHTTPResponse>&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::makeHTTPSession(DB::HTTPConnectionGroupType, Poco::URI const&, DB::ConnectionTimeouts const&, DB::ProxyConfiguration const&, unsigned long*);DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::getConnection(DB::ConnectionTimeouts const&, unsigned long*);DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::prepareNewConnection(DB::ConnectionTimeouts const&, unsigned long*);Poco::Net::HTTPClientSession::reconnect(unsigned long*);Poco::Net::HTTPSClientSession::connect(Poco::Net::SocketAddress const&);Poco::Net::HTTPSession::connect(Poco::Net::SocketAddress const&);Poco::Net::SecureStreamSocketImpl::connect(Poco::Net::SocketAddress const&, Poco::Timespan const&);Poco::Net::SecureSocketImpl::connect(Poco::Net::SocketAddress const&, Poco::Timespan const&, bool);Poco::Net::SecureSocketImpl::connectSSL(bool);state_machine;ossl_statem_client_post_work;tls13_change_cipher_state;derive_secret_key_and_iv;tls13_hkdf_expand_ex;kdf_tls1_3_derive;kdf_tls1_3_set_ctx_params;hkdf_common_set_ctx_params;ossl_prov_digest_load_from_params;evp_generic_fetch;inner_evp_generic_fetch;ossl_method_store_cache_get;OPENSSL_LH_retrieve 1
ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();std::__1::packaged_task<DB::IAsynchronousReader::Result ()>::operator()();std::__1::__packaged_task_func<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'(), std::__1::allocator<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'()>, DB::IAsynchronousReader::Result ()>::operator()();DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromS3::initialize(unsigned long);DB::ReadBufferFromS3::sendRequest(unsigned long, unsigned long, std::__1::optional<unsigned long>) const;DB::S3::Client::GetObject(DB::S3::ExtendedRequest<Aws::S3::Model::GetObjectRequest>&) const;Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const;Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> smithy::components::tracing::TracingUtils::MakeCallWithTiming<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error>>(std::__1::function<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> std::__1::__function::__policy_invoker<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const::$_0, Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>>(std::__1::__function::__policy_storage const*);Aws::Client::AWSClient::MakeRequestWithUnparsedResponse(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptExhaustively(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptOneRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::AmazonWebServiceRequest const&, char const*, char const*, char const*) const;std::__1::shared_ptr<Aws::Http::HttpResponse> smithy::components::tracing::TracingUtils::MakeCallWithTiming<std::__1::shared_ptr<Aws::Http::HttpResponse>>(std::__1::function<std::__1::shared_ptr<Aws::Http::HttpResponse> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);DB::S3::PocoHTTPClient::MakeRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::S3::PocoHTTPClient::makeRequestInternalImpl(Aws::Http::HttpRequest&, std::__1::shared_ptr<DB::S3::PocoHTTPResponse>&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::makeHTTPSession(DB::HTTPConnectionGroupType, Poco::URI const&, DB::ConnectionTimeouts const&, DB::ProxyConfiguration const&, unsigned long*);DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::getConnection(DB::ConnectionTimeouts const&, unsigned long*);DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::prepareNewConnection(DB::ConnectionTimeouts const&, unsigned long*);Poco::Net::HTTPClientSession::reconnect(unsigned long*);Poco::Net::HTTPSClientSession::connect(Poco::Net::SocketAddress const&);Poco::Net::HTTPSession::connect(Poco::Net::SocketAddress const&);Poco::Net::SecureStreamSocketImpl::connect(Poco::Net::SocketAddress const&, Poco::Timespan const&);Poco::Net::SecureSocketImpl::connect(Poco::Net::SocketAddress const&, Poco::Timespan const&, bool);Poco::Net::SecureSocketImpl::connectSSL(bool);state_machine;tls_post_process_server_certificate;ssl_verify_internal;x509_verify_x509;verify_chain;internal_verify;ossl_x509_check_cert_time;X509_cmp_time;ASN1_TIME_adj;ossl_asn1_time_from_tm;BIO_snprintf;_dopr;fmtint 1
ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()();ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::worker();std::__1::packaged_task<DB::IAsynchronousReader::Result ()>::operator()();std::__1::__packaged_task_func<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'(), std::__1::allocator<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'()>, DB::IAsynchronousReader::Result ()>::operator()();DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromS3::initialize(unsigned long);DB::ReadBufferFromS3::sendRequest(unsigned long, unsigned long, std::__1::optional<unsigned long>) const;DB::S3::Client::GetObject(DB::S3::ExtendedRequest<Aws::S3::Model::GetObjectRequest>&) const;Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const;Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> smithy::components::tracing::TracingUtils::MakeCallWithTiming<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error>>(std::__1::function<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> std::__1::__function::__policy_invoker<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const::$_0, Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>>(std::__1::__function::__policy_storage const*);Aws::Client::AWSClient::MakeRequestWithUnparsedResponse(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptExhaustively(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptOneRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::AmazonWebServiceRequest const&, char const*, char const*, char const*) const;std::__1::shared_ptr<Aws::Http::HttpResponse> smithy::components::tracing::TracingUtils::MakeCallWithTiming<std::__1::shared_ptr<Aws::Http::HttpResponse>>(std::__1::function<std::__1::shared_ptr<Aws::Http::HttpResponse> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);DB::S3::PocoHTTPClient::MakeRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::S3::PocoHTTPClient::makeRequestInternalImpl(Aws::Http::HttpRequest&, std::__1::shared_ptr<DB::S3::PocoHTTPResponse>&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::makeHTTPSession(DB::HTTPConnectionGroupType, Poco::URI const&, DB::ConnectionTimeouts const&, DB::ProxyConfiguration const&, unsigned long*);DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::getConnection(DB::ConnectionTimeouts const&, unsigned long*);DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::prepareNewConnection(DB::ConnectionTimeouts const&, unsigned long*);Poco::Net::HTTPClientSession::reconnect(unsigned long*);Poco::Net::HTTPSClientSession::connect(Poco::Net::SocketAddress const&);Poco::Net::HTTPSession::connect(Poco::Net::SocketAddress const&);Poco::Net::SecureStreamSocketImpl::connect(Poco::Net::SocketAddress const&, Poco::Timespan const&);Poco::Net::SecureSocketImpl::connect(Poco::Net::SocketAddress const&, Poco::Timespan const&, bool);Poco::Net::SecureSocketImpl::connectSSL(bool);state_machine;tls_post_process_server_certificate;ssl_verify_internal;x509_verify_x509;verify_chain;build_chain;ossl_x509v3_cache_extensions;X509V3_get_d2i;ASN1_item_d2i;asn1_template_noexp_d2i;asn1_item_embed_d2i;asn1_template_noexp_d2i;asn1_item_embed_d2i 1
DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::ReadBuffer* std::__1::__function::__policy_invoker<DB::ReadBuffer* (DB::ISerialization::SubstreamPath const&)>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*)::$_0, DB::ReadBuffer* (DB::ISerialization::SubstreamPath const&)>>(std::__1::__function::__policy_storage const*, DB::ISerialization::SubstreamPath const&);DB::MergeTreeReaderStream::seekToMarkAndColumn(unsigned long, unsigned long);DB::CompressedReadBufferFromFile::seek(unsigned long, unsigned long);DB::AsynchronousBoundedReadBuffer::seek(long, int);DB::ReadBufferFromRemoteFSGather::seek(long, int);DB::ReadBufferFromRemoteFSGather::reset();DB::ReadBufferFromS3::~ReadBufferFromS3();DB::ReadBufferFromS3::~ReadBufferFromS3();DB::S3::ReadBufferFromGetObjectResult::~ReadBufferFromGetObjectResult();Aws::Utils::Stream::ResponseStream::~ResponseStream();DB::SessionAwareIOStream<std::__1::shared_ptr<Poco::Net::HTTPClientSession>>::~SessionAwareIOStream();Poco::Net::HTTPSClientSession::~HTTPSClientSession();Poco::Net::HTTPClientSession::~HTTPClientSession();Poco::Net::SecureStreamSocketImpl::~SecureStreamSocketImpl();Poco::Net::SecureStreamSocketImpl::~SecureStreamSocketImpl();Poco::Net::SecureSocketImpl::~SecureSocketImpl();SSL_free;ossl_ssl_connection_free;OPENSSL_sk_pop_free;ASN1_item_free;ossl_asn1_item_embed_free;ossl_asn1_template_free;ossl_asn1_item_embed_free;ossl_asn1_template_free;x509_pubkey_ex_free;EVP_PKEY_free;evp_pkey_free_it;RSA_free;free_default;tcache_bin_flush_small 1
DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::ReadBuffer* std::__1::__function::__policy_invoker<DB::ReadBuffer* (DB::ISerialization::SubstreamPath const&)>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*)::$_0, DB::ReadBuffer* (DB::ISerialization::SubstreamPath const&)>>(std::__1::__function::__policy_storage const*, DB::ISerialization::SubstreamPath const&);DB::MergeTreeReaderStream::seekToMarkAndColumn(unsigned long, unsigned long);DB::CompressedReadBufferFromFile::seek(unsigned long, unsigned long);DB::AsynchronousBoundedReadBuffer::seek(long, int);DB::ReadBufferFromRemoteFSGather::seek(long, int);DB::ReadBufferFromRemoteFSGather::reset();DB::ReadBufferFromS3::~ReadBufferFromS3();DB::ReadBufferFromS3::~ReadBufferFromS3();DB::S3::ReadBufferFromGetObjectResult::~ReadBufferFromGetObjectResult();Aws::Utils::Stream::ResponseStream::~ResponseStream();DB::SessionAwareIOStream<std::__1::shared_ptr<Poco::Net::HTTPClientSession>>::~SessionAwareIOStream();Poco::Net::HTTPSClientSession::~HTTPSClientSession();Poco::Net::HTTPClientSession::~HTTPClientSession();Poco::Net::SecureStreamSocketImpl::~SecureStreamSocketImpl();Poco::Net::SecureStreamSocketImpl::~SecureStreamSocketImpl();Poco::Net::SecureSocketImpl::~SecureSocketImpl();SSL_free;ossl_ssl_connection_free;OPENSSL_sk_pop_free;ASN1_item_free;ossl_asn1_item_embed_free;ossl_asn1_template_free;ossl_asn1_item_embed_free;ossl_asn1_template_free;x509_pubkey_ex_free;ASN1_item_free;ossl_asn1_item_embed_free;free_default;tcache_bin_flush_small;tcache_bin_flush_edatas_lookup 1
DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::ReadBuffer* std::__1::__function::__policy_invoker<DB::ReadBuffer* (DB::ISerialization::SubstreamPath const&)>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*)::$_0, DB::ReadBuffer* (DB::ISerialization::SubstreamPath const&)>>(std::__1::__function::__policy_storage const*, DB::ISerialization::SubstreamPath const&);DB::MergeTreeReaderStream::seekToMarkAndColumn(unsigned long, unsigned long);DB::CompressedReadBufferFromFile::seek(unsigned long, unsigned long);DB::AsynchronousBoundedReadBuffer::seek(long, int);DB::ReadBufferFromRemoteFSGather::seek(long, int);DB::ReadBufferFromRemoteFSGather::reset();DB::ReadBufferFromS3::~ReadBufferFromS3();DB::ReadBufferFromS3::~ReadBufferFromS3();DB::S3::ReadBufferFromGetObjectResult::~ReadBufferFromGetObjectResult();Aws::Utils::Stream::ResponseStream::~ResponseStream();DB::SessionAwareIOStream<std::__1::shared_ptr<Poco::Net::HTTPClientSession>>::~SessionAwareIOStream();Poco::Net::HTTPSClientSession::~HTTPSClientSession();Poco::Net::HTTPClientSession::~HTTPClientSession();Poco::Net::SecureStreamSocketImpl::~SecureStreamSocketImpl();Poco::Net::SecureStreamSocketImpl::~SecureStreamSocketImpl();Poco::Net::SecureSocketImpl::~SecureSocketImpl();SSL_free;ossl_ssl_connection_free;SSL_SESSION_free;OPENSSL_sk_pop_free;ASN1_item_free;ossl_asn1_item_embed_free;ossl_asn1_template_free;ossl_asn1_item_embed_free;ossl_asn1_template_free;x509_pubkey_ex_free;ASN1_item_free;ossl_asn1_item_embed_free;ossl_asn1_template_free;ossl_asn1_primitive_free 1
std::__1::packaged_task<DB::IAsynchronousReader::Result ()>::operator()();std::__1::__packaged_task_func<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'(), std::__1::allocator<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'()>, DB::IAsynchronousReader::Result ()>::operator()();DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromS3::initialize(unsigned long);DB::ReadBufferFromS3::sendRequest(unsigned long, unsigned long, std::__1::optional<unsigned long>) const;DB::S3::Client::GetObject(DB::S3::ExtendedRequest<Aws::S3::Model::GetObjectRequest>&) const;Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const;Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> smithy::components::tracing::TracingUtils::MakeCallWithTiming<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error>>(std::__1::function<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> std::__1::__function::__policy_invoker<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const::$_0, Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>>(std::__1::__function::__policy_storage const*);Aws::Client::AWSClient::MakeRequestWithUnparsedResponse(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptExhaustively(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptOneRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::AmazonWebServiceRequest const&, char const*, char const*, char const*) const;std::__1::shared_ptr<Aws::Http::HttpResponse> smithy::components::tracing::TracingUtils::MakeCallWithTiming<std::__1::shared_ptr<Aws::Http::HttpResponse>>(std::__1::function<std::__1::shared_ptr<Aws::Http::HttpResponse> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);DB::S3::PocoHTTPClient::MakeRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::S3::PocoHTTPClient::makeRequestInternalImpl(Aws::Http::HttpRequest&, std::__1::shared_ptr<DB::S3::PocoHTTPResponse>&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::makeHTTPSession(DB::HTTPConnectionGroupType, Poco::URI const&, DB::ConnectionTimeouts const&, DB::ProxyConfiguration const&, unsigned long*);DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::getConnection(DB::ConnectionTimeouts const&, unsigned long*);DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::prepareNewConnection(DB::ConnectionTimeouts const&, unsigned long*);Poco::Net::HTTPClientSession::reconnect(unsigned long*);Poco::Net::HTTPSClientSession::connect(Poco::Net::SocketAddress const&);Poco::Net::HTTPSession::connect(Poco::Net::SocketAddress const&);Poco::Net::SecureStreamSocketImpl::connect(Poco::Net::SocketAddress const&, Poco::Timespan const&);Poco::Net::SecureSocketImpl::connect(Poco::Net::SocketAddress const&, Poco::Timespan const&, bool);Poco::Net::SecureSocketImpl::connectSSL(bool);state_machine;tls_post_process_server_certificate;ssl_verify_internal;x509_verify_x509;verify_chain;build_chain;X509_STORE_CTX_get1_issuer;ossl_x509_store_ctx_get_by_subject;by_store_subject_ex;cache_objects;OSSL_STORE_load;file_load;OPENSSL_DIR_read;OPENSSL_strlcpy;0x0000ffffb3a89979 1
std::__1::packaged_task<DB::IAsynchronousReader::Result ()>::operator()();std::__1::__packaged_task_func<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'(), std::__1::allocator<std::__1::function<std::__1::future<DB::IAsynchronousReader::Result> (DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)> DB::threadPoolCallbackRunnerUnsafe<DB::IAsynchronousReader::Result, DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0>(ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)::'lambda'(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::operator()(DB::ThreadPoolRemoteFSReader::submit(DB::IAsynchronousReader::Request)::$_0&&, Priority)::'lambda'()>, DB::IAsynchronousReader::Result ()>::operator()();DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromS3::initialize(unsigned long);DB::ReadBufferFromS3::sendRequest(unsigned long, unsigned long, std::__1::optional<unsigned long>) const;DB::S3::Client::GetObject(DB::S3::ExtendedRequest<Aws::S3::Model::GetObjectRequest>&) const;Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const;Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> smithy::components::tracing::TracingUtils::MakeCallWithTiming<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error>>(std::__1::function<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> std::__1::__function::__policy_invoker<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const::$_0, Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>>(std::__1::__function::__policy_storage const*);Aws::Client::AWSClient::MakeRequestWithUnparsedResponse(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptExhaustively(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptOneRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::AmazonWebServiceRequest const&, char const*, char const*, char const*) const;std::__1::shared_ptr<Aws::Http::HttpResponse> smithy::components::tracing::TracingUtils::MakeCallWithTiming<std::__1::shared_ptr<Aws::Http::HttpResponse>>(std::__1::function<std::__1::shared_ptr<Aws::Http::HttpResponse> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);DB::S3::PocoHTTPClient::MakeRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::S3::PocoHTTPClient::makeRequestInternalImpl(Aws::Http::HttpRequest&, std::__1::shared_ptr<DB::S3::PocoHTTPResponse>&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::makeHTTPSession(DB::HTTPConnectionGroupType, Poco::URI const&, DB::ConnectionTimeouts const&, DB::ProxyConfiguration const&, unsigned long*);DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::getConnection(DB::ConnectionTimeouts const&, unsigned long*);DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::prepareNewConnection(DB::ConnectionTimeouts const&, unsigned long*);Poco::Net::HTTPClientSession::reconnect(unsigned long*);Poco::Net::HTTPSClientSession::connect(Poco::Net::SocketAddress const&);Poco::Net::HTTPSession::connect(Poco::Net::SocketAddress const&);Poco::Net::SecureStreamSocketImpl::connect(Poco::Net::SocketAddress const&, Poco::Timespan const&);Poco::Net::SecureSocketImpl::connect(Poco::Net::SocketAddress const&, Poco::Timespan const&, bool);Poco::Net::SecureSocketImpl::connectSSL(bool);state_machine;tls_post_process_server_certificate;ssl_verify_internal;x509_verify_x509;verify_chain;build_chain;X509_STORE_CTX_get1_issuer;ossl_x509_store_ctx_get_by_subject;by_store_subject_ex;cache_objects;OSSL_STORE_open_ex;file_open;OPENSSL_DIR_read;0x0000ffffb3aa28dc;0x0000ffffb3aa2819 1
DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromS3::initialize(unsigned long);DB::ReadBufferFromS3::sendRequest(unsigned long, unsigned long, std::__1::optional<unsigned long>) const;DB::S3::Client::GetObject(DB::S3::ExtendedRequest<Aws::S3::Model::GetObjectRequest>&) const;Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const;Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> smithy::components::tracing::TracingUtils::MakeCallWithTiming<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error>>(std::__1::function<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> std::__1::__function::__policy_invoker<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const::$_0, Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>>(std::__1::__function::__policy_storage const*);Aws::Client::AWSClient::MakeRequestWithUnparsedResponse(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptExhaustively(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptOneRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::AmazonWebServiceRequest const&, char const*, char const*, char const*) const;std::__1::shared_ptr<Aws::Http::HttpResponse> smithy::components::tracing::TracingUtils::MakeCallWithTiming<std::__1::shared_ptr<Aws::Http::HttpResponse>>(std::__1::function<std::__1::shared_ptr<Aws::Http::HttpResponse> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);DB::S3::PocoHTTPClient::MakeRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::S3::PocoHTTPClient::makeRequestInternalImpl(Aws::Http::HttpRequest&, std::__1::shared_ptr<DB::S3::PocoHTTPResponse>&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::makeHTTPSession(DB::HTTPConnectionGroupType, Poco::URI const&, DB::ConnectionTimeouts const&, DB::ProxyConfiguration const&, unsigned long*);DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::getConnection(DB::ConnectionTimeouts const&, unsigned long*);DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::prepareNewConnection(DB::ConnectionTimeouts const&, unsigned long*);Poco::Net::HTTPClientSession::reconnect(unsigned long*);Poco::Net::HTTPSClientSession::connect(Poco::Net::SocketAddress const&);Poco::Net::HTTPSession::connect(Poco::Net::SocketAddress const&);Poco::Net::SecureStreamSocketImpl::connect(Poco::Net::SocketAddress const&, Poco::Timespan const&);Poco::Net::SecureSocketImpl::connect(Poco::Net::SocketAddress const&, Poco::Timespan const&, bool);Poco::Net::SecureSocketImpl::connectSSL(bool);state_machine;tls_post_process_server_certificate;ssl_verify_internal;x509_verify_x509;verify_chain;build_chain;X509_STORE_CTX_get1_issuer;ossl_x509_store_ctx_get_by_subject;by_store_subject_ex;cache_objects;OSSL_STORE_open_ex;file_open;OPENSSL_DIR_read;calloc;prof_tctx_create;prof_lookup;ckh_search;ckh_isearch;prof_bt_keycomp 1
DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromS3::initialize(unsigned long);DB::ReadBufferFromS3::sendRequest(unsigned long, unsigned long, std::__1::optional<unsigned long>) const;DB::S3::Client::GetObject(DB::S3::ExtendedRequest<Aws::S3::Model::GetObjectRequest>&) const;Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const;Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> smithy::components::tracing::TracingUtils::MakeCallWithTiming<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error>>(std::__1::function<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> std::__1::__function::__policy_invoker<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const::$_0, Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>>(std::__1::__function::__policy_storage const*);Aws::Client::AWSClient::MakeRequestWithUnparsedResponse(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptExhaustively(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptOneRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::AmazonWebServiceRequest const&, char const*, char const*, char const*) const;std::__1::shared_ptr<Aws::Http::HttpResponse> smithy::components::tracing::TracingUtils::MakeCallWithTiming<std::__1::shared_ptr<Aws::Http::HttpResponse>>(std::__1::function<std::__1::shared_ptr<Aws::Http::HttpResponse> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);DB::S3::PocoHTTPClient::MakeRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::S3::PocoHTTPClient::makeRequestInternalImpl(Aws::Http::HttpRequest&, std::__1::shared_ptr<DB::S3::PocoHTTPResponse>&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::PooledConnection::receiveResponse(Poco::Net::HTTPResponse&);Poco::Net::HTTPClientSession::receiveResponse(Poco::Net::HTTPResponse&);Poco::Net::HTTPResponse::read(std::__1::basic_istream<char, std::__1::char_traits<char>>&);std::__1::basic_istream<char, std::__1::char_traits<char>>::get();std::__1::basic_streambuf<char, std::__1::char_traits<char>>::uflow();Poco::BasicBufferedStreamBuf<char, std::__1::char_traits<char>, Poco::BufferAllocator<char>>::underflow();Poco::Net::HTTPHeaderStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSession::get();Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls_default_read_n;BIO_read;bio_read_intern;bread_conv;sock_read;0x0000ffffb3ac7d85;0x0000ffffb3c3a850;DB::(anonymous namespace)::writeTraceInfo(DB::TraceType, int, siginfo_t*, void*);StackTrace::StackTrace(ucontext_t const&);unw_backtrace;libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_arm64>::step(bool) 1
DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromS3::initialize(unsigned long);DB::ReadBufferFromS3::sendRequest(unsigned long, unsigned long, std::__1::optional<unsigned long>) const;DB::S3::Client::GetObject(DB::S3::ExtendedRequest<Aws::S3::Model::GetObjectRequest>&) const;Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const;Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> smithy::components::tracing::TracingUtils::MakeCallWithTiming<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error>>(std::__1::function<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> std::__1::__function::__policy_invoker<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const::$_0, Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>>(std::__1::__function::__policy_storage const*);Aws::Client::AWSClient::MakeRequestWithUnparsedResponse(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptExhaustively(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptOneRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::AmazonWebServiceRequest const&, char const*, char const*, char const*) const;std::__1::shared_ptr<Aws::Http::HttpResponse> smithy::components::tracing::TracingUtils::MakeCallWithTiming<std::__1::shared_ptr<Aws::Http::HttpResponse>>(std::__1::function<std::__1::shared_ptr<Aws::Http::HttpResponse> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);DB::S3::PocoHTTPClient::MakeRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::S3::PocoHTTPClient::makeRequestInternalImpl(Aws::Http::HttpRequest&, std::__1::shared_ptr<DB::S3::PocoHTTPResponse>&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::makeHTTPSession(DB::HTTPConnectionGroupType, Poco::URI const&, DB::ConnectionTimeouts const&, DB::ProxyConfiguration const&, unsigned long*);DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::getConnection(DB::ConnectionTimeouts const&, unsigned long*);DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::prepareNewConnection(DB::ConnectionTimeouts const&, unsigned long*);Poco::Net::HTTPClientSession::reconnect(unsigned long*);Poco::Net::HTTPSClientSession::connect(Poco::Net::SocketAddress const&);Poco::Net::HTTPSession::connect(Poco::Net::SocketAddress const&);Poco::Net::SecureStreamSocketImpl::connect(Poco::Net::SocketAddress const&, Poco::Timespan const&);Poco::Net::SecureSocketImpl::connect(Poco::Net::SocketAddress const&, Poco::Timespan const&, bool);Poco::Net::SecureSocketImpl::connectSSL(bool);state_machine;ssl3_do_write;ssl3_write_bytes;tls_write_records;tls_write_records_default;tls_allocate_write_buffers_default;tls_setup_write_buffer;CRYPTO_malloc;malloc_default;prof_tctx_create;prof_backtrace;prof_backtrace_impl;unw_backtrace;libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_arm64>::step(bool);libunwind::UnwindCursor<libunwind::LocalAddressSpace, libunwind::Registers_arm64>::setInfoBasedOnIPRegister(bool);dl_iterate_phdr;libunwind::findUnwindSectionsByPhdr(dl_phdr_info*, unsigned long, void*) 1
DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromS3::initialize(unsigned long);DB::ReadBufferFromS3::sendRequest(unsigned long, unsigned long, std::__1::optional<unsigned long>) const;DB::S3::Client::GetObject(DB::S3::ExtendedRequest<Aws::S3::Model::GetObjectRequest>&) const;Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const;Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> smithy::components::tracing::TracingUtils::MakeCallWithTiming<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error>>(std::__1::function<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> std::__1::__function::__policy_invoker<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const::$_0, Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>>(std::__1::__function::__policy_storage const*);Aws::Client::AWSClient::MakeRequestWithUnparsedResponse(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptExhaustively(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptOneRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::AmazonWebServiceRequest const&, char const*, char const*, char const*) const;std::__1::shared_ptr<Aws::Http::HttpResponse> smithy::components::tracing::TracingUtils::MakeCallWithTiming<std::__1::shared_ptr<Aws::Http::HttpResponse>>(std::__1::function<std::__1::shared_ptr<Aws::Http::HttpResponse> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);DB::S3::PocoHTTPClient::MakeRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::S3::PocoHTTPClient::makeRequestInternalImpl(Aws::Http::HttpRequest&, std::__1::shared_ptr<DB::S3::PocoHTTPResponse>&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::makeHTTPSession(DB::HTTPConnectionGroupType, Poco::URI const&, DB::ConnectionTimeouts const&, DB::ProxyConfiguration const&, unsigned long*);DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::getConnection(DB::ConnectionTimeouts const&, unsigned long*);DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::prepareNewConnection(DB::ConnectionTimeouts const&, unsigned long*);Poco::Net::HTTPClientSession::reconnect(unsigned long*);Poco::Net::HTTPSClientSession::connect(Poco::Net::SocketAddress const&);Poco::Net::HTTPSession::connect(Poco::Net::SocketAddress const&);Poco::Net::SecureStreamSocketImpl::connect(Poco::Net::SocketAddress const&, Poco::Timespan const&);Poco::Net::SecureSocketImpl::connect(Poco::Net::SocketAddress const&, Poco::Timespan const&, bool);Poco::Net::SecureSocketImpl::connectSSL(bool);state_machine;tls_post_process_server_certificate;ssl_verify_internal;x509_verify_x509;verify_chain;build_chain;find_issuer;check_issued;ossl_x509_likely_issued;ossl_x509v3_cache_extensions;ossl_asn1_item_digest_ex;asn1_item_flags_i2d;ASN1_item_ex_i2d;asn1_template_ex_i2d;asn1_i2d_ex_primitive;asn1_ex_i2c;ossl_i2c_ASN1_BIT_STRING 1
DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::ReadBuffer::readStrict(char*, unsigned long);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls_default_read_n;BIO_read;bio_read_intern;bread_conv;sock_read;0x0000ffffb3ac7d85 4
DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::ReadBuffer::readStrict(char*, unsigned long);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls_default_read_n;BIO_read;bio_read_intern;bread_conv;sock_read;0x0000ffffb3ac7d85 1
DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::ReadBuffer::readStrict(char*, unsigned long);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls13_cipher;EVP_DecryptFinal_ex;ossl_gcm_stream_final;gcm_cipher_internal;ossl_gcm_cipher_final;CRYPTO_gcm128_finish 1
DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranuleSuffix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, DB::SerializationObjectSharedData::Mode);DB::ReadBuffer::readStrict(char*, unsigned long);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromIStream::nextImpl();Poco::Net::HTTPFixedLengthStreamBuf::readFromDevice(char*, long);Poco::Net::HTTPSClientSession::read(char*, long);Poco::Net::HTTPSession::receive(char*, int);Poco::Net::SecureSocketImpl::receiveBytes(void*, int, int);SSL_read;ssl3_read_internal;ssl3_read_bytes;tls_read_record;tls_get_more_records;tls_default_read_n;BIO_read;bio_read_intern;bread_conv;sock_read;0x0000ffffb3ac7d6c;0x0000ffffb3a69ad5 1
DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::ReadBuffer* std::__1::__function::__policy_invoker<DB::ReadBuffer* (DB::ISerialization::SubstreamPath const&)>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*)::$_0, DB::ReadBuffer* (DB::ISerialization::SubstreamPath const&)>>(std::__1::__function::__policy_storage const*, DB::ISerialization::SubstreamPath const&);DB::MergeTreeReaderStream::seekToMarkAndColumn(unsigned long, unsigned long);DB::CompressedReadBufferFromFile::seek(unsigned long, unsigned long);DB::AsynchronousBoundedReadBuffer::seek(long, int);DB::ReadBufferFromRemoteFSGather::seek(long, int);DB::ReadBufferFromRemoteFSGather::reset();DB::ReadBufferFromS3::~ReadBufferFromS3();DB::ReadBufferFromS3::~ReadBufferFromS3();DB::S3::ReadBufferFromGetObjectResult::~ReadBufferFromGetObjectResult();Aws::Utils::Stream::ResponseStream::~ResponseStream();DB::SessionAwareIOStream<std::__1::shared_ptr<Poco::Net::HTTPClientSession>>::~SessionAwareIOStream();Poco::Net::HTTPSClientSession::~HTTPSClientSession();Poco::Net::HTTPClientSession::~HTTPClientSession();Poco::Net::SecureStreamSocketImpl::~SecureStreamSocketImpl();Poco::Net::SecureStreamSocketImpl::~SecureStreamSocketImpl();Poco::Net::SecureSocketImpl::~SecureSocketImpl();SSL_free;ossl_ssl_connection_free;SSL_SESSION_free;OPENSSL_sk_pop_free;ASN1_item_free;ossl_asn1_item_embed_free;ossl_asn1_template_free;ossl_asn1_item_embed_free;ossl_asn1_template_free;ossl_asn1_item_embed_free;ossl_asn1_template_free;ossl_asn1_primitive_free;ossl_asn1_string_embed_free 1
DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::ReadBuffer* std::__1::__function::__policy_invoker<DB::ReadBuffer* (DB::ISerialization::SubstreamPath const&)>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*)::$_0, DB::ReadBuffer* (DB::ISerialization::SubstreamPath const&)>>(std::__1::__function::__policy_storage const*, DB::ISerialization::SubstreamPath const&);DB::MergeTreeReaderStream::seekToMarkAndColumn(unsigned long, unsigned long);DB::CompressedReadBufferFromFile::seek(unsigned long, unsigned long);DB::AsynchronousBoundedReadBuffer::seek(long, int);DB::ReadBufferFromRemoteFSGather::seek(long, int);DB::ReadBufferFromRemoteFSGather::reset();DB::ReadBufferFromS3::~ReadBufferFromS3();DB::ReadBufferFromS3::~ReadBufferFromS3();DB::S3::ReadBufferFromGetObjectResult::~ReadBufferFromGetObjectResult();Aws::Utils::Stream::ResponseStream::~ResponseStream();DB::SessionAwareIOStream<std::__1::shared_ptr<Poco::Net::HTTPClientSession>>::~SessionAwareIOStream();Poco::Net::HTTPSClientSession::~HTTPSClientSession();Poco::Net::HTTPClientSession::~HTTPClientSession();Poco::Net::SecureStreamSocketImpl::~SecureStreamSocketImpl();Poco::Net::SecureStreamSocketImpl::~SecureStreamSocketImpl();Poco::Net::SecureSocketImpl::~SecureSocketImpl();SSL_free;ossl_ssl_connection_free;SSL_SESSION_free;OPENSSL_sk_pop_free;ASN1_item_free;ossl_asn1_item_embed_free;ossl_asn1_template_free;ossl_asn1_item_embed_free;ossl_asn1_template_free;ossl_asn1_item_embed_free;ossl_asn1_template_free;ossl_asn1_primitive_free;ossl_asn1_primitive_free 1
DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::ReadBuffer* std::__1::__function::__policy_invoker<DB::ReadBuffer* (DB::ISerialization::SubstreamPath const&)>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*)::$_0, DB::ReadBuffer* (DB::ISerialization::SubstreamPath const&)>>(std::__1::__function::__policy_storage const*, DB::ISerialization::SubstreamPath const&);DB::MergeTreeReaderStream::seekToMarkAndColumn(unsigned long, unsigned long);DB::CompressedReadBufferFromFile::seek(unsigned long, unsigned long);DB::AsynchronousBoundedReadBuffer::seek(long, int);DB::ReadBufferFromRemoteFSGather::seek(long, int);DB::ReadBufferFromRemoteFSGather::reset();DB::ReadBufferFromS3::~ReadBufferFromS3();DB::ReadBufferFromS3::~ReadBufferFromS3();DB::S3::ReadBufferFromGetObjectResult::~ReadBufferFromGetObjectResult();Aws::Utils::Stream::ResponseStream::~ResponseStream();DB::SessionAwareIOStream<std::__1::shared_ptr<Poco::Net::HTTPClientSession>>::~SessionAwareIOStream();Poco::Net::HTTPSClientSession::~HTTPSClientSession();Poco::Net::HTTPClientSession::~HTTPClientSession();Poco::Net::SecureStreamSocketImpl::~SecureStreamSocketImpl();Poco::Net::SecureStreamSocketImpl::~SecureStreamSocketImpl();Poco::Net::SecureSocketImpl::~SecureSocketImpl();SSL_free;ossl_ssl_connection_free;OPENSSL_sk_pop_free;ASN1_item_free;ossl_asn1_item_embed_free;x509_cb;ASN1_item_free;ossl_asn1_template_free;ossl_asn1_item_embed_free;ossl_asn1_template_free;ossl_asn1_item_embed_free;ossl_asn1_template_free;OPENSSL_sk_value 1
DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*);DB::ExecutionThreadContext::executeTask();DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::ReadBuffer* std::__1::__function::__policy_invoker<DB::ReadBuffer* (DB::ISerialization::SubstreamPath const&)>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*)::$_0, DB::ReadBuffer* (DB::ISerialization::SubstreamPath const&)>>(std::__1::__function::__policy_storage const*, DB::ISerialization::SubstreamPath const&);DB::MergeTreeReaderStream::seekToMarkAndColumn(unsigned long, unsigned long);DB::CompressedReadBufferFromFile::seek(unsigned long, unsigned long);DB::AsynchronousBoundedReadBuffer::seek(long, int);DB::ReadBufferFromRemoteFSGather::seek(long, int);DB::ReadBufferFromRemoteFSGather::reset();DB::ReadBufferFromS3::~ReadBufferFromS3();DB::ReadBufferFromS3::~ReadBufferFromS3();DB::S3::ReadBufferFromGetObjectResult::~ReadBufferFromGetObjectResult();Aws::Utils::Stream::ResponseStream::~ResponseStream();DB::SessionAwareIOStream<std::__1::shared_ptr<Poco::Net::HTTPClientSession>>::~SessionAwareIOStream();Poco::Net::HTTPSClientSession::~HTTPSClientSession();Poco::Net::HTTPClientSession::~HTTPClientSession();Poco::Net::SecureStreamSocketImpl::~SecureStreamSocketImpl();Poco::Net::SecureStreamSocketImpl::~SecureStreamSocketImpl();Poco::Net::SecureSocketImpl::~SecureSocketImpl();SSL_free;ossl_ssl_connection_free;OPENSSL_sk_pop_free;ASN1_item_free;ossl_asn1_item_embed_free;x509_cb;ASN1_item_free;ossl_asn1_template_free;ossl_asn1_item_embed_free;free_default;tcache_bin_flush_small;arena_bin_lower_slab;edata_heap_insert 1
DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::ReadBuffer* std::__1::__function::__policy_invoker<DB::ReadBuffer* (DB::ISerialization::SubstreamPath const&)>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*)::$_0, DB::ReadBuffer* (DB::ISerialization::SubstreamPath const&)>>(std::__1::__function::__policy_storage const*, DB::ISerialization::SubstreamPath const&);DB::MergeTreeReaderStream::seekToMarkAndColumn(unsigned long, unsigned long);DB::CompressedReadBufferFromFile::seek(unsigned long, unsigned long);DB::AsynchronousBoundedReadBuffer::seek(long, int);DB::ReadBufferFromRemoteFSGather::seek(long, int);DB::ReadBufferFromRemoteFSGather::reset();DB::ReadBufferFromS3::~ReadBufferFromS3();DB::ReadBufferFromS3::~ReadBufferFromS3();DB::S3::ReadBufferFromGetObjectResult::~ReadBufferFromGetObjectResult();Aws::Utils::Stream::ResponseStream::~ResponseStream();DB::SessionAwareIOStream<std::__1::shared_ptr<Poco::Net::HTTPClientSession>>::~SessionAwareIOStream();Poco::Net::HTTPSClientSession::~HTTPSClientSession();Poco::Net::HTTPClientSession::~HTTPClientSession();Poco::Net::SecureStreamSocketImpl::~SecureStreamSocketImpl();Poco::Net::SecureStreamSocketImpl::~SecureStreamSocketImpl();Poco::Net::SecureSocketImpl::~SecureSocketImpl();SSL_free;ossl_ssl_connection_free;SSL_SESSION_free;OPENSSL_sk_pop_free;ASN1_item_free;ossl_asn1_item_embed_free;ossl_asn1_template_free;ossl_asn1_item_embed_free;ossl_asn1_template_free;x509_name_ex_free;OPENSSL_sk_pop_free;ASN1_item_free;ossl_asn1_item_embed_free;ossl_asn1_template_free;ossl_asn1_item_embed_free 1
DB::ISource::work();DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::ReadBuffer* std::__1::__function::__policy_invoker<DB::ReadBuffer* (DB::ISerialization::SubstreamPath const&)>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*)::$_0, DB::ReadBuffer* (DB::ISerialization::SubstreamPath const&)>>(std::__1::__function::__policy_storage const*, DB::ISerialization::SubstreamPath const&);DB::MergeTreeReaderStream::seekToMarkAndColumn(unsigned long, unsigned long);DB::CompressedReadBufferFromFile::seek(unsigned long, unsigned long);DB::AsynchronousBoundedReadBuffer::seek(long, int);DB::ReadBufferFromRemoteFSGather::seek(long, int);DB::ReadBufferFromRemoteFSGather::reset();DB::ReadBufferFromS3::~ReadBufferFromS3();DB::ReadBufferFromS3::~ReadBufferFromS3();DB::S3::ReadBufferFromGetObjectResult::~ReadBufferFromGetObjectResult();Aws::Utils::Stream::ResponseStream::~ResponseStream();DB::SessionAwareIOStream<std::__1::shared_ptr<Poco::Net::HTTPClientSession>>::~SessionAwareIOStream();Poco::Net::HTTPSClientSession::~HTTPSClientSession();Poco::Net::HTTPClientSession::~HTTPClientSession();Poco::Net::SecureStreamSocketImpl::~SecureStreamSocketImpl();Poco::Net::SecureStreamSocketImpl::~SecureStreamSocketImpl();Poco::Net::SecureSocketImpl::~SecureSocketImpl();SSL_free;ossl_ssl_connection_free;SSL_SESSION_free;OPENSSL_sk_pop_free;ASN1_item_free;ossl_asn1_item_embed_free;ossl_asn1_template_free;ossl_asn1_item_embed_free;ossl_asn1_template_free;ossl_asn1_item_embed_free;ossl_asn1_template_free;ossl_asn1_primitive_free;free_default;tcache_bin_flush_small;0x0000ffffb3a714e1 1
DB::ReadBufferFromS3::sendRequest(unsigned long, unsigned long, std::__1::optional<unsigned long>) const;DB::S3::Client::GetObject(DB::S3::ExtendedRequest<Aws::S3::Model::GetObjectRequest>&) const;Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const;Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> smithy::components::tracing::TracingUtils::MakeCallWithTiming<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error>>(std::__1::function<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> std::__1::__function::__policy_invoker<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const::$_0, Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>>(std::__1::__function::__policy_storage const*);Aws::Client::AWSClient::MakeRequestWithUnparsedResponse(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptExhaustively(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptOneRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::AmazonWebServiceRequest const&, char const*, char const*, char const*) const;std::__1::shared_ptr<Aws::Http::HttpResponse> smithy::components::tracing::TracingUtils::MakeCallWithTiming<std::__1::shared_ptr<Aws::Http::HttpResponse>>(std::__1::function<std::__1::shared_ptr<Aws::Http::HttpResponse> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);DB::S3::PocoHTTPClient::MakeRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::S3::PocoHTTPClient::makeRequestInternalImpl(Aws::Http::HttpRequest&, std::__1::shared_ptr<DB::S3::PocoHTTPResponse>&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::makeHTTPSession(DB::HTTPConnectionGroupType, Poco::URI const&, DB::ConnectionTimeouts const&, DB::ProxyConfiguration const&, unsigned long*);DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::getConnection(DB::ConnectionTimeouts const&, unsigned long*);DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::prepareNewConnection(DB::ConnectionTimeouts const&, unsigned long*);Poco::Net::HTTPClientSession::reconnect(unsigned long*);Poco::Net::HTTPSClientSession::connect(Poco::Net::SocketAddress const&);Poco::Net::HTTPSession::connect(Poco::Net::SocketAddress const&);Poco::Net::SecureStreamSocketImpl::connect(Poco::Net::SocketAddress const&, Poco::Timespan const&);Poco::Net::SecureSocketImpl::connect(Poco::Net::SocketAddress const&, Poco::Timespan const&, bool);Poco::Net::SecureSocketImpl::connectSSL(bool);state_machine;tls_process_server_certificate;ASN1_item_d2i;asn1_item_embed_d2i;asn1_template_noexp_d2i;asn1_item_embed_d2i;asn1_template_noexp_d2i;x509_pubkey_ex_d2i_ex;OSSL_DECODER_from_data;OSSL_DECODER_from_bio;decoder_process;spki2typespki_decode;decoder_process;der2key_decode;d2i_RSA_PUBKEY;d2i_PUBKEY_int;ASN1_item_d2i;x509_pubkey_ex_d2i_ex;x509_pubkey_decode;EVP_PKEY_new;CRYPTO_zalloc;__libc_malloc 1
DB::MergeTreeSource::tryGenerate();DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::ReadBuffer* std::__1::__function::__policy_invoker<DB::ReadBuffer* (DB::ISerialization::SubstreamPath const&)>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*)::$_0, DB::ReadBuffer* (DB::ISerialization::SubstreamPath const&)>>(std::__1::__function::__policy_storage const*, DB::ISerialization::SubstreamPath const&);DB::MergeTreeReaderStream::seekToMarkAndColumn(unsigned long, unsigned long);DB::CompressedReadBufferFromFile::seek(unsigned long, unsigned long);DB::AsynchronousBoundedReadBuffer::seek(long, int);DB::ReadBufferFromRemoteFSGather::seek(long, int);DB::ReadBufferFromRemoteFSGather::reset();DB::ReadBufferFromS3::~ReadBufferFromS3();DB::ReadBufferFromS3::~ReadBufferFromS3();DB::S3::ReadBufferFromGetObjectResult::~ReadBufferFromGetObjectResult();Aws::Utils::Stream::ResponseStream::~ResponseStream();DB::SessionAwareIOStream<std::__1::shared_ptr<Poco::Net::HTTPClientSession>>::~SessionAwareIOStream();Poco::Net::HTTPSClientSession::~HTTPSClientSession();Poco::Net::HTTPClientSession::~HTTPClientSession();Poco::Net::SecureStreamSocketImpl::~SecureStreamSocketImpl();Poco::Net::SecureStreamSocketImpl::~SecureStreamSocketImpl();Poco::Net::SecureSocketImpl::~SecureSocketImpl();SSL_free;ossl_ssl_connection_free;SSL_SESSION_free;OPENSSL_sk_pop_free;ASN1_item_free;ossl_asn1_item_embed_free;ossl_asn1_template_free;ossl_asn1_item_embed_free;ossl_asn1_template_free;x509_name_ex_free;OPENSSL_sk_pop_free;ASN1_item_free;ossl_asn1_item_embed_free;ossl_asn1_template_free;ossl_asn1_primitive_free;ossl_asn1_string_embed_free 1
DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromS3::initialize(unsigned long);DB::ReadBufferFromS3::sendRequest(unsigned long, unsigned long, std::__1::optional<unsigned long>) const;DB::S3::Client::GetObject(DB::S3::ExtendedRequest<Aws::S3::Model::GetObjectRequest>&) const;Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const;Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> smithy::components::tracing::TracingUtils::MakeCallWithTiming<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error>>(std::__1::function<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> std::__1::__function::__policy_invoker<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const::$_0, Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>>(std::__1::__function::__policy_storage const*);Aws::Client::AWSClient::MakeRequestWithUnparsedResponse(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptExhaustively(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptOneRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::AmazonWebServiceRequest const&, char const*, char const*, char const*) const;std::__1::shared_ptr<Aws::Http::HttpResponse> smithy::components::tracing::TracingUtils::MakeCallWithTiming<std::__1::shared_ptr<Aws::Http::HttpResponse>>(std::__1::function<std::__1::shared_ptr<Aws::Http::HttpResponse> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);DB::S3::PocoHTTPClient::MakeRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::S3::PocoHTTPClient::makeRequestInternalImpl(Aws::Http::HttpRequest&, std::__1::shared_ptr<DB::S3::PocoHTTPResponse>&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::makeHTTPSession(DB::HTTPConnectionGroupType, Poco::URI const&, DB::ConnectionTimeouts const&, DB::ProxyConfiguration const&, unsigned long*);DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::getConnection(DB::ConnectionTimeouts const&, unsigned long*);DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::prepareNewConnection(DB::ConnectionTimeouts const&, unsigned long*);Poco::Net::HTTPClientSession::reconnect(unsigned long*);Poco::Net::HTTPSClientSession::connect(Poco::Net::SocketAddress const&);Poco::Net::HTTPSession::connect(Poco::Net::SocketAddress const&);Poco::Net::SecureStreamSocketImpl::connect(Poco::Net::SocketAddress const&, Poco::Timespan const&);Poco::Net::SecureSocketImpl::connect(Poco::Net::SocketAddress const&, Poco::Timespan const&, bool);Poco::Net::SecureSocketImpl::connectSSL(bool);state_machine;tls_process_server_hello;tls_parse_all_extensions;tls_parse_stoc_key_share;ssl_derive;ossl_ecx_compute_key;ossl_x25519;fe51_mul 1
DB::MergeTreeSelectProcessor::read();DB::MergeTreeReadTask::read();DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::__1::vector<DB::MarkRanges, std::__1::allocator<DB::MarkRanges>>&);DB::MergeTreeRangeReader::startReadingChain(unsigned long, DB::MarkRanges&);DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompactMultiBuffer::readRows(unsigned long, unsigned long, bool, unsigned long, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&);DB::MergeTreeReaderCompact::readData(unsigned long, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, unsigned long, DB::MergeTreeReaderStream&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>*);DB::SerializationObjectDynamicPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedDataPath::deserializeBinaryBulkWithMultipleStreams(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&, unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::DeserializeBinaryBulkState>&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*) const;DB::SerializationObjectSharedData::deserializeStructure(unsigned long, unsigned long, DB::ISerialization::DeserializeBinaryBulkSettings&, DB::SerializationObjectSharedData::DeserializeBinaryBulkStateObjectSharedDataStructure&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::unique_ptr<DB::ISerialization::ISubstreamsCacheElement, std::__1::default_delete<DB::ISerialization::ISubstreamsCacheElement>>>>>*, DB::SerializationObjectSharedData::Mode);DB::SerializationObjectSharedData::deserializeStructureGranulePrefix(DB::ReadBuffer&, DB::SerializationObjectSharedData::StructureGranule&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool);DB::CompressedReadBufferFromFile::nextImpl();DB::CompressedReadBufferBase::readCompressedData(unsigned long&, unsigned long&, bool);DB::AsynchronousBoundedReadBuffer::nextImpl();DB::AsynchronousBoundedReadBuffer::readSync(char*, unsigned long);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request);DB::ThreadPoolRemoteFSReader::execute(DB::IAsynchronousReader::Request, bool);DB::ReadBufferFromRemoteFSGather::nextImpl();DB::ReadBufferFromRemoteFSGather::readImpl();DB::ReadBufferFromS3::nextImpl();DB::ReadBufferFromS3::initialize(unsigned long);DB::ReadBufferFromS3::sendRequest(unsigned long, unsigned long, std::__1::optional<unsigned long>) const;DB::S3::Client::GetObject(DB::S3::ExtendedRequest<Aws::S3::Model::GetObjectRequest>&) const;Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const;Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> smithy::components::tracing::TracingUtils::MakeCallWithTiming<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error>>(std::__1::function<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> std::__1::__function::__policy_invoker<Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>::__call_impl[abi:ne190107]<std::__1::__function::__default_alloc_func<Aws::S3::S3Client::GetObject(Aws::S3::Model::GetObjectRequest const&) const::$_0, Aws::Utils::Outcome<Aws::S3::Model::GetObjectResult, Aws::S3::S3Error> ()>>(std::__1::__function::__policy_storage const*);Aws::Client::AWSClient::MakeRequestWithUnparsedResponse(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptExhaustively(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const*, char const*, char const*) const;Aws::Client::AWSClient::AttemptOneRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::AmazonWebServiceRequest const&, char const*, char const*, char const*) const;std::__1::shared_ptr<Aws::Http::HttpResponse> smithy::components::tracing::TracingUtils::MakeCallWithTiming<std::__1::shared_ptr<Aws::Http::HttpResponse>>(std::__1::function<std::__1::shared_ptr<Aws::Http::HttpResponse> ()>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, smithy::components::tracing::Meter const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&);DB::S3::PocoHTTPClient::MakeRequest(std::__1::shared_ptr<Aws::Http::HttpRequest> const&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::S3::PocoHTTPClient::makeRequestInternalImpl(Aws::Http::HttpRequest&, std::__1::shared_ptr<DB::S3::PocoHTTPResponse>&, Aws::Utils::RateLimits::RateLimiterInterface*, Aws::Utils::RateLimits::RateLimiterInterface*) const;DB::makeHTTPSession(DB::HTTPConnectionGroupType, Poco::URI const&, DB::ConnectionTimeouts const&, DB::ProxyConfiguration const&, unsigned long*);DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::getConnection(DB::ConnectionTimeouts const&, unsigned long*);DB::EndpointConnectionPool<Poco::Net::HTTPSClientSession>::prepareNewConnection(DB::ConnectionTimeouts const&, unsigned long*);Poco::Net::HTTPClientSession::reconnect(unsigned long*);Poco::Net::HTTPSClientSession::connect(Poco::Net::SocketAddress const&);Poco::Net::HTTPSession::connect(Poco::Net::SocketAddress const&);Poco::Net::SecureStreamSocketImpl::connect(Poco::Net::SocketAddress const&, Poco::Timespan const&);Poco::Net::SecureSocketImpl::connect(Poco::Net::SocketAddress const&, Poco::Timespan const&, bool);Poco::Net::SocketImpl::connect(Poco::Net::SocketAddress const&, Poco::Timespan const&);0x0000ffffb3ad7b59 1
