create table test (id UInt64, json JSON(a UInt32), data String) engine=MergeTree order by (json.a, json.b::String) settings min_rows_for_wide_part=100000000, min_bytes_for_wide_part=1000000000, index_granularity=1;
0	{"a":0,"b":"str_0","c":[]}	Hello, World!
2	{"a":0,"b":"str_2","c":["0","1"]}	Hello, World!
1	{"a":1,"b":"str_1","c":["0"]}	Hello, World!
3	{"a":1,"b":"str_0","c":["0","1","2"]}	Hello, World!
4	{"a":4,"b":"str_5","c":["0","1","2","3"]}	Hello, World!
6	{"a":4,"b":"str_4","c":["0","1","2","3","4","5"]}	Hello, World!
5	{"a":5,"b":"str_6","c":["0","1","2","3","4"]}	Hello, World!
7	{"a":5,"b":"str_5","c":["0","1","2","3","4","5","6"]}	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.json.a ASC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: json.a ASC
5	{"a":5,"b":"str_6","c":["0","1","2","3","4"]}	Hello, World!
7	{"a":5,"b":"str_5","c":["0","1","2","3","4","5","6"]}	Hello, World!
4	{"a":4,"b":"str_5","c":["0","1","2","3"]}	Hello, World!
6	{"a":4,"b":"str_4","c":["0","1","2","3","4","5"]}	Hello, World!
1	{"a":1,"b":"str_1","c":["0"]}	Hello, World!
3	{"a":1,"b":"str_0","c":["0","1","2"]}	Hello, World!
0	{"a":0,"b":"str_0","c":[]}	Hello, World!
2	{"a":0,"b":"str_2","c":["0","1"]}	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.json.a DESC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: json.a DESC
0	{"a":0,"b":"str_0","c":[]}	Hello, World!
2	{"a":0,"b":"str_2","c":["0","1"]}	Hello, World!
3	{"a":1,"b":"str_0","c":["0","1","2"]}	Hello, World!
1	{"a":1,"b":"str_1","c":["0"]}	Hello, World!
6	{"a":4,"b":"str_4","c":["0","1","2","3","4","5"]}	Hello, World!
4	{"a":4,"b":"str_5","c":["0","1","2","3"]}	Hello, World!
7	{"a":5,"b":"str_5","c":["0","1","2","3","4","5","6"]}	Hello, World!
5	{"a":5,"b":"str_6","c":["0","1","2","3","4"]}	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.json.a ASC, CAST(__table1.json.b, \'String\'_String) ASC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: json.a ASC
7	{"a":5,"b":"str_5","c":["0","1","2","3","4","5","6"]}	Hello, World!
5	{"a":5,"b":"str_6","c":["0","1","2","3","4"]}	Hello, World!
6	{"a":4,"b":"str_4","c":["0","1","2","3","4","5"]}	Hello, World!
4	{"a":4,"b":"str_5","c":["0","1","2","3"]}	Hello, World!
3	{"a":1,"b":"str_0","c":["0","1","2"]}	Hello, World!
1	{"a":1,"b":"str_1","c":["0"]}	Hello, World!
0	{"a":0,"b":"str_0","c":[]}	Hello, World!
2	{"a":0,"b":"str_2","c":["0","1"]}	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.json.a DESC, CAST(__table1.json.b, \'String\'_String) ASC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: json.a DESC
2	{"a":0,"b":"str_2","c":["0","1"]}	Hello, World!
0	{"a":0,"b":"str_0","c":[]}	Hello, World!
1	{"a":1,"b":"str_1","c":["0"]}	Hello, World!
3	{"a":1,"b":"str_0","c":["0","1","2"]}	Hello, World!
4	{"a":4,"b":"str_5","c":["0","1","2","3"]}	Hello, World!
6	{"a":4,"b":"str_4","c":["0","1","2","3","4","5"]}	Hello, World!
5	{"a":5,"b":"str_6","c":["0","1","2","3","4"]}	Hello, World!
7	{"a":5,"b":"str_5","c":["0","1","2","3","4","5","6"]}	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.json.a ASC, CAST(__table1.json.b, \'String\'_String) DESC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: json.a ASC
5	{"a":5,"b":"str_6","c":["0","1","2","3","4"]}	Hello, World!
7	{"a":5,"b":"str_5","c":["0","1","2","3","4","5","6"]}	Hello, World!
4	{"a":4,"b":"str_5","c":["0","1","2","3"]}	Hello, World!
6	{"a":4,"b":"str_4","c":["0","1","2","3","4","5"]}	Hello, World!
1	{"a":1,"b":"str_1","c":["0"]}	Hello, World!
3	{"a":1,"b":"str_0","c":["0","1","2"]}	Hello, World!
2	{"a":0,"b":"str_2","c":["0","1"]}	Hello, World!
0	{"a":0,"b":"str_0","c":[]}	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.json.a DESC, CAST(__table1.json.b, \'String\'_String) DESC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: json.a DESC
0	{"a":0,"b":"str_0","c":[]}	Hello, World!
2	{"a":0,"b":"str_2","c":["0","1"]}	Hello, World!
Expression ((Project names + Projection))
Filter ((WHERE + Change column names to column identifiers))
ReadFromMergeTree (default.test)
Indexes:
PrimaryKey
Keys: 
json.a
Condition: (json.a in [0, 0])
Parts: 1/2
Granules: 2/8
0	{"a":0,"b":"str_0","c":[]}	Hello, World!
Expression ((Project names + Projection))
Filter ((WHERE + Change column names to column identifiers))
ReadFromMergeTree (default.test)
Indexes:
PrimaryKey
Keys: 
json.a
CAST(json.b, \'String\')
Condition: and((CAST(json.b, \'String\') in [\'str_0\', \'str_0\']), (json.a in [0, 0]))
Parts: 1/2
Granules: 1/8
2
Expression ((Project names + Projection))
AggregatingProjection
Expression (Before GROUP BY)
Filter ((WHERE + Change column names to column identifiers))
ReadFromMergeTree (default.test)
Indexes:
PrimaryKey
Keys: 
json.a
Condition: (json.a in [0, 0])
Parts: 1/2
Granules: 2/8
ReadFromPreparedSource (_minmax_count_projection)
1
Expression ((Project names + Projection))
Aggregating
Expression (Before GROUP BY)
Filter ((WHERE + Change column names to column identifiers))
ReadFromMergeTree (default.test)
Indexes:
PrimaryKey
Keys: 
json.a
Condition: (json.a in [0, 0])
Parts: 1/2
Granules: 2/8
1
0	{"a":0,"b":"str_0","c":[]}	Hello, World!
2	{"a":0,"b":"str_2","c":["0","1"]}	Hello, World!
1	{"a":1,"b":"str_1","c":["0"]}	Hello, World!
3	{"a":1,"b":"str_0","c":["0","1","2"]}	Hello, World!
4	{"a":4,"b":"str_5","c":["0","1","2","3"]}	Hello, World!
6	{"a":4,"b":"str_4","c":["0","1","2","3","4","5"]}	Hello, World!
5	{"a":5,"b":"str_6","c":["0","1","2","3","4"]}	Hello, World!
7	{"a":5,"b":"str_5","c":["0","1","2","3","4","5","6"]}	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.json.a ASC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: json.a ASC
5	{"a":5,"b":"str_6","c":["0","1","2","3","4"]}	Hello, World!
7	{"a":5,"b":"str_5","c":["0","1","2","3","4","5","6"]}	Hello, World!
4	{"a":4,"b":"str_5","c":["0","1","2","3"]}	Hello, World!
6	{"a":4,"b":"str_4","c":["0","1","2","3","4","5"]}	Hello, World!
1	{"a":1,"b":"str_1","c":["0"]}	Hello, World!
3	{"a":1,"b":"str_0","c":["0","1","2"]}	Hello, World!
0	{"a":0,"b":"str_0","c":[]}	Hello, World!
2	{"a":0,"b":"str_2","c":["0","1"]}	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.json.a DESC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: json.a DESC
0	{"a":0,"b":"str_0","c":[]}	Hello, World!
2	{"a":0,"b":"str_2","c":["0","1"]}	Hello, World!
3	{"a":1,"b":"str_0","c":["0","1","2"]}	Hello, World!
1	{"a":1,"b":"str_1","c":["0"]}	Hello, World!
6	{"a":4,"b":"str_4","c":["0","1","2","3","4","5"]}	Hello, World!
4	{"a":4,"b":"str_5","c":["0","1","2","3"]}	Hello, World!
7	{"a":5,"b":"str_5","c":["0","1","2","3","4","5","6"]}	Hello, World!
5	{"a":5,"b":"str_6","c":["0","1","2","3","4"]}	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.json.a ASC, CAST(__table1.json.b, \'String\'_String) ASC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: json.a ASC
7	{"a":5,"b":"str_5","c":["0","1","2","3","4","5","6"]}	Hello, World!
5	{"a":5,"b":"str_6","c":["0","1","2","3","4"]}	Hello, World!
6	{"a":4,"b":"str_4","c":["0","1","2","3","4","5"]}	Hello, World!
4	{"a":4,"b":"str_5","c":["0","1","2","3"]}	Hello, World!
3	{"a":1,"b":"str_0","c":["0","1","2"]}	Hello, World!
1	{"a":1,"b":"str_1","c":["0"]}	Hello, World!
0	{"a":0,"b":"str_0","c":[]}	Hello, World!
2	{"a":0,"b":"str_2","c":["0","1"]}	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.json.a DESC, CAST(__table1.json.b, \'String\'_String) ASC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: json.a DESC
2	{"a":0,"b":"str_2","c":["0","1"]}	Hello, World!
0	{"a":0,"b":"str_0","c":[]}	Hello, World!
1	{"a":1,"b":"str_1","c":["0"]}	Hello, World!
3	{"a":1,"b":"str_0","c":["0","1","2"]}	Hello, World!
4	{"a":4,"b":"str_5","c":["0","1","2","3"]}	Hello, World!
6	{"a":4,"b":"str_4","c":["0","1","2","3","4","5"]}	Hello, World!
5	{"a":5,"b":"str_6","c":["0","1","2","3","4"]}	Hello, World!
7	{"a":5,"b":"str_5","c":["0","1","2","3","4","5","6"]}	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.json.a ASC, CAST(__table1.json.b, \'String\'_String) DESC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: json.a ASC
5	{"a":5,"b":"str_6","c":["0","1","2","3","4"]}	Hello, World!
7	{"a":5,"b":"str_5","c":["0","1","2","3","4","5","6"]}	Hello, World!
4	{"a":4,"b":"str_5","c":["0","1","2","3"]}	Hello, World!
6	{"a":4,"b":"str_4","c":["0","1","2","3","4","5"]}	Hello, World!
1	{"a":1,"b":"str_1","c":["0"]}	Hello, World!
3	{"a":1,"b":"str_0","c":["0","1","2"]}	Hello, World!
2	{"a":0,"b":"str_2","c":["0","1"]}	Hello, World!
0	{"a":0,"b":"str_0","c":[]}	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.json.a DESC, CAST(__table1.json.b, \'String\'_String) DESC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: json.a DESC
2
Expression ((Project names + Projection))
AggregatingProjection
Expression (Before GROUP BY)
Filter ((WHERE + Change column names to column identifiers))
ReadFromMergeTree (default.test)
Indexes:
PrimaryKey
Keys: 
json.a
Condition: (json.a in [0, 0])
Parts: 1/1
Granules: 2/8
ReadFromPreparedSource (_minmax_count_projection)
1
Expression ((Project names + Projection))
Aggregating
Expression (Before GROUP BY)
Filter ((WHERE + Change column names to column identifiers))
ReadFromMergeTree (default.test)
Indexes:
PrimaryKey
Keys: 
json.a
Condition: (json.a in [0, 0])
Parts: 1/1
Granules: 2/8
create table test (id UInt64, json JSON(a UInt32), data String) engine=MergeTree order by (json.a, json.b::String) settings min_rows_for_wide_part=1, min_bytes_for_wide_part=1, vertical_merge_algorithm_min_columns_to_activate=10, vertical_merge_algorithm_min_rows_to_activate=1000000, index_granularity=1;
0	{"a":0,"b":"str_0","c":[]}	Hello, World!
2	{"a":0,"b":"str_2","c":["0","1"]}	Hello, World!
1	{"a":1,"b":"str_1","c":["0"]}	Hello, World!
3	{"a":1,"b":"str_0","c":["0","1","2"]}	Hello, World!
4	{"a":4,"b":"str_5","c":["0","1","2","3"]}	Hello, World!
6	{"a":4,"b":"str_4","c":["0","1","2","3","4","5"]}	Hello, World!
5	{"a":5,"b":"str_6","c":["0","1","2","3","4"]}	Hello, World!
7	{"a":5,"b":"str_5","c":["0","1","2","3","4","5","6"]}	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.json.a ASC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: json.a ASC
5	{"a":5,"b":"str_6","c":["0","1","2","3","4"]}	Hello, World!
7	{"a":5,"b":"str_5","c":["0","1","2","3","4","5","6"]}	Hello, World!
4	{"a":4,"b":"str_5","c":["0","1","2","3"]}	Hello, World!
6	{"a":4,"b":"str_4","c":["0","1","2","3","4","5"]}	Hello, World!
1	{"a":1,"b":"str_1","c":["0"]}	Hello, World!
3	{"a":1,"b":"str_0","c":["0","1","2"]}	Hello, World!
0	{"a":0,"b":"str_0","c":[]}	Hello, World!
2	{"a":0,"b":"str_2","c":["0","1"]}	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.json.a DESC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: json.a DESC
0	{"a":0,"b":"str_0","c":[]}	Hello, World!
2	{"a":0,"b":"str_2","c":["0","1"]}	Hello, World!
3	{"a":1,"b":"str_0","c":["0","1","2"]}	Hello, World!
1	{"a":1,"b":"str_1","c":["0"]}	Hello, World!
6	{"a":4,"b":"str_4","c":["0","1","2","3","4","5"]}	Hello, World!
4	{"a":4,"b":"str_5","c":["0","1","2","3"]}	Hello, World!
7	{"a":5,"b":"str_5","c":["0","1","2","3","4","5","6"]}	Hello, World!
5	{"a":5,"b":"str_6","c":["0","1","2","3","4"]}	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.json.a ASC, CAST(__table1.json.b, \'String\'_String) ASC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: json.a ASC
7	{"a":5,"b":"str_5","c":["0","1","2","3","4","5","6"]}	Hello, World!
5	{"a":5,"b":"str_6","c":["0","1","2","3","4"]}	Hello, World!
6	{"a":4,"b":"str_4","c":["0","1","2","3","4","5"]}	Hello, World!
4	{"a":4,"b":"str_5","c":["0","1","2","3"]}	Hello, World!
3	{"a":1,"b":"str_0","c":["0","1","2"]}	Hello, World!
1	{"a":1,"b":"str_1","c":["0"]}	Hello, World!
0	{"a":0,"b":"str_0","c":[]}	Hello, World!
2	{"a":0,"b":"str_2","c":["0","1"]}	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.json.a DESC, CAST(__table1.json.b, \'String\'_String) ASC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: json.a DESC
2	{"a":0,"b":"str_2","c":["0","1"]}	Hello, World!
0	{"a":0,"b":"str_0","c":[]}	Hello, World!
1	{"a":1,"b":"str_1","c":["0"]}	Hello, World!
3	{"a":1,"b":"str_0","c":["0","1","2"]}	Hello, World!
4	{"a":4,"b":"str_5","c":["0","1","2","3"]}	Hello, World!
6	{"a":4,"b":"str_4","c":["0","1","2","3","4","5"]}	Hello, World!
5	{"a":5,"b":"str_6","c":["0","1","2","3","4"]}	Hello, World!
7	{"a":5,"b":"str_5","c":["0","1","2","3","4","5","6"]}	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.json.a ASC, CAST(__table1.json.b, \'String\'_String) DESC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: json.a ASC
5	{"a":5,"b":"str_6","c":["0","1","2","3","4"]}	Hello, World!
7	{"a":5,"b":"str_5","c":["0","1","2","3","4","5","6"]}	Hello, World!
4	{"a":4,"b":"str_5","c":["0","1","2","3"]}	Hello, World!
6	{"a":4,"b":"str_4","c":["0","1","2","3","4","5"]}	Hello, World!
1	{"a":1,"b":"str_1","c":["0"]}	Hello, World!
3	{"a":1,"b":"str_0","c":["0","1","2"]}	Hello, World!
2	{"a":0,"b":"str_2","c":["0","1"]}	Hello, World!
0	{"a":0,"b":"str_0","c":[]}	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.json.a DESC, CAST(__table1.json.b, \'String\'_String) DESC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: json.a DESC
0	{"a":0,"b":"str_0","c":[]}	Hello, World!
2	{"a":0,"b":"str_2","c":["0","1"]}	Hello, World!
Expression ((Project names + Projection))
Filter ((WHERE + Change column names to column identifiers))
ReadFromMergeTree (default.test)
Indexes:
PrimaryKey
Keys: 
json.a
Condition: (json.a in [0, 0])
Parts: 1/2
Granules: 2/8
0	{"a":0,"b":"str_0","c":[]}	Hello, World!
Expression ((Project names + Projection))
Filter ((WHERE + Change column names to column identifiers))
ReadFromMergeTree (default.test)
Indexes:
PrimaryKey
Keys: 
json.a
CAST(json.b, \'String\')
Condition: and((CAST(json.b, \'String\') in [\'str_0\', \'str_0\']), (json.a in [0, 0]))
Parts: 1/2
Granules: 1/8
2
Expression ((Project names + Projection))
AggregatingProjection
Expression (Before GROUP BY)
Filter ((WHERE + Change column names to column identifiers))
ReadFromMergeTree (default.test)
Indexes:
PrimaryKey
Keys: 
json.a
Condition: (json.a in [0, 0])
Parts: 1/2
Granules: 2/8
ReadFromPreparedSource (_minmax_count_projection)
1
Expression ((Project names + Projection))
Aggregating
Expression (Before GROUP BY)
Filter ((WHERE + Change column names to column identifiers))
ReadFromMergeTree (default.test)
Indexes:
PrimaryKey
Keys: 
json.a
Condition: (json.a in [0, 0])
Parts: 1/2
Granules: 2/8
1
0	{"a":0,"b":"str_0","c":[]}	Hello, World!
2	{"a":0,"b":"str_2","c":["0","1"]}	Hello, World!
1	{"a":1,"b":"str_1","c":["0"]}	Hello, World!
3	{"a":1,"b":"str_0","c":["0","1","2"]}	Hello, World!
4	{"a":4,"b":"str_5","c":["0","1","2","3"]}	Hello, World!
6	{"a":4,"b":"str_4","c":["0","1","2","3","4","5"]}	Hello, World!
5	{"a":5,"b":"str_6","c":["0","1","2","3","4"]}	Hello, World!
7	{"a":5,"b":"str_5","c":["0","1","2","3","4","5","6"]}	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.json.a ASC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: json.a ASC
5	{"a":5,"b":"str_6","c":["0","1","2","3","4"]}	Hello, World!
7	{"a":5,"b":"str_5","c":["0","1","2","3","4","5","6"]}	Hello, World!
4	{"a":4,"b":"str_5","c":["0","1","2","3"]}	Hello, World!
6	{"a":4,"b":"str_4","c":["0","1","2","3","4","5"]}	Hello, World!
1	{"a":1,"b":"str_1","c":["0"]}	Hello, World!
3	{"a":1,"b":"str_0","c":["0","1","2"]}	Hello, World!
0	{"a":0,"b":"str_0","c":[]}	Hello, World!
2	{"a":0,"b":"str_2","c":["0","1"]}	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.json.a DESC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: json.a DESC
0	{"a":0,"b":"str_0","c":[]}	Hello, World!
2	{"a":0,"b":"str_2","c":["0","1"]}	Hello, World!
3	{"a":1,"b":"str_0","c":["0","1","2"]}	Hello, World!
1	{"a":1,"b":"str_1","c":["0"]}	Hello, World!
6	{"a":4,"b":"str_4","c":["0","1","2","3","4","5"]}	Hello, World!
4	{"a":4,"b":"str_5","c":["0","1","2","3"]}	Hello, World!
7	{"a":5,"b":"str_5","c":["0","1","2","3","4","5","6"]}	Hello, World!
5	{"a":5,"b":"str_6","c":["0","1","2","3","4"]}	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.json.a ASC, CAST(__table1.json.b, \'String\'_String) ASC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: json.a ASC
7	{"a":5,"b":"str_5","c":["0","1","2","3","4","5","6"]}	Hello, World!
5	{"a":5,"b":"str_6","c":["0","1","2","3","4"]}	Hello, World!
6	{"a":4,"b":"str_4","c":["0","1","2","3","4","5"]}	Hello, World!
4	{"a":4,"b":"str_5","c":["0","1","2","3"]}	Hello, World!
3	{"a":1,"b":"str_0","c":["0","1","2"]}	Hello, World!
1	{"a":1,"b":"str_1","c":["0"]}	Hello, World!
0	{"a":0,"b":"str_0","c":[]}	Hello, World!
2	{"a":0,"b":"str_2","c":["0","1"]}	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.json.a DESC, CAST(__table1.json.b, \'String\'_String) ASC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: json.a DESC
2	{"a":0,"b":"str_2","c":["0","1"]}	Hello, World!
0	{"a":0,"b":"str_0","c":[]}	Hello, World!
1	{"a":1,"b":"str_1","c":["0"]}	Hello, World!
3	{"a":1,"b":"str_0","c":["0","1","2"]}	Hello, World!
4	{"a":4,"b":"str_5","c":["0","1","2","3"]}	Hello, World!
6	{"a":4,"b":"str_4","c":["0","1","2","3","4","5"]}	Hello, World!
5	{"a":5,"b":"str_6","c":["0","1","2","3","4"]}	Hello, World!
7	{"a":5,"b":"str_5","c":["0","1","2","3","4","5","6"]}	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.json.a ASC, CAST(__table1.json.b, \'String\'_String) DESC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: json.a ASC
5	{"a":5,"b":"str_6","c":["0","1","2","3","4"]}	Hello, World!
7	{"a":5,"b":"str_5","c":["0","1","2","3","4","5","6"]}	Hello, World!
4	{"a":4,"b":"str_5","c":["0","1","2","3"]}	Hello, World!
6	{"a":4,"b":"str_4","c":["0","1","2","3","4","5"]}	Hello, World!
1	{"a":1,"b":"str_1","c":["0"]}	Hello, World!
3	{"a":1,"b":"str_0","c":["0","1","2"]}	Hello, World!
2	{"a":0,"b":"str_2","c":["0","1"]}	Hello, World!
0	{"a":0,"b":"str_0","c":[]}	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.json.a DESC, CAST(__table1.json.b, \'String\'_String) DESC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: json.a DESC
2
Expression ((Project names + Projection))
AggregatingProjection
Expression (Before GROUP BY)
Filter ((WHERE + Change column names to column identifiers))
ReadFromMergeTree (default.test)
Indexes:
PrimaryKey
Keys: 
json.a
Condition: (json.a in [0, 0])
Parts: 1/1
Granules: 2/8
ReadFromPreparedSource (_minmax_count_projection)
1
Expression ((Project names + Projection))
Aggregating
Expression (Before GROUP BY)
Filter ((WHERE + Change column names to column identifiers))
ReadFromMergeTree (default.test)
Indexes:
PrimaryKey
Keys: 
json.a
Condition: (json.a in [0, 0])
Parts: 1/1
Granules: 2/8
create table test (id UInt64, json JSON(a UInt32), data String) engine=MergeTree order by (json.a, json.b::String) settings min_rows_for_wide_part=1, min_bytes_for_wide_part=1, vertical_merge_algorithm_min_columns_to_activate=1, vertical_merge_algorithm_min_rows_to_activate=1, index_granularity=1;
0	{"a":0,"b":"str_0","c":[]}	Hello, World!
2	{"a":0,"b":"str_2","c":["0","1"]}	Hello, World!
1	{"a":1,"b":"str_1","c":["0"]}	Hello, World!
3	{"a":1,"b":"str_0","c":["0","1","2"]}	Hello, World!
4	{"a":4,"b":"str_5","c":["0","1","2","3"]}	Hello, World!
6	{"a":4,"b":"str_4","c":["0","1","2","3","4","5"]}	Hello, World!
5	{"a":5,"b":"str_6","c":["0","1","2","3","4"]}	Hello, World!
7	{"a":5,"b":"str_5","c":["0","1","2","3","4","5","6"]}	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.json.a ASC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: json.a ASC
5	{"a":5,"b":"str_6","c":["0","1","2","3","4"]}	Hello, World!
7	{"a":5,"b":"str_5","c":["0","1","2","3","4","5","6"]}	Hello, World!
4	{"a":4,"b":"str_5","c":["0","1","2","3"]}	Hello, World!
6	{"a":4,"b":"str_4","c":["0","1","2","3","4","5"]}	Hello, World!
1	{"a":1,"b":"str_1","c":["0"]}	Hello, World!
3	{"a":1,"b":"str_0","c":["0","1","2"]}	Hello, World!
0	{"a":0,"b":"str_0","c":[]}	Hello, World!
2	{"a":0,"b":"str_2","c":["0","1"]}	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.json.a DESC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: json.a DESC
0	{"a":0,"b":"str_0","c":[]}	Hello, World!
2	{"a":0,"b":"str_2","c":["0","1"]}	Hello, World!
3	{"a":1,"b":"str_0","c":["0","1","2"]}	Hello, World!
1	{"a":1,"b":"str_1","c":["0"]}	Hello, World!
6	{"a":4,"b":"str_4","c":["0","1","2","3","4","5"]}	Hello, World!
4	{"a":4,"b":"str_5","c":["0","1","2","3"]}	Hello, World!
7	{"a":5,"b":"str_5","c":["0","1","2","3","4","5","6"]}	Hello, World!
5	{"a":5,"b":"str_6","c":["0","1","2","3","4"]}	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.json.a ASC, CAST(__table1.json.b, \'String\'_String) ASC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: json.a ASC
7	{"a":5,"b":"str_5","c":["0","1","2","3","4","5","6"]}	Hello, World!
5	{"a":5,"b":"str_6","c":["0","1","2","3","4"]}	Hello, World!
6	{"a":4,"b":"str_4","c":["0","1","2","3","4","5"]}	Hello, World!
4	{"a":4,"b":"str_5","c":["0","1","2","3"]}	Hello, World!
3	{"a":1,"b":"str_0","c":["0","1","2"]}	Hello, World!
1	{"a":1,"b":"str_1","c":["0"]}	Hello, World!
0	{"a":0,"b":"str_0","c":[]}	Hello, World!
2	{"a":0,"b":"str_2","c":["0","1"]}	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.json.a DESC, CAST(__table1.json.b, \'String\'_String) ASC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: json.a DESC
2	{"a":0,"b":"str_2","c":["0","1"]}	Hello, World!
0	{"a":0,"b":"str_0","c":[]}	Hello, World!
1	{"a":1,"b":"str_1","c":["0"]}	Hello, World!
3	{"a":1,"b":"str_0","c":["0","1","2"]}	Hello, World!
4	{"a":4,"b":"str_5","c":["0","1","2","3"]}	Hello, World!
6	{"a":4,"b":"str_4","c":["0","1","2","3","4","5"]}	Hello, World!
5	{"a":5,"b":"str_6","c":["0","1","2","3","4"]}	Hello, World!
7	{"a":5,"b":"str_5","c":["0","1","2","3","4","5","6"]}	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.json.a ASC, CAST(__table1.json.b, \'String\'_String) DESC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: json.a ASC
5	{"a":5,"b":"str_6","c":["0","1","2","3","4"]}	Hello, World!
7	{"a":5,"b":"str_5","c":["0","1","2","3","4","5","6"]}	Hello, World!
4	{"a":4,"b":"str_5","c":["0","1","2","3"]}	Hello, World!
6	{"a":4,"b":"str_4","c":["0","1","2","3","4","5"]}	Hello, World!
1	{"a":1,"b":"str_1","c":["0"]}	Hello, World!
3	{"a":1,"b":"str_0","c":["0","1","2"]}	Hello, World!
2	{"a":0,"b":"str_2","c":["0","1"]}	Hello, World!
0	{"a":0,"b":"str_0","c":[]}	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.json.a DESC, CAST(__table1.json.b, \'String\'_String) DESC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: json.a DESC
0	{"a":0,"b":"str_0","c":[]}	Hello, World!
2	{"a":0,"b":"str_2","c":["0","1"]}	Hello, World!
Expression ((Project names + Projection))
Filter ((WHERE + Change column names to column identifiers))
ReadFromMergeTree (default.test)
Indexes:
PrimaryKey
Keys: 
json.a
Condition: (json.a in [0, 0])
Parts: 1/2
Granules: 2/8
0	{"a":0,"b":"str_0","c":[]}	Hello, World!
Expression ((Project names + Projection))
Filter ((WHERE + Change column names to column identifiers))
ReadFromMergeTree (default.test)
Indexes:
PrimaryKey
Keys: 
json.a
CAST(json.b, \'String\')
Condition: and((CAST(json.b, \'String\') in [\'str_0\', \'str_0\']), (json.a in [0, 0]))
Parts: 1/2
Granules: 1/8
2
Expression ((Project names + Projection))
AggregatingProjection
Expression (Before GROUP BY)
Filter ((WHERE + Change column names to column identifiers))
ReadFromMergeTree (default.test)
Indexes:
PrimaryKey
Keys: 
json.a
Condition: (json.a in [0, 0])
Parts: 1/2
Granules: 2/8
ReadFromPreparedSource (_minmax_count_projection)
1
Expression ((Project names + Projection))
Aggregating
Expression (Before GROUP BY)
Filter ((WHERE + Change column names to column identifiers))
ReadFromMergeTree (default.test)
Indexes:
PrimaryKey
Keys: 
json.a
Condition: (json.a in [0, 0])
Parts: 1/2
Granules: 2/8
1
0	{"a":0,"b":"str_0","c":[]}	Hello, World!
2	{"a":0,"b":"str_2","c":["0","1"]}	Hello, World!
1	{"a":1,"b":"str_1","c":["0"]}	Hello, World!
3	{"a":1,"b":"str_0","c":["0","1","2"]}	Hello, World!
4	{"a":4,"b":"str_5","c":["0","1","2","3"]}	Hello, World!
6	{"a":4,"b":"str_4","c":["0","1","2","3","4","5"]}	Hello, World!
5	{"a":5,"b":"str_6","c":["0","1","2","3","4"]}	Hello, World!
7	{"a":5,"b":"str_5","c":["0","1","2","3","4","5","6"]}	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.json.a ASC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: json.a ASC
5	{"a":5,"b":"str_6","c":["0","1","2","3","4"]}	Hello, World!
7	{"a":5,"b":"str_5","c":["0","1","2","3","4","5","6"]}	Hello, World!
4	{"a":4,"b":"str_5","c":["0","1","2","3"]}	Hello, World!
6	{"a":4,"b":"str_4","c":["0","1","2","3","4","5"]}	Hello, World!
1	{"a":1,"b":"str_1","c":["0"]}	Hello, World!
3	{"a":1,"b":"str_0","c":["0","1","2"]}	Hello, World!
0	{"a":0,"b":"str_0","c":[]}	Hello, World!
2	{"a":0,"b":"str_2","c":["0","1"]}	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.json.a DESC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: json.a DESC
0	{"a":0,"b":"str_0","c":[]}	Hello, World!
2	{"a":0,"b":"str_2","c":["0","1"]}	Hello, World!
3	{"a":1,"b":"str_0","c":["0","1","2"]}	Hello, World!
1	{"a":1,"b":"str_1","c":["0"]}	Hello, World!
6	{"a":4,"b":"str_4","c":["0","1","2","3","4","5"]}	Hello, World!
4	{"a":4,"b":"str_5","c":["0","1","2","3"]}	Hello, World!
7	{"a":5,"b":"str_5","c":["0","1","2","3","4","5","6"]}	Hello, World!
5	{"a":5,"b":"str_6","c":["0","1","2","3","4"]}	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.json.a ASC, CAST(__table1.json.b, \'String\'_String) ASC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: json.a ASC
7	{"a":5,"b":"str_5","c":["0","1","2","3","4","5","6"]}	Hello, World!
5	{"a":5,"b":"str_6","c":["0","1","2","3","4"]}	Hello, World!
6	{"a":4,"b":"str_4","c":["0","1","2","3","4","5"]}	Hello, World!
4	{"a":4,"b":"str_5","c":["0","1","2","3"]}	Hello, World!
3	{"a":1,"b":"str_0","c":["0","1","2"]}	Hello, World!
1	{"a":1,"b":"str_1","c":["0"]}	Hello, World!
0	{"a":0,"b":"str_0","c":[]}	Hello, World!
2	{"a":0,"b":"str_2","c":["0","1"]}	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.json.a DESC, CAST(__table1.json.b, \'String\'_String) ASC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: json.a DESC
2	{"a":0,"b":"str_2","c":["0","1"]}	Hello, World!
0	{"a":0,"b":"str_0","c":[]}	Hello, World!
1	{"a":1,"b":"str_1","c":["0"]}	Hello, World!
3	{"a":1,"b":"str_0","c":["0","1","2"]}	Hello, World!
4	{"a":4,"b":"str_5","c":["0","1","2","3"]}	Hello, World!
6	{"a":4,"b":"str_4","c":["0","1","2","3","4","5"]}	Hello, World!
5	{"a":5,"b":"str_6","c":["0","1","2","3","4"]}	Hello, World!
7	{"a":5,"b":"str_5","c":["0","1","2","3","4","5","6"]}	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.json.a ASC, CAST(__table1.json.b, \'String\'_String) DESC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: json.a ASC
5	{"a":5,"b":"str_6","c":["0","1","2","3","4"]}	Hello, World!
7	{"a":5,"b":"str_5","c":["0","1","2","3","4","5","6"]}	Hello, World!
4	{"a":4,"b":"str_5","c":["0","1","2","3"]}	Hello, World!
6	{"a":4,"b":"str_4","c":["0","1","2","3","4","5"]}	Hello, World!
1	{"a":1,"b":"str_1","c":["0"]}	Hello, World!
3	{"a":1,"b":"str_0","c":["0","1","2"]}	Hello, World!
2	{"a":0,"b":"str_2","c":["0","1"]}	Hello, World!
0	{"a":0,"b":"str_0","c":[]}	Hello, World!
Expression (Project names)
Sorting (Sorting for ORDER BY)
Sorting: __table1.json.a DESC, CAST(__table1.json.b, \'String\'_String) DESC
Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
ReadFromMergeTree (default.test)
Sorting: json.a DESC
2
Expression ((Project names + Projection))
AggregatingProjection
Expression (Before GROUP BY)
Filter ((WHERE + Change column names to column identifiers))
ReadFromMergeTree (default.test)
Indexes:
PrimaryKey
Keys: 
json.a
Condition: (json.a in [0, 0])
Parts: 1/1
Granules: 2/8
ReadFromPreparedSource (_minmax_count_projection)
1
Expression ((Project names + Projection))
Aggregating
Expression (Before GROUP BY)
Filter ((WHERE + Change column names to column identifiers))
ReadFromMergeTree (default.test)
Indexes:
PrimaryKey
Keys: 
json.a
Condition: (json.a in [0, 0])
Parts: 1/1
Granules: 2/8
