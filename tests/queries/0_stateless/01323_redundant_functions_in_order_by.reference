[0,1,2]
[0,1,2]
[0,1,2]
[0,1,2]
[0,1,2]
[0,1,2]
0	0	0	0
0	1	1	1
2	2	2	2
3	3	3	3
4	0		0
5	0		0
0	0	0	0
0	1	1	1
2	2	2	2
3	3	3	3
4	0		0
5	0		0
0	0
1	1
2	2
3	3
0	0
1	1
2	2
3	3
0	0
1	1
2	2
3	3
0	0
1	1
2	2
3	3
SELECT groupArray(x)
FROM
(
    SELECT number AS x
    FROM numbers(3)
    ORDER BY x ASC
)
QUERY id: 0
  PROJECTION COLUMNS
    groupArray(x) Array(UInt64)
  PROJECTION
    LIST id: 1, nodes: 1
      FUNCTION id: 2, function_name: groupArray, function_type: aggregate, result_type: Array(UInt64)
        ARGUMENTS
          LIST id: 3, nodes: 1
            COLUMN id: 4, column_name: x, result_type: UInt64, source_id: 5
  JOIN TREE
    QUERY id: 5, is_subquery: 1
      PROJECTION COLUMNS
        x UInt64
      PROJECTION
        LIST id: 6, nodes: 1
          COLUMN id: 7, column_name: number, result_type: UInt64, source_id: 8
      JOIN TREE
        TABLE_FUNCTION id: 8, table_function_name: numbers
          ARGUMENTS
            LIST id: 9, nodes: 1
              CONSTANT id: 10, constant_value: UInt64_3, constant_value_type: UInt8
      ORDER BY
        LIST id: 11, nodes: 1
          SORT id: 12, sort_direction: ASCENDING, with_fill: 0
            EXPRESSION
              COLUMN id: 7, column_name: number, result_type: UInt64, source_id: 8
  SETTINGS allow_experimental_analyzer=1
SELECT groupArray(x)
FROM
(
    SELECT number AS x
    FROM numbers(3)
    ORDER BY x ASC
)
QUERY id: 0
  PROJECTION COLUMNS
    groupArray(x) Array(UInt64)
  PROJECTION
    LIST id: 1, nodes: 1
      FUNCTION id: 2, function_name: groupArray, function_type: aggregate, result_type: Array(UInt64)
        ARGUMENTS
          LIST id: 3, nodes: 1
            COLUMN id: 4, column_name: x, result_type: UInt64, source_id: 5
  JOIN TREE
    QUERY id: 5, is_subquery: 1
      PROJECTION COLUMNS
        x UInt64
      PROJECTION
        LIST id: 6, nodes: 1
          COLUMN id: 7, column_name: number, result_type: UInt64, source_id: 8
      JOIN TREE
        TABLE_FUNCTION id: 8, table_function_name: numbers
          ARGUMENTS
            LIST id: 9, nodes: 1
              CONSTANT id: 10, constant_value: UInt64_3, constant_value_type: UInt8
      ORDER BY
        LIST id: 11, nodes: 1
          SORT id: 12, sort_direction: ASCENDING, with_fill: 0
            EXPRESSION
              COLUMN id: 7, column_name: number, result_type: UInt64, source_id: 8
  SETTINGS allow_experimental_analyzer=1
SELECT groupArray(x)
FROM
(
    SELECT number AS x
    FROM numbers(3)
    ORDER BY
        exp(x) ASC,
        x ASC
)
QUERY id: 0
  PROJECTION COLUMNS
    groupArray(x) Array(UInt64)
  PROJECTION
    LIST id: 1, nodes: 1
      FUNCTION id: 2, function_name: groupArray, function_type: aggregate, result_type: Array(UInt64)
        ARGUMENTS
          LIST id: 3, nodes: 1
            COLUMN id: 4, column_name: x, result_type: UInt64, source_id: 5
  JOIN TREE
    QUERY id: 5, is_subquery: 1
      PROJECTION COLUMNS
        x UInt64
      PROJECTION
        LIST id: 6, nodes: 1
          COLUMN id: 7, column_name: number, result_type: UInt64, source_id: 8
      JOIN TREE
        TABLE_FUNCTION id: 8, table_function_name: numbers
          ARGUMENTS
            LIST id: 9, nodes: 1
              CONSTANT id: 10, constant_value: UInt64_3, constant_value_type: UInt8
      ORDER BY
        LIST id: 11, nodes: 2
          SORT id: 12, sort_direction: ASCENDING, with_fill: 0
            EXPRESSION
              FUNCTION id: 13, function_name: exp, function_type: ordinary, result_type: Float64
                ARGUMENTS
                  LIST id: 14, nodes: 1
                    COLUMN id: 7, column_name: number, result_type: UInt64, source_id: 8
          SORT id: 15, sort_direction: ASCENDING, with_fill: 0
            EXPRESSION
              COLUMN id: 7, column_name: number, result_type: UInt64, source_id: 8
  SETTINGS allow_experimental_analyzer=1
SELECT
    key,
    a,
    b,
    c
FROM
(
    SELECT number + 2 AS key
    FROM numbers(4)
) AS s
ALL FULL OUTER JOIN test AS t USING (key)
ORDER BY
    key ASC,
    t.key ASC
QUERY id: 0
  PROJECTION COLUMNS
    key UInt64
    a UInt8
    b String
    c Float64
  PROJECTION
    LIST id: 1, nodes: 4
      COLUMN id: 2, column_name: key, result_type: UInt64, source_id: 3
      COLUMN id: 4, column_name: a, result_type: UInt8, source_id: 5
      COLUMN id: 6, column_name: b, result_type: String, source_id: 5
      COLUMN id: 7, column_name: c, result_type: Float64, source_id: 5
  JOIN TREE
    JOIN id: 8, strictness: ALL, kind: FULL
      LEFT TABLE EXPRESSION
        QUERY id: 3, alias: s, is_subquery: 1
          PROJECTION COLUMNS
            key UInt64
          PROJECTION
            LIST id: 9, nodes: 1
              FUNCTION id: 10, function_name: plus, function_type: ordinary, result_type: UInt64
                ARGUMENTS
                  LIST id: 11, nodes: 2
                    COLUMN id: 12, column_name: number, result_type: UInt64, source_id: 13
                    CONSTANT id: 14, constant_value: UInt64_2, constant_value_type: UInt8
          JOIN TREE
            TABLE_FUNCTION id: 13, table_function_name: numbers
              ARGUMENTS
                LIST id: 15, nodes: 1
                  CONSTANT id: 16, constant_value: UInt64_4, constant_value_type: UInt8
      RIGHT TABLE EXPRESSION
        TABLE id: 5, alias: t, table_name: default.test
      JOIN EXPRESSION
        LIST id: 17, nodes: 1
          COLUMN id: 18, column_name: key, result_type: UInt64, source_id: 8
            EXPRESSION
              LIST id: 19, nodes: 2
                COLUMN id: 20, column_name: key, result_type: UInt64, source_id: 3
                COLUMN id: 21, column_name: key, result_type: UInt64, source_id: 5
  ORDER BY
    LIST id: 22, nodes: 2
      SORT id: 23, sort_direction: ASCENDING, with_fill: 0
        EXPRESSION
          COLUMN id: 24, column_name: key, result_type: UInt64, source_id: 3
      SORT id: 25, sort_direction: ASCENDING, with_fill: 0
        EXPRESSION
          COLUMN id: 26, column_name: key, result_type: UInt64, source_id: 5
  SETTINGS allow_experimental_analyzer=1
SELECT
    key,
    a
FROM test
ORDER BY
    key ASC,
    a ASC
QUERY id: 0
  PROJECTION COLUMNS
    key UInt64
    a UInt8
  PROJECTION
    LIST id: 1, nodes: 2
      COLUMN id: 2, column_name: key, result_type: UInt64, source_id: 3
      COLUMN id: 4, column_name: a, result_type: UInt8, source_id: 3
  JOIN TREE
    TABLE id: 3, table_name: default.test
  ORDER BY
    LIST id: 5, nodes: 2
      SORT id: 6, sort_direction: ASCENDING, with_fill: 0
        EXPRESSION
          COLUMN id: 2, column_name: key, result_type: UInt64, source_id: 3
      SORT id: 7, sort_direction: ASCENDING, with_fill: 0
        EXPRESSION
          COLUMN id: 4, column_name: a, result_type: UInt8, source_id: 3
  SETTINGS allow_experimental_analyzer=1
SELECT
    key,
    a
FROM test
ORDER BY
    key ASC,
    exp(key + a) ASC
QUERY id: 0
  PROJECTION COLUMNS
    key UInt64
    a UInt8
  PROJECTION
    LIST id: 1, nodes: 2
      COLUMN id: 2, column_name: key, result_type: UInt64, source_id: 3
      COLUMN id: 4, column_name: a, result_type: UInt8, source_id: 3
  JOIN TREE
    TABLE id: 3, table_name: default.test
  ORDER BY
    LIST id: 5, nodes: 2
      SORT id: 6, sort_direction: ASCENDING, with_fill: 0
        EXPRESSION
          COLUMN id: 2, column_name: key, result_type: UInt64, source_id: 3
      SORT id: 7, sort_direction: ASCENDING, with_fill: 0
        EXPRESSION
          FUNCTION id: 8, function_name: exp, function_type: ordinary, result_type: Float64
            ARGUMENTS
              LIST id: 9, nodes: 1
                FUNCTION id: 10, function_name: plus, function_type: ordinary, result_type: UInt64
                  ARGUMENTS
                    LIST id: 11, nodes: 2
                      COLUMN id: 2, column_name: key, result_type: UInt64, source_id: 3
                      COLUMN id: 4, column_name: a, result_type: UInt8, source_id: 3
  SETTINGS allow_experimental_analyzer=1
QUERY id: 0
  PROJECTION COLUMNS
    key UInt64
  PROJECTION
    LIST id: 1, nodes: 1
      COLUMN id: 2, column_name: key, result_type: UInt64, source_id: 3
  JOIN TREE
    TABLE id: 3, table_name: default.test
  GROUP BY
    LIST id: 4, nodes: 1
      COLUMN id: 2, column_name: key, result_type: UInt64, source_id: 3
  ORDER BY
    LIST id: 5, nodes: 2
      SORT id: 6, sort_direction: ASCENDING, with_fill: 0
        EXPRESSION
          FUNCTION id: 7, function_name: avg, function_type: aggregate, result_type: Float64
            ARGUMENTS
              LIST id: 8, nodes: 1
                COLUMN id: 9, column_name: a, result_type: UInt8, source_id: 3
      SORT id: 10, sort_direction: ASCENDING, with_fill: 0
        EXPRESSION
          COLUMN id: 2, column_name: key, result_type: UInt64, source_id: 3
  SETTINGS allow_experimental_analyzer=1
QUERY id: 0
  PROJECTION COLUMNS
    t1.id UInt64
    t2.id UInt64
  PROJECTION
    LIST id: 1, nodes: 2
      COLUMN id: 2, column_name: id, result_type: UInt64, source_id: 3
      COLUMN id: 4, column_name: id, result_type: UInt64, source_id: 5
  JOIN TREE
    JOIN id: 6, strictness: ALL, kind: INNER
      LEFT TABLE EXPRESSION
        TABLE id: 3, table_name: default.t1
      RIGHT TABLE EXPRESSION
        TABLE id: 5, table_name: default.t2
      JOIN EXPRESSION
        FUNCTION id: 7, function_name: equals, function_type: ordinary, result_type: UInt8
          ARGUMENTS
            LIST id: 8, nodes: 2
              COLUMN id: 9, column_name: id, result_type: UInt64, source_id: 3
              COLUMN id: 10, column_name: id, result_type: UInt64, source_id: 5
  ORDER BY
    LIST id: 11, nodes: 2
      SORT id: 12, sort_direction: ASCENDING, with_fill: 0
        EXPRESSION
          COLUMN id: 13, column_name: id, result_type: UInt64, source_id: 3
      SORT id: 14, sort_direction: ASCENDING, with_fill: 0
        EXPRESSION
          COLUMN id: 15, column_name: id, result_type: UInt64, source_id: 5
  SETTINGS allow_experimental_analyzer=1
[0,1,2]
[0,1,2]
[0,1,2]
0	0	0	0
0	1	1	1
2	2	2	2
3	3	3	3
4	0		0
5	0		0
0	0
1	1
2	2
3	3
0	0
1	1
2	2
3	3
SELECT groupArray(x)
FROM
(
    SELECT number AS x
    FROM numbers(3)
    ORDER BY
        x ASC,
        exp(x) ASC
)
SELECT groupArray(x)
FROM
(
    SELECT number AS x
    FROM numbers(3)
    ORDER BY
        x ASC,
        exp(exp(x)) ASC
)
SELECT groupArray(x)
FROM
(
    SELECT number AS x
    FROM numbers(3)
    ORDER BY
        exp(x) ASC,
        x ASC
)
SELECT
    key,
    a,
    b,
    c
FROM
(
    SELECT number + 2 AS key
    FROM numbers(4)
) AS s
ALL FULL OUTER JOIN test AS t USING (key)
ORDER BY
    key ASC,
    t.key ASC
SELECT
    key,
    a
FROM test
ORDER BY
    key ASC,
    a ASC,
    exp(key + a) ASC
SELECT
    key,
    a
FROM test
ORDER BY
    key ASC,
    exp(key + a) ASC
