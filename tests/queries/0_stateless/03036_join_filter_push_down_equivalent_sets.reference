-- { echoOn }

EXPLAIN header = 1, actions = 1
SELECT lhs.id, rhs.id, lhs.value, rhs.value FROM test_table_1 AS lhs INNER JOIN test_table_2 AS rhs ON lhs.id = rhs.id
WHERE lhs.id = 5;
Expression ((Project names + (Projection + )))
Header: id UInt64
        rhs.id UInt64
        value String
        rhs.value String
Actions: INPUT : 0 -> __table1.id UInt64 : 0
         INPUT : 1 -> __table1.value String : 1
         INPUT : 2 -> __table2.value String : 2
         INPUT : 3 -> __table2.id UInt64 : 3
         ALIAS __table1.id :: 0 -> id UInt64 : 4
         ALIAS __table1.value :: 1 -> value String : 0
         ALIAS __table2.value :: 2 -> rhs.value String : 1
         ALIAS __table2.id :: 3 -> rhs.id UInt64 : 2
Positions: 4 2 0 1
  Join (JOIN FillRightFirst)
  Header: __table1.id UInt64
          __table1.value String
          __table2.value String
          __table2.id UInt64
  Type: INNER
  Strictness: ALL
  Algorithm: HashJoin
  Clauses: [(__table1.id) = (__table2.id)]
    Filter (( + (JOIN actions + Change column names to column identifiers)))
    Header: __table1.id UInt64
            __table1.value String
    Filter column: equals(__table1.id, 5_UInt8) (removed)
    Actions: INPUT : 0 -> id UInt64 : 0
             INPUT : 1 -> value String : 1
             COLUMN Const(UInt8) -> 5_UInt8 UInt8 : 2
             ALIAS id :: 0 -> __table1.id UInt64 : 3
             ALIAS value :: 1 -> __table1.value String : 0
             FUNCTION equals(__table1.id : 3, 5_UInt8 :: 2) -> equals(__table1.id, 5_UInt8) UInt8 : 1
    Positions: 1 3 0
      ReadFromMergeTree (default.test_table_1)
      Header: id UInt64
              value String
      ReadType: Default
      Parts: 1
      Granules: 1
    Filter (( + (JOIN actions + Change column names to column identifiers)))
    Header: __table2.id UInt64
            __table2.value String
    Filter column: equals(__table2.id, 5_UInt8) (removed)
    Actions: INPUT : 0 -> id UInt64 : 0
             INPUT : 1 -> value String : 1
             COLUMN Const(UInt8) -> 5_UInt8 UInt8 : 2
             ALIAS id :: 0 -> __table2.id UInt64 : 3
             ALIAS value :: 1 -> __table2.value String : 0
             FUNCTION equals(__table2.id : 3, 5_UInt8 :: 2) -> equals(__table2.id, 5_UInt8) UInt8 : 1
    Positions: 1 3 0
      ReadFromMergeTree (default.test_table_2)
      Header: id UInt64
              value String
      ReadType: Default
      Parts: 1
      Granules: 1
SELECT '--';
--
SELECT lhs.id, rhs.id, lhs.value, rhs.value FROM test_table_1 AS lhs INNER JOIN test_table_2 AS rhs ON lhs.id = rhs.id
WHERE lhs.id = 5;
5	5	5	5
SELECT '--';
--
EXPLAIN header = 1, actions = 1
SELECT lhs.id, rhs.id, lhs.value, rhs.value FROM test_table_1 AS lhs INNER JOIN test_table_2 AS rhs ON lhs.id = rhs.id
WHERE rhs.id = 5;
Expression ((Project names + (Projection + )))
Header: id UInt64
        rhs.id UInt64
        value String
        rhs.value String
Actions: INPUT : 0 -> __table1.id UInt64 : 0
         INPUT : 1 -> __table1.value String : 1
         INPUT : 2 -> __table2.value String : 2
         INPUT : 3 -> __table2.id UInt64 : 3
         ALIAS __table1.id :: 0 -> id UInt64 : 4
         ALIAS __table1.value :: 1 -> value String : 0
         ALIAS __table2.value :: 2 -> rhs.value String : 1
         ALIAS __table2.id :: 3 -> rhs.id UInt64 : 2
Positions: 4 2 0 1
  Join (JOIN FillRightFirst)
  Header: __table1.id UInt64
          __table1.value String
          __table2.value String
          __table2.id UInt64
  Type: INNER
  Strictness: ALL
  Algorithm: HashJoin
  Clauses: [(__table1.id) = (__table2.id)]
    Filter (( + (JOIN actions + Change column names to column identifiers)))
    Header: __table1.id UInt64
            __table1.value String
    Filter column: equals(__table1.id, 5_UInt8) (removed)
    Actions: INPUT : 0 -> id UInt64 : 0
             INPUT : 1 -> value String : 1
             COLUMN Const(UInt8) -> 5_UInt8 UInt8 : 2
             ALIAS id :: 0 -> __table1.id UInt64 : 3
             ALIAS value :: 1 -> __table1.value String : 0
             FUNCTION equals(__table1.id : 3, 5_UInt8 :: 2) -> equals(__table1.id, 5_UInt8) UInt8 : 1
    Positions: 1 3 0
      ReadFromMergeTree (default.test_table_1)
      Header: id UInt64
              value String
      ReadType: Default
      Parts: 1
      Granules: 1
    Filter (( + (JOIN actions + Change column names to column identifiers)))
    Header: __table2.id UInt64
            __table2.value String
    Filter column: equals(__table2.id, 5_UInt8) (removed)
    Actions: INPUT : 0 -> id UInt64 : 0
             INPUT : 1 -> value String : 1
             COLUMN Const(UInt8) -> 5_UInt8 UInt8 : 2
             ALIAS id :: 0 -> __table2.id UInt64 : 3
             ALIAS value :: 1 -> __table2.value String : 0
             FUNCTION equals(__table2.id : 3, 5_UInt8 :: 2) -> equals(__table2.id, 5_UInt8) UInt8 : 1
    Positions: 1 3 0
      ReadFromMergeTree (default.test_table_2)
      Header: id UInt64
              value String
      ReadType: Default
      Parts: 1
      Granules: 1
SELECT '--';
--
SELECT lhs.id, rhs.id, lhs.value, rhs.value FROM test_table_1 AS lhs INNER JOIN test_table_2 AS rhs ON lhs.id = rhs.id
WHERE rhs.id = 5;
5	5	5	5
SELECT '--';
--
EXPLAIN header = 1, actions = 1
SELECT lhs.id, rhs.id, lhs.value, rhs.value FROM test_table_1 AS lhs INNER JOIN test_table_2 AS rhs ON lhs.id = rhs.id
WHERE lhs.id = 5 AND rhs.id = 6;
Expression ((Project names + (Projection + )))
Header: id UInt64
        rhs.id UInt64
        value String
        rhs.value String
Actions: INPUT : 0 -> __table1.id UInt64 : 0
         INPUT : 1 -> __table1.value String : 1
         INPUT : 2 -> __table2.value String : 2
         INPUT : 3 -> __table2.id UInt64 : 3
         ALIAS __table1.id :: 0 -> id UInt64 : 4
         ALIAS __table1.value :: 1 -> value String : 0
         ALIAS __table2.value :: 2 -> rhs.value String : 1
         ALIAS __table2.id :: 3 -> rhs.id UInt64 : 2
Positions: 4 2 0 1
  Join (JOIN FillRightFirst)
  Header: __table1.id UInt64
          __table1.value String
          __table2.value String
          __table2.id UInt64
  Type: INNER
  Strictness: ALL
  Algorithm: HashJoin
  Clauses: [(__table1.id) = (__table2.id)]
    Filter (( + (JOIN actions + Change column names to column identifiers)))
    Header: __table1.id UInt64
            __table1.value String
    Filter column: and(equals(__table1.id, 5_UInt8), equals(__table1.id, 6_UInt8)) (removed)
    Actions: INPUT : 0 -> id UInt64 : 0
             INPUT : 1 -> value String : 1
             COLUMN Const(UInt8) -> 6_UInt8 UInt8 : 2
             COLUMN Const(UInt8) -> 5_UInt8 UInt8 : 3
             ALIAS id :: 0 -> __table1.id UInt64 : 4
             ALIAS value :: 1 -> __table1.value String : 0
             FUNCTION equals(__table1.id : 4, 6_UInt8 :: 2) -> equals(__table1.id, 6_UInt8) UInt8 : 1
             FUNCTION equals(__table1.id : 4, 5_UInt8 :: 3) -> equals(__table1.id, 5_UInt8) UInt8 : 2
             FUNCTION and(equals(__table1.id, 5_UInt8) :: 2, equals(__table1.id, 6_UInt8) :: 1) -> and(equals(__table1.id, 5_UInt8), equals(__table1.id, 6_UInt8)) UInt8 : 3
    Positions: 3 4 0
      ReadFromMergeTree (default.test_table_1)
      Header: id UInt64
              value String
      ReadType: Default
      Parts: 1
      Granules: 1
    Filter (( + (JOIN actions + Change column names to column identifiers)))
    Header: __table2.id UInt64
            __table2.value String
    Filter column: and(equals(__table2.id, 6_UInt8), equals(__table2.id, 5_UInt8)) (removed)
    Actions: INPUT : 0 -> id UInt64 : 0
             INPUT : 1 -> value String : 1
             COLUMN Const(UInt8) -> 5_UInt8 UInt8 : 2
             COLUMN Const(UInt8) -> 6_UInt8 UInt8 : 3
             ALIAS id :: 0 -> __table2.id UInt64 : 4
             ALIAS value :: 1 -> __table2.value String : 0
             FUNCTION equals(__table2.id : 4, 5_UInt8 :: 2) -> equals(__table2.id, 5_UInt8) UInt8 : 1
             FUNCTION equals(__table2.id : 4, 6_UInt8 :: 3) -> equals(__table2.id, 6_UInt8) UInt8 : 2
             FUNCTION and(equals(__table2.id, 6_UInt8) :: 2, equals(__table2.id, 5_UInt8) :: 1) -> and(equals(__table2.id, 6_UInt8), equals(__table2.id, 5_UInt8)) UInt8 : 3
    Positions: 3 4 0
      ReadFromMergeTree (default.test_table_2)
      Header: id UInt64
              value String
      ReadType: Default
      Parts: 1
      Granules: 1
SELECT lhs.id, rhs.id, lhs.value, rhs.value FROM test_table_1 AS lhs INNER JOIN test_table_2 AS rhs ON lhs.id = rhs.id
WHERE lhs.id = 5 AND rhs.id = 6;
SELECT '--';
--
EXPLAIN header = 1, actions = 1
SELECT lhs.id, rhs.id, lhs.value, rhs.value FROM test_table_1 AS lhs LEFT JOIN test_table_2 AS rhs ON lhs.id = rhs.id
WHERE lhs.id = 5;
Expression ((Project names + (Projection + )))
Header: id UInt64
        rhs.id UInt64
        value String
        rhs.value String
Actions: INPUT : 0 -> __table1.id UInt64 : 0
         INPUT : 1 -> __table1.value String : 1
         INPUT : 2 -> __table2.value String : 2
         INPUT : 3 -> __table2.id UInt64 : 3
         ALIAS __table1.id :: 0 -> id UInt64 : 4
         ALIAS __table1.value :: 1 -> value String : 0
         ALIAS __table2.value :: 2 -> rhs.value String : 1
         ALIAS __table2.id :: 3 -> rhs.id UInt64 : 2
Positions: 4 2 0 1
  Join (JOIN FillRightFirst)
  Header: __table1.id UInt64
          __table1.value String
          __table2.value String
          __table2.id UInt64
  Type: LEFT
  Strictness: ALL
  Algorithm: HashJoin
  Clauses: [(__table1.id) = (__table2.id)]
    Filter (( + (JOIN actions + Change column names to column identifiers)))
    Header: __table1.id UInt64
            __table1.value String
    Filter column: equals(__table1.id, 5_UInt8) (removed)
    Actions: INPUT : 0 -> id UInt64 : 0
             INPUT : 1 -> value String : 1
             COLUMN Const(UInt8) -> 5_UInt8 UInt8 : 2
             ALIAS id :: 0 -> __table1.id UInt64 : 3
             ALIAS value :: 1 -> __table1.value String : 0
             FUNCTION equals(__table1.id : 3, 5_UInt8 :: 2) -> equals(__table1.id, 5_UInt8) UInt8 : 1
    Positions: 1 3 0
      ReadFromMergeTree (default.test_table_1)
      Header: id UInt64
              value String
      ReadType: Default
      Parts: 1
      Granules: 1
    Filter (( + (JOIN actions + Change column names to column identifiers)))
    Header: __table2.id UInt64
            __table2.value String
    Filter column: equals(__table2.id, 5_UInt8) (removed)
    Actions: INPUT : 0 -> id UInt64 : 0
             INPUT : 1 -> value String : 1
             COLUMN Const(UInt8) -> 5_UInt8 UInt8 : 2
             ALIAS id :: 0 -> __table2.id UInt64 : 3
             ALIAS value :: 1 -> __table2.value String : 0
             FUNCTION equals(__table2.id : 3, 5_UInt8 :: 2) -> equals(__table2.id, 5_UInt8) UInt8 : 1
    Positions: 1 3 0
      ReadFromMergeTree (default.test_table_2)
      Header: id UInt64
              value String
      ReadType: Default
      Parts: 1
      Granules: 1
SELECT '--';
--
SELECT lhs.id, rhs.id, lhs.value, rhs.value FROM test_table_1 AS lhs LEFT JOIN test_table_2 AS rhs ON lhs.id = rhs.id
WHERE lhs.id = 5;
5	5	5	5
SELECT '--';
--
EXPLAIN header = 1, actions = 1
SELECT lhs.id, rhs.id, lhs.value, rhs.value FROM test_table_1 AS lhs LEFT JOIN test_table_2 AS rhs ON lhs.id = rhs.id
WHERE rhs.id = 5;
Expression ((Project names + Projection))
Header: id UInt64
        rhs.id UInt64
        value String
        rhs.value String
Actions: INPUT : 0 -> __table1.id UInt64 : 0
         INPUT : 1 -> __table1.value String : 1
         INPUT : 2 -> __table2.value String : 2
         INPUT : 3 -> __table2.id UInt64 : 3
         ALIAS __table1.id :: 0 -> id UInt64 : 4
         ALIAS __table1.value :: 1 -> value String : 0
         ALIAS __table2.value :: 2 -> rhs.value String : 1
         ALIAS __table2.id :: 3 -> rhs.id UInt64 : 2
Positions: 4 2 0 1
  Filter ((WHERE + DROP unused columns after JOIN))
  Header: __table1.id UInt64
          __table1.value String
          __table2.value String
          __table2.id UInt64
  Filter column: equals(__table2.id, 5_UInt8) (removed)
  Actions: INPUT :: 0 -> __table1.id UInt64 : 0
           INPUT :: 1 -> __table1.value String : 1
           INPUT :: 2 -> __table2.value String : 2
           INPUT : 3 -> __table2.id UInt64 : 3
           COLUMN Const(UInt8) -> 5_UInt8 UInt8 : 4
           FUNCTION equals(__table2.id : 3, 5_UInt8 :: 4) -> equals(__table2.id, 5_UInt8) UInt8 : 5
  Positions: 5 0 1 2 3
    Join (JOIN FillRightFirst)
    Header: __table1.id UInt64
            __table1.value String
            __table2.value String
            __table2.id UInt64
    Type: LEFT
    Strictness: ALL
    Algorithm: HashJoin
    Clauses: [(__table1.id) = (__table2.id)]
      Expression ((JOIN actions + Change column names to column identifiers))
      Header: __table1.id UInt64
              __table1.value String
      Actions: INPUT : 0 -> id UInt64 : 0
               INPUT : 1 -> value String : 1
               ALIAS id :: 0 -> __table1.id UInt64 : 2
               ALIAS value :: 1 -> __table1.value String : 0
      Positions: 2 0
        ReadFromMergeTree (default.test_table_1)
        Header: id UInt64
                value String
        ReadType: Default
        Parts: 1
        Granules: 1
      Expression ((JOIN actions + Change column names to column identifiers))
      Header: __table2.id UInt64
              __table2.value String
      Actions: INPUT : 0 -> id UInt64 : 0
               INPUT : 1 -> value String : 1
               ALIAS id :: 0 -> __table2.id UInt64 : 2
               ALIAS value :: 1 -> __table2.value String : 0
      Positions: 2 0
        ReadFromMergeTree (default.test_table_2)
        Header: id UInt64
                value String
        ReadType: Default
        Parts: 1
        Granules: 1
SELECT '--';
--
SELECT lhs.id, rhs.id, lhs.value, rhs.value FROM test_table_1 AS lhs LEFT JOIN test_table_2 AS rhs ON lhs.id = rhs.id
WHERE rhs.id = 5;
5	5	5	5
SELECT '--';
--
EXPLAIN header = 1, actions = 1
SELECT lhs.id, rhs.id, lhs.value, rhs.value FROM test_table_1 AS lhs RIGHT JOIN test_table_2 AS rhs ON lhs.id = rhs.id
WHERE lhs.id = 5;
Expression ((Project names + Projection))
Header: id UInt64
        rhs.id UInt64
        value String
        rhs.value String
Actions: INPUT : 0 -> __table1.id UInt64 : 0
         INPUT : 1 -> __table1.value String : 1
         INPUT : 2 -> __table2.value String : 2
         INPUT : 3 -> __table2.id UInt64 : 3
         ALIAS __table1.id :: 0 -> id UInt64 : 4
         ALIAS __table1.value :: 1 -> value String : 0
         ALIAS __table2.value :: 2 -> rhs.value String : 1
         ALIAS __table2.id :: 3 -> rhs.id UInt64 : 2
Positions: 4 2 0 1
  Filter ((WHERE + DROP unused columns after JOIN))
  Header: __table1.id UInt64
          __table1.value String
          __table2.value String
          __table2.id UInt64
  Filter column: equals(__table1.id, 5_UInt8) (removed)
  Actions: INPUT : 0 -> __table1.id UInt64 : 0
           INPUT :: 1 -> __table1.value String : 1
           INPUT :: 2 -> __table2.value String : 2
           INPUT :: 3 -> __table2.id UInt64 : 3
           COLUMN Const(UInt8) -> 5_UInt8 UInt8 : 4
           FUNCTION equals(__table1.id : 0, 5_UInt8 :: 4) -> equals(__table1.id, 5_UInt8) UInt8 : 5
  Positions: 5 0 1 2 3
    Join (JOIN FillRightFirst)
    Header: __table1.id UInt64
            __table1.value String
            __table2.value String
            __table2.id UInt64
    Type: RIGHT
    Strictness: ALL
    Algorithm: HashJoin
    Clauses: [(__table1.id) = (__table2.id)]
      Expression ((JOIN actions + Change column names to column identifiers))
      Header: __table1.id UInt64
              __table1.value String
      Actions: INPUT : 0 -> id UInt64 : 0
               INPUT : 1 -> value String : 1
               ALIAS id :: 0 -> __table1.id UInt64 : 2
               ALIAS value :: 1 -> __table1.value String : 0
      Positions: 2 0
        ReadFromMergeTree (default.test_table_1)
        Header: id UInt64
                value String
        ReadType: Default
        Parts: 1
        Granules: 1
      Expression ((JOIN actions + Change column names to column identifiers))
      Header: __table2.id UInt64
              __table2.value String
      Actions: INPUT : 0 -> id UInt64 : 0
               INPUT : 1 -> value String : 1
               ALIAS id :: 0 -> __table2.id UInt64 : 2
               ALIAS value :: 1 -> __table2.value String : 0
      Positions: 2 0
        ReadFromMergeTree (default.test_table_2)
        Header: id UInt64
                value String
        ReadType: Default
        Parts: 1
        Granules: 1
SELECT '--';
--
SELECT lhs.id, rhs.id, lhs.value, rhs.value FROM test_table_1 AS lhs RIGHT JOIN test_table_2 AS rhs ON lhs.id = rhs.id
WHERE lhs.id = 5;
5	5	5	5
SELECT '--';
--
EXPLAIN header = 1, actions = 1
SELECT lhs.id, rhs.id, lhs.value, rhs.value FROM test_table_1 AS lhs RIGHT JOIN test_table_2 AS rhs ON lhs.id = rhs.id
WHERE rhs.id = 5;
Expression ((Project names + (Projection + )))
Header: id UInt64
        rhs.id UInt64
        value String
        rhs.value String
Actions: INPUT : 0 -> __table1.id UInt64 : 0
         INPUT : 1 -> __table1.value String : 1
         INPUT : 2 -> __table2.value String : 2
         INPUT : 3 -> __table2.id UInt64 : 3
         ALIAS __table1.id :: 0 -> id UInt64 : 4
         ALIAS __table1.value :: 1 -> value String : 0
         ALIAS __table2.value :: 2 -> rhs.value String : 1
         ALIAS __table2.id :: 3 -> rhs.id UInt64 : 2
Positions: 4 2 0 1
  Join (JOIN FillRightFirst)
  Header: __table1.id UInt64
          __table1.value String
          __table2.value String
          __table2.id UInt64
  Type: RIGHT
  Strictness: ALL
  Algorithm: HashJoin
  Clauses: [(__table1.id) = (__table2.id)]
    Filter (( + (JOIN actions + Change column names to column identifiers)))
    Header: __table1.id UInt64
            __table1.value String
    Filter column: equals(__table1.id, 5_UInt8) (removed)
    Actions: INPUT : 0 -> id UInt64 : 0
             INPUT : 1 -> value String : 1
             COLUMN Const(UInt8) -> 5_UInt8 UInt8 : 2
             ALIAS id :: 0 -> __table1.id UInt64 : 3
             ALIAS value :: 1 -> __table1.value String : 0
             FUNCTION equals(__table1.id : 3, 5_UInt8 :: 2) -> equals(__table1.id, 5_UInt8) UInt8 : 1
    Positions: 1 3 0
      ReadFromMergeTree (default.test_table_1)
      Header: id UInt64
              value String
      ReadType: Default
      Parts: 1
      Granules: 1
    Filter (( + (JOIN actions + Change column names to column identifiers)))
    Header: __table2.id UInt64
            __table2.value String
    Filter column: equals(__table2.id, 5_UInt8) (removed)
    Actions: INPUT : 0 -> id UInt64 : 0
             INPUT : 1 -> value String : 1
             COLUMN Const(UInt8) -> 5_UInt8 UInt8 : 2
             ALIAS id :: 0 -> __table2.id UInt64 : 3
             ALIAS value :: 1 -> __table2.value String : 0
             FUNCTION equals(__table2.id : 3, 5_UInt8 :: 2) -> equals(__table2.id, 5_UInt8) UInt8 : 1
    Positions: 1 3 0
      ReadFromMergeTree (default.test_table_2)
      Header: id UInt64
              value String
      ReadType: Default
      Parts: 1
      Granules: 1
SELECT '--';
--
SELECT lhs.id, rhs.id, lhs.value, rhs.value FROM test_table_1 AS lhs RIGHT JOIN test_table_2 AS rhs ON lhs.id = rhs.id
WHERE rhs.id = 5;
5	5	5	5
SELECT '--';
--
EXPLAIN header = 1, actions = 1
SELECT lhs.id, rhs.id, lhs.value, rhs.value FROM test_table_1 AS lhs FULL JOIN test_table_2 AS rhs ON lhs.id = rhs.id
WHERE lhs.id = 5;
Expression ((Project names + Projection))
Header: id UInt64
        rhs.id UInt64
        value String
        rhs.value String
Actions: INPUT : 0 -> __table1.id UInt64 : 0
         INPUT : 1 -> __table1.value String : 1
         INPUT : 2 -> __table2.value String : 2
         INPUT : 3 -> __table2.id UInt64 : 3
         ALIAS __table1.id :: 0 -> id UInt64 : 4
         ALIAS __table1.value :: 1 -> value String : 0
         ALIAS __table2.value :: 2 -> rhs.value String : 1
         ALIAS __table2.id :: 3 -> rhs.id UInt64 : 2
Positions: 4 2 0 1
  Filter ((WHERE + DROP unused columns after JOIN))
  Header: __table1.id UInt64
          __table1.value String
          __table2.value String
          __table2.id UInt64
  Filter column: equals(__table1.id, 5_UInt8) (removed)
  Actions: INPUT : 0 -> __table1.id UInt64 : 0
           INPUT :: 1 -> __table1.value String : 1
           INPUT :: 2 -> __table2.value String : 2
           INPUT :: 3 -> __table2.id UInt64 : 3
           COLUMN Const(UInt8) -> 5_UInt8 UInt8 : 4
           FUNCTION equals(__table1.id : 0, 5_UInt8 :: 4) -> equals(__table1.id, 5_UInt8) UInt8 : 5
  Positions: 5 0 1 2 3
    Join (JOIN FillRightFirst)
    Header: __table1.id UInt64
            __table1.value String
            __table2.value String
            __table2.id UInt64
    Type: FULL
    Strictness: ALL
    Algorithm: HashJoin
    Clauses: [(__table1.id) = (__table2.id)]
      Expression ((JOIN actions + Change column names to column identifiers))
      Header: __table1.id UInt64
              __table1.value String
      Actions: INPUT : 0 -> id UInt64 : 0
               INPUT : 1 -> value String : 1
               ALIAS id :: 0 -> __table1.id UInt64 : 2
               ALIAS value :: 1 -> __table1.value String : 0
      Positions: 2 0
        ReadFromMergeTree (default.test_table_1)
        Header: id UInt64
                value String
        ReadType: Default
        Parts: 1
        Granules: 1
      Expression ((JOIN actions + Change column names to column identifiers))
      Header: __table2.id UInt64
              __table2.value String
      Actions: INPUT : 0 -> id UInt64 : 0
               INPUT : 1 -> value String : 1
               ALIAS id :: 0 -> __table2.id UInt64 : 2
               ALIAS value :: 1 -> __table2.value String : 0
      Positions: 2 0
        ReadFromMergeTree (default.test_table_2)
        Header: id UInt64
                value String
        ReadType: Default
        Parts: 1
        Granules: 1
SELECT '--';
--
SELECT lhs.id, rhs.id, lhs.value, rhs.value FROM test_table_1 AS lhs FULL JOIN test_table_2 AS rhs ON lhs.id = rhs.id
WHERE lhs.id = 5;
5	5	5	5
SELECT '--';
--
EXPLAIN header = 1, actions = 1
SELECT lhs.id, rhs.id, lhs.value, rhs.value FROM test_table_1 AS lhs FULL JOIN test_table_2 AS rhs ON lhs.id = rhs.id
WHERE rhs.id = 5;
Expression ((Project names + Projection))
Header: id UInt64
        rhs.id UInt64
        value String
        rhs.value String
Actions: INPUT : 0 -> __table1.id UInt64 : 0
         INPUT : 1 -> __table1.value String : 1
         INPUT : 2 -> __table2.value String : 2
         INPUT : 3 -> __table2.id UInt64 : 3
         ALIAS __table1.id :: 0 -> id UInt64 : 4
         ALIAS __table1.value :: 1 -> value String : 0
         ALIAS __table2.value :: 2 -> rhs.value String : 1
         ALIAS __table2.id :: 3 -> rhs.id UInt64 : 2
Positions: 4 2 0 1
  Filter ((WHERE + DROP unused columns after JOIN))
  Header: __table1.id UInt64
          __table1.value String
          __table2.value String
          __table2.id UInt64
  Filter column: equals(__table2.id, 5_UInt8) (removed)
  Actions: INPUT :: 0 -> __table1.id UInt64 : 0
           INPUT :: 1 -> __table1.value String : 1
           INPUT :: 2 -> __table2.value String : 2
           INPUT : 3 -> __table2.id UInt64 : 3
           COLUMN Const(UInt8) -> 5_UInt8 UInt8 : 4
           FUNCTION equals(__table2.id : 3, 5_UInt8 :: 4) -> equals(__table2.id, 5_UInt8) UInt8 : 5
  Positions: 5 0 1 2 3
    Join (JOIN FillRightFirst)
    Header: __table1.id UInt64
            __table1.value String
            __table2.value String
            __table2.id UInt64
    Type: FULL
    Strictness: ALL
    Algorithm: HashJoin
    Clauses: [(__table1.id) = (__table2.id)]
      Expression ((JOIN actions + Change column names to column identifiers))
      Header: __table1.id UInt64
              __table1.value String
      Actions: INPUT : 0 -> id UInt64 : 0
               INPUT : 1 -> value String : 1
               ALIAS id :: 0 -> __table1.id UInt64 : 2
               ALIAS value :: 1 -> __table1.value String : 0
      Positions: 2 0
        ReadFromMergeTree (default.test_table_1)
        Header: id UInt64
                value String
        ReadType: Default
        Parts: 1
        Granules: 1
      Expression ((JOIN actions + Change column names to column identifiers))
      Header: __table2.id UInt64
              __table2.value String
      Actions: INPUT : 0 -> id UInt64 : 0
               INPUT : 1 -> value String : 1
               ALIAS id :: 0 -> __table2.id UInt64 : 2
               ALIAS value :: 1 -> __table2.value String : 0
      Positions: 2 0
        ReadFromMergeTree (default.test_table_2)
        Header: id UInt64
                value String
        ReadType: Default
        Parts: 1
        Granules: 1
SELECT '--';
--
SELECT lhs.id, rhs.id, lhs.value, rhs.value FROM test_table_1 AS lhs FULL JOIN test_table_2 AS rhs ON lhs.id = rhs.id
WHERE rhs.id = 5;
5	5	5	5
SELECT '--';
--
EXPLAIN header = 1, actions = 1
SELECT lhs.id, rhs.id, lhs.value, rhs.value FROM test_table_1 AS lhs FULL JOIN test_table_2 AS rhs ON lhs.id = rhs.id
WHERE lhs.id = 5 AND rhs.id = 6;
Expression ((Project names + Projection))
Header: id UInt64
        rhs.id UInt64
        value String
        rhs.value String
Actions: INPUT : 0 -> __table1.id UInt64 : 0
         INPUT : 1 -> __table1.value String : 1
         INPUT : 2 -> __table2.value String : 2
         INPUT : 3 -> __table2.id UInt64 : 3
         ALIAS __table1.id :: 0 -> id UInt64 : 4
         ALIAS __table1.value :: 1 -> value String : 0
         ALIAS __table2.value :: 2 -> rhs.value String : 1
         ALIAS __table2.id :: 3 -> rhs.id UInt64 : 2
Positions: 4 2 0 1
  Filter ((WHERE + DROP unused columns after JOIN))
  Header: __table1.id UInt64
          __table1.value String
          __table2.value String
          __table2.id UInt64
  Filter column: and(equals(__table1.id, 5_UInt8), equals(__table2.id, 6_UInt8)) (removed)
  Actions: INPUT : 0 -> __table1.id UInt64 : 0
           INPUT :: 1 -> __table1.value String : 1
           INPUT :: 2 -> __table2.value String : 2
           INPUT : 3 -> __table2.id UInt64 : 3
           COLUMN Const(UInt8) -> 5_UInt8 UInt8 : 4
           COLUMN Const(UInt8) -> 6_UInt8 UInt8 : 5
           FUNCTION equals(__table1.id : 0, 5_UInt8 :: 4) -> equals(__table1.id, 5_UInt8) UInt8 : 6
           FUNCTION equals(__table2.id : 3, 6_UInt8 :: 5) -> equals(__table2.id, 6_UInt8) UInt8 : 4
           FUNCTION and(equals(__table1.id, 5_UInt8) :: 6, equals(__table2.id, 6_UInt8) :: 4) -> and(equals(__table1.id, 5_UInt8), equals(__table2.id, 6_UInt8)) UInt8 : 5
  Positions: 5 0 1 2 3
    Join (JOIN FillRightFirst)
    Header: __table1.id UInt64
            __table1.value String
            __table2.value String
            __table2.id UInt64
    Type: FULL
    Strictness: ALL
    Algorithm: HashJoin
    Clauses: [(__table1.id) = (__table2.id)]
      Expression ((JOIN actions + Change column names to column identifiers))
      Header: __table1.id UInt64
              __table1.value String
      Actions: INPUT : 0 -> id UInt64 : 0
               INPUT : 1 -> value String : 1
               ALIAS id :: 0 -> __table1.id UInt64 : 2
               ALIAS value :: 1 -> __table1.value String : 0
      Positions: 2 0
        ReadFromMergeTree (default.test_table_1)
        Header: id UInt64
                value String
        ReadType: Default
        Parts: 1
        Granules: 1
      Expression ((JOIN actions + Change column names to column identifiers))
      Header: __table2.id UInt64
              __table2.value String
      Actions: INPUT : 0 -> id UInt64 : 0
               INPUT : 1 -> value String : 1
               ALIAS id :: 0 -> __table2.id UInt64 : 2
               ALIAS value :: 1 -> __table2.value String : 0
      Positions: 2 0
        ReadFromMergeTree (default.test_table_2)
        Header: id UInt64
                value String
        ReadType: Default
        Parts: 1
        Granules: 1
SELECT '--';
--
SELECT lhs.id, rhs.id, lhs.value, rhs.value FROM test_table_1 AS lhs FULL JOIN test_table_2 AS rhs ON lhs.id = rhs.id
WHERE lhs.id = 5 AND rhs.id = 6;
