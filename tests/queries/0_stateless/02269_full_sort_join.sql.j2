DROP TABLE IF EXISTS t1;
DROP TABLE IF EXISTS t2;

CREATE TABLE t1 (key UInt32, s String) engine = MergeTree ORDER BY key;
CREATE TABLE t2 (key UInt32, s String) engine = MergeTree ORDER BY key;

{% set table_size = 15 %}

INSERT INTO t1
    SELECT
        sipHash64(number, 'x') % {{ table_size }} + 1 as key,
        'val' || toString(number) as s
    FROM numbers_mt({{ table_size }});

INSERT INTO t2
    SELECT
        sipHash64(number, 'y') % {{ table_size }} + 1 as key,
        'val' || toString(number) as s
    FROM numbers_mt({{ table_size - 3 }});

-- SET join_algorithm = 'full_sorting_merge';

{% for block_size in range (1, table_size + 1) %}

SET max_block_size = {{ block_size }};

SELECT 'simple cases, block size = {{ block_size }}';

SELECT 'ANY INNER';
SELECT t1.key, t2.key FROM t1
ANY INNER JOIN t2
ON t1.key == t2.key
ORDER BY t1.key, t2.key
;

SELECT 'ANY LEFT';
SELECT t1.key, t2.key, t1.s FROM t1
ANY LEFT JOIN t2
ON t1.key == t2.key
ORDER BY t1.key, t2.key, t1.s
;

SELECT 'ANY RIGHT';
SELECT t1.key, t2.key, t2.s FROM t1
ANY RIGHT JOIN t2
ON t1.key == t2.key
ORDER BY t1.key, t2.key, t2.s
;

{% endfor %}

SET join_use_nulls = 1;

SELECT 'simple cases: join_use_nulls';

SELECT 'ANY INNER';
SELECT t1.key, t2.key FROM t1
ANY INNER JOIN t2
ON t1.key == t2.key
ORDER BY t1.key, t2.key
;

SELECT 'ANY LEFT';
SELECT t1.key, t2.key, t1.s FROM t1
ANY LEFT JOIN t2
ON t1.key == t2.key
ORDER BY t1.key, t2.key, t1.s
;

SELECT 'ANY RIGHT';
SELECT t1.key, t2.key, t2.s FROM t1
ANY RIGHT JOIN t2
ON t1.key == t2.key
ORDER BY t1.key, t2.key, t2.s
;
