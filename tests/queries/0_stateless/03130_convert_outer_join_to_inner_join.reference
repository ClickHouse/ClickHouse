Expression ((Project names + (Projection + )))
Header: id UInt64
        value String
        rhs.id UInt64
        rhs.value String
Actions: INPUT : 0 -> __table1.id UInt64 : 0
         INPUT : 1 -> __table1.value String : 1
         INPUT : 2 -> __table2.value String : 2
         INPUT : 3 -> __table2.id UInt64 : 3
         ALIAS __table1.id :: 0 -> id UInt64 : 4
         ALIAS __table1.value :: 1 -> value String : 0
         ALIAS __table2.value :: 2 -> rhs.value String : 1
         ALIAS __table2.id :: 3 -> rhs.id UInt64 : 2
Positions: 4 0 2 1
  Join (JOIN FillRightFirst)
  Header: __table1.id UInt64
          __table1.value String
          __table2.value String
          __table2.id UInt64
  Type: INNER
  Strictness: ALL
  Algorithm: HashJoin
  Clauses: [(__table1.id) = (__table2.id)]
    Expression
    Header: __table1.id UInt64
            __table1.value String
    Actions: INPUT : 1 -> value String : 0
             INPUT :: 0 -> __table1.id UInt64 : 1
             INPUT :: 2 -> id UInt64 : 2
             ALIAS value :: 0 -> __table1.value String : 3
    Positions: 1 3
      ReadFromMergeTree (default.test_table_1)
      Header: __table1.id UInt64
              id UInt64
              value String
      ReadType: Default
      Parts: 1
      Granules: 1
      Prewhere info
      Need filter: 1
        Prewhere filter
        Prewhere filter column: notEquals(__table1.id, 0_UInt8) (removed)
        Actions: INPUT : 0 -> id UInt64 : 0
                 COLUMN Const(UInt8) -> 0_UInt8 UInt8 : 1
                 ALIAS id : 0 -> __table1.id UInt64 : 2
                 FUNCTION notEquals(__table1.id : 2, 0_UInt8 :: 1) -> notEquals(__table1.id, 0_UInt8) UInt8 : 3
        Positions: 2 0 3
    Expression
    Header: __table2.id UInt64
            __table2.value String
    Actions: INPUT : 1 -> value String : 0
             INPUT :: 0 -> __table2.id UInt64 : 1
             INPUT :: 2 -> id UInt64 : 2
             ALIAS value :: 0 -> __table2.value String : 3
    Positions: 1 3
      ReadFromMergeTree (default.test_table_2)
      Header: __table2.id UInt64
              id UInt64
              value String
      ReadType: Default
      Parts: 1
      Granules: 1
      Prewhere info
      Need filter: 1
        Prewhere filter
        Prewhere filter column: notEquals(__table2.id, 0_UInt8) (removed)
        Actions: INPUT : 0 -> id UInt64 : 0
                 COLUMN Const(UInt8) -> 0_UInt8 UInt8 : 1
                 ALIAS id : 0 -> __table2.id UInt64 : 2
                 FUNCTION notEquals(__table2.id : 2, 0_UInt8 :: 1) -> notEquals(__table2.id, 0_UInt8) UInt8 : 3
        Positions: 2 0 3
--
2	Value_2	2	Value_2
--
Expression ((Project names + (Projection + )))
Header: id UInt64
        value String
        rhs.id UInt64
        rhs.value String
Actions: INPUT : 0 -> __table1.id UInt64 : 0
         INPUT : 1 -> __table1.value String : 1
         INPUT : 2 -> __table2.value String : 2
         INPUT : 3 -> __table2.id UInt64 : 3
         ALIAS __table1.id :: 0 -> id UInt64 : 4
         ALIAS __table1.value :: 1 -> value String : 0
         ALIAS __table2.value :: 2 -> rhs.value String : 1
         ALIAS __table2.id :: 3 -> rhs.id UInt64 : 2
Positions: 4 0 2 1
  Join (JOIN FillRightFirst)
  Header: __table1.id UInt64
          __table1.value String
          __table2.value String
          __table2.id UInt64
  Type: INNER
  Strictness: ALL
  Algorithm: HashJoin
  Clauses: [(__table1.id) = (__table2.id)]
    Expression
    Header: __table1.id UInt64
            __table1.value String
    Actions: INPUT : 1 -> value String : 0
             INPUT :: 0 -> __table1.id UInt64 : 1
             INPUT :: 2 -> id UInt64 : 2
             ALIAS value :: 0 -> __table1.value String : 3
    Positions: 1 3
      ReadFromMergeTree (default.test_table_1)
      Header: __table1.id UInt64
              id UInt64
              value String
      ReadType: Default
      Parts: 1
      Granules: 1
      Prewhere info
      Need filter: 1
        Prewhere filter
        Prewhere filter column: notEquals(__table1.id, 0_UInt8) (removed)
        Actions: INPUT : 0 -> id UInt64 : 0
                 COLUMN Const(UInt8) -> 0_UInt8 UInt8 : 1
                 ALIAS id : 0 -> __table1.id UInt64 : 2
                 FUNCTION notEquals(__table1.id : 2, 0_UInt8 :: 1) -> notEquals(__table1.id, 0_UInt8) UInt8 : 3
        Positions: 2 0 3
    Expression
    Header: __table2.id UInt64
            __table2.value String
    Actions: INPUT : 1 -> value String : 0
             INPUT :: 0 -> __table2.id UInt64 : 1
             INPUT :: 2 -> id UInt64 : 2
             ALIAS value :: 0 -> __table2.value String : 3
    Positions: 1 3
      ReadFromMergeTree (default.test_table_2)
      Header: __table2.id UInt64
              id UInt64
              value String
      ReadType: Default
      Parts: 1
      Granules: 1
      Prewhere info
      Need filter: 1
        Prewhere filter
        Prewhere filter column: notEquals(__table2.id, 0_UInt8) (removed)
        Actions: INPUT : 0 -> id UInt64 : 0
                 COLUMN Const(UInt8) -> 0_UInt8 UInt8 : 1
                 ALIAS id : 0 -> __table2.id UInt64 : 2
                 FUNCTION notEquals(__table2.id : 2, 0_UInt8 :: 1) -> notEquals(__table2.id, 0_UInt8) UInt8 : 3
        Positions: 2 0 3
--
2	Value_2	2	Value_2
--
Expression ((Project names + (Projection + )))
Header: id UInt64
        value String
        rhs.id UInt64
        rhs.value String
Actions: INPUT : 0 -> __table1.id UInt64 : 0
         INPUT : 1 -> __table1.value String : 1
         INPUT : 2 -> __table2.value String : 2
         INPUT : 3 -> __table2.id UInt64 : 3
         ALIAS __table1.id :: 0 -> id UInt64 : 4
         ALIAS __table1.value :: 1 -> value String : 0
         ALIAS __table2.value :: 2 -> rhs.value String : 1
         ALIAS __table2.id :: 3 -> rhs.id UInt64 : 2
Positions: 4 0 2 1
  Join (JOIN FillRightFirst)
  Header: __table1.id UInt64
          __table1.value String
          __table2.value String
          __table2.id UInt64
  Type: INNER
  Strictness: ALL
  Algorithm: HashJoin
  Clauses: [(__table1.id) = (__table2.id)]
    Expression
    Header: __table1.id UInt64
            __table1.value String
    Actions: INPUT : 1 -> value String : 0
             INPUT :: 0 -> __table1.id UInt64 : 1
             INPUT :: 2 -> id UInt64 : 2
             ALIAS value :: 0 -> __table1.value String : 3
    Positions: 1 3
      ReadFromMergeTree (default.test_table_1)
      Header: __table1.id UInt64
              id UInt64
              value String
      ReadType: Default
      Parts: 1
      Granules: 1
      Prewhere info
      Need filter: 1
        Prewhere filter
        Prewhere filter column: and(notEquals(__table1.id, 0_UInt8), notEquals(__table1.id, 0_UInt8)) (removed)
        Actions: INPUT : 0 -> id UInt64 : 0
                 COLUMN Const(UInt8) -> 0_UInt8 UInt8 : 1
                 ALIAS id : 0 -> __table1.id UInt64 : 2
                 FUNCTION notEquals(__table1.id : 2, 0_UInt8 : 1) -> notEquals(__table1.id, 0_UInt8) UInt8 : 3
                 FUNCTION notEquals(__table1.id : 2, 0_UInt8 :: 1) -> notEquals(__table1.id, 0_UInt8) UInt8 : 4
                 FUNCTION and(notEquals(__table1.id, 0_UInt8) :: 4, notEquals(__table1.id, 0_UInt8) :: 3) -> and(notEquals(__table1.id, 0_UInt8), notEquals(__table1.id, 0_UInt8)) UInt8 : 1
        Positions: 2 0 1
    Expression
    Header: __table2.id UInt64
            __table2.value String
    Actions: INPUT : 1 -> value String : 0
             INPUT :: 0 -> __table2.id UInt64 : 1
             INPUT :: 2 -> id UInt64 : 2
             ALIAS value :: 0 -> __table2.value String : 3
    Positions: 1 3
      ReadFromMergeTree (default.test_table_2)
      Header: __table2.id UInt64
              id UInt64
              value String
      ReadType: Default
      Parts: 1
      Granules: 1
      Prewhere info
      Need filter: 1
        Prewhere filter
        Prewhere filter column: and(notEquals(__table2.id, 0_UInt8), notEquals(__table2.id, 0_UInt8)) (removed)
        Actions: INPUT : 0 -> id UInt64 : 0
                 COLUMN Const(UInt8) -> 0_UInt8 UInt8 : 1
                 ALIAS id : 0 -> __table2.id UInt64 : 2
                 FUNCTION notEquals(__table2.id : 2, 0_UInt8 : 1) -> notEquals(__table2.id, 0_UInt8) UInt8 : 3
                 FUNCTION notEquals(__table2.id : 2, 0_UInt8 :: 1) -> notEquals(__table2.id, 0_UInt8) UInt8 : 4
                 FUNCTION and(notEquals(__table2.id, 0_UInt8) :: 4, notEquals(__table2.id, 0_UInt8) :: 3) -> and(notEquals(__table2.id, 0_UInt8), notEquals(__table2.id, 0_UInt8)) UInt8 : 1
        Positions: 2 0 1
--
2	Value_2	2	Value_2
