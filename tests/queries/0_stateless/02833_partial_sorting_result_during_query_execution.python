#!/usr/bin/env python3
# -*- coding: utf-8 -*-


import os
import sys

CURDIR = os.path.dirname(os.path.realpath(__file__))
sys.path.insert(0, os.path.join(CURDIR, "helpers"))

from tcp_client import TCPClient


def main():
    with TCPClient() as client:
        client.sendQuery(
            "SELECT number FROM numbers_mt(1e7+1) ORDER BY -number LIMIT 15 SETTINGS max_threads = 1, partial_result_update_duration_ms = 1, max_rows_in_partial_result = 10"
        )

        # external tables
        client.sendEmptyBlock()
        client.readHeader()

        # Partial result
        _, partial_result = client.readDataWithoutProgress()[0]
        assert len(partial_result) > 0, "Expected at least one block with a non-empty partial result before getting the full result"

        while True:
            assert all(
                a >= b for a, b in zip(partial_result, partial_result[1:])
            ), "Partial result always should be sorted for this test"

            _, new_partial_result = client.readDataWithoutProgress(
                need_print_info=False
            )[0]
            if len(new_partial_result) == 0:
                break

            data_size = len(partial_result)

            assert all(
                partial_result[i] <= new_partial_result[i] for i in range(data_size)
            ), f"New partial result values should always be greater then old one because a new block contains more information about the full data. New result {new_partial_result}. Previous result {partial_result}"


            partial_result = new_partial_result

        # Full result
        _, full_result = client.readDataWithoutProgress()[0]

        data_size = len(partial_result)
        assert all(
                partial_result[i] <= full_result[i] for i in range(data_size)
            ), f"Full result values should always be greater then partial result values. Full result {full_result}. Partial result {partial_result}"

        for result in full_result:
            print(result)


if __name__ == "__main__":
    main()
