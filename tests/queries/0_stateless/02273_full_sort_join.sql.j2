DROP TABLE IF EXISTS t1;
DROP TABLE IF EXISTS t2;

CREATE TABLE t1 (key UInt32, s String) engine = TinyLog;
CREATE TABLE t2 (key UInt32, s String) engine = TinyLog;

{% set table_size = 15 %}

INSERT INTO t1
    SELECT
        sipHash64(number, 'x') % {{ table_size }} + 1 as key,
        'val' || toString(number) as s
    FROM numbers_mt({{ table_size }});

INSERT INTO t2
    SELECT
        sipHash64(number, 'y') % {{ table_size }} + 1 as key,
        'val' || toString(number) as s
    FROM numbers_mt({{ table_size - 3 }});

-- SET join_algorithm = 'full_sorting_merge';

{% for kind in ['ALL', 'ANY'] -%}
{% for block_size in range(1, table_size + 1) -%}

SET max_block_size = {{ block_size }};

SELECT '{{ kind }} INNER | bs = {{ block_size }}';
SELECT t1.key, t2.key, empty(t1.s), empty(t2.s) FROM t1
{{ kind }} INNER JOIN t2
ON t1.key == t2.key
ORDER BY t1.key, t2.key
;

SELECT '{{ kind }} LEFT | bs = {{ block_size }}';
SELECT t1.key, t2.key, t1.s, empty(t2.s) FROM t1
{{ kind }} LEFT JOIN t2
ON t1.key == t2.key
ORDER BY t1.key, t2.key, t1.s
;

SELECT '{{ kind }} RIGHT | bs = {{ block_size }}';
SELECT t1.key, t2.key, empty(t1.s), t2.s FROM t1
{{ kind }} RIGHT JOIN t2
ON t1.key == t2.key
ORDER BY t1.key, t2.key, t2.s
;

{% endfor -%}

SET join_use_nulls = 1;

SELECT '{{ kind }} INNER | join_use_nulls = 1';
SELECT t1.key, t2.key, isNull(t1.s), isNull(t2.s) FROM t1
{{ kind }} INNER JOIN t2
ON t1.key == t2.key
ORDER BY t1.key, t2.key
;

SELECT '{{ kind }} LEFT | join_use_nulls = 1';
SELECT t1.key, t2.key, t1.s, isNull(t2.s) FROM t1
{{ kind }} LEFT JOIN t2
ON t1.key == t2.key
ORDER BY t1.key, t2.key, t1.s
;

SELECT '{{ kind }} RIGHT | join_use_nulls = 1';
SELECT t1.key, t2.key, isNull(t1.s), t2.s FROM t1
{{ kind }} RIGHT JOIN t2
ON t1.key == t2.key
ORDER BY t1.key, t2.key, t2.s
;

{% endfor -%}
