-- Disabled query_plan_remove_redundant_sorting
-- ORDER BY clauses in subqueries are untouched
Expression (Projection)
  Sorting (Sorting for ORDER BY)
    Expression ((Before ORDER BY + Projection))
      Sorting (Sorting for ORDER BY)
        Expression ((Before ORDER BY + Projection))
          Sorting (Sorting for ORDER BY)
            Expression (Before ORDER BY)
              ReadFromSystemNumbers
-- Enabled query_plan_remove_redundant_sorting
-- ORDER BY removes ORDER BY clauses in subqueries
-- query
SELECT *
FROM
(
    SELECT *
    FROM
    (
        SELECT *
        FROM numbers(3)
        ORDER BY number ASC
    )
    ORDER BY number DESC
)
ORDER BY number ASC
-- explain
Expression (Projection)
  Sorting (Sorting for ORDER BY)
    Expression ((Before ORDER BY + (Projection + (Before ORDER BY + (Projection + Before ORDER BY)))))
      ReadFromSystemNumbers
-- execute
0
1
2
-- ORDER BY cannot remove ORDER BY in subquery WITH FILL
-- query
SELECT *
FROM
(
    SELECT *
    FROM
    (
        SELECT *
        FROM numbers(3)
        ORDER BY number DESC
    )
    ORDER BY number ASC WITH FILL STEP 1
)
ORDER BY number ASC
-- explain
Expression (Projection)
  Sorting (Sorting for ORDER BY)
    Expression ((Before ORDER BY + Projection))
      Filling
        Sorting (Sorting for ORDER BY)
          Expression ((Before ORDER BY + (Projection + Before ORDER BY)))
            ReadFromSystemNumbers
-- execute
0
1
2
-- ORDER BY cannot remove ORDER BY in subquery with LIMIT BY
-- query
SELECT *
FROM
(
    SELECT *
    FROM
    (
        SELECT *
        FROM numbers(3)
        ORDER BY number DESC
    )
    ORDER BY number ASC
    LIMIT 1 BY number
)
ORDER BY number ASC
-- explain
Expression (Projection)
  Sorting (Sorting for ORDER BY)
    Expression ((Before ORDER BY + Projection))
      LimitBy
        Expression (Before LIMIT BY)
          Sorting (Sorting for ORDER BY)
            Expression ((Before ORDER BY + (Projection + Before ORDER BY)))
              ReadFromSystemNumbers
-- execute
0
1
2
-- CROSS JOIN with subqueries, nor ORDER BY nor GROUP BY in main query -> only ORDER BY clauses in most inner subqueries will be removed
-- query
SELECT *
FROM
(
    SELECT number
    FROM
    (
        SELECT number
        FROM numbers(3)
        ORDER BY number DESC
    )
    ORDER BY number ASC
) AS t1,
(
    SELECT number
    FROM
    (
        SELECT number
        FROM numbers(3)
        ORDER BY number ASC
    )
    ORDER BY number DESC
) AS t2
ORDER BY t1.number, t2.number
-- explain
Expression (Projection)
  Sorting (Sorting for ORDER BY)
    Expression (Before ORDER BY)
      Join (JOIN FillRightFirst)
        Expression ((Before JOIN + (Projection + (Before ORDER BY + (Projection + Before ORDER BY)))))
          ReadFromSystemNumbers
        Expression ((Joined actions + (Rename joined columns + (Projection + (Before ORDER BY + (Projection + Before ORDER BY))))))
          ReadFromSystemNumbers
-- execute
0	0
0	1
0	2
1	0
1	1
1	2
2	0
2	1
2	2
-- CROSS JOIN with subqueries, ORDER BY in main query -> all ORDER BY clauses will be removed in subqueries
-- query
SELECT *
FROM
(
    SELECT number
    FROM
    (
        SELECT number
        FROM numbers(3)
        ORDER BY number DESC
    )
    ORDER BY number ASC
) AS t1,
(
    SELECT number
    FROM
    (
        SELECT number
        FROM numbers(3)
        ORDER BY number ASC
    )
    ORDER BY number DESC
) AS t2
ORDER BY t1.number, t2.number
-- explain
Expression (Projection)
  Sorting (Sorting for ORDER BY)
    Expression (Before ORDER BY)
      Join (JOIN FillRightFirst)
        Expression ((Before JOIN + (Projection + (Before ORDER BY + (Projection + Before ORDER BY)))))
          ReadFromSystemNumbers
        Expression ((Joined actions + (Rename joined columns + (Projection + (Before ORDER BY + (Projection + Before ORDER BY))))))
          ReadFromSystemNumbers
-- execute
0	0
0	1
0	2
1	0
1	1
1	2
2	0
2	1
2	2
-- GROUP BY with aggregation function which does NOT depend on order -> eliminate ORDER BY(s) in _all_ subqueries
-- query
SELECT sum(number)
FROM
(
    SELECT *
    FROM
    (
        SELECT *
        FROM numbers(3)
        ORDER BY number ASC
    )
    ORDER BY number DESC
)
GROUP BY number
ORDER BY number
-- explain
Expression (Projection)
  Sorting (Sorting for ORDER BY)
    Expression (Before ORDER BY)
      Aggregating
        Expression ((Before GROUP BY + (Projection + (Before ORDER BY + (Projection + Before ORDER BY)))))
          ReadFromSystemNumbers
-- execute
0
1
2
-- GROUP BY with aggregation function which depends on order -> keep ORDER BY in first subquery, and eliminate in second subquery
-- query
SELECT any(number)
FROM
(
    SELECT *
    FROM
    (
        SELECT *
        FROM numbers(3)
        ORDER BY number ASC
    )
    ORDER BY number DESC
)
GROUP BY number
ORDER BY number
-- explain
Expression (Projection)
  Sorting (Sorting for ORDER BY)
    Expression (Before ORDER BY)
      Aggregating
        Expression ((Before GROUP BY + (Projection + (Before ORDER BY + (Projection + Before ORDER BY)))))
          ReadFromSystemNumbers
-- execute
0
1
2
-- query with aggregation function but w/o GROUP BY -> remove sorting
-- query
SELECT sum(number)
FROM
(
    SELECT *
    FROM numbers(10)
    ORDER BY number DESC
)
-- explain
Expression ((Projection + Before ORDER BY))
  Aggregating
    Expression ((Before GROUP BY + (Projection + Before ORDER BY)))
      ReadFromSystemNumbers
-- execute
45
-- check that optimization is applied recursively to subqueries as well
-- GROUP BY with aggregation function which does NOT depend on order -> eliminate ORDER BY in most inner subquery here
-- query
SELECT a
FROM
(
    SELECT sum(number) AS a
    FROM
    (
        SELECT *
        FROM numbers(3)
        ORDER BY number ASC
    )
    GROUP BY number
)
ORDER BY a ASC
-- explain
Expression (Projection)
  Sorting (Sorting for ORDER BY)
    Expression ((Before ORDER BY + (Projection + Before ORDER BY)))
      Aggregating
        Expression ((Before GROUP BY + (Projection + Before ORDER BY)))
          ReadFromSystemNumbers
-- execute
0
1
2
-- GROUP BY with aggregation function which depends on order -> ORDER BY in subquery is kept due to the aggregation function
-- query
SELECT a
FROM
(
    SELECT any(number) AS a
    FROM
    (
        SELECT *
        FROM numbers(3)
        ORDER BY number ASC
    )
    GROUP BY number
)
ORDER BY a ASC
-- explain
Expression (Projection)
  Sorting (Sorting for ORDER BY)
    Expression ((Before ORDER BY + (Projection + Before ORDER BY)))
      Aggregating
        Expression ((Before GROUP BY + (Projection + Before ORDER BY)))
          ReadFromSystemNumbers
-- execute
0
1
2
-- Check that optimization works for subqueries as well, - main query have neither ORDER BY nor GROUP BY
-- query
SELECT a
FROM
(
    SELECT any(number) AS a
    FROM
    (
        SELECT *
        FROM
        (
            SELECT *
            FROM numbers(3)
            ORDER BY number DESC
        )
        ORDER BY number ASC
    )
    GROUP BY number
)
WHERE a > 0
ORDER BY a
-- explain
Expression (Projection)
  Sorting (Sorting for ORDER BY)
    Expression ((Before ORDER BY + ))
      Aggregating
        Filter
          Filter (( + (Before GROUP BY + (Projection + (Before ORDER BY + (Projection + Before ORDER BY))))))
            ReadFromSystemNumbers
-- execute
1
2
-- GROUP BY in most inner query makes execution parallelized, and removing inner sorting steps will keep it that way. But need to correctly update data streams sorting properties after removing sorting steps
-- query
SELECT *
FROM
(
    SELECT *
    FROM
    (
        SELECT *
        FROM numbers(3)
        GROUP BY number
        ORDER BY number ASC
    )
    ORDER BY number ASC
)
ORDER BY number ASC
-- explain
Expression (Projection)
  Sorting (Sorting for ORDER BY)
    Expression ((Before ORDER BY + (Projection + (Before ORDER BY + (Projection + Before ORDER BY)))))
      Aggregating
        Expression (Before GROUP BY)
          ReadFromSystemNumbers
-- execute
0
1
2
-- sum() with Floats depends on order, -> sorting is not removed here
-- query
SELECT
    toTypeName(sum(v)),
    sum(v)
FROM
(
    SELECT v
    FROM
    (
        SELECT CAST('9007199254740992', 'Float64') AS v
        UNION ALL
        SELECT CAST('1', 'Float64') AS v
        UNION ALL
        SELECT CAST('1', 'Float64') AS v
    )
    ORDER BY v ASC
)
-- explain
Expression ((Projection + Before ORDER BY))
  Aggregating
    Expression ((Before GROUP BY + Projection))
      Sorting (Sorting for ORDER BY)
        Union
          Expression ((Before ORDER BY + (Conversion before UNION + (Projection + Before ORDER BY))))
            ReadFromStorage (SystemOne)
          Expression (( + (Conversion before UNION + (Projection + Before ORDER BY))))
            ReadFromStorage (SystemOne)
          Expression (( + (Conversion before UNION + (Projection + Before ORDER BY))))
            ReadFromStorage (SystemOne)
-- execute
Float64	9007199254740994
-- sum() with Nullable(Floats) depends on order, -> sorting is not removed here
-- query
SELECT
    toTypeName(sum(v)),
    sum(v)
FROM
(
    SELECT v
    FROM
    (
        SELECT '9007199254740992'::Nullable(Float64) AS v
        UNION ALL
        SELECT '1'::Nullable(Float64) AS v
        UNION ALL
        SELECT '1'::Nullable(Float64) AS v
    )
    ORDER BY v ASC
)
-- explain
Expression ((Projection + Before ORDER BY))
  Aggregating
    Expression ((Before GROUP BY + Projection))
      Sorting (Sorting for ORDER BY)
        Union
          Expression ((Before ORDER BY + (Conversion before UNION + (Projection + Before ORDER BY))))
            ReadFromStorage (SystemOne)
          Expression (( + (Conversion before UNION + (Projection + Before ORDER BY))))
            ReadFromStorage (SystemOne)
          Expression (( + (Conversion before UNION + (Projection + Before ORDER BY))))
            ReadFromStorage (SystemOne)
-- execute
Nullable(Float64)	9007199254740994
-- sumIf() with Floats depends on order, -> sorting is not removed here
-- query
SELECT
    toTypeName(sumIf(v, v > 0)),
    sumIf(v, v > 0)
FROM
(
    SELECT v
    FROM
    (
        SELECT CAST('9007199254740992', 'Float64') AS v
        UNION ALL
        SELECT CAST('1', 'Float64') AS v
        UNION ALL
        SELECT CAST('1', 'Float64') AS v
    )
    ORDER BY v ASC
)
-- explain
Expression ((Projection + Before ORDER BY))
  Aggregating
    Expression ((Before GROUP BY + Projection))
      Sorting (Sorting for ORDER BY)
        Union
          Expression ((Before ORDER BY + (Conversion before UNION + (Projection + Before ORDER BY))))
            ReadFromStorage (SystemOne)
          Expression (( + (Conversion before UNION + (Projection + Before ORDER BY))))
            ReadFromStorage (SystemOne)
          Expression (( + (Conversion before UNION + (Projection + Before ORDER BY))))
            ReadFromStorage (SystemOne)
-- execute
Float64	9007199254740994
-- disable common optimization to avoid functions to be lifted up (liftUpFunctions optimization), needed for testing with stateful function
-- neighbor() as stateful function prevents removing inner ORDER BY since its result depends on order
-- query
SELECT
    number,
    neighbor(number, 2)
FROM
(
    SELECT *
    FROM numbers(10)
    ORDER BY number DESC
)
ORDER BY number ASC
-- explain
Expression (Projection)
  Sorting (Sorting for ORDER BY)
    Expression (Before ORDER BY)
      Expression (Projection)
        Sorting (Sorting for ORDER BY)
          Expression (Before ORDER BY)
            ReadFromSystemNumbers
-- execute
0	0
1	0
2	0
3	1
4	2
5	3
6	4
7	5
8	6
9	7
-- non-stateful function does _not_ prevent removing inner ORDER BY
-- query
SELECT
    number,
    plus(number, 2)
FROM
(
    SELECT *
    FROM numbers(10)
    ORDER BY number DESC
)
-- explain
Expression (Projection)
  Expression (Before ORDER BY)
    Expression (Projection)
      Sorting (Sorting for ORDER BY)
        Expression (Before ORDER BY)
          ReadFromSystemNumbers
-- execute
9	11
8	10
7	9
6	8
5	7
4	6
3	5
2	4
1	3
0	2
