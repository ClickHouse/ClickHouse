QUERY id: 0
  PROJECTION COLUMNS
    arrayExists(lambda(tuple(x), equals(x, 5)), materialize(range(10))) UInt8
  PROJECTION
    LIST id: 1, nodes: 1
      FUNCTION id: 2, function_name: arrayExists, function_type: ordinary, result_type: UInt8
        ARGUMENTS
          LIST id: 3, nodes: 2
            LAMBDA id: 4
              ARGUMENTS 
                LIST id: 5, nodes: 1
                  COLUMN id: 6, column_name: x, result_type: UInt8, source_id: 4
              EXPRESSION 
                FUNCTION id: 7, function_name: equals, function_type: ordinary, result_type: UInt8
                  ARGUMENTS
                    LIST id: 8, nodes: 2
                      COLUMN id: 6, column_name: x, result_type: UInt8, source_id: 4
                      CONSTANT id: 9, constant_value: UInt64_5, constant_value_type: UInt8
            FUNCTION id: 10, function_name: materialize, function_type: ordinary, result_type: Array(UInt8)
              ARGUMENTS
                LIST id: 11, nodes: 1
                  CONSTANT id: 12, constant_value: Array_[UInt64_0, UInt64_1, UInt64_2, UInt64_3, UInt64_4, UInt64_5, UInt64_6, UInt64_7, UInt64_8, UInt64_9], constant_value_type: Array(UInt8)
                    EXPRESSION
                      FUNCTION id: 13, function_name: range, function_type: ordinary, result_type: Array(UInt8)
                        ARGUMENTS
                          LIST id: 14, nodes: 1
                            CONSTANT id: 15, constant_value: UInt64_10, constant_value_type: UInt8
  JOIN TREE
    TABLE_FUNCTION id: 16, table_function_name: numbers
      ARGUMENTS
        LIST id: 17, nodes: 1
          CONSTANT id: 18, constant_value: UInt64_10, constant_value_type: UInt8
QUERY id: 0
  PROJECTION COLUMNS
    arrayExists(lambda(tuple(x), equals(5, x)), materialize(range(10))) UInt8
  PROJECTION
    LIST id: 1, nodes: 1
      FUNCTION id: 2, function_name: arrayExists, function_type: ordinary, result_type: UInt8
        ARGUMENTS
          LIST id: 3, nodes: 2
            LAMBDA id: 4
              ARGUMENTS 
                LIST id: 5, nodes: 1
                  COLUMN id: 6, column_name: x, result_type: UInt8, source_id: 4
              EXPRESSION 
                FUNCTION id: 7, function_name: equals, function_type: ordinary, result_type: UInt8
                  ARGUMENTS
                    LIST id: 8, nodes: 2
                      CONSTANT id: 9, constant_value: UInt64_5, constant_value_type: UInt8
                      COLUMN id: 6, column_name: x, result_type: UInt8, source_id: 4
            FUNCTION id: 10, function_name: materialize, function_type: ordinary, result_type: Array(UInt8)
              ARGUMENTS
                LIST id: 11, nodes: 1
                  CONSTANT id: 12, constant_value: Array_[UInt64_0, UInt64_1, UInt64_2, UInt64_3, UInt64_4, UInt64_5, UInt64_6, UInt64_7, UInt64_8, UInt64_9], constant_value_type: Array(UInt8)
                    EXPRESSION
                      FUNCTION id: 13, function_name: range, function_type: ordinary, result_type: Array(UInt8)
                        ARGUMENTS
                          LIST id: 14, nodes: 1
                            CONSTANT id: 15, constant_value: UInt64_10, constant_value_type: UInt8
  JOIN TREE
    TABLE_FUNCTION id: 16, table_function_name: numbers
      ARGUMENTS
        LIST id: 17, nodes: 1
          CONSTANT id: 18, constant_value: UInt64_10, constant_value_type: UInt8
QUERY id: 0
  PROJECTION COLUMNS
    arrayExists(lambda(tuple(x), equals(x, 5)), materialize(range(10))) UInt8
  PROJECTION
    LIST id: 1, nodes: 1
      FUNCTION id: 2, function_name: has, function_type: ordinary, result_type: UInt8
        ARGUMENTS
          LIST id: 3, nodes: 2
            FUNCTION id: 4, function_name: materialize, function_type: ordinary, result_type: Array(UInt8)
              ARGUMENTS
                LIST id: 5, nodes: 1
                  CONSTANT id: 6, constant_value: Array_[UInt64_0, UInt64_1, UInt64_2, UInt64_3, UInt64_4, UInt64_5, UInt64_6, UInt64_7, UInt64_8, UInt64_9], constant_value_type: Array(UInt8)
                    EXPRESSION
                      FUNCTION id: 7, function_name: range, function_type: ordinary, result_type: Array(UInt8)
                        ARGUMENTS
                          LIST id: 8, nodes: 1
                            CONSTANT id: 9, constant_value: UInt64_10, constant_value_type: UInt8
            CONSTANT id: 10, constant_value: UInt64_5, constant_value_type: UInt8
  JOIN TREE
    TABLE_FUNCTION id: 11, table_function_name: numbers
      ARGUMENTS
        LIST id: 12, nodes: 1
          CONSTANT id: 13, constant_value: UInt64_10, constant_value_type: UInt8
QUERY id: 0
  PROJECTION COLUMNS
    arrayExists(lambda(tuple(x), equals(5, x)), materialize(range(10))) UInt8
  PROJECTION
    LIST id: 1, nodes: 1
      FUNCTION id: 2, function_name: has, function_type: ordinary, result_type: UInt8
        ARGUMENTS
          LIST id: 3, nodes: 2
            FUNCTION id: 4, function_name: materialize, function_type: ordinary, result_type: Array(UInt8)
              ARGUMENTS
                LIST id: 5, nodes: 1
                  CONSTANT id: 6, constant_value: Array_[UInt64_0, UInt64_1, UInt64_2, UInt64_3, UInt64_4, UInt64_5, UInt64_6, UInt64_7, UInt64_8, UInt64_9], constant_value_type: Array(UInt8)
                    EXPRESSION
                      FUNCTION id: 7, function_name: range, function_type: ordinary, result_type: Array(UInt8)
                        ARGUMENTS
                          LIST id: 8, nodes: 1
                            CONSTANT id: 9, constant_value: UInt64_10, constant_value_type: UInt8
            CONSTANT id: 10, constant_value: UInt64_5, constant_value_type: UInt8
  JOIN TREE
    TABLE_FUNCTION id: 11, table_function_name: numbers
      ARGUMENTS
        LIST id: 12, nodes: 1
          CONSTANT id: 13, constant_value: UInt64_10, constant_value_type: UInt8
SELECT arrayExists(x -> (x = 5), materialize(range(10)))
FROM numbers(10)
SELECT arrayExists(x -> (5 = x), materialize(range(10)))
FROM numbers(10)
SELECT has(materialize(range(10)), 5)
FROM numbers(10)
SELECT has(materialize(range(10)), 5)
FROM numbers(10)
