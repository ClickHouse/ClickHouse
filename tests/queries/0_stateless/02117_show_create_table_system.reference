CREATE TABLE system.aggregate_function_combinators
(
    `name` String,
    `is_internal` UInt8
)
ENGINE = SystemAggregateFunctionCombinators
COMMENT 'Contains a list of all available aggregate function combinators, which could be applied to aggregate functions and change the way they work.'
CREATE TABLE system.asynchronous_inserts
(
    `query` String,
    `database` String,
    `table` String,
    `format` String,
    `first_update` DateTime64(6),
    `total_bytes` UInt64,
    `entries.query_id` Array(String),
    `entries.bytes` Array(UInt64)
)
ENGINE = SystemAsynchronousInserts
COMMENT 'Contains information about pending asynchronous inserts in queue in server\'s memory.'
CREATE TABLE system.asynchronous_metrics
(
    `metric` String,
    `value` Float64,
    `description` String
)
ENGINE = SystemAsynchronousMetrics
COMMENT 'Contains metrics that are calculated periodically in the background. For example, the amount of RAM in use.'
CREATE TABLE system.build_options
(
    `name` String,
    `value` String
)
ENGINE = SystemBuildOptions
COMMENT 'Contains a list of all build flags, compiler options and commit hash for used build.'
CREATE TABLE system.clusters
(
    `cluster` String,
    `shard_num` UInt32,
    `shard_weight` UInt32,
    `internal_replication` UInt8,
    `replica_num` UInt32,
    `host_name` String,
    `host_address` String,
    `port` UInt16,
    `is_local` UInt8,
    `user` String,
    `default_database` String,
    `errors_count` UInt32,
    `slowdowns_count` UInt32,
    `estimated_recovery_time` UInt32,
    `database_shard_name` String,
    `database_replica_name` String,
    `is_active` Nullable(UInt8),
    `name` String ALIAS cluster
)
ENGINE = SystemClusters
COMMENT 'Contains information about clusters defined in the configuration file or generated by a Replicated database.'
CREATE TABLE system.collations
(
    `name` String,
    `language` Nullable(String)
)
ENGINE = SystemTableCollations
COMMENT 'Contains a list of all available collations for alphabetical comparison of strings.'
CREATE TABLE system.columns
(
    `database` String,
    `table` String,
    `name` String,
    `type` String,
    `position` UInt64,
    `default_kind` String,
    `default_expression` String,
    `data_compressed_bytes` UInt64,
    `data_uncompressed_bytes` UInt64,
    `marks_bytes` UInt64,
    `comment` String,
    `is_in_partition_key` UInt8,
    `is_in_sorting_key` UInt8,
    `is_in_primary_key` UInt8,
    `is_in_sampling_key` UInt8,
    `compression_codec` String,
    `character_octet_length` Nullable(UInt64),
    `numeric_precision` Nullable(UInt64),
    `numeric_precision_radix` Nullable(UInt64),
    `numeric_scale` Nullable(UInt64),
    `datetime_precision` Nullable(UInt64)
)
ENGINE = SystemColumns
COMMENT 'Lists all columns from all tables of the current server.'
CREATE TABLE system.contributors
(
    `name` String
)
ENGINE = SystemContributors
COMMENT 'Contains a list of all ClickHouse contributors <3'
CREATE TABLE system.current_roles
(
    `role_name` String,
    `with_admin_option` UInt8,
    `is_default` UInt8
)
ENGINE = SystemCurrentRoles
COMMENT 'Contains active roles of a current user. SET ROLE changes the contents of this table.'
CREATE TABLE system.data_skipping_indices
(
    `database` String,
    `table` String,
    `name` String,
    `type` String,
    `type_full` String,
    `expr` String,
    `granularity` UInt64,
    `data_compressed_bytes` UInt64,
    `data_uncompressed_bytes` UInt64,
    `marks` UInt64
)
ENGINE = SystemDataSkippingIndices
COMMENT 'Contains all the information about all the data skipping indices in tables, similar to system.columns.'
CREATE TABLE system.data_type_families
(
    `name` String,
    `case_insensitive` UInt8,
    `alias_to` String
)
ENGINE = SystemTableDataTypeFamilies
COMMENT 'Contains a list of all available native data types along with all the aliases used for compatibility with other DBMS.'
CREATE TABLE system.databases
(
    `name` String,
    `engine` String,
    `data_path` String,
    `metadata_path` String,
    `uuid` UUID,
    `engine_full` String,
    `comment` String,
    `database` String ALIAS name
)
ENGINE = SystemDatabases
COMMENT 'Lists all databases of the current server.'
CREATE TABLE system.detached_parts
(
    `database` String,
    `table` String,
    `partition_id` Nullable(String),
    `name` String,
    `bytes_on_disk` UInt64,
    `modification_time` DateTime,
    `disk` String,
    `path` String,
    `reason` Nullable(String),
    `min_block_number` Nullable(Int64),
    `max_block_number` Nullable(Int64),
    `level` Nullable(UInt32)
)
ENGINE = SystemDetachedParts
COMMENT 'Contains a list of all parts which are being found in /detached directory along with a reason why it was detached. ClickHouse server doesn\'t use such parts anyhow.'
CREATE TABLE system.dictionaries
(
    `database` String,
    `name` String,
    `uuid` UUID,
    `status` Enum8('NOT_LOADED' = 0, 'LOADED' = 1, 'FAILED' = 2, 'LOADING' = 3, 'FAILED_AND_RELOADING' = 4, 'LOADED_AND_RELOADING' = 5, 'NOT_EXIST' = 6),
    `origin` String,
    `type` String,
    `key.names` Array(String),
    `key.types` Array(String),
    `attribute.names` Array(String),
    `attribute.types` Array(String),
    `bytes_allocated` UInt64,
    `hierarchical_index_bytes_allocated` UInt64,
    `query_count` UInt64,
    `hit_rate` Float64,
    `found_rate` Float64,
    `element_count` UInt64,
    `load_factor` Float64,
    `source` String,
    `lifetime_min` UInt64,
    `lifetime_max` UInt64,
    `loading_start_time` DateTime,
    `last_successful_update_time` DateTime,
    `loading_duration` Float32,
    `last_exception` String,
    `comment` String
)
ENGINE = SystemDictionaries
COMMENT 'Contains information about dictionaries.'
CREATE TABLE system.disks
(
    `name` String,
    `path` String,
    `free_space` UInt64,
    `total_space` UInt64,
    `unreserved_space` UInt64,
    `keep_free_space` UInt64,
    `type` String,
    `object_storage_type` String,
    `metadata_type` String,
    `is_encrypted` UInt8,
    `is_read_only` UInt8,
    `is_write_once` UInt8,
    `is_remote` UInt8,
    `is_broken` UInt8,
    `cache_path` String
)
ENGINE = SystemDisks
COMMENT 'Contains information about disks defined in the server configuration.'
CREATE TABLE system.distributed_ddl_queue
(
    `entry` String,
    `entry_version` Nullable(UInt8),
    `initiator_host` Nullable(String),
    `initiator_port` Nullable(UInt16),
    `cluster` String,
    `query` String,
    `settings` Map(String, String),
    `query_create_time` DateTime,
    `host` Nullable(String),
    `port` Nullable(UInt16),
    `status` Nullable(Enum8('Inactive' = 0, 'Active' = 1, 'Finished' = 2, 'Removing' = 3, 'Unknown' = 4)),
    `exception_code` Nullable(UInt16),
    `exception_text` Nullable(String),
    `query_finish_time` Nullable(DateTime),
    `query_duration_ms` Nullable(UInt64)
)
ENGINE = SystemDDLWorkerQueue
COMMENT 'Contains information about distributed DDL queries (ON CLUSTER clause) that were executed on a cluster.'
CREATE TABLE system.distribution_queue
(
    `database` String,
    `table` String,
    `data_path` String,
    `is_blocked` UInt8,
    `error_count` UInt64,
    `data_files` UInt64,
    `data_compressed_bytes` UInt64,
    `broken_data_files` UInt64,
    `broken_data_compressed_bytes` UInt64,
    `last_exception` String,
    `last_exception_time` DateTime
)
ENGINE = SystemDistributionQueue
COMMENT 'Contains information about local files that are in the queue to be sent to the shards. These local files contain new parts that are created by inserting new data into the Distributed table in asynchronous mode.'
CREATE TABLE system.enabled_roles
(
    `role_name` String,
    `with_admin_option` UInt8,
    `is_current` UInt8,
    `is_default` UInt8
)
ENGINE = SystemEnabledRoles
COMMENT 'Contains all active roles at the moment, including current role of the current user and granted roles for current role.'
CREATE TABLE system.errors
(
    `name` String,
    `code` Int32,
    `value` UInt64,
    `last_error_time` DateTime,
    `last_error_message` String,
    `last_error_trace` Array(UInt64),
    `remote` UInt8
)
ENGINE = SystemErrors
COMMENT 'Contains a list of all errors which have ever happened including the error code, last time and message with unsymbolized stacktrace.'
CREATE TABLE system.events
(
    `event` String,
    `value` UInt64,
    `description` String,
    `name` String ALIAS event
)
ENGINE = SystemEvents
COMMENT 'Contains profiling events and their current value.'
CREATE TABLE system.formats
(
    `name` String,
    `is_input` UInt8,
    `is_output` UInt8,
    `supports_parallel_parsing` UInt8,
    `supports_parallel_formatting` UInt8
)
ENGINE = SystemFormats
COMMENT 'Contains a list of all the formats along with flags whether a format is suitable for input/output or whether it supports parallelization.'
CREATE TABLE system.functions
(
    `name` String,
    `is_aggregate` UInt8,
    `is_deterministic` Nullable(UInt8),
    `case_insensitive` UInt8,
    `alias_to` String,
    `create_query` String,
    `origin` Enum8('System' = 0, 'SQLUserDefined' = 1, 'ExecutableUserDefined' = 2),
    `description` String,
    `syntax` String,
    `arguments` String,
    `returned_value` String,
    `examples` String,
    `categories` String
)
ENGINE = SystemFunctions
COMMENT 'Contains a list of all available ordinary and aggregate functions with their descriptions.'
CREATE TABLE system.graphite_retentions
(
    `config_name` String,
    `rule_type` String,
    `regexp` String,
    `function` String,
    `age` UInt64,
    `precision` UInt64,
    `priority` UInt16,
    `is_default` UInt8,
    `Tables.database` Array(String),
    `Tables.table` Array(String)
)
ENGINE = SystemGraphite
COMMENT 'Contains information about parameters graphite_rollup which are used in tables with *GraphiteMergeTree engines.'
CREATE TABLE system.licenses
(
    `library_name` String,
    `license_type` String,
    `license_path` String,
    `license_text` String
)
ENGINE = SystemLicenses
COMMENT 'Contains licenses of third-party libraries that are located in the contrib directory of ClickHouse sources.'
CREATE TABLE system.macros
(
    `macro` String,
    `substitution` String
)
ENGINE = SystemMacros
COMMENT 'Contains a list of all macros defined in server configuration.'
CREATE TABLE system.merge_tree_settings
(
    `name` String,
    `value` String,
    `changed` UInt8,
    `description` String,
    `min` Nullable(String),
    `max` Nullable(String),
    `readonly` UInt8,
    `type` String,
    `is_obsolete` UInt8
)
ENGINE = SystemMergeTreeSettings
COMMENT 'Contains a list of all MergeTree engine specific settings, their current and default values along with descriptions. You may change any of them in SETTINGS section in CREATE query.'
CREATE TABLE system.merges
(
    `database` String,
    `table` String,
    `elapsed` Float64,
    `progress` Float64,
    `num_parts` UInt64,
    `source_part_names` Array(String),
    `result_part_name` String,
    `source_part_paths` Array(String),
    `result_part_path` String,
    `partition_id` String,
    `partition` String,
    `is_mutation` UInt8,
    `total_size_bytes_compressed` UInt64,
    `total_size_bytes_uncompressed` UInt64,
    `total_size_marks` UInt64,
    `bytes_read_uncompressed` UInt64,
    `rows_read` UInt64,
    `bytes_written_uncompressed` UInt64,
    `rows_written` UInt64,
    `columns_written` UInt64,
    `memory_usage` UInt64,
    `thread_id` UInt64,
    `merge_type` String,
    `merge_algorithm` String
)
ENGINE = SystemMerges
COMMENT 'Contains a list of merges currently executing merges of MergeTree tables and their progress. Each merge operation is represented by a single row.'
CREATE TABLE system.metrics
(
    `metric` String,
    `value` Int64,
    `description` String,
    `name` String ALIAS metric
)
ENGINE = SystemMetrics
COMMENT 'Contains metrics which can be calculated instantly, or have a current value. For example, the number of simultaneously processed queries or the current replica delay. This table is always up to date.'
CREATE TABLE system.moves
(
    `database` String,
    `table` String,
    `elapsed` Float64,
    `target_disk_name` String,
    `target_disk_path` String,
    `part_name` String,
    `part_size` UInt64,
    `thread_id` UInt64
)
ENGINE = SystemMoves
COMMENT 'Contains information about in-progress data part moves of MergeTree tables. Each data part movement is represented by a single row.'
CREATE TABLE system.mutations
(
    `database` String,
    `table` String,
    `mutation_id` String,
    `command` String,
    `create_time` DateTime,
    `block_numbers.partition_id` Array(String),
    `block_numbers.number` Array(Int64),
    `parts_to_do_names` Array(String),
    `parts_to_do` Int64,
    `is_done` UInt8,
    `is_killed` UInt8,
    `latest_failed_part` String,
    `latest_fail_time` DateTime,
    `latest_fail_reason` String
)
ENGINE = SystemMutations
COMMENT 'Contains a list of mutations and their progress. Each mutation command is represented by a single row.'
CREATE TABLE system.numbers
(
    `number` UInt64
)
ENGINE = SystemNumbers
COMMENT 'Generates all natural numbers, starting from 0 (to 2^64 - 1, and then again) in sorted order.'
CREATE TABLE system.numbers_mt
(
    `number` UInt64
)
ENGINE = SystemNumbers
COMMENT 'Multithreaded version of `system.numbers`. Numbers order is not guaranteed.'
CREATE TABLE system.one
(
    `dummy` UInt8
)
ENGINE = SystemOne
COMMENT 'This table contains a single row with a single dummy UInt8 column containing the value 0. Used when the table is not specified explicitly, for example in queries like `SELECT 1`.'
CREATE TABLE system.part_moves_between_shards
(
    `database` String,
    `table` String,
    `task_name` String,
    `task_uuid` UUID,
    `create_time` DateTime,
    `part_name` String,
    `part_uuid` UUID,
    `to_shard` String,
    `dst_part_name` String,
    `update_time` DateTime,
    `state` String,
    `rollback` UInt8,
    `num_tries` UInt32,
    `last_exception` String
)
ENGINE = SystemShardMoves
COMMENT 'Contains information about parts which are currently in a process of moving between shards and their progress.'
CREATE TABLE system.parts
(
    `partition` String,
    `name` String,
    `uuid` UUID,
    `part_type` String,
    `active` UInt8,
    `marks` UInt64,
    `rows` UInt64,
    `bytes_on_disk` UInt64,
    `data_compressed_bytes` UInt64,
    `data_uncompressed_bytes` UInt64,
    `primary_key_size` UInt64,
    `marks_bytes` UInt64,
    `secondary_indices_compressed_bytes` UInt64,
    `secondary_indices_uncompressed_bytes` UInt64,
    `secondary_indices_marks_bytes` UInt64,
    `modification_time` DateTime,
    `remove_time` DateTime,
    `refcount` UInt32,
    `min_date` Date,
    `max_date` Date,
    `min_time` DateTime,
    `max_time` DateTime,
    `partition_id` String,
    `min_block_number` Int64,
    `max_block_number` Int64,
    `level` UInt32,
    `data_version` UInt64,
    `primary_key_bytes_in_memory` UInt64,
    `primary_key_bytes_in_memory_allocated` UInt64,
    `is_frozen` UInt8,
    `database` String,
    `table` String,
    `engine` String,
    `disk_name` String,
    `path` String,
    `hash_of_all_files` String,
    `hash_of_uncompressed_files` String,
    `uncompressed_hash_of_compressed_files` String,
    `delete_ttl_info_min` DateTime,
    `delete_ttl_info_max` DateTime,
    `move_ttl_info.expression` Array(String),
    `move_ttl_info.min` Array(DateTime),
    `move_ttl_info.max` Array(DateTime),
    `default_compression_codec` String,
    `recompression_ttl_info.expression` Array(String),
    `recompression_ttl_info.min` Array(DateTime),
    `recompression_ttl_info.max` Array(DateTime),
    `group_by_ttl_info.expression` Array(String),
    `group_by_ttl_info.min` Array(DateTime),
    `group_by_ttl_info.max` Array(DateTime),
    `rows_where_ttl_info.expression` Array(String),
    `rows_where_ttl_info.min` Array(DateTime),
    `rows_where_ttl_info.max` Array(DateTime),
    `projections` Array(String),
    `visible` UInt8,
    `creation_tid` Tuple(UInt64, UInt64, UUID),
    `removal_tid_lock` UInt64,
    `removal_tid` Tuple(UInt64, UInt64, UUID),
    `creation_csn` UInt64,
    `removal_csn` UInt64,
    `has_lightweight_delete` UInt8,
    `last_removal_attempt_time` DateTime,
    `removal_state` String,
    `bytes` UInt64 ALIAS bytes_on_disk,
    `marks_size` UInt64 ALIAS marks_bytes,
    `part_name` String ALIAS name
)
ENGINE = SystemParts
COMMENT 'Contains a list of currently existing (both active and inactive) parts of all *-MergeTree tables. Each part is represented by a single row.'
CREATE TABLE system.parts_columns
(
    `partition` String,
    `name` String,
    `uuid` UUID,
    `part_type` String,
    `active` UInt8,
    `marks` UInt64,
    `rows` UInt64,
    `bytes_on_disk` UInt64,
    `data_compressed_bytes` UInt64,
    `data_uncompressed_bytes` UInt64,
    `marks_bytes` UInt64,
    `modification_time` DateTime,
    `remove_time` DateTime,
    `refcount` UInt32,
    `min_date` Date,
    `max_date` Date,
    `min_time` DateTime,
    `max_time` DateTime,
    `partition_id` String,
    `min_block_number` Int64,
    `max_block_number` Int64,
    `level` UInt32,
    `data_version` UInt64,
    `primary_key_bytes_in_memory` UInt64,
    `primary_key_bytes_in_memory_allocated` UInt64,
    `database` String,
    `table` String,
    `engine` String,
    `disk_name` String,
    `path` String,
    `column` String,
    `type` String,
    `column_position` UInt64,
    `default_kind` String,
    `default_expression` String,
    `column_bytes_on_disk` UInt64,
    `column_data_compressed_bytes` UInt64,
    `column_data_uncompressed_bytes` UInt64,
    `column_marks_bytes` UInt64,
    `column_modification_time` Nullable(DateTime),
    `column_ttl_min` Nullable(DateTime),
    `column_ttl_max` Nullable(DateTime),
    `serialization_kind` String,
    `substreams` Array(String),
    `filenames` Array(String),
    `subcolumns.names` Array(String),
    `subcolumns.types` Array(String),
    `subcolumns.serializations` Array(String),
    `subcolumns.bytes_on_disk` Array(UInt64),
    `subcolumns.data_compressed_bytes` Array(UInt64),
    `subcolumns.data_uncompressed_bytes` Array(UInt64),
    `subcolumns.marks_bytes` Array(UInt64),
    `bytes` UInt64 ALIAS bytes_on_disk,
    `marks_size` UInt64 ALIAS marks_bytes,
    `part_name` String ALIAS name
)
ENGINE = SystemPartsColumns
COMMENT 'Contains a list of columns of all currently existing parts of all MergeTree tables. Each column is represented by a single row.'
CREATE TABLE system.processes
(
    `is_initial_query` UInt8,
    `user` String,
    `query_id` String,
    `address` IPv6,
    `port` UInt16,
    `initial_user` String,
    `initial_query_id` String,
    `initial_address` IPv6,
    `initial_port` UInt16,
    `interface` UInt8,
    `os_user` String,
    `client_hostname` String,
    `client_name` String,
    `client_revision` UInt64,
    `client_version_major` UInt64,
    `client_version_minor` UInt64,
    `client_version_patch` UInt64,
    `http_method` UInt8,
    `http_user_agent` String,
    `http_referer` String,
    `forwarded_for` String,
    `quota_key` String,
    `distributed_depth` UInt64,
    `elapsed` Float64,
    `is_cancelled` UInt8,
    `is_all_data_sent` UInt8,
    `read_rows` UInt64,
    `read_bytes` UInt64,
    `total_rows_approx` UInt64,
    `written_rows` UInt64,
    `written_bytes` UInt64,
    `memory_usage` Int64,
    `peak_memory_usage` Int64,
    `query` String,
    `query_kind` String,
    `thread_ids` Array(UInt64),
    `ProfileEvents` Map(String, UInt64),
    `Settings` Map(String, String),
    `current_database` String,
    `ProfileEvents.Names` Array(String) ALIAS mapKeys(ProfileEvents),
    `ProfileEvents.Values` Array(UInt64) ALIAS mapValues(ProfileEvents),
    `Settings.Names` Array(String) ALIAS mapKeys(Settings),
    `Settings.Values` Array(String) ALIAS mapValues(Settings)
)
ENGINE = SystemProcesses
COMMENT 'Contains a list of currently executing processes (queries) with their progress.'
CREATE TABLE system.projection_parts
(
    `partition` String,
    `name` String,
    `part_type` String,
    `parent_name` String,
    `parent_uuid` UUID,
    `parent_part_type` String,
    `active` UInt8,
    `marks` UInt64,
    `rows` UInt64,
    `bytes_on_disk` UInt64,
    `data_compressed_bytes` UInt64,
    `data_uncompressed_bytes` UInt64,
    `marks_bytes` UInt64,
    `parent_marks` UInt64,
    `parent_rows` UInt64,
    `parent_bytes_on_disk` UInt64,
    `parent_data_compressed_bytes` UInt64,
    `parent_data_uncompressed_bytes` UInt64,
    `parent_marks_bytes` UInt64,
    `modification_time` DateTime,
    `remove_time` DateTime,
    `refcount` UInt32,
    `min_date` Date,
    `max_date` Date,
    `min_time` DateTime,
    `max_time` DateTime,
    `partition_id` String,
    `min_block_number` Int64,
    `max_block_number` Int64,
    `level` UInt32,
    `data_version` UInt64,
    `primary_key_bytes_in_memory` UInt64,
    `primary_key_bytes_in_memory_allocated` UInt64,
    `is_frozen` UInt8,
    `database` String,
    `table` String,
    `engine` String,
    `disk_name` String,
    `path` String,
    `hash_of_all_files` String,
    `hash_of_uncompressed_files` String,
    `uncompressed_hash_of_compressed_files` String,
    `delete_ttl_info_min` DateTime,
    `delete_ttl_info_max` DateTime,
    `move_ttl_info.expression` Array(String),
    `move_ttl_info.min` Array(DateTime),
    `move_ttl_info.max` Array(DateTime),
    `default_compression_codec` String,
    `recompression_ttl_info.expression` Array(String),
    `recompression_ttl_info.min` Array(DateTime),
    `recompression_ttl_info.max` Array(DateTime),
    `group_by_ttl_info.expression` Array(String),
    `group_by_ttl_info.min` Array(DateTime),
    `group_by_ttl_info.max` Array(DateTime),
    `rows_where_ttl_info.expression` Array(String),
    `rows_where_ttl_info.min` Array(DateTime),
    `rows_where_ttl_info.max` Array(DateTime),
    `is_broken` UInt8,
    `exception_code` Int32,
    `exception` String,
    `bytes` UInt64 ALIAS bytes_on_disk,
    `marks_size` UInt64 ALIAS marks_bytes,
    `part_name` String ALIAS name
)
ENGINE = SystemProjectionParts
COMMENT 'Contains a list of currently existing projection parts (a copy of some part containing aggregated data or just sorted in different order) created for all the projections for all tables within a cluster.'
CREATE TABLE system.projection_parts_columns
(
    `partition` String,
    `name` String,
    `part_type` String,
    `parent_name` String,
    `parent_uuid` UUID,
    `parent_part_type` String,
    `active` UInt8,
    `marks` UInt64,
    `rows` UInt64,
    `bytes_on_disk` UInt64,
    `data_compressed_bytes` UInt64,
    `data_uncompressed_bytes` UInt64,
    `marks_bytes` UInt64,
    `parent_marks` UInt64,
    `parent_rows` UInt64,
    `parent_bytes_on_disk` UInt64,
    `parent_data_compressed_bytes` UInt64,
    `parent_data_uncompressed_bytes` UInt64,
    `parent_marks_bytes` UInt64,
    `modification_time` DateTime,
    `remove_time` DateTime,
    `refcount` UInt32,
    `min_date` Date,
    `max_date` Date,
    `min_time` DateTime,
    `max_time` DateTime,
    `partition_id` String,
    `min_block_number` Int64,
    `max_block_number` Int64,
    `level` UInt32,
    `data_version` UInt64,
    `primary_key_bytes_in_memory` UInt64,
    `primary_key_bytes_in_memory_allocated` UInt64,
    `database` String,
    `table` String,
    `engine` String,
    `disk_name` String,
    `path` String,
    `column` String,
    `type` String,
    `column_position` UInt64,
    `default_kind` String,
    `default_expression` String,
    `column_bytes_on_disk` UInt64,
    `column_data_compressed_bytes` UInt64,
    `column_data_uncompressed_bytes` UInt64,
    `column_marks_bytes` UInt64,
    `column_modification_time` Nullable(DateTime),
    `bytes` UInt64 ALIAS bytes_on_disk,
    `marks_size` UInt64 ALIAS marks_bytes,
    `part_name` String ALIAS name
)
ENGINE = SystemProjectionPartsColumns
COMMENT 'Contains a list of columns of all currently existing projection parts of all MergeTree tables. Each column is represented by a single row.'
CREATE TABLE system.quota_limits
(
    `quota_name` String,
    `duration` UInt32,
    `is_randomized_interval` UInt8,
    `max_queries` Nullable(UInt64),
    `max_query_selects` Nullable(UInt64),
    `max_query_inserts` Nullable(UInt64),
    `max_errors` Nullable(UInt64),
    `max_result_rows` Nullable(UInt64),
    `max_result_bytes` Nullable(UInt64),
    `max_read_rows` Nullable(UInt64),
    `max_read_bytes` Nullable(UInt64),
    `max_execution_time` Nullable(Float64),
    `max_written_bytes` Nullable(UInt64),
    `max_failed_sequential_authentications` Nullable(UInt64)
)
ENGINE = SystemQuotaLimits
COMMENT 'Contains information about maximums for all intervals of all quotas. Any number of rows or zero can correspond to specific quota.'
CREATE TABLE system.quota_usage
(
    `quota_name` String,
    `quota_key` String,
    `start_time` Nullable(DateTime),
    `end_time` Nullable(DateTime),
    `duration` Nullable(UInt32),
    `queries` Nullable(UInt64),
    `max_queries` Nullable(UInt64),
    `query_selects` Nullable(UInt64),
    `max_query_selects` Nullable(UInt64),
    `query_inserts` Nullable(UInt64),
    `max_query_inserts` Nullable(UInt64),
    `errors` Nullable(UInt64),
    `max_errors` Nullable(UInt64),
    `result_rows` Nullable(UInt64),
    `max_result_rows` Nullable(UInt64),
    `result_bytes` Nullable(UInt64),
    `max_result_bytes` Nullable(UInt64),
    `read_rows` Nullable(UInt64),
    `max_read_rows` Nullable(UInt64),
    `read_bytes` Nullable(UInt64),
    `max_read_bytes` Nullable(UInt64),
    `execution_time` Nullable(Float64),
    `max_execution_time` Nullable(Float64),
    `written_bytes` Nullable(UInt64),
    `max_written_bytes` Nullable(UInt64),
    `failed_sequential_authentications` Nullable(UInt64),
    `max_failed_sequential_authentications` Nullable(UInt64)
)
ENGINE = SystemQuotaUsage
COMMENT 'Contains quota usage by the current user: how much is used and how much is left.'
CREATE TABLE system.quotas
(
    `name` String,
    `id` UUID,
    `storage` String,
    `keys` Array(Enum8('user_name' = 1, 'ip_address' = 2, 'forwarded_ip_address' = 3, 'client_key' = 4)),
    `durations` Array(UInt32),
    `apply_to_all` UInt8,
    `apply_to_list` Array(String),
    `apply_to_except` Array(String)
)
ENGINE = SystemQuotas
COMMENT 'Contains information about quotas.'
CREATE TABLE system.quotas_usage
(
    `quota_name` String,
    `quota_key` String,
    `is_current` UInt8,
    `start_time` Nullable(DateTime),
    `end_time` Nullable(DateTime),
    `duration` Nullable(UInt32),
    `queries` Nullable(UInt64),
    `max_queries` Nullable(UInt64),
    `query_selects` Nullable(UInt64),
    `max_query_selects` Nullable(UInt64),
    `query_inserts` Nullable(UInt64),
    `max_query_inserts` Nullable(UInt64),
    `errors` Nullable(UInt64),
    `max_errors` Nullable(UInt64),
    `result_rows` Nullable(UInt64),
    `max_result_rows` Nullable(UInt64),
    `result_bytes` Nullable(UInt64),
    `max_result_bytes` Nullable(UInt64),
    `read_rows` Nullable(UInt64),
    `max_read_rows` Nullable(UInt64),
    `read_bytes` Nullable(UInt64),
    `max_read_bytes` Nullable(UInt64),
    `execution_time` Nullable(Float64),
    `max_execution_time` Nullable(Float64),
    `written_bytes` Nullable(UInt64),
    `max_written_bytes` Nullable(UInt64),
    `failed_sequential_authentications` Nullable(UInt64),
    `max_failed_sequential_authentications` Nullable(UInt64)
)
ENGINE = SystemQuotasUsage
COMMENT 'Contains quota usage by all users.'
CREATE TABLE system.replicas
(
    `database` String,
    `table` String,
    `engine` String,
    `is_leader` UInt8,
    `can_become_leader` UInt8,
    `is_readonly` UInt8,
    `is_session_expired` UInt8,
    `future_parts` UInt32,
    `parts_to_check` UInt32,
    `zookeeper_name` String,
    `zookeeper_path` String,
    `replica_name` String,
    `replica_path` String,
    `columns_version` Int32,
    `queue_size` UInt32,
    `inserts_in_queue` UInt32,
    `merges_in_queue` UInt32,
    `part_mutations_in_queue` UInt32,
    `queue_oldest_time` DateTime,
    `inserts_oldest_time` DateTime,
    `merges_oldest_time` DateTime,
    `part_mutations_oldest_time` DateTime,
    `oldest_part_to_get` String,
    `oldest_part_to_merge_to` String,
    `oldest_part_to_mutate_to` String,
    `log_max_index` UInt64,
    `log_pointer` UInt64,
    `last_queue_update` DateTime,
    `absolute_delay` UInt64,
    `total_replicas` UInt32,
    `active_replicas` UInt32,
    `lost_part_count` UInt64,
    `last_queue_update_exception` String,
    `zookeeper_exception` String,
    `replica_is_active` Map(String, UInt8)
)
ENGINE = SystemReplicas
COMMENT 'Contains information and status of all table replicas on current server. Each replica is represented by a single row.'
CREATE TABLE system.replicated_fetches
(
    `database` String,
    `table` String,
    `elapsed` Float64,
    `progress` Float64,
    `result_part_name` String,
    `result_part_path` String,
    `partition_id` String,
    `total_size_bytes_compressed` UInt64,
    `bytes_read_compressed` UInt64,
    `source_replica_path` String,
    `source_replica_hostname` String,
    `source_replica_port` UInt16,
    `interserver_scheme` String,
    `URI` String,
    `to_detached` UInt8,
    `thread_id` UInt64
)
ENGINE = SystemReplicatedFetches
COMMENT 'Contains information about currently running background fetches.'
CREATE TABLE system.replicated_merge_tree_settings
(
    `name` String,
    `value` String,
    `changed` UInt8,
    `description` String,
    `min` Nullable(String),
    `max` Nullable(String),
    `readonly` UInt8,
    `type` String,
    `is_obsolete` UInt8
)
ENGINE = SystemReplicatedMergeTreeSettings
COMMENT 'Contains a list of all ReplicatedMergeTree engine specific settings, their current and default values along with descriptions. You may change any of them in SETTINGS section in CREATE query. '
CREATE TABLE system.replication_queue
(
    `database` String,
    `table` String,
    `replica_name` String,
    `position` UInt32,
    `node_name` String,
    `type` String,
    `create_time` DateTime,
    `required_quorum` UInt32,
    `source_replica` String,
    `new_part_name` String,
    `parts_to_merge` Array(String),
    `is_detach` UInt8,
    `is_currently_executing` UInt8,
    `num_tries` UInt32,
    `last_exception` String,
    `last_exception_time` DateTime,
    `last_attempt_time` DateTime,
    `num_postponed` UInt32,
    `postpone_reason` String,
    `last_postpone_time` DateTime,
    `merge_type` String
)
ENGINE = SystemReplicationQueue
COMMENT 'Contains information about tasks from replication queues stored in ClickHouse Keeper, or ZooKeeper, for each table replica.'
CREATE TABLE system.role_grants
(
    `user_name` Nullable(String),
    `role_name` Nullable(String),
    `granted_role_name` String,
    `granted_role_id` UUID,
    `granted_role_is_default` UInt8,
    `with_admin_option` UInt8
)
ENGINE = SystemRoleGrants
COMMENT 'Contains the role grants for users and roles. To add entries to this table, use `GRANT role TO user`. Using this table you may find out which roles are assigned to which users or which roles a user has.'
CREATE TABLE system.roles
(
    `name` String,
    `id` UUID,
    `storage` String
)
ENGINE = SystemRoles
COMMENT 'Contains a list of all roles created at the server.'
CREATE TABLE system.row_policies
(
    `name` String,
    `short_name` String,
    `database` String,
    `table` String,
    `id` UUID,
    `storage` String,
    `select_filter` Nullable(String),
    `is_restrictive` UInt8,
    `apply_to_all` UInt8,
    `apply_to_list` Array(String),
    `apply_to_except` Array(String)
)
ENGINE = SystemRowPolicies
COMMENT 'Contains filters for one particular table, as well as a list of roles and/or users which should use this row policy.'
CREATE TABLE system.settings
(
    `name` String,
    `value` String,
    `changed` UInt8,
    `description` String,
    `min` Nullable(String),
    `max` Nullable(String),
    `readonly` UInt8,
    `type` String,
    `default` String,
    `alias_for` String,
    `is_obsolete` UInt8
)
ENGINE = SystemSettings
COMMENT 'Contains a list of all user-level settings (which can be modified in a scope of query or session), their current and default values along with descriptions.'
CREATE TABLE system.settings_profile_elements
(
    `profile_name` Nullable(String),
    `user_name` Nullable(String),
    `role_name` Nullable(String),
    `index` UInt64,
    `setting_name` Nullable(String),
    `value` Nullable(String),
    `min` Nullable(String),
    `max` Nullable(String),
    `writability` Nullable(Enum8('WRITABLE' = 0, 'CONST' = 1, 'CHANGEABLE_IN_READONLY' = 2)),
    `inherit_profile` Nullable(String)
)
ENGINE = SystemSettingsProfileElements
COMMENT 'Describes the content of each settings profile configured on the server. Including settings constraints, roles and users for which the settings are applied, and parent settings profiles.'
CREATE TABLE system.settings_profiles
(
    `name` String,
    `id` UUID,
    `storage` String,
    `num_elements` UInt64,
    `apply_to_all` UInt8,
    `apply_to_list` Array(String),
    `apply_to_except` Array(String)
)
ENGINE = SystemSettingsProfiles
COMMENT 'Contains properties of configured setting profiles.'
CREATE TABLE system.stack_trace
(
    `thread_name` String,
    `thread_id` UInt64,
    `query_id` String,
    `trace` Array(UInt64)
)
ENGINE = SystemStackTrace
COMMENT 'Allows to obtain an unsymbolized stacktrace from all the threads of the server process.'
CREATE TABLE system.storage_policies
(
    `policy_name` String,
    `volume_name` String,
    `volume_priority` UInt64,
    `disks` Array(String),
    `volume_type` Enum8('JBOD' = 0, 'SINGLE_DISK' = 1, 'UNKNOWN' = 2),
    `max_data_part_size` UInt64,
    `move_factor` Float32,
    `prefer_not_to_merge` UInt8,
    `perform_ttl_move_on_insert` UInt8,
    `load_balancing` Enum8('ROUND_ROBIN' = 0, 'LEAST_USED' = 1)
)
ENGINE = SystemStoragePolicies
COMMENT 'Contains information about storage policies and volumes defined in the server configuration.'
CREATE TABLE system.table_engines
(
    `name` String,
    `supports_settings` UInt8,
    `supports_skipping_indices` UInt8,
    `supports_projections` UInt8,
    `supports_sort_order` UInt8,
    `supports_ttl` UInt8,
    `supports_replication` UInt8,
    `supports_deduplication` UInt8,
    `supports_parallel_insert` UInt8
)
ENGINE = SystemTableEngines
COMMENT 'Contains a list of all available table engines along with information whether a particular table engine supports some specific features (e.g. settings, skipping indices, projections, replication, TTL, deduplication, parallel insert, etc.)'
CREATE TABLE system.table_functions
(
    `name` String,
    `description` String,
    `allow_readonly` UInt8
)
ENGINE = SystemTableFunctions
COMMENT 'Contains a list of all available table functions with their descriptions.'
CREATE TABLE system.tables
(
    `database` String,
    `name` String,
    `uuid` UUID,
    `engine` String,
    `is_temporary` UInt8,
    `data_paths` Array(String),
    `metadata_path` String,
    `metadata_modification_time` DateTime,
    `metadata_version` Int32,
    `dependencies_database` Array(String),
    `dependencies_table` Array(String),
    `create_table_query` String,
    `engine_full` String,
    `as_select` String,
    `partition_key` String,
    `sorting_key` String,
    `primary_key` String,
    `sampling_key` String,
    `storage_policy` String,
    `total_rows` Nullable(UInt64),
    `total_bytes` Nullable(UInt64),
    `total_bytes_uncompressed` Nullable(UInt64),
    `parts` Nullable(UInt64),
    `active_parts` Nullable(UInt64),
    `total_marks` Nullable(UInt64),
    `lifetime_rows` Nullable(UInt64),
    `lifetime_bytes` Nullable(UInt64),
    `comment` String,
    `has_own_data` UInt8,
    `loading_dependencies_database` Array(String),
    `loading_dependencies_table` Array(String),
    `loading_dependent_database` Array(String),
    `loading_dependent_table` Array(String),
    `table` String ALIAS name
)
ENGINE = SystemTables
COMMENT 'Lists all tables of the current server.'
CREATE TABLE system.time_zones
(
    `time_zone` String
)
ENGINE = SystemTimeZones
COMMENT 'Contains a list of time zones that are supported by the ClickHouse server. This list of timezones might vary depending on the version of ClickHouse.'
CREATE TABLE system.user_directories
(
    `name` String,
    `type` String,
    `params` String,
    `precedence` UInt64
)
ENGINE = SystemUserDirectories
COMMENT 'Contains the information about configured user directories - directories on the file system from which ClickHouse server is allowed to read user provided data.'
CREATE TABLE system.users
(
    `name` String,
    `id` UUID,
    `storage` String,
    `auth_type` Enum8('no_password' = 0, 'plaintext_password' = 1, 'sha256_password' = 2, 'double_sha1_password' = 3, 'ldap' = 4, 'kerberos' = 5, 'ssl_certificate' = 6, 'bcrypt_password' = 7, 'ssh_key' = 8, 'http' = 9),
    `auth_params` String,
    `host_ip` Array(String),
    `host_names` Array(String),
    `host_names_regexp` Array(String),
    `host_names_like` Array(String),
    `default_roles_all` UInt8,
    `default_roles_list` Array(String),
    `default_roles_except` Array(String),
    `grantees_any` UInt8,
    `grantees_list` Array(String),
    `grantees_except` Array(String),
    `default_database` String
)
ENGINE = SystemUsers
COMMENT 'Contains a list of all users profiles either configured at the server through a configuration file or created via SQL.'
CREATE TABLE system.warnings
(
    `message` String
)
ENGINE = SystemWarnings
COMMENT 'Contains warnings about server configuration to be displayed by clickhouse-client right after it connects to the server.'
CREATE TABLE system.zeros
(
    `zero` UInt8
)
ENGINE = SystemZeros
COMMENT 'Produces unlimited number of non-materialized zeros.'
CREATE TABLE system.zeros_mt
(
    `zero` UInt8
)
ENGINE = SystemZeros
COMMENT 'Multithreaded version of system.zeros.'
