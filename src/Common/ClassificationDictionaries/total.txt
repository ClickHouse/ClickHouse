Java
/*Part 0.0014733969986357436
Partof 0.007257844474761255
ofCosmos 0.007312414733969986
Cosmosby 0.007366984993178717
byOpenGenus 0.007312414733969986
OpenGenusFoundation 0.006930422919508868
Foundation*/ 0.0016916780354706686
importjava.util.ArrayList; 0.001091405184174625
privateint 0.0030559345156889496
=new 0.03656207366984993
newArrayList<>(); 0.0019099590723055935
=0; 0.028703956343792632
=-1; 0.0009822646657571623
publicboolean 0.0019099590723055935
data){ 0.00043656207366984994
returnfalse; 0.0029467939972714872
-1) 0.001145975443383356
ofthe 0.0068212824010914054
thequeue 0.0003819918144611187
queueis 0.0006002728512960436
isthe 0.0016371077762619372
thearray 0.001364256480218281
tothe 0.001364256480218281
returntrue; 0.0028922237380627556
publicT 0.000927694406548431
anelement 0.0005457025920873125
fromthe 0.0006548431105047749
thrownew 0.0025648021828103685
isempty"); 0.00043656207366984994
temp= 0.003383356070941337
returntemp; 0.00032742155525238747
booleanisEmpty() 0.0003819918144611187
publicint 0.003165075034106412
publicclass 0.011896316507503411
publicstatic 0.02461118690313779
staticvoid 0.01844474761255116
voidmain(String 0.004420190995907231
main(Stringargs[]) 0.003110504774897681
args[]){ 0.0019099590723055935
thenew 0.0003819918144611187
partof 0.0006548431105047749
importjava.util.*; 0.003929058663028649
//Part 0.004420190995907231
toprint 0.0006002728512960436
+" 0.005293315143246931
""); 0.0019099590723055935
voidmain 0.0007639836289222374
main(String[] 0.000927694406548431
(String[]args) 0.0007094133697135061
args){ 0.006330150068212824
stack= 0.0003819918144611187
for(inti=0; 0.0007094133697135061
i++){ 0.007748976807639836
*Part 0.0007639836289222374
value= 0.0006548431105047749
element){ 0.00032742155525238747
thisqueue 0.0006002728512960436
ifit 0.0004911323328785812
itis 0.0008185538881309686
*@param 0.0034379263301500683
theelement 0.0012005457025920873
elementto 0.0005457025920873125
toadd 0.0003819918144611187
*@return 0.0019645293315143247
@returntrue 0.00032742155525238747
}else 0.005457025920873124
else{ 0.005457025920873124
trueif 0.0004911323328785812
ifthe 0.0008731241473396999
tothis 0.0003819918144611187
try{ 0.0007094133697135061
}catch 0.0006548431105047749
catch(Exception 0.0003819918144611187
ex){ 0.00032742155525238747
thehead 0.0006548431105047749
headof 0.0005457025920873125
ofthis 0.0009822646657571623
*This 0.0012551159618008185
Thismethod 0.0007639836289222374
ifthis 0.0006548431105047749
isempty. 0.00032742155525238747
@returnthe 0.0004911323328785812
isempty 0.0005457025920873125
returnnull; 0.0014733969986357436
doesnot 0.00043656207366984994
Mainfunction 0.00043656207366984994
functionto 0.0008731241473396999
voidmain(String[] 0.008731241473397
main(String[]args) 0.008676671214188268
intsize; 0.00043656207366984994
publicvoid 0.009058663028649386
elementin 0.0003819918144611187
newNode= 0.0006002728512960436
=newNode; 0.0012551159618008185
=null; 0.003874488403819918
staticclass 0.001145975443383356
Functionto 0.0006548431105047749
importjava.lang.*; 0.0012005457025920873
importjava.io.*; 0.0019099590723055935
finalstatic 0.0005457025920873125
staticint 0.00616643929058663
ofelements 0.0008731241473396999
presentin 0.0008731241473396999
//Returns 0.00043656207366984994
sumof 0.0010368349249658935
thatthe 0.0003819918144611187
arrayis 0.0005457025920873125
intsum 0.0005457025920873125
sum= 0.0017462482946793997
0;// 0.0006002728512960436
morethan 0.0003819918144611187
thanthe 0.0007094133697135061
theindex 0.0007094133697135061
index= 0.0012551159618008185
+1; 0.002237380627557981
//Add 0.0003819918144611187
elementof 0.0003819918144611187
sum+= 0.0007094133697135061
nodein 0.0003819918144611187
returnsum; 0.0003819918144611187
//in 0.0006002728512960436
ofits 0.00043656207366984994
n,int 0.0008731241473396999
currentnode 0.000927694406548431
nodeof 0.0003819918144611187
arr[],int 0.0012551159618008185
intn) 0.0008731241473396999
valuesin 0.0007094133697135061
i=0;i<n; 0.0006002728512960436
i<n;i++) 0.0004911323328785812
//The 0.001855388813096862
2,3, 0.0007639836289222374
5,6, 0.00032742155525238747
intn 0.004092769440654843
n= 0.005511596180081855
tree= 0.0009822646657571623
elementsin 0.0008185538881309686
=" 0.0023465211459754434
"+ 0.009931787175989085
//Find 0.0013096862210095499
thevalue 0.000927694406548431
valueis 0.00043656207366984994
){ 0.0021282401091405182
privatefinal 0.0010368349249658935
finalint 0.003110504774897681
return1; 0.000927694406548431
current= 0.0017462482946793997
parent= 0.00043656207366984994
compare(item, 0.00043656207366984994
0) 0.00043656207366984994
=current; 0.0003819918144611187
)< 0.00043656207366984994
<0 0.000927694406548431
0? 0.00043656207366984994
=x; 0.0004911323328785812
privatevoid 0.0019645293315143247
privatestatic 0.005511596180081855
staticRedBlackNode 0.0003819918144611187
element= 0.0004911323328785812
left= 0.0012005457025920873
right= 0.0010368349249658935
staticfinal 0.0019099590723055935
=1; 0.008185538881309686
t= 0.001091405184174625
for(int 0.021391541609822647
inti 0.001364256480218281
i= 0.016862210095497952
0;i 0.010477489768076399
i+ 0.0010368349249658935
1|| 0.00032742155525238747
-1 0.0008731241473396999
1;i 0.0030013642564802184
i< 0.012005457025920874
privateclass 0.0005457025920873125
toget 0.0014733969986357436
numberof 0.0032742155525238743
ofnodes 0.0008185538881309686
heightof 0.0005457025920873125
tofind 0.0012005457025920873
privateNode 0.0008185538881309686
Noderoot; 0.00043656207366984994
classNode 0.0008731241473396999
Nodeleft, 0.0003819918144611187
left,right; 0.00043656207366984994
this.value= 0.0004911323328785812
=value; 0.0007094133697135061
root= 0.0015279672578444748
==0) 0.0043110504774897685
if(root 0.00032742155525238747
(root== 0.00032742155525238747
==null) 0.003765347885402456
<0) 0.0015279672578444748
Noden 0.0003819918144611187
=root; 0.0003819918144611187
root.left= 0.00043656207366984994
=n; 0.0008731241473396999
elseif 0.0029467939972714872
>0) 0.002073669849931787
root.right= 0.0005457025920873125
x= 0.0024556616643929058
h= 0.0003819918144611187
!=null) 0.0030013642564802184
if(x 0.0004911323328785812
return-1; 0.0014188267394270122
1+ 0.0010368349249658935
return0; 0.001855388813096862
(inti 0.010859481582537517
<size; 0.00032742155525238747
=i; 0.001364256480218281
v){ 0.00032742155525238747
a,int 0.0008731241473396999
intb) 0.0005457025920873125
b){ 0.001145975443383356
a= 0.002073669849931787
b= 0.0016371077762619372
tmp= 0.000927694406548431
=a; 0.00043656207366984994
=b; 0.0004911323328785812
=tmp; 0.0004911323328785812
//0 0.0006548431105047749
01 0.0006548431105047749
//2 0.0004911323328785812
(intj 0.0029467939972714872
j= 0.005075034106412005
=i 0.0004911323328785812
1;j 0.0009822646657571623
j< 0.002510231923601637
j++){ 0.001800818553888131
inthe 0.004474761255115962
importjava.util.Scanner; 0.002728512960436562
returnmax; 0.00043656207366984994
privateboolean 0.0007639836289222374
Scannersc=new 0.00032742155525238747
sc=newScanner(System.in); 0.00032742155525238747
System.out.println("Enterthe 0.0012551159618008185
sizeof 0.0004911323328785812
this.size= 0.0003819918144611187
+1]; 0.0014733969986357436
=Integer.MIN_VALUE; 0.00032742155525238747
/2; 0.001145975443383356
if(pos 0.0004911323328785812
if( 0.0004911323328785812
i<= 0.002728512960436562
size/ 0.00032742155525238747
:" 0.000927694406548431
pos= 0.0005457025920873125
is" 0.0008185538881309686
intothe 0.00043656207366984994
word){ 0.00032742155525238747
node= 0.0009822646657571623
c= 0.0015279672578444748
=true; 0.003110504774897681
(node== 0.0006002728512960436
ifthere 0.00032742155525238747
thereis 0.0006002728512960436
withthe 0.0008731241473396999
thegiven 0.0008185538881309686
if(node 0.0005457025920873125
returnnode; 0.00032742155525238747
treeis 0.0005457025920873125
isa 0.001582537517053206
leftand 0.00043656207366984994
andright 0.0004911323328785812
forall 0.0003819918144611187
key= 0.00032742155525238747
oftwo 0.0004911323328785812
y= 0.0012005457025920873
=1 0.0009822646657571623
//Get 0.00032742155525238747
//If 0.0028376534788540245
thisnode 0.0006002728512960436
if(balance 0.00043656207366984994
1&& 0.0006548431105047749
thenode 0.0004911323328785812
Nodecurrent 0.0003819918144611187
=node; 0.0005457025920873125
returnroot; 0.0003819918144611187
Ifthe 0.0006002728512960436
smallerthan 0.0003819918144611187
isgreater 0.0004911323328785812
greaterthan 0.0008185538881309686
//if 0.000927694406548431
nodeis 0.0005457025920873125
Nodetemp 0.0006002728512960436
=temp; 0.001582537517053206
ofcurrent 0.0004911323328785812
findthe 0.0007094133697135061
thereare 0.00043656207366984994
<=0) 0.0004911323328785812
/\ 0.0003819918144611187
tree.root= 0.0007639836289222374
=tree.insert(tree.root, 0.0004911323328785812
:"); 0.0007094133697135061
Programto 0.00043656207366984994
ofa 0.0012551159618008185
rightchild 0.0003819918144611187
nodeand 0.0003819918144611187
intdata; 0.0006548431105047749
data= 0.0004911323328785812
=right 0.00032742155525238747
theleft 0.0007639836289222374
recursivefunction 0.0003819918144611187
thefirst 0.00032742155525238747
//A 0.001091405184174625
binarytree 0.00043656207366984994
thenodes 0.000927694406548431
!=null){ 0.0003819918144611187
tobe 0.001855388813096862
nodeto 0.00043656207366984994
==null 0.0007094133697135061
null&& 0.0006548431105047749
!=null 0.0006548431105047749
hasa 0.0004911323328785812
rightside 0.00032742155525238747
publicString 0.0019645293315143247
StringtoString() 0.0008185538881309686
value){ 0.0013096862210095499
result= 0.0026193724420190997
=""; 0.0007639836289222374
null){ 0.0028376534788540245
=result 0.0004911323328785812
result+ 0.0004911323328785812
returnresult; 0.001145975443383356
right){ 0.00043656207366984994
[]args){ 0.0005457025920873125
=tree.addNode(tree, 0.00032742155525238747
//Java 0.0007639836289222374
=Integer.MAX_VALUE; 0.0005457025920873125
//Method 0.00032742155525238747
forthe 0.001091405184174625
nodesin 0.001800818553888131
weneed 0.0003819918144611187
needto 0.00043656207366984994
//the 0.0006002728512960436
witha 0.00043656207366984994
newNode(3); 0.00032742155525238747
publicNode 0.0003819918144611187
int[] 0.0004911323328785812
intindex 0.0006548431105047749
start,int 0.00032742155525238747
args)throws 0.0010368349249658935
throwsjava.lang.Exception 0.00032742155525238747
this.data= 0.00043656207366984994
=data; 0.0006002728512960436
l= 0.00032742155525238747
r= 0.000927694406548431
+1, 0.001091405184174625
/*If 0.0003819918144611187
isnot 0.002073669849931787
Thefunction 0.00032742155525238747
pathfrom 0.0008185538881309686
Javaprogram 0.0006548431105047749
programto 0.001145975443383356
thenumber 0.001855388813096862
+1); 0.0008731241473396999
importjava.util.Random; 0.00032742155525238747
/**Function 0.0003819918144611187
tocheck 0.0007639836289222374
checkif 0.00032742155525238747
returnnew 0.0012005457025920873
if(r 0.00032742155525238747
r,int 0.0003819918144611187
found= 0.00032742155525238747
=false; 0.001800818553888131
newScanner(System.in); 0.003383356070941337
youwant 0.00043656207366984994
wantto 0.00043656207366984994
importjava.util.List; 0.00043656207366984994
publiclong 0.00032742155525238747
for(Interval<Type> 0.0003819918144611187
(Interval<Type>interval 0.0003819918144611187
interval: 0.0003819918144611187
newArrayList<Interval<Type>>(); 0.0003819918144611187
if(i 0.0009822646657571623
(i== 0.0006002728512960436
this.head= 0.0007094133697135061
head= 0.0008731241473396999
size= 0.0006002728512960436
privateString 0.0007094133697135061
k= 0.0014733969986357436
=2; 0.000927694406548431
=r; 0.00032742155525238747
intres 0.00043656207366984994
res= 0.0013096862210095499
prev= 0.0007639836289222374
=prev; 0.0003819918144611187
returnres; 0.0007094133697135061
-1; 0.002673942701227831
aux= 0.0004911323328785812
=aux; 0.00032742155525238747
inta 0.0007094133697135061
publicdouble 0.00043656207366984994
n2= 0.0004911323328785812
}//Part 0.00032742155525238747
segmenttree 0.0009822646657571623
n){ 0.0017462482946793997
memoryfor 0.00032742155525238747
intx 0.001145975443383356
=(int) 0.001145975443383356
=2 0.00043656207366984994
2* 0.0007094133697135061
n- 0.0008731241473396999
-1, 0.001091405184174625
e){ 0.0008185538881309686
thesum 0.0003819918144611187
givenrange 0.0003819918144611187
Ifa 0.00032742155525238747
intmid 0.0007094133697135061
mid= 0.0008185538881309686
+1) 0.0012005457025920873
inti, 0.0008185538881309686
i,int 0.0006002728512960436
theinput 0.00032742155525238747
(i< 0.0003819918144611187
inrange 0.00032742155525238747
valueof 0.0010368349249658935
intn, 0.0005457025920873125
//Check 0.0007094133697135061
0|| 0.0007094133697135061
1){ 0.001582537517053206
inarray 0.0003819918144611187
arr[i]= 0.0006548431105047749
insegment 0.00032742155525238747
//Return 0.0006002728512960436
functionthat 0.0003819918144611187
indexof 0.0007639836289222374
ofvalues 0.0005457025920873125
*2 0.001091405184174625
2+ 0.001091405184174625
mid+ 0.0004911323328785812
//Driver 0.0009822646657571623
Driverprogram 0.0005457025920873125
totest 0.0004911323328785812
testabove 0.00043656207366984994
intarr[] 0.0010368349249658935
arr[]= 0.001145975443383356
={1, 0.00043656207366984994
=arr.length; 0.0008185538881309686
//Print 0.0006548431105047749
range= 0.00032742155525238747
indexesof 0.0006548431105047749
//to 0.00032742155525238747
usedby 0.00032742155525238747
!=0) 0.001145975443383356
if(sstart 0.0004911323328785812
arenot 0.00043656207366984994
lazy[index* 0.00032742155525238747
+1] 0.0006002728512960436
valuefor 0.00032742155525238747
hasbeen 0.00032742155525238747
outof 0.0003819918144611187
ornot 0.00032742155525238747
//This 0.0008731241473396999
1]+ 0.00043656207366984994
//Function 0.0003819918144611187
/*A 0.00032742155525238747
mustbe 0.00032742155525238747
toall 0.0005457025920873125
1,5, 0.0003819918144611187
ofan 0.0006002728512960436
firstelement 0.00032742155525238747
ina 0.0009822646657571623
oneby 0.00032742155525238747
byone 0.0004911323328785812
characteris 0.0003819918144611187
isan 0.0006548431105047749
intb 0.0006002728512960436
Scannerin 0.0006002728512960436
in= 0.0007639836289222374
input= 0.0003819918144611187
staticboolean 0.0012551159618008185
(inti=0; 0.0009822646657571623
fora 0.0003819918144611187
newIndexOutOfBoundsException(); 0.00032742155525238747
main(Stringargs[]){ 0.0004911323328785812
c){ 0.0003819918144611187
&&c 0.0003819918144611187
c<= 0.0003819918144611187
staticString 0.0008731241473396999
=operands.peek(); 0.00032742155525238747
g= 0.0004911323328785812
Strings 0.0003819918144611187
s= 0.001582537517053206
||c 0.00032742155525238747
||c1 0.0003819918144611187
c1== 0.0003819918144611187
for(inti 0.0034924965893587995
isfound 0.0003819918144611187
elementsof 0.00032742155525238747
Scannersc 0.0009822646657571623
sc= 0.0009822646657571623
main(String[]args){ 0.0007094133697135061
arrayof 0.0006002728512960436
arr= 0.0006002728512960436
intsize 0.00043656207366984994
if(this.size 0.0008185538881309686
(this.size== 0.0007639836289222374
toString(){ 0.0005457025920873125
newStringBuilder(); 0.0003819918144611187
+", 0.0006002728512960436
Node{ 0.0004911323328785812
Nodenext; 0.0003819918144611187
=head; 0.001091405184174625
newLinkedList(); 0.0005457025920873125
newNode.next= 0.0003819918144611187
thecurrent 0.0007639836289222374
0){ 0.004747612551159618
=current.next; 0.00043656207366984994
thelist 0.0004911323328785812
null|| 0.0006002728512960436
key){ 0.0005457025920873125
=temp.next; 0.00032742155525238747
intx) 0.0003819918144611187
x){ 0.00043656207366984994
==x) 0.0003819918144611187
importjava.io.InputStreamReader; 0.0004911323328785812
tail= 0.0006548431105047749
list= 0.0004911323328785812
do{ 0.0004911323328785812
=in.nextInt(); 0.001145975443383356
System.out.println("Entera 0.0003819918144611187
throwsException 0.001091405184174625
Exception{ 0.0009822646657571623
newException("LinkedList 0.0003819918144611187
Exception("LinkedListis 0.0003819918144611187
if(idx 0.00043656207366984994
this.size){ 0.00032742155525238747
=nn; 0.00043656207366984994
this.tail= 0.0006548431105047749
=this.head; 0.001145975443383356
-1); 0.0007094133697135061
==1) 0.002237380627557981
while(i 0.0004911323328785812
inttemp 0.001145975443383356
curr= 0.00043656207366984994
2){ 0.0006002728512960436
%2 0.00032742155525238747
k){ 0.0003819918144611187
intcount 0.0007639836289222374
count= 0.0009822646657571623
//Node 0.00032742155525238747
i+= 0.00032742155525238747
j<= 0.001091405184174625
1)/ 0.00032742155525238747
Findthe 0.0007639836289222374
//Example 0.0003819918144611187
0&& 0.0008185538881309686
Createa 0.0004911323328785812
0to 0.0017462482946793997
%n; 0.0005457025920873125
anarray 0.0008731241473396999
Printthe 0.00032742155525238747
i>= 0.00032742155525238747
>=0; 0.0003819918144611187
0;i--) 0.00032742155525238747
+i 0.00043656207366984994
{// 0.0007094133697135061
implementationof 0.0006548431105047749
n+ 0.0004911323328785812
=n 0.0008185538881309686
=first; 0.00032742155525238747
(pos== 0.00032742155525238747
intc 0.0004911323328785812
cur= 0.0006548431105047749
if(n 0.0014188267394270122
=sc.nextInt(); 0.0012551159618008185
=5; 0.0003819918144611187
==-1) 0.0008185538881309686
-1){ 0.0005457025920873125
*@author 0.0009822646657571623
*<p> 0.0007639836289222374
elementis 0.000927694406548431
ispresent 0.00032742155525238747
*To 0.00032742155525238747
bitsin 0.0003819918144611187
thebit 0.00032742155525238747
*The 0.0012005457025920873
hashfunctions 0.0003819918144611187
thebloom 0.0008185538881309686
bloomfilter 0.001091405184174625
Thenumber 0.0006002728512960436
hash= 0.00043656207366984994
@returnThe 0.00043656207366984994
m= 0.0007094133697135061
=number 0.0003819918144611187
canbe 0.0003819918144611187
32bit 0.00032742155525238747
finallong 0.00043656207366984994
inbloom 0.0004911323328785812
filter= 0.0004911323328785812
+b.check(() 0.0004911323328785812
b.check(()-> 0.0004911323328785812
|Java 0.0004911323328785812
<n; 0.003219645293315143
n;i++) 0.002291950886766712
v,int 0.00032742155525238747
j){ 0.0004911323328785812
=0, 0.001145975443383356
returncount; 0.00032742155525238747
System.out.print("Entern 0.00032742155525238747
>>"); 0.0010368349249658935
newint[n]; 0.0012551159618008185
ofarray 0.00032742155525238747
for(inti=0;i<n;i++) 0.00032742155525238747
arraywith 0.00032742155525238747
intj 0.0003819918144611187
intk 0.0004911323328785812
Checkif 0.0004911323328785812
whichis 0.0004911323328785812
sideof 0.00032742155525238747
theright 0.00043656207366984994
>> 0.0016371077762619372
=0 0.0006002728512960436
0; 0.00032742155525238747
<n 0.00032742155525238747
intt 0.0007094133697135061
equalto 0.0003819918144611187
ofall 0.0003819918144611187
classSolution 0.0003819918144611187
Solution{ 0.0003819918144611187
start= 0.0003819918144611187
end= 0.00032742155525238747
end){ 0.0003819918144611187
for(char 0.00032742155525238747
c- 0.0003819918144611187
intm 0.00043656207366984994
%26; 0.00032742155525238747
importjava.util.HashMap; 0.0003819918144611187
importjava.util.Map; 0.00032742155525238747
newHashMap<>(); 0.00043656207366984994
Scannerscanner 0.0006002728512960436
scanner= 0.0006548431105047749
0,j 0.00032742155525238747
res+= 0.0003819918144611187
ans= 0.000927694406548431
=scanner.nextInt(); 0.0008185538881309686
intnum 0.0004911323328785812
num= 0.0004911323328785812
ans+= 0.00032742155525238747
throwsIOException 0.0010368349249658935
newBufferedReader(new 0.00032742155525238747
BufferedReader(newInputStreamReader(System.in)); 0.00032742155525238747
intb, 0.00032742155525238747
z= 0.00032742155525238747
+1)) 0.00032742155525238747
max= 0.0012005457025920873
n1= 0.0004911323328785812
b2= 0.00032742155525238747
b1= 0.00032742155525238747
q= 0.0007094133697135061
==0 0.0008185538881309686
<=n; 0.000927694406548431
for(intj 0.0005457025920873125
0;j 0.002073669849931787
<=m; 0.00032742155525238747
=j; 0.00043656207366984994
dp[i][j]= 0.0005457025920873125
-1] 0.0012551159618008185
theminimum 0.0003819918144611187
lengthof 0.0005457025920873125
isto 0.0004911323328785812
>0; 0.0003819918144611187
for(i 0.001582537517053206
(i= 0.0014188267394270122
1;i++) 0.00043656207366984994
+1 0.0003819918144611187
intN 0.0006548431105047749
N= 0.0006548431105047749
<N; 0.0005457025920873125
N;i++) 0.0004911323328785812
foundat 0.00032742155525238747
importjava.math.*; 0.0004911323328785812
Scanners 0.0006002728512960436
importjava.util.Arrays; 0.0009822646657571623
s2= 0.00032742155525238747
//of 0.0006002728512960436
intd 0.00032742155525238747
d= 0.0008731241473396999
p= 0.0003819918144611187
for(j 0.0006002728512960436
(j= 0.0006002728512960436
=s.nextInt(); 0.001582537517053206
while(t-- 0.00043656207366984994
(t--> 0.0003819918144611187
if(arr[i] 0.00032742155525238747
step= 0.0005457025920873125
TESTCASE 0.00032742155525238747
n;i++){ 0.00032742155525238747
min= 0.0004911323328785812
=arr[i]; 0.0003819918144611187
(n<= 0.00043656207366984994
&&n 0.00032742155525238747
n<= 0.00032742155525238747
div= 0.00032742155525238747
=(long) 0.0003819918144611187
(long)((n 0.00032742155525238747
((n- 0.00032742155525238747
System.out.println(n- 0.00032742155525238747
-b 0.00032742155525238747
v= 0.0007639836289222374
12 0.0004911323328785812
%i 0.0005457025920873125
i== 0.0005457025920873125
i){ 0.0003819918144611187
1)% 0.0003819918144611187
i: 0.00043656207366984994
intmax 0.0004911323328785812
IOException{ 0.0009822646657571623
arr){ 0.0006548431105047749
arr[i+ 0.00032742155525238747
intresult 0.0003819918144611187
List< 0.0005457025920873125
<Integer 0.0004911323328785812
newArrayList 0.0003819918144611187
ArrayList< 0.00032742155525238747
wehave 0.0003819918144611187
themid 0.00032742155525238747
midelement 0.0003819918144611187
onthe 0.0008185538881309686
*Time 0.00043656207366984994
TimeComplexity: 0.00043656207366984994
=mid 0.0003819918144611187
inty 0.00032742155525238747
Numberof 0.0003819918144611187
+=1; 0.0007094133697135061
||(month 0.00043656207366984994
(month== 0.0005457025920873125
0)? 0.0003819918144611187
++i){ 0.0005457025920873125
intnumber 0.00043656207366984994
number= 0.0006002728512960436
staticlong 0.0003819918144611187
(n% 0.00043656207366984994
n/= 0.00032742155525238747
i* 0.0003819918144611187
number:"); 0.00032742155525238747
"is 0.0006548431105047749
=3 0.0003819918144611187
=3; 0.0003819918144611187
={1.0, 0.00032742155525238747
a){ 0.00032742155525238747
staticint[] 0.0007094133697135061
arr,int 0.00032742155525238747
<arr.length; 0.0006548431105047749
arr.length;i++) 0.00043656207366984994
y< 0.0003819918144611187
matrix[i- 0.00032742155525238747
doubletemp 0.00032742155525238747
doublesum 0.0003819918144611187
<i; 0.0004911323328785812
i;j++) 0.00043656207366984994
staticdouble 0.0008185538881309686
classMain 0.0007094133697135061
Main{ 0.0007094133697135061
numberis 0.00032742155525238747
-1]; 0.0006002728512960436
*x 0.0005457025920873125
x+ 0.00043656207366984994
<rows; 0.00032742155525238747
<cols; 0.00032742155525238747
2;i 0.00032742155525238747
n/ 0.00032742155525238747
thefollowing 0.0006548431105047749
1<< 0.0003819918144611187
can'tbe 0.00032742155525238747
=(float) 0.00032742155525238747
k< 0.00043656207366984994
returnsthe 0.0005457025920873125
agiven 0.0004911323328785812
(intk 0.0003819918144611187
0;k 0.00043656207366984994
lessthan 0.0005457025920873125
==0){ 0.00032742155525238747
={ 0.0007094133697135061
(intu 0.00043656207366984994
u= 0.0006548431105047749
(intv 0.0007639836289222374
<a.length; 0.00032742155525238747
row,int 0.0003819918144611187
countof 0.00032742155525238747
suchthat 0.0003819918144611187
ret= 0.0004911323328785812
n;j++) 0.0006548431105047749
x* 0.0003819918144611187
==1 0.0004911323328785812
0,0}, 0.00043656207366984994
arrayto 0.0006548431105047749
=4; 0.00043656207366984994
allthe 0.0008731241473396999
publicinterface 0.0005457025920873125
->{ 0.00032742155525238747
+this.username 0.0003819918144611187
this.username+ 0.0003819918144611187
packagedaily.tasks.job; 0.00032742155525238747
=0.0; 0.0005457025920873125
=1.0; 0.00032742155525238747
thesource 0.0003819918144611187
intl, 0.00032742155525238747
l,int 0.00032742155525238747
xis 0.0003819918144611187
bepresent 0.00032742155525238747
isless 0.00032742155525238747
{1,2, 0.0003819918144611187
!=-1) 0.00032742155525238747
Drivermethod 0.00032742155525238747
1,2, 0.0006002728512960436
//add 0.0003819918144611187
themaximum 0.00032742155525238747
is"+ 0.00043656207366984994
intans 0.0003819918144611187
andthe 0.0006548431105047749
m;i++) 0.00032742155525238747
theshortest 0.0017462482946793997
array[i]= 0.0003819918144611187
V= 0.0006002728512960436
for(int[] 0.00043656207366984994
x,int 0.00043656207366984994
1,0, 0.0003819918144611187
0,0, 0.0008731241473396999
1]= 0.00043656207366984994
newint 0.0003819918144611187
andreturns 0.0003819918144611187
:arr) 0.0004911323328785812
swapped= 0.0003819918144611187
//is 0.00032742155525238747
visited[]= 0.00032742155525238747
thegraph"); 0.00032742155525238747
theadjacency 0.0007094133697135061
thegraph 0.0008185538881309686
graphis 0.0010368349249658935
//Create 0.00032742155525238747
array){ 0.00032742155525238747
=(i 0.00032742155525238747
p){ 0.0003819918144611187
cost= 0.0012551159618008185
inty) 0.00032742155525238747
if(ae.getSource() 0.00032742155525238747
(ae.getSource()== 0.00032742155525238747
<array.length; 0.00032742155525238747
array.length;i++) 0.00032742155525238747
visited= 0.00032742155525238747
u< 0.0003819918144611187
graph= 0.00043656207366984994
edge: 0.0005457025920873125
(1<< 0.00032742155525238747
=to; 0.00032742155525238747
intfrom, 0.00043656207366984994
from,int 0.00032742155525238747
adjacencylist 0.0008731241473396999
ofvertices 0.00043656207366984994
=v; 0.00032742155525238747
//Mark 0.00032742155525238747
thevertices 0.00032742155525238747
verticesas 0.0003819918144611187
fromvertex 0.00032742155525238747
size,deleted, 0.00032742155525238747
anadjacency 0.0005457025920873125
adjacencymatrix 0.00043656207366984994
graphand 0.0003819918144611187
topologicalorder 0.00032742155525238747
howto 0.00032742155525238747
thegraph. 0.0008185538881309686
topologicalordering 0.00043656207366984994
orderingof 0.00032742155525238747
directededge 0.00032742155525238747
uto 0.00032742155525238747
thetopological 0.00043656207366984994
topologicalsort 0.0007639836289222374
0;v 0.00043656207366984994
v< 0.0004911323328785812
shortestpath 0.0012551159618008185
aDirected 0.00032742155525238747
DirectedAcyclic 0.00032742155525238747
AcyclicGraph 0.00032742155525238747
allother 0.0004911323328785812
othernodes 0.0004911323328785812
usedto 0.0006002728512960436
dist= 0.0003819918144611187
dist[start]= 0.00032742155525238747
returndist; 0.00032742155525238747
int[]ordering 0.00032742155525238747
ordering= 0.00032742155525238747
//Prints: 0.0005457025920873125
from0 0.0005457025920873125
to4 0.00032742155525238747
//Finds 0.00032742155525238747
to6 0.00032742155525238747
@authorWilliam 0.00032742155525238747
WilliamFiset, 0.00032742155525238747
Fiset,william.alexandre.fiset@gmail.com 0.00032742155525238747
//Helper 0.00032742155525238747
edgesin 0.00032742155525238747
classEdge 0.00032742155525238747
for(Edge 0.0004911323328785812
(Edgeedge 0.00043656207366984994
:edges) 0.0003819918144611187
agraph 0.00032742155525238747
graph,int 0.0004911323328785812
dist[edge.to]= 0.00043656207366984994
//Graph 0.0004911323328785812
node0 0.001091405184174625
Thisgraph 0.0003819918144611187
nodesof 0.0003819918144611187
Graphhas 0.00032742155525238747
node(s)and 0.0003819918144611187
followingedges: 0.00032742155525238747
0-> 0.0006002728512960436
->0 0.0006002728512960436
isbipartite: 0.0003819918144611187
->1 0.00043656207366984994
//1 0.00043656207366984994
1-> 0.00043656207366984994
->2 0.00043656207366984994
2-> 0.00043656207366984994
<=number_of_nodes; 0.00043656207366984994
givengraph 0.0003819918144611187
10 0.0006002728512960436
00 0.0005457025920873125
isused 0.0003819918144611187
<V; 0.0008185538881309686
V;i++) 0.0004911323328785812
{0,0, 0.0003819918144611187
id){ 0.00032742155525238747
=id; 0.00032742155525238747
Thealgorithm 0.00043656207366984994
startingnode 0.00032742155525238747
costto 0.001091405184174625
getfrom 0.001091405184174625
fromnode 0.001091405184174625
Thecost 0.0009822646657571623
is-Infinity 0.00032742155525238747
Arrays.asList(50,25, 0.0003819918144611187
25,10, 0.00043656207366984994
10,5, 0.00043656207366984994
5,1), 0.0003819918144611187
>>=1; 0.0003819918144611187
=value 0.0007639836289222374
value>> 0.0007094133697135061
&0xff; 0.0006548431105047749
=read(); 0.0004911323328785812
if(neg) 0.00032742155525238747
(Math.random()* 0.00043656207366984994
>=0 0.00032742155525238747
//{ 0.0008731241473396999
{1 0.00043656207366984994
3} 0.00043656207366984994
points){ 0.00032742155525238747
<points.size(); 0.00032742155525238747
points.size();i++) 0.00032742155525238747
))+ 0.00032742155525238747
C
/*$OpenBSD$ 0.0020195321919459852
$OpenBSD$*/ 0.0020195321919459852
*Copyright 0.0027881601157463227
Copyright(c) 0.0028032312515071135
(c)2007 0.0007083433807571739
2007Nicholas 0.0007083433807571739
NicholasMarriott 0.0020647455992283577
Marriott<nicholas.marriott@gmail.com> 0.002034603327706776
*Permission 0.0024565951290089223
Permissionto 0.0024565951290089223
touse, 0.002471666264769713
use,copy, 0.002471666264769713
copy,modify, 0.002471666264769713
modify,and 0.002471666264769713
anddistribute 0.002471666264769713
distributethis 0.002471666264769713
thissoftware 0.0025771642150952496
softwarefor 0.0024565951290089223
forany 0.0025470219435736676
*purpose 0.0024565951290089223
purposewith 0.0024565951290089223
withor 0.0026073064866168312
orwithout 0.0026223776223776225
withoutfee 0.0024565951290089223
feeis 0.0024565951290089223
ishereby 0.0024565951290089223
herebygranted, 0.0024565951290089223
granted,provided 0.0024565951290089223
providedthat 0.0026073064866168312
thatthe 0.002712804436942368
theabove 0.00274294670846395
*copyright 0.002486737400530504
copyrightnotice 0.002471666264769713
noticeand 0.002471666264769713
andthis 0.002471666264769713
thispermission 0.0024565951290089223
permissionnotice 0.0024565951290089223
noticeappear 0.002471666264769713
appearin 0.002471666264769713
inall 0.002501808536291295
allcopies. 0.0024565951290089223
*THE 0.002471666264769713
THESOFTWARE 0.002471666264769713
SOFTWAREIS 0.0026073064866168312
ISPROVIDED 0.0026073064866168312
PROVIDED"AS 0.002471666264769713
"ASIS" 0.002471666264769713
IS"AND 0.002471666264769713
ANDTHE 0.002441523993248131
THEAUTHOR 0.0049131902580178445
AUTHORDISCLAIMS 0.002441523993248131
DISCLAIMSALL 0.0024565951290089223
ALLWARRANTIES 0.0024565951290089223
*WITH 0.002441523993248131
WITHREGARD 0.0024565951290089223
REGARDTO 0.0024565951290089223
TOTHIS 0.0024565951290089223
THISSOFTWARE 0.0025922353508560404
SOFTWAREINCLUDING 0.0024565951290089223
INCLUDINGALL 0.002471666264769713
ALLIMPLIED 0.002471666264769713
IMPLIEDWARRANTIES 0.0026073064866168312
WARRANTIESOF 0.0025922353508560404
*MERCHANTABILITY 0.002441523993248131
MERCHANTABILITYAND 0.0026073064866168312
ANDFITNESS. 0.0024565951290089223
FITNESS.IN 0.0024565951290089223
INNO 0.0026073064866168312
NOEVENT 0.0026073064866168312
EVENTSHALL 0.0026073064866168312
SHALLTHE 0.0025771642150952496
AUTHORBE 0.002441523993248131
BELIABLE 0.0026073064866168312
LIABLEFOR 0.002501808536291295
*ANY 0.002562093079334459
ANYSPECIAL, 0.002471666264769713
SPECIAL,DIRECT, 0.0024565951290089223
DIRECT,INDIRECT, 0.0026073064866168312
INDIRECT,OR 0.002471666264769713
ORCONSEQUENTIAL 0.0025922353508560404
CONSEQUENTIALDAMAGES 0.002486737400530504
DAMAGESOR 0.002471666264769713
ORANY 0.002471666264769713
ANYDAMAGES 0.002471666264769713
*WHATSOEVER 0.002441523993248131
WHATSOEVERRESULTING 0.0024565951290089223
RESULTINGFROM 0.0024565951290089223
FROMLOSS 0.0024565951290089223
LOSSOF 0.0025922353508560404
OFMIND, 0.0022757414998794308
MIND,USE, 0.0022757414998794308
USE,DATA 0.0024565951290089223
DATAOR 0.0024565951290089223
ORPROFITS, 0.002441523993248131
PROFITS,WHETHER 0.0024565951290089223
*IN 0.0022757414998794308
INAN 0.0024565951290089223
ANACTION 0.002290812635640222
ACTIONOF 0.0024565951290089223
OFCONTRACT, 0.0024565951290089223
CONTRACT,NEGLIGENCE 0.0024565951290089223
NEGLIGENCEOR 0.0025922353508560404
OROTHER 0.0024565951290089223
OTHERTORTIOUS 0.0024565951290089223
TORTIOUSACTION, 0.002441523993248131
ACTION,ARISING 0.0024565951290089223
*OUT 0.0023963105859657586
OUTOF 0.0026073064866168312
OFOR 0.002305883771401013
ORIN 0.002471666264769713
INCONNECTION 0.002471666264769713
CONNECTIONWITH 0.002471666264769713
WITHTHE 0.002471666264769713
THEUSE 0.0026073064866168312
USEOR 0.002471666264769713
ORPERFORMANCE 0.002471666264769713
PERFORMANCEOF 0.002471666264769713
OFTHIS 0.0026073064866168312
THISSOFTWARE. 0.002441523993248131
#include<sys/types.h> 0.0023510971786833857
#include<ctype.h> 0.0003617072582589824
#include<stdlib.h> 0.0020647455992283577
#include<string.h> 0.0018989631058596577
#include<unistd.h> 0.0008741258741258741
#include"tmux.h" 0.001989389920424403
fromthe 0.0005576320231492645
staticvoid 0.012237762237762238
constchar 0.010579937304075235
char*, 0.0007987701953219194
tty*, 0.0004672052085845189
*,const 0.0008741258741258741
staticstruct 0.0015071135760790933
staticint 0.004099348926935134
*,int); 0.0003164938509766096
void*); 0.0003617072582589824
structmouse_event 0.0006179165661924283
keys.*/ 0.0003466361224981915
key_codekey; 0.00025620930793344586
staticconst 0.0025319508078128767
conststruct 0.007219074029418857
={ 0.009645526886906198
usethe 0.00028635157945502775
inthe 0.001386544489992766
isnot 0.0003315649867374005
enumtty_code_code 0.00028635157945502775
/*Add 0.00042199180130214614
tree.*/ 0.0003014227152158187
tty*tty, 0.0012961176754280202
*tty,const 0.000889197009886665
char*s, 0.0006179165661924283
key_codekey) 0.0003014227152158187
==NULL) 0.010293585724620207
NULL){ 0.007867132867132868
}else 0.00856040511212925
else{ 0.005199541837472872
tothe 0.0012659754039064384
=xcalloc(1, 0.0012961176754280202
xcalloc(1,sizeof 0.0011755485893416929
/*Find 0.0009645526886906198
Findthe 0.00042199180130214614
thenext 0.0004672052085845189
if(*s 0.0005727031589100555
(*s== 0.0003014227152158187
/*Move 0.0006028454304316373
string.*/ 0.0004672052085845189
/*If 0.0008138413310827104
Ifthis 0.0003315649867374005
thisis 0.0004069206655413552
isthe 0.0005727031589100555
theend 0.0003617072582589824
endof 0.000452134072823728
ofthe 0.0021099590065107305
=='\0') 0.0010700506390161563
'\0'){ 0.000904268145647456
forthe 0.0004973474801061008
character.*/ 0.0003164938509766096
elseif 0.006962864721485411
table.*/ 0.00043706293706293706
tty*tty) 0.0003014227152158187
u_inti, 0.0004822763443453099
char*s; 0.0003466361224981915
structoptions_entry 0.0008289124668435014
options_entry*o; 0.0004672052085845189
structoptions_array_item 0.0003617072582589824
!=NULL) 0.011981552929828792
=NULL; 0.0049131902580178445
for(i 0.002773088979985532
(i= 0.002773088979985532
=0; 0.012493971545695684
0;i 0.002215456956836267
i< 0.0025922353508560404
i++){ 0.0018537496985772848
for(j 0.00025620930793344586
(j= 0.00025620930793344586
=2; 0.00025620930793344586
j< 0.0002712804436942368
key= 0.0028785869303110685
s= 0.0019140342416204485
!='\0') 0.0014317578972751386
o= 0.0009344104171690378
if(o 0.0006179165661924283
a= 0.0004069206655413552
i= 0.00042199180130214614
/*Free 0.0005274897516276826
char*buf, 0.0003164938509766096
*buf,size_t 0.00039184952978056425
size_tlen, 0.0003617072582589824
*size= 0.0003164938509766096
if(len 0.000678201109235592
(len== 0.00043706293706293706
==0) 0.007927417410176031
return(NULL); 0.005696889317578973
Ifthe 0.0006028454304316373
thecurrent 0.0008590547383650832
==0 0.001959247648902821
0|| 0.0016276826621654209
==NULL 0.0031498673740053052
NULL&& 0.004159633469978298
thefollowing 0.0004672052085845189
partof 0.0003014227152158187
structclient 0.0035869303110682422
client*c 0.0012509042681456476
*c= 0.0012509042681456476
=tty->client; 0.00039184952978056425
structutf8_data 0.000678201109235592
enumutf8_state 0.0002712804436942368
u_inti; 0.0012056908608632747
/*Is 0.0006480588377140101
Isthis 0.0006179165661924283
thisa 0.00028635157945502775
!=NULL 0.0035869303110682422
!=NULL); 0.0002712804436942368
return(1); 0.0029840848806366046
return(0); 0.006962864721485411
if(more 0.00025620930793344586
==UTF8_MORE) 0.00039184952978056425
return(-1); 0.003812997347480106
=1; 0.004084277791174343
structtimeval 0.0005877742946708464
=0, 0.0014468290330359296
structkey_event 0.00028635157945502775
/*Get 0.0015975403906438388
buf= 0.0010097660959729926
len= 0.0007686279238003376
case0: 0.0006480588377140101
case-1: 0.00042199180130214614
case1: 0.000452134072823728
n= 0.0020647455992283577
if(n 0.0015523269833614662
(n== 0.0004973474801061008
==1) 0.0006028454304316373
*If 0.0011604774535809018
1){ 0.0008439836026042923
fora 0.0005274897516276826
+1, 0.0016126115264046299
-1, 0.000693272244996383
0){ 0.0053502531950807815
{/* 0.0003315649867374005
if(key 0.0008741258741258741
(key& 0.00028635157945502775
itis 0.0007083433807571739
size= 0.0011604774535809018
ifthe 0.000452134072823728
2){ 0.00025620930793344586
(tty->flags& 0.0003014227152158187
/*Remove 0.00028635157945502775
/*Check 0.0009494815529298288
(key== 0.0004672052085845189
=xmalloc(sizeof 0.00043706293706293706
callback.*/ 0.0003617072582589824
intfd, 0.0006329877019532192
fd,__unused 0.0005274897516276826
__unusedshort 0.0005274897516276826
shortevents, 0.0004672052085845189
events,void 0.00037677839401977333
void*data) 0.0007083433807571739
structtty 0.0003617072582589824
tty*tty 0.00025620930793344586
*tty= 0.00025620930793344586
=data; 0.0007987701953219194
isa 0.0005124186158668917
if(end 0.00042199180130214614
/*Copy 0.0002712804436942368
+2, 0.0003164938509766096
='\0'; 0.001823607427055703
+1; 0.0014769713045575115
case2: 0.00039184952978056425
!=0) 0.005335182059319991
x,y, 0.00039184952978056425
x= 0.0006329877019532192
y= 0.0004822763443453099
if(i 0.0004672052085845189
if(x 0.00025620930793344586
if(ch 0.00025620930793344586
1|| 0.0005274897516276826
state.*/ 0.0003617072582589824
-1] 0.000693272244996383
!=0 0.0009494815529298288
0&& 0.0020195321919459852
tobe 0.00037677839401977333
copy= 0.0004069206655413552
+1); 0.0011001929105377381
/*Convert 0.0003014227152158187
out= 0.00039184952978056425
==-1) 0.002682662165420786
-1){ 0.001145406317820111
/*Create 0.0005124186158668917
Createa 0.00025620930793344586
anew 0.0004973474801061008
0}, 0.001582469254883048
toa 0.0004973474801061008
-1; 0.001959247648902821
-1) 0.0017934651555341211
cp= 0.0007083433807571739
1]= 0.0003014227152158187
(c)2009 0.000678201109235592
2009Nicholas 0.0005274897516276826
*The 0.0003466361224981915
listof 0.00037677839401977333
awindow 0.0002712804436942368
staticu_int 0.0003315649867374005
*,struct 0.0015372558476006752
structlayout_cell 0.0010097660959729926
*,u_int, 0.000452134072823728
u_int,u_int, 0.0004069206655413552
lc= 0.00037677839401977333
=UINT_MAX; 0.0002712804436942368
layout_cell*lc, 0.00037677839401977333
type= 0.0004069206655413552
TAILQ_FOREACH(lcchild,&lc->cells, 0.0003014227152158187
&lc->cells,entry) 0.0003014227152158187
n+ 0.0003164938509766096
u_intx, 0.0003315649867374005
entry){ 0.0018537496985772848
last= 0.0003164938509766096
u_intsx, 0.000663129973474801
sx,u_int 0.0005124186158668917
u_intsy, 0.0002712804436942368
=sx; 0.0003617072582589824
=sy; 0.0003164938509766096
structwindow_pane 0.004234989148782252
window_pane*wp) 0.0007686279238003376
=wp; 0.00037677839401977333
if(type 0.0004069206655413552
(type== 0.00039184952978056425
cell.*/ 0.0004822763443453099
if(lc->type 0.00028635157945502775
(lc->type== 0.00025620930793344586
==LAYOUT_LEFTRIGHT) 0.0002712804436942368
window*w) 0.000678201109235592
window*w, 0.0007987701953219194
*w,struct 0.00037677839401977333
next= 0.0002712804436942368
needto 0.00039184952978056425
thepane 0.0004973474801061008
Thisis 0.0003617072582589824
*the 0.0005274897516276826
if(status 0.0003014227152158187
(status== 0.00028635157945502775
cells.*/ 0.00025620930793344586
window_pane*wp; 0.0011001929105377381
status= 0.0003164938509766096
TAILQ_FOREACH(wp,&w->panes, 0.00039184952978056425
&w->panes,entry) 0.0005124186158668917
NULL|| 0.0023963105859657586
-1); 0.0006179165661924283
numberof 0.0003466361224981915
ina 0.00025620930793344586
froma 0.00037677839401977333
available= 0.0003014227152158187
>0) 0.0012358331323848565
thelast 0.00039184952978056425
thereis 0.00042199180130214614
list.*/ 0.0003466361224981915
0,0); 0.0008138413310827104
u_intsy) 0.0002712804436942368
thewindow 0.0003315649867374005
andthe 0.0004069206655413552
thenew 0.0005124186158668917
=sx 0.0002712804436942368
sx- 0.0006480588377140101
<0 0.0002712804436942368
if(sx 0.0004822763443453099
sy- 0.0007535567880395467
if(sy 0.0003617072582589824
window_pane*wp, 0.0007384856522787557
Workout 0.0002712804436942368
pane.*/ 0.0009796238244514106
if(size 0.0005576320231492645
do{ 0.000452134072823728
}while 0.000452134072823728
+1) 0.0003164938509766096
Checkif 0.0003164938509766096
idx= 0.0007384856522787557
if(idx 0.00039184952978056425
+1 0.0008439836026042923
intflags) 0.00039184952978056425
sx,sy, 0.0006179165661924283
(flags& 0.000663129973474801
atthe 0.0004672052085845189
sx= 0.0009796238244514106
sy= 0.0008289124668435014
<0) 0.0005274897516276826
if(flags 0.0005576320231492645
-1 0.0005727031589100555
1- 0.00042199180130214614
structwindow 0.0016276826621654209
window*w 0.0006480588377140101
*w= 0.0006480588377140101
=wp->window; 0.0003014227152158187
#include<time.h> 0.0003164938509766096
structscreen 0.002938871473354232
window_mode_entry*, 0.000889197009886665
structcmd_find_state 0.002049674463467567
structargs 0.0014317578972751386
window_mode_entry*); 0.00042199180130214614
client*, 0.0002712804436942368
structsession 0.0034060766819387508
structwinlink 0.002305883771401013
NULL}, 0.0017633228840125393
NULL} 0.0004069206655413552
.name= 0.003134796238244514
.key= 0.0014619001687967204
client*c; 0.000693272244996383
item= 0.0005274897516276826
constvoid 0.0003617072582589824
result= 0.0006329877019532192
=-1; 0.001356402218471184
*data= 0.0022003858210754763
=modedata; 0.00037677839401977333
TAILQ_FOREACH(c,&clients, 0.0005877742946708464
&clients,entry) 0.0008138413310827104
if(c->session 0.0005124186158668917
(c->session== 0.00025620930793344586
(c->flags& 0.001341331082710393
=c; 0.0005425608873884736
c= 0.0003164938509766096
c,NULL, 0.00043706293706293706
NULL,NULL, 0.000693272244996383
NULL,NULL); 0.0006480588377140101
text= 0.0003014227152158187
structscreen_write_ctx 0.000889197009886665
screen_write_ctx*ctx, 0.0009946949602122016
*ctx,u_int 0.000678201109235592
*item= 0.00042199180130214614
=itemdata; 0.00025620930793344586
screen*s 0.0012961176754280202
*s= 0.002652519893899204
=ctx->s; 0.000693272244996383
cx= 0.000452134072823728
cy= 0.0005274897516276826
wp= 0.0008741258741258741
lines= 0.0003315649867374005
cy+ 0.00043706293706293706
sx,sy 0.00025620930793344586
0,0, 0.0018989631058596577
client*c, 0.002079816734989149
window_pane*wp 0.0016578249336870027
*wp= 0.0017633228840125393
structwindow_mode_entry 0.001582469254883048
window_mode_entry*wme; 0.0003315649867374005
wme= 0.0003014227152158187
=TAILQ_FIRST(&wp->modes); 0.00039184952978056425
if(wme 0.0003014227152158187
window_mode_entry*wme, 0.0009645526886906198
__unusedstruct 0.00043706293706293706
cmd_find_state*fs, 0.0004973474801061008
=wme->wp; 0.0004973474801061008
data= 0.0003014227152158187
return(s); 0.0004069206655413552
window_mode_entry*wme) 0.000452134072823728
=wme->data; 0.001808536291294912
*wme,u_int 0.0002712804436942368
sx,sy); 0.00028635157945502775
|=PANE_REDRAW; 0.00043706293706293706
if(item 0.0004973474801061008
(item== 0.0003164938509766096
session*s, 0.0009344104171690378
winlink*wl, 0.00043706293706293706
wp->flags|= 0.0005727031589100555
char*); 0.0006329877019532192
NULL,NULL 0.000904268145647456
window_pane* 0.0003014227152158187
client*c) 0.0008590547383650832
structenviron_entry 0.0003315649867374005
if(c 0.001145406317820111
(c== 0.0005877742946708464
!=-1 0.0004672052085845189
-1&& 0.0005425608873884736
if(wp 0.0014769713045575115
(wp== 0.0010700506390161563
(wp!= 0.000452134072823728
*c,struct 0.0008289124668435014
session.*/ 0.00039184952978056425
session*s) 0.0004672052085845189
if(s 0.001341331082710393
(s!= 0.0005727031589100555
*s,struct 0.0004822763443453099
sessions,&sessions) 0.0003164938509766096
&sessions){ 0.00025620930793344586
window.*/ 0.0003315649867374005
session*s; 0.0006028454304316373
1,sizeof 0.000452134072823728
=s; 0.0005727031589100555
gotofail; 0.000904268145647456
ifit 0.0002712804436942368
wl= 0.0004822763443453099
if(wl 0.0005877742946708464
(wl== 0.0004069206655413552
fs->wl= 0.00039184952978056425
fs->idx= 0.0003014227152158187
char* 0.002230528092597058
char*s) 0.0003014227152158187
!=NULL; 0.0003315649867374005
log_debug("%s:%s", 0.0003466361224981915
%s",__func__, 0.000663129973474801
client.*/ 0.0005576320231492645
(c!= 0.000452134072823728
=c->session; 0.0006179165661924283
0)== 0.00037677839401977333
s,wl, 0.0004672052085845189
fs->w= 0.00043706293706293706
=fs->wl->window; 0.0003014227152158187
winlink*wl; 0.0007836990595611285
withthe 0.0003315649867374005
1,1, 0.00037677839401977333
if(errstr 0.0003466361224981915
RB_FOREACH(wl,winlinks, 0.0003617072582589824
fs->wp= 0.00042199180130214614
/*Clear 0.0004822763443453099
0,sizeof 0.0005425608873884736
!=-1) 0.001371473354231975
(c->session!= 0.00025620930793344586
structcmdq_item 0.0032855075958524234
cmdq_item*item, 0.0007987701953219194
=NULL, 0.0006179165661924283
flags|= 0.0004822763443453099
cmdq_error(item,"no 0.00037677839401977333
gotoerror; 0.0005576320231492645
gotofound; 0.00028635157945502775
/*Set 0.0009344104171690378
cmd_find_statefs; 0.0003466361224981915
=cmdq_get_client(item); 0.0003014227152158187
found= 0.0010549795032553653
#include<errno.h> 0.0005727031589100555
staticchar 0.0012358331323848565
char*value; 0.0003466361224981915
structformat_tree 0.0010549795032553653
window*w; 0.0004822763443453099
structpaste_buffer 0.0005124186158668917
paste_buffer*pb; 0.00025620930793344586
intflags; 0.0003014227152158187
format_tree*ft; 0.0004672052085845189
NULL,/* 0.0006329877019532192
format_tree*ft) 0.0025470219435736676
char*fmt, 0.0006480588377140101
va_listap; 0.0005274897516276826
va_start(ap,fmt); 0.0004822763443453099
fmt,ap); 0.0006329877019532192
structevbuffer 0.0004069206655413552
line= 0.00037677839401977333
size_tlen; 0.0004069206655413552
!='\0' 0.0003164938509766096
expanded= 0.0003315649867374005
*fmt,...) 0.0004672052085845189
/*Callback 0.002441523993248131
Callbackfor 0.0024113817217265494
void* 0.0026374487581384133
return(xstrdup("")); 0.00025620930793344586
*cp= 0.0003617072582589824
return(value); 0.00037677839401977333
session*s 0.00113033518205932
(s== 0.0007987701953219194
xsnprintf(tmp,sizeof 0.0004069206655413552
sizeoftmp, 0.00042199180130214614
if(ft->wl 0.0003466361224981915
return(xstrdup("0")); 0.0007686279238003376
w= 0.0004672052085845189
cmd= 0.0003164938509766096
if(cmd 0.0002712804436942368
value= 0.0014317578972751386
structgrid 0.0007384856522787557
structgrid_line 0.0006329877019532192
grid_line*gl; 0.00043706293706293706
gd->hsize+ 0.0006028454304316373
gl= 0.0005124186158668917
*sizeof 0.0003014227152158187
=gd->hsize 0.0003164938509766096
structgrid_cell 0.002516879672052086
grid_cellgc; 0.0007384856522787557
structsession_group 0.00037677839401977333
flag= 0.00042199180130214614
==0); 0.00025620930793344586
&GRID_FLAG_PADDING) 0.00042199180130214614
0)!= 0.0002712804436942368
if(ft->wp 0.0007083433807571739
(ft->wp!= 0.000678201109235592
return(xstrdup("1")); 0.0007234145165179648
return(format_printf("%u", 0.0005124186158668917
if(ft->c 0.00037677839401977333
(ft->c!= 0.00037677839401977333
&CLIENT_CONTROL) 0.0003466361224981915
char*name; 0.0005877742946708464
name= 0.0007686279238003376
if(ft->s 0.0003164938509766096
(ft->s!= 0.0002712804436942368
format_tree*ft, 0.00028635157945502775
cmdq_item*item) 0.0012509042681456476
ft= 0.0005274897516276826
=item; 0.0004069206655413552
void*arg) 0.00043706293706293706
if(value 0.0003617072582589824
(value== 0.00028635157945502775
tv= 0.0002712804436942368
sizeofs, 0.00028635157945502775
=xstrdup(""); 0.0002712804436942368
!='\0'; 0.00025620930793344586
='\\'; 0.00025620930793344586
1&& 0.0006329877019532192
(o== 0.0005124186158668917
(modifiers& 0.00025620930793344586
(errstr!= 0.0003164938509766096
for(; 0.0009193392814082469
'\0'&& 0.0003315649867374005
NULL,0); 0.0004973474801061008
end= 0.0004973474801061008
end- 0.00028635157945502775
=""; 0.00028635157945502775
flags= 0.0004973474801061008
maybe 0.0003164938509766096
width= 0.000693272244996383
modifiers|= 0.0003164938509766096
gotodone; 0.00037677839401977333
new= 0.00028635157945502775
left= 0.0002712804436942368
if(width 0.0004973474801061008
*buf= 0.0003014227152158187
if(*ptr 0.0003315649867374005
return(buf); 0.0003164938509766096
c,s, 0.0003014227152158187
wl,wp); 0.00028635157945502775
=format_expand(ft, 0.00043706293706293706
client*tc 0.00039184952978056425
*tc= 0.0004672052085845189
=cmdq_get_target_client(item); 0.0003466361224981915
pb= 0.0002712804436942368
grid*gd, 0.0008741258741258741
*gd,u_int 0.0007836990595611285
for(;;) 0.00028635157945502775
(;;){ 0.00028635157945502775
&GRID_LINE_WRAPPED) 0.00028635157945502775
+gd->sy 0.0002712804436942368
gd->sy- 0.0003164938509766096
structevent_base 0.0003315649867374005
staticenum 0.003360863274656378
enumcmd_retval 0.002305883771401013
cmd*, 0.0010399083674945745
cmdq_item*); 0.0009494815529298288
structcmd_entry 0.0028484446587894864
.alias= 0.0013111888111888112
.args= 0.0013111888111888112
1}, 0.0008138413310827104
.usage= 0.0013111888111888112
.flags= 0.0017181094767301664
.exec= 0.0013111888111888112
cmd*self, 0.0010549795032553653
*self,struct 0.0010399083674945745
args*args 0.0010097660959729926
*args= 0.0010097660959729926
=cmd_get_args(self); 0.0009645526886906198
cmd_find_state*target 0.000678201109235592
*target= 0.0007083433807571739
=cmdq_get_target(item); 0.000678201109235592
=args_get(args, 0.0009344104171690378
return(CMD_RETURN_NORMAL); 0.0022003858210754763
__unusedint 0.00025620930793344586
if(c->flags 0.0009344104171690378
#include<fcntl.h> 0.0003315649867374005
=CMD_AFTERHOOK, 0.0005274897516276826
0,0 0.0007384856522787557
*c,const 0.0003164938509766096
return(CMD_RETURN_ERROR); 0.0015372558476006752
if(cmd_get_entry(self) 0.0002712804436942368
(cmd_get_entry(self)== 0.00037677839401977333
cmdq_print(item,"%s", 0.0003164938509766096
if(args_has(args, 0.003134796238244514
(c)2008 0.0002712804436942368
.target= 0.000889197009886665
{'t', 0.0009193392814082469
#include<stdio.h> 0.00028635157945502775
structevent 0.00025620930793344586
char**cause) 0.0004069206655413552
errno= 0.00039184952978056425
if(cause 0.0004973474801061008
(cause!= 0.0004822763443453099
timevaltv 0.00025620930793344586
*cause= 0.00042199180130214614
c->flags|= 0.0008439836026042923
(n!= 0.0004973474801061008
if(errno 0.00028635157945502775
/*Handle 0.0005425608873884736
structkey_binding 0.000452134072823728
structkey_table 0.0004069206655413552
char*name, 0.0007987701953219194
table= 0.0003466361224981915
=xstrdup(name); 0.0002712804436942368
bd= 0.0003164938509766096
char*name) 0.000452134072823728
"bind-N 0.0012509042681456476
-N'Select 0.0003315649867374005
send-X 0.0018386785628164938
line.*/ 0.0006329877019532192
"bind-Tcopy-mode 0.0010700506390161563
command-prompt-Np'(repeat)' 0.0002712804436942368
'send-N 0.0002712804436942368
-N\"%%%\"'", 0.0002712804436942368
"bind-Tcopy-mode-vi 0.0012509042681456476
structcmdq_state 0.00028635157945502775
(~c->flags& 0.0003315649867374005
&cause)!= 0.00025620930793344586
cmdq_error(item,"%s", 0.00028635157945502775
"%s",cause); 0.00025620930793344586
char*path; 0.0002712804436942368
template= 0.0003014227152158187
thestatus 0.00043706293706293706
"\ 0.00028635157945502775
0,1 0.0003164938509766096
CMD_TARGET_PANE_USAGE" 0.00025620930793344586
't',CMD_FIND_PANE, 0.0004672052085845189
CMD_FIND_PANE,0 0.0004069206655413552
=arg; 0.00039184952978056425
=target->s; 0.00037677839401977333
winlink*wl 0.000452134072823728
*wl= 0.000452134072823728
=target->wl; 0.0003014227152158187
%s",cause); 0.00028635157945502775
if(args->argc 0.00039184952978056425
theclient 0.0002712804436942368
shouldbe 0.00025620930793344586
=args_has(args, 0.0003617072582589824
onthe 0.0005274897516276826
*- 0.00028635157945502775
structbufferevent 0.00037677839401977333
screen_write_ctxctx; 0.0003617072582589824
structinput_state 0.0003164938509766096
input_ctx*); 0.000452134072823728
structinput_transition 0.0005877742946708464
statedefinition. 0.00025620930793344586
definition.*/ 0.00025620930793344586
statetable. 0.00025620930793344586
{0x00, 0.0002712804436942368
input_c0_dispatch,NULL 0.0003164938509766096
{-1, 0.0002712804436942368
-1,-1, 0.00025620930793344586
-1,NULL, 0.0005727031589100555
log_debug("%s:%s 0.0002712804436942368
input_ctx*ictx) 0.0004822763443453099
&grid_default_cell,sizeof 0.0004973474801061008
screen_write_ctx*sctx 0.00028635157945502775
*sctx= 0.00028635157945502775
=&ictx->ctx; 0.00028635157945502775
=s->cy; 0.00028635157945502775
screen.*/ 0.0003617072582589824
input_ctx*ictx, 0.00028635157945502775
data.*/ 0.00025620930793344586
==-1 0.00039184952978056425
-1|| 0.0002712804436942368
screen*s, 0.0003466361224981915
retval= 0.0003466361224981915
if(s->cx 0.0003315649867374005
screen_size_x(s)- 0.0004973474801061008
if(cx 0.00028635157945502775
=input_get(ictx, 0.0004822763443453099
input_get(ictx,0, 0.0003466361224981915
0,1, 0.0005274897516276826
1,1); 0.00042199180130214614
>0 0.00037677839401977333
==1 0.00042199180130214614
0)){ 0.0003014227152158187
gc->fg= 0.0003164938509766096
gc->bg= 0.0003164938509766096
r,g, 0.0002712804436942368
gc->attr&= 0.0003014227152158187
gc->attr|= 0.00028635157945502775
!=1) 0.0002712804436942368
if(name 0.0002712804436942368
if(!args_has(args, 0.0003315649867374005
structoptions 0.0007987701953219194
structoptions_table_entry 0.0003315649867374005
options*oo, 0.0003315649867374005
*oo,const 0.00028635157945502775
{.name 0.0017181094767301664
options*oo 0.00028635157945502775
*oo= 0.0004672052085845189
longlong 0.0003014227152158187
args*args, 0.0002712804436942368
scope= 0.0004069206655413552
if(oe 0.0003315649867374005
(oe!= 0.00025620930793344586
inti; 0.00025620930793344586
%u,%u",__func__, 0.0003014227152158187
wp->xoff+ 0.0002712804436942368
wp->yoff+ 0.0003014227152158187
top= 0.0002712804436942368
/2; 0.00039184952978056425
if(strcasecmp(s, 0.0004069206655413552
1,0); 0.0005425608873884736
structargs_entry 0.0002712804436942368
tmp= 0.0006179165661924283
gotoout; 0.0014920424403183023
grid*gd 0.00039184952978056425
*gd= 0.00039184952978056425
return(KEYC_UNKNOWN); 0.0002712804436942368
=screen_size_y(s) 0.0003164938509766096
screen_size_y(s)- 0.0006329877019532192
grid_cell*gc) 0.0003014227152158187
u_intpx, 0.001115264046298529
px,u_int 0.0006028454304316373
if(py 0.0005877742946708464
thecursor 0.00037677839401977333
if(px 0.000678201109235592
(py== 0.00025620930793344586
xx= 0.0005425608873884736
lines.*/ 0.0002712804436942368
grid_cell*gc, 0.0003014227152158187
if(s->cy 0.00025620930793344586
px= 0.0011001929105377381
py= 0.0010097660959729926
py+ 0.0005124186158668917
1+ 0.0002712804436942368
u_intpy, 0.0008439836026042923
=py; 0.0003617072582589824
statusline 0.0003315649867374005
position.*/ 0.00025620930793344586
px,py, 0.0009796238244514106
structclient_file 0.00039184952978056425
/*Write 0.000452134072823728
error= 0.00028635157945502775
if(datalen 0.0004672052085845189
(datalen!= 0.00025620930793344586
structmode_tree_item 0.000452134072823728
mti= 0.0003164938509766096
sizeofgc); 0.00028635157945502775
start= 0.0003315649867374005
:"", 0.0002712804436942368
#include"compat.h" 0.0005727031589100555
return(p1); 0.0003315649867374005
return(p2); 0.0003315649867374005
{{ 0.0003014227152158187
!=0; 0.0007836990595611285
window_mode_entry*wme 0.0012207619966240655
*wme= 0.0012207619966240655
u_intnp 0.0006179165661924283
np= 0.0006329877019532192
(;np 0.0007234145165179648
np!= 0.000678201109235592
0;np--) 0.000678201109235592
structtty_ctx 0.0009494815529298288
__func__,c->name, 0.00037677839401977333
if(tty_term_has(tty->term, 0.0003014227152158187
tty_ctx*ctx) 0.00037677839401977333
u_intbg) 0.0006179165661924283
py,u_int 0.0004069206655413552
u_intnx, 0.0003315649867374005
py- 0.00037677839401977333
visible.*/ 0.000452134072823728
notvisible. 0.0003315649867374005
at%u,%u", 0.0003014227152158187
px,py); 0.00037677839401977333
if(nx 0.0003617072582589824
px+ 0.0004672052085845189
for(yy 0.00025620930793344586
(yy= 0.00025620930793344586
yy< 0.0002712804436942368
nx= 0.0002712804436942368
width+= 0.00028635157945502775
ny= 0.00039184952978056425
=bg; 0.0003315649867374005
=grid_view_y(gd, 0.0002712804436942368
{.key 0.001386544489992766
.data= 0.001386544489992766
structwindow_tree_modedata 0.00025620930793344586
cx+ 0.0003466361224981915
/2, 0.00025620930793344586
gotochanged; 0.0002712804436942368
*dst++= 0.0005727031589100555
*dst= 0.00028635157945502775
},/* 0.0010248372317337834
10,10, 0.000452134072823728
9,9, 0.0004672052085845189
{"dark 0.00028635157945502775
{"light 0.00025620930793344586
/*Draw 0.0003617072582589824
*new_key= 0.00025620930793344586
structtty_feature 0.0003014227152158187
structcontrol_pane 0.00028635157945502775
structcontrol_state 0.0003164938509766096
control_state*cs 0.00028635157945502775
*cs= 0.0003014227152158187
=c->control_state; 0.00028635157945502775
structwindow_customize_itemdata 0.00039184952978056425
structwindow_customize_modedata 0.00028635157945502775
if(!screen_write_text(ctx, 0.0002712804436942368
cx,sx, 0.00025620930793344586
-(s->cy 0.00028635157945502775
(s->cy- 0.00025620930793344586
-cy), 0.00025620930793344586
externconst 0.001341331082710393
if(ny 0.0004069206655413552
values[n++]= 0.0003315649867374005
{1,1,1,1,1 0.00039184952978056425
1,1,1,1,1}, 0.00028635157945502775
=&data->screen; 0.00028635157945502775
screen_write_collect_flush(ctx,0, 0.0002712804436942368
0,__func__); 0.00028635157945502775
tty_ctxttyctx; 0.00025620930793344586
screen_write_initctx(ctx,&ttyctx, 0.0003315649867374005
if(where 0.002230528092597058
(where== 0.002230528092597058
==PANE) 0.00037677839401977333
==BORDER) 0.00037677839401977333
==STATUS) 0.0003617072582589824
==STATUS_LEFT) 0.0003617072582589824
==STATUS_RIGHT) 0.0003617072582589824
==STATUS_DEFAULT) 0.0003617072582589824
=1, 0.00028635157945502775
0,3, 0.0003315649867374005
3,1 0.0003315649867374005
format_draw_put(octx,ocx, 0.00039184952978056425
ocx,ocy, 0.0005877742946708464
available- 0.0002712804436942368
enumwindow_copy_cmd_action 0.0011755485893416929
structwindow_copy_mode_data 0.0015975403906438388
window_copy_mode_data*data 0.0014769713045575115
data->cx= 0.00028635157945502775
data->cy= 0.00037677839401977333
=screen_hsize(data->backing) 0.0006028454304316373
=data->cx; 0.000663129973474801
=data->cy; 0.0003164938509766096
screen_hsize(data->backing)+ 0.0004973474801061008
+data->cy 0.0007234145165179648
data->cy- 0.0007686279238003376
-data->oy; 0.0008138413310827104
=data->backing; 0.00028635157945502775
=window_copy_find_length(wme, 0.0003617072582589824
window_copy_cmd_state*cs) 0.001115264046298529
=cs->wme; 0.0010851217747769471
return(WINDOW_COPY_CMD_REDRAW); 0.0003466361224981915
return(WINDOW_COPY_CMD_NOTHING); 0.0008289124668435014
=wme->prefix; 0.0005877742946708464
0,WINDOW_COPY_CMD_CLEAR_ALWAYS, 0.0003466361224981915
0,WINDOW_COPY_CMD_CLEAR_EMACS_ONLY, 0.00042199180130214614
{TTYCODE_STRING, 0.0032855075958524234
.type= 0.0016126115264046299
.scope= 0.0016126115264046299
=OPTIONS_TABLE_SESSION, 0.0007234145165179648
.default_str= 0.0007234145165179648
.separator= 0.00037677839401977333
=OPTIONS_TABLE_WINDOW, 0.0005274897516276826
=OPTIONS_TABLE_SERVER, 0.00025620930793344586
.default_num= 0.0008741258741258741
.text= 0.001567398119122257
=OPTIONS_TABLE_STRING, 0.000693272244996383
=",", 0.0003315649867374005
=OPTIONS_TABLE_FLAG, 0.00025620930793344586
="Whether 0.00028635157945502775
=OPTIONS_TABLE_CHOICE, 0.0002712804436942368
.choices= 0.0002712804436942368
=OPTIONS_TABLE_IS_STYLE, 0.0002712804436942368
Exp$ 0.00028635157945502775
$*/ 0.00028635157945502775
abovecopyright 0.00025620930793344586
notice,this 0.0002712804436942368
thislist 0.0002712804436942368
ofconditions 0.0002712804436942368
conditionsand 0.0002712804436942368
BUTNOT 0.0002712804436942368
NOTLIMITED 0.00025620930793344586
LIMITEDTO, 0.00025620930793344586
OFUSE, 0.0003164938509766096
WHETHERIN 0.0003164938509766096
OFTHE 0.00028635157945502775
/*$OpenBSD: 0.00025620930793344586
*OR 0.0002712804436942368
structibuf 0.0002712804436942368
*astate= 0.0004069206655413552
=S_GROUND; 0.0003014227152158187
Swift
/*Part 0.004337539432176656
Partof 0.006834910620399579
ofCosmos 0.0069663512092534175
Cosmosby 0.0069663512092534175
byOpenGenus 0.0069663512092534175
OpenGenusFoundation 0.0069663512092534175
Foundation*/ 0.004337539432176656
publicstruct 0.0013144058885383807
structQueue<T> 0.0002628811777076761
Queue<T>{ 0.0002628811777076761
privatevar 0.002103049421661409
varelements: 0.0005257623554153522
elements:Array<T>; 0.0002628811777076761
init(){ 0.0011829652996845426
self.elements= 0.0010515247108307045
=[]; 0.0002628811777076761
init(arrayLiteralelements: 0.0005257623554153522
elements:T...) 0.0005257623554153522
T...){ 0.0005257623554153522
=elements 0.0005257623554153522
publicvar 0.005389064143007361
varfront: 0.0002628811777076761
front:T? 0.0002628811777076761
T?{ 0.0017087276550998948
returnelements.first 0.0002628811777076761
varback: 0.0002628811777076761
back:T? 0.0002628811777076761
returnelements.last 0.0005257623554153522
varsize: 0.0006572029442691904
size:Int 0.0005257623554153522
Int{ 0.005257623554153523
returnelements.count 0.0005257623554153522
varisEmpty: 0.0010515247108307045
isEmpty:Bool 0.0010515247108307045
Bool{ 0.0048633017875920085
returnelements.isEmpty 0.0005257623554153522
mutatingpublic 0.0013144058885383807
publicfunc 0.007754994742376446
funcenqueue(_ 0.0002628811777076761
enqueue(_element: 0.0002628811777076761
element:T) 0.0009200841219768665
T){ 0.001840168243953733
funcdequeue() 0.0002628811777076761
dequeue()-> 0.0002628811777076761
->T? 0.0009200841219768665
returnself.isEmpty 0.0005257623554153522
self.isEmpty? 0.0005257623554153522
?nil 0.0005257623554153522
nil: 0.0005257623554153522
:elements.removeFirst() 0.0002628811777076761
//Reverse 0.0002628811777076761
Reversemethod 0.0002628811777076761
methodimplementation 0.0002628811777076761
funcprintElements() 0.0002628811777076761
printElements(){ 0.0002628811777076761
forx 0.0002628811777076761
xin 0.0003943217665615142
print(x,terminator: 0.0002628811777076761
terminator:" 0.0002628811777076761
"") 0.0002628811777076761
funcreverse() 0.0003943217665615142
reverse(){ 0.0003943217665615142
functest() 0.0011829652996845426
test(){ 0.0011829652996845426
varqueue 0.0002628811777076761
queue= 0.0003943217665615142
1,3, 0.0002628811777076761
3,2, 0.0002628811777076761
2,5) 0.0002628811777076761
//Part 0.0024973711882229233
Comparable,Value> 0.0002628811777076761
Value>{ 0.0002628811777076761
fileprivatevar 0.0010515247108307045
values= 0.0003943217665615142
varchildren: 0.0002628811777076761
children:[BTreeNode]? 0.0002628811777076761
varisLeaf: 0.0003943217665615142
isLeaf:Bool 0.0003943217665615142
==nil 0.0010515247108307045
init(owner:BTree<Key, 0.0002628811777076761
=nil) 0.0003943217665615142
nil){ 0.0003943217665615142
self.children= 0.0002628811777076761
=children 0.0002628811777076761
extensionBTreeNode 0.0006572029442691904
BTreeNode{ 0.0007886435331230284
funcvalue(for 0.0002628811777076761
value(forkey: 0.0002628811777076761
key:Key) 0.0013144058885383807
Key)-> 0.0017087276550998948
->Value? 0.0006572029442691904
Value?{ 0.0006572029442691904
varindex 0.0011829652996845426
index= 0.002103049421661409
=keys.startIndex 0.0003943217665615142
while(index 0.0002628811777076761
(index+ 0.0010515247108307045
+1) 0.001840168243953733
1)< 0.0003943217665615142
<keys.endIndex 0.0005257623554153522
keys.endIndex&& 0.0005257623554153522
&&keys[index] 0.0005257623554153522
keys[index]< 0.0003943217665615142
<key 0.0009200841219768665
key{ 0.002365930599369085
=(index 0.0003943217665615142
ifkey 0.0010515247108307045
key== 0.0003943217665615142
keys[index]{ 0.0003943217665615142
}else 0.009069400630914827
elseif 0.0031545741324921135
key< 0.0013144058885383807
<keys[index] 0.0002628811777076761
else{ 0.011172450052576235
children?[(index+ 0.0002628811777076761
functraverseKeysInOrder(_ 0.0002628811777076761
traverseKeysInOrder(_process: 0.0002628811777076761
process:(Key) 0.0002628811777076761
(Key)-> 0.0002628811777076761
->Void) 0.0006572029442691904
Void){ 0.0006572029442691904
fori 0.005914826498422713
iin 0.005914826498422713
in0..<numberOfKeys 0.0002628811777076761
0..<numberOfKeys{ 0.0002628811777076761
funcinsert(_ 0.0003943217665615142
value:Value, 0.0002628811777076761
forkey: 0.0002628811777076761
Key){ 0.0006572029442691904
whileindex 0.0003943217665615142
index< 0.0005257623554153522
ifindex 0.0003943217665615142
keys[index]== 0.0002628811777076761
==key 0.0011829652996845426
values[index]= 0.0005257623554153522
=value 0.0007886435331230284
ifisLeaf 0.0003943217665615142
isLeaf{ 0.0003943217665615142
at:index) 0.0005257623554153522
+=1 0.006309148264984227
ifchildren![index].numberOfKeys 0.0002628811777076761
>owner.order 0.0003943217665615142
*2 0.0005257623554153522
children![index],atIndex: 0.0002628811777076761
atIndex:index) 0.0003943217665615142
privatefunc 0.008280757097791799
BTreeNode,atIndex 0.0003943217665615142
atIndexindex: 0.0005257623554153522
index:Int) 0.0005257623554153522
Int){ 0.0048633017875920085
/2 0.002365930599369085
+1)) 0.0005257623554153522
!=nil 0.0024973711882229233
nil{ 0.0015772870662460567
=Array( 0.0002628811777076761
(middleIndex+ 0.0002628811777076761
+1))] 0.0002628811777076761
+1))) 0.0003943217665615142
returnself 0.0006572029442691904
funcremove(_ 0.0002628811777076761
remove(_key: 0.0002628811777076761
keys.remove(at:index) 0.0002628811777076761
values.remove(at:index) 0.0002628811777076761
-=1 0.0017087276550998948
keys[index]= 0.0003943217665615142
<owner.order 0.0003943217665615142
owner.order{ 0.0006572029442691904
iflet 0.003548895899053628
letleftChild 0.0002628811777076761
leftChild= 0.0002628811777076761
print("Thekey:\(key) 0.0002628811777076761
key:\(key)is 0.0002628811777076761
isnot 0.0006572029442691904
notin 0.0006572029442691904
inthe 0.0013144058885383807
letrightChild 0.0002628811777076761
rightChild= 0.0002628811777076761
if(index 0.0003943217665615142
(index- 0.0006572029442691904
-1) 0.0026288117770767614
1)>= 0.0002628811777076761
>=0 0.0003943217665615142
0&& 0.0010515247108307045
&&children![(index 0.0002628811777076761
children![(index- 0.0010515247108307045
1)].numberOfKeys> 0.0002628811777076761
to:child, 0.0002628811777076761
child,from: 0.0002628811777076761
from:children![(index 0.0002628811777076761
1)],at: 0.0002628811777076761
children![(index+ 0.0010515247108307045
index,to: 0.0003943217665615142
0{ 0.0017087276550998948
merge(child:child, 0.0002628811777076761
child,atIndex: 0.0002628811777076761
atIndex:index, 0.0002628811777076761
index:Int, 0.0002628811777076761
Int,to 0.0010515247108307045
position:BTreeNodePosition) 0.0002628811777076761
BTreeNodePosition){ 0.0002628811777076761
switchposition 0.0002628811777076761
position{ 0.0002628811777076761
case.left: 0.0002628811777076761
targetNode.keys.insert(keys[index],at: 0.0002628811777076761
targetNode.values.insert(values[index],at: 0.0002628811777076761
if!targetNode.isLeaf 0.0002628811777076761
!targetNode.isLeaf{ 0.0002628811777076761
case.right: 0.0002628811777076761
-1)].keys 0.0002628811777076761
1)].keys= 0.0002628811777076761
=children![(index 0.0002628811777076761
-1)]] 0.0002628811777076761
1)]]+ 0.0002628811777076761
-1)].values 0.0002628811777076761
1)].values= 0.0002628811777076761
-1)) 0.0003943217665615142
if!child.isLeaf 0.0002628811777076761
!child.isLeaf{ 0.0002628811777076761
1)].children= 0.0002628811777076761
+1)].keys 0.0002628811777076761
+1)].values 0.0002628811777076761
varinorderArrayFromKeys: 0.0002628811777076761
inorderArrayFromKeys:[Key] 0.0002628811777076761
[Key]{ 0.0002628811777076761
vararray 0.0002628811777076761
array= 0.0002628811777076761
letreturnedArray 0.0002628811777076761
returnedArray= 0.0002628811777076761
array+= 0.0003943217665615142
+=returnedArray 0.0002628811777076761
returnarray 0.0002628811777076761
publicclass 0.0009200841219768665
=0 0.0027602523659305996
>0 0.0017087276550998948
0else 0.0003943217665615142
tobe 0.0002628811777076761
greaterthan 0.0005257623554153522
returnnil 0.003680336487907466
rootNode= 0.0003943217665615142
=BTreeNode<Key, 0.0003943217665615142
extensionBTree 0.0003943217665615142
BTree{ 0.0003943217665615142
BTreeNode<Key,Value>( 0.0002628811777076761
owner:self, 0.0002628811777076761
(middleIndexOfOldRoot+ 0.0002628811777076761
//MARK: 0.0002628811777076761
andthe 0.0002628811777076761
thevalue 0.0009200841219768665
fromthe 0.0003943217665615142
*- 0.0002628811777076761
thekey 0.0002628811777076761
==0 0.0014458464773922186
CustomStringConvertible{ 0.0010515247108307045
vardescription: 0.0011829652996845426
description:String 0.0011829652996845426
String{ 0.002234490010515247
xs:[T], 0.0006572029442691904
[T],value: 0.0002628811777076761
compare:(T, 0.0003943217665615142
(T,T) 0.0007886435331230284
T)-> 0.001840168243953733
->Bool) 0.0010515247108307045
Bool){ 0.0007886435331230284
xs.startIndex,xs.endIndex, 0.0002628811777076761
Comparable>(inoutxs: 0.0002628811777076761
value:T) 0.0003943217665615142
{a,b 0.0002628811777076761
bin 0.0003943217665615142
ina 0.0002628811777076761
a< 0.0005257623554153522
<b} 0.0002628811777076761
Bool)-> 0.0002628811777076761
->T 0.0007886435331230284
T{ 0.0007886435331230284
-1]) 0.0003943217665615142
-1, 0.001971608832807571
letresult 0.0007886435331230284
result= 0.0010515247108307045
returnresult 0.0007886435331230284
[T])-> 0.0003943217665615142
varfirst: 0.0003943217665615142
first:Int, 0.0002628811777076761
varlast: 0.0003943217665615142
last:Int, 0.0002628811777076761
->Bool, 0.0007886435331230284
varlen: 0.0002628811777076761
ofstart 0.0002628811777076761
startis 0.0003943217665615142
isat 0.0002628811777076761
at2 0.0002628811777076761
2* 0.0009200841219768665
*start 0.0002628811777076761
start+ 0.0002628811777076761
+1 0.0034174553101997897
//right-child 0.0003943217665615142
child= 0.0009200841219768665
(len- 0.0003943217665615142
-2) 0.0003943217665615142
2)/ 0.0005257623554153522
2< 0.0002628811777076761
<child) 0.0002628811777076761
child){ 0.0002628811777076761
=2 0.0005257623554153522
*child 0.0002628811777076761
child+ 0.0005257623554153522
child_i= 0.0002628811777076761
=first 0.0005257623554153522
first+ 0.0005257623554153522
+child 0.0002628811777076761
ifchild 0.0002628811777076761
1< 0.0003943217665615142
<len 0.0002628811777076761
len&& 0.0002628811777076761
&&compare(xs[child_i 0.0002628811777076761
compare(xs[child_i+ 0.0002628811777076761
+1], 0.0003943217665615142
1],xs[child_i]) 0.0002628811777076761
xs[child_i]){ 0.0003943217665615142
right-childexists 0.0002628811777076761
existsand 0.0002628811777076761
andis 0.0002628811777076761
isgreater 0.0002628811777076761
thanleft-child 0.0002628811777076761
//check 0.0002628811777076761
checkif 0.0002628811777076761
ifwe 0.0002628811777076761
weare 0.0003943217665615142
arein 0.0002628811777076761
inheap-order 0.0002628811777076761
//we 0.0002628811777076761
it'slargest 0.0002628811777076761
largestchild 0.0002628811777076761
lettop 0.0003943217665615142
top= 0.0003943217665615142
do{ 0.0002628811777076761
xs[start]= 0.0002628811777076761
ofthe 0.0015772870662460567
}while 0.0005257623554153522
iflen 0.0002628811777076761
<=1 0.0005257623554153522
1{ 0.0007886435331230284
len= 0.0005257623554153522
=(len 0.0002628811777076761
+len 0.0002628811777076761
xs[last]= 0.0002628811777076761
=index 0.0003943217665615142
1)/ 0.0003943217665615142
importFoundation 0.006046267087276551
Hashable>{ 0.0002628811777076761
varvalue: 0.0003943217665615142
weakvar 0.0003943217665615142
parentNode:TrieNode? 0.0002628811777076761
=false 0.0009200841219768665
self.value= 0.0003943217665615142
=parentNode 0.0002628811777076761
typealiasNode 0.0006572029442691904
Node= 0.0006572029442691904
varcount: 0.0006572029442691904
count:Int 0.0006572029442691904
returnwordCount 0.0002628811777076761
[String]{ 0.0005257623554153522
letroot: 0.0002628811777076761
root= 0.0007886435331230284
NSCoder){ 0.0002628811777076761
words= 0.0002628811777076761
String){ 0.0003943217665615142
guard!word.isEmpty 0.0003943217665615142
!word.isEmptyelse 0.0003943217665615142
varcurrentNode 0.0006572029442691904
currentNode= 0.0024973711882229233
=root 0.0005257623554153522
forcharacter 0.0003943217665615142
characterin 0.0003943217665615142
inword.lowercased().characters 0.0003943217665615142
word.lowercased().characters{ 0.0003943217665615142
letchildNode 0.0003943217665615142
childNode= 0.0003943217665615142
=currentNode.children[character] 0.0003943217665615142
=childNode 0.0003943217665615142
=true 0.0014458464773922186
String)-> 0.0010515247108307045
->Bool 0.0028916929547844372
returnfalse 0.0017087276550998948
guardlet 0.002234490010515247
currentNode.children[character]else 0.0002628811777076761
->Node? 0.0005257623554153522
Node?{ 0.0005257623554153522
returncurrentNode 0.0002628811777076761
letlastNode 0.0002628811777076761
lastNode= 0.0005257623554153522
=findLastNodeOf(word: 0.0002628811777076761
:nil 0.0003943217665615142
Node){ 0.0002628811777076761
character= 0.0002628811777076761
=lastNode.value 0.0002628811777076761
=nil 0.0015772870662460567
iflastNode.isTerminating 0.0002628811777076761
lastNode.isTerminating{ 0.0002628811777076761
fileprivatefunc 0.0009200841219768665
->[String] 0.0003943217665615142
=[String]() 0.0002628811777076761
letvalue 0.0002628811777076761
value= 0.0005257623554153522
forchildNode 0.0003943217665615142
childNodein 0.0003943217665615142
letchildWords 0.0002628811777076761
childWords= 0.0002628811777076761
=wordsInSubtrie(rootNode: 0.0002628811777076761
wordsInSubtrie(rootNode:childNode, 0.0002628811777076761
childNode,partialWord: 0.0002628811777076761
+=childWords 0.0002628811777076761
Comparable,Payload> 0.0005257623554153522
Payload>{ 0.0005257623554153522
publictypealias 0.0005257623554153522
=TreeNode<Key, 0.0002628811777076761
TreeNode<Key,Payload> 0.0002628811777076761
payload:Payload? 0.0002628811777076761
varkey: 0.0003943217665615142
internalvar 0.0002628811777076761
varheight: 0.0002628811777076761
height:Int 0.0002628811777076761
publicinit(key: 0.0002628811777076761
init(key:Key, 0.0003943217665615142
Key,payload: 0.0005257623554153522
payload:Payload?, 0.0002628811777076761
self.key= 0.0003943217665615142
=key 0.0007886435331230284
=leftChild 0.0002628811777076761
=rightChild 0.0002628811777076761
=self 0.001840168243953733
publicconvenience 0.0002628811777076761
convenienceinit(key: 0.0002628811777076761
self.init(key:key, 0.0002628811777076761
key,payload: 0.0006572029442691904
payload:payload, 0.0007886435331230284
payload,leftChild: 0.0003943217665615142
leftChild:nil, 0.0003943217665615142
nil,rightChild: 0.0003943217665615142
rightChild:nil, 0.0003943217665615142
nil,parent: 0.0003943217665615142
height:1) 0.0003943217665615142
returnrightChild 0.0002628811777076761
nil&& 0.0005257623554153522
===self 0.0002628811777076761
returnleftChild 0.0003943217665615142
leftChild!= 0.0003943217665615142
rightChild!= 0.0003943217665615142
openclass 0.0002628811777076761
fileprivate(set)var 0.0003943217665615142
size= 0.0005257623554153522
publicinit() 0.0003943217665615142
funcminimum() 0.0002628811777076761
minimum()-> 0.0002628811777076761
->TreeNode? 0.0002628811777076761
TreeNode?{ 0.0002628811777076761
??self 0.0002628811777076761
funcmaximum() 0.0002628811777076761
maximum()-> 0.0002628811777076761
extensionAVLTree 0.0006572029442691904
AVLTree{ 0.0002628811777076761
subscript(key:Key) 0.0002628811777076761
->Payload? 0.0005257623554153522
Payload?{ 0.0005257623554153522
get{ 0.0002628811777076761
{return 0.0007886435331230284
set{ 0.0002628811777076761
returnsearch(key: 0.0005257623554153522
funcsearch(key: 0.0002628811777076761
Node?)-> 0.0002628811777076761
letnode 0.0013144058885383807
node= 0.004206098843322818
=node 0.003943217665615142
node{ 0.0009200841219768665
node.key{ 0.0003943217665615142
returnnode 0.0005257623554153522
<node.key 0.0002628811777076761
search(key:key, 0.0003943217665615142
key,node: 0.0003943217665615142
funcinsert(key: 0.0002628811777076761
insert(key:Key, 0.0002628811777076761
payload,node: 0.0003943217665615142
node:root) 0.0002628811777076761
=Node(key: 0.0010515247108307045
Node(key:key, 0.0007886435331230284
letchild 0.0005257623554153522
=node.leftChild 0.0003943217665615142
insert(input:input, 0.0002628811777076761
input,payload: 0.0005257623554153522
node:child) 0.0002628811777076761
Node(key:input, 0.0002628811777076761
parent:node, 0.0002628811777076761
node,height: 0.0002628811777076761
=child 0.0002628811777076761
balance(node:child) 0.0002628811777076761
=node.rightChild 0.0003943217665615142
letlHeight 0.0002628811777076761
lHeight= 0.0002628811777076761
??0 0.0005257623554153522
letrHeight 0.0002628811777076761
rHeight= 0.0002628811777076761
->Int 0.003548895899053628
=[Node?](repeating: 0.0002628811777076761
[Node?](repeating:nil, 0.0002628811777076761
nil,count: 0.0002628811777076761
=node.parent 0.0002628811777076761
iflrFactor 0.0002628811777076761
>1 0.0002628811777076761
iflrDifference(node: 0.0002628811777076761
nodes[0]= 0.0005257623554153522
nodes[2]= 0.0005257623554153522
nodes[1]= 0.0005257623554153522
=nodes[2]?.leftChild 0.0005257623554153522
subtrees[0]= 0.0005257623554153522
=nodes[1]?.leftChild 0.0005257623554153522
subtrees[1]= 0.0005257623554153522
=nodes[1]?.rightChild 0.0002628811777076761
subtrees[2]= 0.0005257623554153522
=nodes[2]?.rightChild 0.0005257623554153522
subtrees[3]= 0.0005257623554153522
=nodes[0]?.rightChild 0.0005257623554153522
<0 0.0002628811777076761
=nodes[0]?.leftChild 0.0002628811777076761
ifnode.isRoot 0.0002628811777076761
=nodes[2] 0.0006572029442691904
ifnode.isLeftChild 0.0002628811777076761
nodes[2]?.parent= 0.0002628811777076761
=nodeParent 0.0002628811777076761
ifnode.isRightChild 0.0002628811777076761
=nodes[1] 0.0003943217665615142
=nodes[0] 0.0003943217665615142
funcdisplay(node: 0.0002628811777076761
level:level 0.0002628811777076761
level+ 0.0002628811777076761
",terminator: 0.0003943217665615142
terminator:"") 0.0003943217665615142
for_ 0.0006572029442691904
_in 0.0006572029442691904
funcdelete(key: 0.0002628811777076761
delete(key:Key) 0.0002628811777076761
==1 0.0003943217665615142
size-= 0.0002628811777076761
letreplacement 0.0002628811777076761
replacement= 0.0002628811777076761
replacement!== 0.0002628811777076761
!==node 0.0002628811777076761
node.key= 0.0002628811777076761
=replacement.key 0.0002628811777076761
node.payload= 0.0002628811777076761
=replacement.payload 0.0002628811777076761
delete(node:replacement) 0.0002628811777076761
publicindirect 0.0002628811777076761
indirectenum 0.0002628811777076761
caseempty 0.0003943217665615142
switchself 0.0014458464773922186
self{ 0.0024973711882229233
caselet 0.003680336487907466
let.node(left, 0.0010515247108307045
.node(left,value, 0.0007886435331230284
left= 0.0003943217665615142
right= 0.0003943217665615142
case.empty: 0.0014458464773922186
extensionBinaryTree 0.0002628811777076761
BinaryTree{ 0.0003943217665615142
(T)-> 0.0006572029442691904
ifcase 0.002103049421661409
value,right) 0.0006572029442691904
right)= 0.0007886435331230284
return.empty 0.0005257623554153522
.empty:return 0.0003943217665615142
return0 0.0007886435331230284
case.leaf: 0.0007886435331230284
.leaf:return 0.0002628811777076761
return1 0.0010515247108307045
.node(left,_, 0.0002628811777076761
_,right): 0.0002628811777076761
right):return 0.0002628811777076761
1+ 0.0007886435331230284
->BinarySearchTree 0.0003943217665615142
BinarySearchTree{ 0.0003943217665615142
case.leaf(let 0.0003943217665615142
.leaf(letvalue): 0.0002628811777076761
ifnewValue 0.0002628811777076761
newValue< 0.0002628811777076761
<value 0.0005257623554153522
value{ 0.0007886435331230284
case.node(let 0.0002628811777076761
.node(letleft, 0.0002628811777076761
left,let 0.0002628811777076761
letvalue, 0.0002628811777076761
value,let 0.0002628811777076761
letright): 0.0002628811777076761
<x 0.0002628811777076761
x{ 0.0005257623554153522
varnode 0.0014458464773922186
varprev 0.0002628811777076761
prev= 0.0009200841219768665
whilecase 0.0002628811777076761
_,_) 0.0005257623554153522
_)= 0.0002628811777076761
=next 0.0010515247108307045
case.leaf 0.0002628811777076761
.leaf= 0.0002628811777076761
returnprev 0.0002628811777076761
let.node(_, 0.0009200841219768665
.node(_,_, 0.0009200841219768665
next)= 0.0002628811777076761
vardebugDescription: 0.0002628811777076761
debugDescription:String 0.0002628811777076761
Element>{ 0.0003943217665615142
Key,val: 0.0002628811777076761
val:Element, 0.0003943217665615142
Element,p: 0.0002628811777076761
left:Treap, 0.0002628811777076761
=.empty 0.0003943217665615142
internalfunc 0.0006572029442691904
let.node(treeKey, 0.0007886435331230284
_,_, 0.001840168243953733
_)where 0.0005257623554153522
wheretreeKey 0.0002628811777076761
treeKey== 0.0002628811777076761
==key: 0.0002628811777076761
.node(treeKey,_, 0.0006572029442691904
_,left, 0.0007886435331230284
left,_) 0.0002628811777076761
wherekey 0.0010515247108307045
<treeKey: 0.0002628811777076761
_,right) 0.0002628811777076761
right)where 0.0007886435331230284
key> 0.0005257623554153522
>treeKey: 0.0002628811777076761
returntrue 0.0011829652996845426
left,right): 0.0002628811777076761
Treap<Key,Element>) 0.0003943217665615142
Element>)-> 0.0003943217665615142
left,right) 0.0006572029442691904
Comparable,Element>(_ 0.0002628811777076761
Element>(_tree: 0.0002628811777076761
tree:Treap<Key, 0.0002628811777076761
->Treap<Key, 0.0002628811777076761
Treap<Key,Element> 0.0005257623554153522
let.node(key, 0.0002628811777076761
.node(key,val, 0.0002628811777076761
val,p, 0.0005257623554153522
=tree 0.0002628811777076761
tree{ 0.0002628811777076761
return.node(key: 0.0005257623554153522
Treap.node(key:key, 0.0002628811777076761
key,val: 0.0007886435331230284
val:val, 0.0010515247108307045
val,p: 0.0010515247108307045
p:p, 0.0006572029442691904
p,left: 0.0006572029442691904
p,left, 0.0003943217665615142
left:left, 0.0011829652996845426
left,right: 0.0011829652996845426
Treap{ 0.0005257623554153522
p:Int 0.0002628811777076761
Int= 0.0005257623554153522
->Treap 0.0005257623554153522
.node(key:key, 0.0002628811777076761
let.node(nodeKey, 0.0005257623554153522
nodeVal,nodeP, 0.0002628811777076761
nodeP,left, 0.0003943217665615142
p:nodeP, 0.0003943217665615142
nodeP,left: 0.0003943217665615142
right:right) 0.0009200841219768665
Key,_ 0.0002628811777076761
Element,_ 0.0002628811777076761
Int,_ 0.0011829652996845426
Int)-> 0.004337539432176656
nodeKey{ 0.0002628811777076761
newChild= 0.0003943217665615142
p:p) 0.0002628811777076761
newNode= 0.0006572029442691904
=.node(key: 0.0002628811777076761
.node(key:nodeKey, 0.0002628811777076761
nodeKey,val: 0.0005257623554153522
val:nodeVal, 0.0002628811777076761
nodeVal,p: 0.0002628811777076761
rotate= 0.0002628811777076761
returnnewNode 0.0002628811777076761
throws-> 0.0002628811777076761
.node(nodeKey,val, 0.0002628811777076761
returntry 0.0002628811777076761
tryTreap.node(key: 0.0002628811777076761
Treap.node(key:nodeKey, 0.0002628811777076761
_y: 0.0002628811777076761
Double){ 0.0003943217665615142
=x 0.0002628811777076761
>=0, 0.0002628811777076761
cannot 0.0002628811777076761
notbe 0.0003943217665615142
benegative") 0.0002628811777076761
/2, 0.0003943217665615142
Rect{ 0.0006572029442691904
=origin 0.0002628811777076761
Double{ 0.0011829652996845426
returnorigin.x 0.0002628811777076761
returnorigin.y 0.0002628811777076761
origin.y+ 0.0003943217665615142
Point)-> 0.0005257623554153522
returnRect(origin: 0.0005257623554153522
size:size.half) 0.0005257623554153522
+size.half.yLength), 0.0002628811777076761
size.half.yLength),size: 0.0002628811777076761
Rect(origin:Point(origin.x 0.0002628811777076761
Point(origin.x+ 0.0002628811777076761
+size.half.xLength, 0.0002628811777076761
Rect)-> 0.0005257623554153522
PointsContainer{ 0.0003943217665615142
funcadd(point: 0.0003943217665615142
add(point:Point) 0.0003943217665615142
funcpoints(inRect 0.0003943217665615142
points(inRectrect: 0.0003943217665615142
rect:Rect) 0.0003943217665615142
->[Point] 0.0003943217665615142
Sequence{ 0.0002628811777076761
=QuadTreeNode(rect: 0.0006572029442691904
privatelet 0.0002628811777076761
mutatingfunc 0.002234490010515247
index+= 0.0007886435331230284
1} 0.0002628811777076761
case0: 0.0002628811777076761
case1: 0.0002628811777076761
case2: 0.0002628811777076761
case3: 0.0002628811777076761
funcmakeIterator() 0.0002628811777076761
makeIterator()-> 0.0002628811777076761
[Point]= 0.0002628811777076761
=[] 0.0013144058885383807
vartype: 0.0002628811777076761
init(rect:Rect) 0.0002628811777076761
Rect){ 0.0002628811777076761
->String 0.0003943217665615142
varresult 0.0002628811777076761
+"\n" 0.0002628811777076761
switchtype 0.0006572029442691904
type{ 0.0006572029442691904
case.internal(let 0.0003943217665615142
.internal(letchildren): 0.0003943217665615142
forchild 0.0002628811777076761
childin 0.0002628811777076761
inchildren 0.0003943217665615142
children{ 0.0003943217665615142
extensionQuadTreeNode: 0.0002628811777076761
point){ 0.0003943217665615142
case.internal: 0.0002628811777076761
[Point]{ 0.0002628811777076761
inpoints 0.0002628811777076761
points{ 0.0002628811777076761
\(rect)Points: 0.0002628811777076761
Points:\(points)" 0.0002628811777076761
structStack<T> 0.0003943217665615142
Stack<T>{ 0.0003943217665615142
elements:Array<T> 0.0002628811777076761
vartop: 0.0002628811777076761
top:T? 0.0002628811777076761
funcpush(_ 0.0003943217665615142
push(_element: 0.0003943217665615142
funcpop() 0.0003943217665615142
pop()-> 0.0003943217665615142
:elements.removeLast() 0.0002628811777076761
=self.pop() 0.0002628811777076761
self.pop()else 0.0002628811777076761
varstack 0.0002628811777076761
stack= 0.0002628811777076761
Node<T>{ 0.0002628811777076761
vardata: 0.0003943217665615142
varnext: 0.0003943217665615142
self.data= 0.0005257623554153522
=data 0.0005257623554153522
->Node<T>? 0.0002628811777076761
Node<T>?{ 0.0005257623554153522
Node<T>?){ 0.0003943217665615142
varhead: 0.0003943217665615142
head:Node<T>? 0.0002628811777076761
self.head= 0.0003943217665615142
=head 0.0017087276550998948
ifvar 0.0002628811777076761
current_node= 0.0002628811777076761
head{ 0.0002628811777076761
=1 0.0009200841219768665
whilelet 0.0005257623554153522
letnext 0.0003943217665615142
next= 0.0006572029442691904
vararray: 0.0002628811777076761
publicmutating 0.0003943217665615142
=DataNode<Key, 0.0002628811777076761
DataNode<Key,Payload> 0.0002628811777076761
next:Node? 0.0002628811777076761
Key,data: 0.0005257623554153522
data:Payload) 0.0005257623554153522
Payload){ 0.0005257623554153522
extensionSkipList 0.0005257623554153522
SkipList{ 0.0005257623554153522
varcurrentNode: 0.0002628811777076761
currentNode:Node? 0.0002628811777076761
Node?= 0.0002628811777076761
=currentNode 0.0002628811777076761
node.next{ 0.0002628811777076761
=node.down 0.0002628811777076761
=node.next 0.0005257623554153522
=findNode(key: 0.0003943217665615142
findNode(key:key) 0.0003943217665615142
key)else 0.0002628811777076761
head= 0.0010515247108307045
=Node(asHead: 0.0003943217665615142
Node(asHead:true) 0.0003943217665615142
key,data: 0.0009200841219768665
data:data) 0.0009200841219768665
varcurrentTopNode 0.0002628811777076761
currentTopNode= 0.0006572029442691904
whilecoinFlip() 0.0002628811777076761
coinFlip(){ 0.0002628811777076761
letnewHead 0.0002628811777076761
newHead= 0.0002628811777076761
node.down= 0.0003943217665615142
=currentTopNode 0.0003943217665615142
newHead.next= 0.0002628811777076761
newHead.down= 0.0002628811777076761
=newHead 0.0002628811777076761
whilecurrentNode 0.0003943217665615142
currentNode!= 0.0003943217665615142
letnextNode 0.0003943217665615142
nextNode= 0.0003943217665615142
=currentNode!.next 0.0002628811777076761
>key 0.0002628811777076761
=currentNode!.down 0.0005257623554153522
=nextNode 0.0002628811777076761
=stack.pop() 0.0002628811777076761
node.next= 0.0003943217665615142
=node!.next 0.0006572029442691904
DoublyLinkedList<T>{ 0.0002628811777076761
returnhead 0.0002628811777076761
letnewNode 0.0002628811777076761
=Node(value: 0.0002628811777076761
Node(value:value) 0.0002628811777076761
newNode.previous= 0.0002628811777076761
=newNode 0.0007886435331230284
tail= 0.0005257623554153522
vari 0.0011829652996845426
i= 0.002103049421661409
whilenode 0.0005257623554153522
node!= 0.0006572029442691904
ifi 0.0006572029442691904
i== 0.0002628811777076761
i-= 0.0002628811777076761
(prev,next) 0.0002628811777076761
//1 0.0007886435331230284
//2 0.0002628811777076761
=prev 0.0005257623554153522
next?.previous= 0.0002628811777076761
c= 0.0002628811777076761
returnc 0.0002628811777076761
letprev 0.0002628811777076761
ifnext 0.0003943217665615142
funcremoveAll() 0.0002628811777076761
removeAll(){ 0.0002628811777076761
extensionDoublyLinkedList 0.0003943217665615142
DoublyLinkedList{ 0.0003943217665615142
text+= 0.0002628811777076761
forelement 0.0002628811777076761
elementin 0.0005257623554153522
inarray 0.001840168243953733
array{ 0.0011829652996845426
privatetypealias 0.0002628811777076761
thehash 0.0011829652996845426
hashtable. 0.0003943217665615142
varcount 0.0002628811777076761
count= 0.0006572029442691904
///A 0.0003943217665615142
hashtable 0.0010515247108307045
returncount 0.0002628811777076761
Astring 0.0002628811777076761
stringthat 0.0002628811777076761
thatrepresents 0.0002628811777076761
representsthe 0.0002628811777076761
thecontents 0.0002628811777076761
contentsof 0.0002628811777076761
letpairs 0.0002628811777076761
pairs= 0.0002628811777076761
{e 0.0002628811777076761
ein 0.0002628811777076761
in"\(e.key) 0.0002628811777076761
"\(e.key)= 0.0002628811777076761
=\(e.value)" 0.0002628811777076761
\(e.value)"} 0.0002628811777076761
pairs.joined(separator:", 0.0002628811777076761
",") 0.0002628811777076761
for(i, 0.0003943217665615142
thegiven 0.0003943217665615142
>0) 0.0002628811777076761
buckets= 0.0003943217665615142
///Returns 0.0002628811777076761
anarray 0.0002628811777076761
fora 0.0003943217665615142
agiven 0.0003943217665615142
givenkey 0.0002628811777076761
forthe 0.0002628811777076761
letindex 0.0003943217665615142
=self.index(forKey: 0.0003943217665615142
self.index(forKey:key) 0.0003943217665615142
ifelement.key 0.0003943217665615142
element.key== 0.0003943217665615142
returnelement.value 0.0002628811777076761
nil// 0.0002628811777076761
//key 0.0002628811777076761
keynot 0.0002628811777076761
element'svalue 0.0002628811777076761
tablefor 0.0003943217665615142
givenkey. 0.0002628811777076761
valuein 0.0009200841219768665
ifthe 0.0002628811777076761
(i,element) 0.0002628811777076761
element)in 0.0002628811777076761
elementto 0.0005257623554153522
tothe 0.0005257623554153522
count+= 0.0002628811777076761
///Removes 0.0002628811777076761
hashFunctions:[(T) 0.0002628811777076761
[(T)-> 0.0002628811777076761
hashValuein 0.0002628811777076761
{$0 0.0003943217665615142
//divide 0.0002628811777076761
quicksort 0.0005257623554153522
|Swift 0.0002628811777076761
importFoundation; 0.0002628811777076761
funcpartition(_ 0.0005257623554153522
arr:inout 0.0002628811777076761
inout[UInt32], 0.0002628811777076761
begin:Int, 0.0002628811777076761
end:Int) 0.0002628811777076761
varj 0.0009200841219768665
j= 0.002103049421661409
letpivot 0.0002628811777076761
pivot= 0.0002628811777076761
whilei 0.0006572029442691904
i<= 0.0007886435331230284
<=j 0.0002628811777076761
j{ 0.0002628811777076761
pivot{ 0.0003943217665615142
i+= 0.0009200841219768665
+=1; 0.0002628811777076761
j-= 0.0006572029442691904
-=1; 0.0002628811777076761
quick_sort(&arr,begin: 0.0003943217665615142
index- 0.0002628811777076761
-1); 0.0002628811777076761
print("Sizeof 0.0002628811777076761
ofarray: 0.0002628811777076761
array:", 0.0002628811777076761
letsize 0.0003943217665615142
=Int(readLine()!)!; 0.0002628811777076761
vararr 0.0002628811777076761
arr= 0.0002628811777076761
=[UInt32](); 0.0002628811777076761
in1 0.0002628811777076761
1... 0.0002628811777076761
...size 0.0003943217665615142
size{ 0.0002628811777076761
print("Original:"); 0.0002628811777076761
size- 0.0003943217665615142
print("Sorted:"); 0.0002628811777076761
[Int],_ 0.0002628811777076761
_k: 0.0002628811777076761
k:Int) 0.0006572029442691904
->Int? 0.0005257623554153522
Int?{ 0.0005257623554153522
=a.count 0.0003943217665615142
ifk 0.0003943217665615142
min+ 0.0005257623554153522
-min 0.0003943217665615142
funcrandomizedSelect<T: 0.0002628811777076761
randomizedSelect<T:Comparable>(_ 0.0002628811777076761
Comparable>(_a: 0.0007886435331230284
a:inout 0.0003943217665615142
inout[T], 0.0007886435331230284
[T],_ 0.0003943217665615142
_low: 0.0003943217665615142
low:Int, 0.0017087276550998948
_high: 0.0003943217665615142
high:Int) 0.0015772870662460567
low,high) 0.0002628811777076761
=low 0.0013144058885383807
forj 0.002103049421661409
jin 0.002103049421661409
returni 0.0002628811777076761
iflow 0.0007886435331230284
low< 0.0006572029442691904
<high 0.0010515247108307045
high{ 0.0014458464773922186
p= 0.0013144058885383807
p{ 0.0002628811777076761
returnrandomizedSelect(&a, 0.0003943217665615142
1,k) 0.0002628811777076761
+1, 0.0014458464773922186
extensionString 0.0002628811777076761
//false 0.0005257623554153522
//true 0.0006572029442691904
//test 0.0009200841219768665
//Created 0.003548895899053628
Createdby 0.003548895899053628
byKajornsak 0.0006572029442691904
KajornsakPeerapathananont 0.0006572029442691904
Peerapathananonton 0.0006572029442691904
//Copyright 0.0006572029442691904
Copyright© 0.0006572029442691904
©2560 0.0006572029442691904
2560Kajornsak 0.0006572029442691904
KajornsakPeerapathananont. 0.0006572029442691904
Peerapathananont.All 0.0006572029442691904
Allrights 0.0006572029442691904
rightsreserved. 0.0006572029442691904
nota 0.0003943217665615142
apangram")) 0.0002628811777076761
#!/usr/bin/envswift 0.0002628811777076761
:Int) 0.0003943217665615142
letx 0.0002628811777076761
x= 0.0002628811777076761
letnumber 0.0003943217665615142
number= 0.0003943217665615142
=Int(readLine()!) 0.0002628811777076761
perfectsquare") 0.0002628811777076761
returncalcFibonacci(a: 0.0002628811777076761
n- 0.0007886435331230284
b:Int, 0.0002628811777076761
ifa 0.0003943217665615142
a- 0.0005257623554153522
+b) 0.0002628811777076761
n:Int) 0.0005257623554153522
on10/14/2560 0.0005257623554153522
10/14/2560BE. 0.0005257623554153522
integer= 0.0002628811777076761
charin 0.0002628811777076761
[Double]= 0.0002628811777076761
[Double])-> 0.0003943217665615142
->Double 0.0006572029442691904
+)/ 0.0005257623554153522
[Double],_ 0.0002628811777076761
=average(multiply(xs, 0.0002628811777076761
slope* 0.0002628811777076761
centroids= 0.0002628811777076761
"Exception:KMeans 0.0003943217665615142
[Vector])-> 0.0002628811777076761
nearestDist= 0.0002628811777076761
minIndex= 0.0002628811777076761
0,count: 0.0002628811777076761
centers= 0.0002628811777076761
centerMoveDist= 0.0002628811777076761
=0.0 0.0002628811777076761
repeat{ 0.0002628811777076761
funcfit(_ 0.0002628811777076761
assert(!centroids.isEmpty,"Exception: 0.0002628811777076761
KMeanstried 0.0002628811777076761
triedto 0.0002628811777076761
tofit 0.0002628811777076761
fiton 0.0002628811777076761
ona 0.0002628811777076761
anon 0.0002628811777076761
nontrained 0.0002628811777076761
trainedmodel.") 0.0002628811777076761
letj 0.0003943217665615142
ifj 0.0003943217665615142
j< 0.0005257623554153522
k{ 0.0003943217665615142
extensionArray 0.0009200841219768665
Arraywhere 0.0002628811777076761
whereElement 0.0002628811777076761
Element== 0.0002628811777076761
letsum 0.0002628811777076761
sum= 0.0003943217665615142
case.gaussian 0.0003943217665615142
.gaussian= 0.0003943217665615142
letinput 0.0002628811777076761
input= 0.0002628811777076761
=input 0.0002628811777076761
inputas? 0.0002628811777076761
as?Double 0.0003943217665615142
Doubleelse 0.0003943217665615142
letdistribution 0.0002628811777076761
distribution= 0.0002628811777076761
case.multinomial 0.0003943217665615142
.multinomial= 0.0003943217665615142
letvalues 0.0002628811777076761
=values 0.0002628811777076761
valuesas? 0.0002628811777076761
letcount 0.0002628811777076761
->(Int, 0.0003943217665615142
$0== 0.0002628811777076761
==value 0.0003943217665615142
=[Int: 0.0002628811777076761
=type, 0.0002628811777076761
type,T.self 0.0002628811777076761
T.self!= 0.0002628811777076761
throw"When 0.0002628811777076761
"Whenusing 0.0002628811777076761
NByou 0.0002628811777076761
youhave 0.0002628811777076761
haveto 0.0002628811777076761
tohave 0.0002628811777076761
`class`in 0.0002628811777076761
==`class` 0.0002628811777076761
input:[T]) 0.0002628811777076761
letlikelihoods 0.0002628811777076761
likelihoods= 0.0002628811777076761
Boolin 0.0002628811777076761
return-1 0.0005257623554153522
{(`class`, 0.0003943217665615142
return(`class`, 0.0003943217665615142
(`class`,distribution) 0.0002628811777076761
=likelihoods.map 0.0002628811777076761
likelihoods.map{ 0.0002628811777076761
arrayof 0.0002628811777076761
ofitem 0.0002628811777076761
theelement 0.0005257623554153522
indexof 0.0003943217665615142
ofelement 0.0002628811777076761
thearray 0.0003943217665615142
untilthe 0.0002628811777076761
valueis 0.0002628811777076761
thereis 0.0003943217665615142
versionof 0.0002628811777076761
ofbinary 0.0002628811777076761
binarysearch. 0.0002628811777076761
funcbinarySearch<T: 0.0002628811777076761
binarySearch<T:Comparable>(_ 0.0002628811777076761
a:[T], 0.0003943217665615142
[T],key: 0.0002628811777076761
letmidIndex 0.0002628811777076761
midIndex= 0.0002628811777076761
ifa[midIndex] 0.0005257623554153522
returnbinarySearch(a, 0.0002628811777076761
binarySearch(a,key: 0.0002628811777076761
key:key, 0.0003943217665615142
key,range: 0.0003943217665615142
a[midIndex]< 0.0002628811777076761
midIndex+ 0.0002628811777076761
returnmidIndex 0.0002628811777076761
key:T) 0.0002628811777076761
lowerBound= 0.0002628811777076761
upperBound= 0.0002628811777076761
=midIndex 0.0002628811777076761
letkey 0.0005257623554153522
key= 0.0005257623554153522
=5 0.0003943217665615142
previous= 0.0002628811777076761
-1] 0.0014458464773922186
ifprevious 0.0002628811777076761
position= 0.0002628811777076761
11,13, 0.0003943217665615142
13,33, 0.0003943217665615142
33in 0.0002628811777076761
in[7, 0.0002628811777076761
[7,11, 0.0002628811777076761
-1is 0.0002628811777076761
isreturned. 0.0002628811777076761
-parameters: 0.0002628811777076761
thatis 0.0005257623554153522
-x: 0.0002628811777076761
x:An 0.0002628811777076761
Anint 0.0006572029442691904
intthat 0.0003943217665615142
thearray. 0.0002628811777076761
-returns: 0.0002628811777076761
isthe 0.0002628811777076761
theindex 0.0002628811777076761
notfound 0.0002628811777076761
x:Int, 0.0003943217665615142
fibM2= 0.0005257623554153522
Fibonaccinumber 0.0002628811777076761
fibM1= 0.0005257623554153522
fibM= 0.0005257623554153522
=fibM2 0.0005257623554153522
fibM2+ 0.0002628811777076761
+fibM1 0.0002628811777076761
=fibM1 0.0003943217665615142
=fibM 0.0003943217665615142
offset= 0.0002628811777076761
isfound 0.0002628811777076761
ifnumberArray[i] 0.0002628811777076761
fibM- 0.0002628811777076761
-fibM1 0.0002628811777076761
=i 0.0015772870662460567
//If 0.0002628811777076761
Ifthe 0.0002628811777076761
elementis 0.0002628811777076761
foundthen 0.0002628811777076761
thenreturn 0.0002628811777076761
1&& 0.0003943217665615142
theminimum 0.0005257623554153522
minimumnumber 0.0002628811777076761
numberbetween 0.0002628811777076761
twoints. 0.0002628811777076761
intto 0.0002628811777076761
tocheck 0.0002628811777076761
checkto 0.0002628811777076761
tosee 0.0002628811777076761
seeif 0.0002628811777076761
ifit's 0.0002628811777076761
it'sthe 0.0002628811777076761
minimumnumber. 0.0002628811777076761
characters= 0.0002628811777076761
=[Character]() 0.0002628811777076761
operators= 0.0002628811777076761
memo= 0.0002628811777076761
=[[(Int, 0.0002628811777076761
expression:String) 0.0002628811777076761
ifchar 0.0002628811777076761
char== 0.0006572029442691904
=="T" 0.0002628811777076761
||char 0.0003943217665615142
=="&" 0.0002628811777076761
=="|" 0.0002628811777076761
=="^" 0.0002628811777076761
"^"{ 0.0002628811777076761
=(0, 0.0002628811777076761
(0,0) 0.0002628811777076761
fork 0.0002628811777076761
kin 0.0002628811777076761
letleft 0.0002628811777076761
letright 0.0002628811777076761
ifoperators[k] 0.0003943217665615142
operators[k]== 0.0003943217665615142
answer.0= 0.0003943217665615142
=left.0 0.0006572029442691904
left.0* 0.0007886435331230284
*right.0 0.0007886435331230284
answer.1= 0.0003943217665615142
*right.1 0.0007886435331230284
right.1+ 0.0003943217665615142
+left.1 0.0006572029442691904
left.1* 0.0007886435331230284
right.0+ 0.0003943217665615142
//4 0.0007886435331230284
byDaiPei 0.0026288117770767614
DaiPeion 0.0026288117770767614
on2017/10/14. 0.0003943217665615142
array:inout 0.007097791798107256
inout[Int]) 0.0027602523659305996
[Int]){ 0.0028916929547844372
in0..<array.count 0.0003943217665615142
0..<array.count{ 0.0003943217665615142
swap(&array,at: 0.0034174553101997897
at:i, 0.0007886435331230284
i,and: 0.0005257623554153522
funcisSorted(_ 0.0002628811777076761
isSorted(_array: 0.0002628811777076761
array:[Int]) 0.0002628811777076761
ifarray.count 0.0002628811777076761
array.count<= 0.0002628811777076761
in1..<array.count 0.0002628811777076761
1..<array.count{ 0.0005257623554153522
ifarray[i] 0.0007886435331230284
array[i]< 0.0005257623554153522
<array[i 0.0002628811777076761
array[i- 0.0002628811777076761
1]{ 0.0009200841219768665
funcswap(_ 0.0017087276550998948
swap(_array: 0.0017087276550998948
inout[Int], 0.00407465825446898
[Int],at 0.001971608832807571
atindexA: 0.002103049421661409
indexA:Int, 0.002103049421661409
Int,and 0.002103049421661409
andindexB: 0.001971608832807571
indexB:Int) 0.002103049421661409
lettmp 0.002365930599369085
tmp= 0.002365930599369085
=array[indexA] 0.001971608832807571
array[indexA]= 0.001971608832807571
=array[indexB] 0.001971608832807571
array[indexB]= 0.001971608832807571
=tmp 0.002103049421661409
Array{ 0.0006572029442691904
funcmergeSort(compareWith 0.0002628811777076761
mergeSort(compareWithless: 0.0002628811777076761
less:(Element, 0.0011829652996845426
(Element,Element) 0.0011829652996845426
Element)-> 0.0011829652996845426
mergeSort(compareWith:less, 0.0003943217665615142
less,low: 0.0010515247108307045
low:0, 0.0005257623554153522
0,high: 0.0005257623554153522
high:self.count 0.0002628811777076761
self.count- 0.0002628811777076761
privatemutating 0.0005257623554153522
Bool,low: 0.0005257623554153522
Int,high: 0.0013144058885383807
letmid 0.0009200841219768665
mid= 0.0009200841219768665
=(low 0.0007886435331230284
(low+ 0.0007886435331230284
+high) 0.0007886435331230284
high)/ 0.0007886435331230284
low:low, 0.0009200841219768665
low,high: 0.0007886435331230284
high:mid) 0.0002628811777076761
low:mid 0.0002628811777076761
mid+ 0.0005257623554153522
1,high: 0.0005257623554153522
high:high) 0.0009200841219768665
Int,mid: 0.0002628811777076761
mid:Int, 0.0002628811777076761
vartmpArray 0.0002628811777076761
tmpArray= 0.0002628811777076761
=low, 0.0002628811777076761
low,j 0.0002628811777076761
=mid 0.0002628811777076761
1,k 0.0002628811777076761
k= 0.0007886435331230284
<=mid 0.0007886435331230284
mid&& 0.0002628811777076761
&&j 0.0003943217665615142
j<= 0.0005257623554153522
<=high 0.0002628811777076761
self[k]= 0.0005257623554153522
=tmpArray[i] 0.0005257623554153522
=tmpArray[j] 0.0005257623554153522
j+= 0.0007886435331230284
k+= 0.0007886435331230284
mid{ 0.0006572029442691904
whilej 0.0010515247108307045
on2017/10/11. 0.0007886435331230284
funcmergeSort(_ 0.0002628811777076761
mergeSort(_array: 0.0002628811777076761
high:array.count 0.0003943217665615142
array.count- 0.0013144058885383807
[Int],low: 0.0007886435331230284
array[k]= 0.0005257623554153522
introSortCore(&array,from: 0.0003943217665615142
0,to: 0.0011829652996845426
to:array.count 0.0006572029442691904
1,depth: 0.0002628811777076761
[Int],from 0.0005257623554153522
froma: 0.0006572029442691904
a:Int, 0.0007886435331230284
tob: 0.0006572029442691904
<b 0.0002628811777076761
b{ 0.0002628811777076761
from:a, 0.0006572029442691904
a,to: 0.0006572029442691904
to:b) 0.0003943217665615142
letdiv 0.0003943217665615142
div= 0.0007886435331230284
=partition(&array, 0.0005257623554153522
partition(&array,low: 0.0002628811777076761
div- 0.0003943217665615142
depth:depth 0.0002628811777076761
depth- 0.0002628811777076761
div+ 0.0003943217665615142
1,to: 0.0002628811777076761
sortcore 0.0003943217665615142
partition(_array: 0.0003943217665615142
vardiv 0.0003943217665615142
varp 0.0006572029442691904
at:mid, 0.0003943217665615142
mid,and: 0.0003943217665615142
and:high) 0.0003943217665615142
whilep 0.0003943217665615142
p< 0.0003943217665615142
ifarray[p] 0.0003943217665615142
array[p]< 0.0002628811777076761
<array[high] 0.0002628811777076761
array[high]{ 0.0002628811777076761
at:p, 0.0007886435331230284
p,and: 0.0007886435331230284
and:div) 0.0007886435331230284
div+= 0.0003943217665615142
p+= 0.0003943217665615142
at:high, 0.0003943217665615142
high,and: 0.0003943217665615142
returndiv 0.0003943217665615142
funcheapSort(_ 0.0002628811777076761
heapSort(_array: 0.0002628811777076761
b:Int) 0.0006572029442691904
//create 0.0002628811777076761
createheap 0.0002628811777076761
instride(from: 0.001840168243953733
2,to: 0.0002628811777076761
1,by: 0.0011829652996845426
by:-1) 0.0006572029442691904
-1){ 0.0006572029442691904
sink(&array,at: 0.0002628811777076761
//sort 0.0005257623554153522
to:i 0.0002628811777076761
i- 0.0013144058885383807
-a 0.0003943217665615142
a+ 0.0003943217665615142
i1= 0.0002628811777076761
*i1 0.0003943217665615142
l= 0.0005257623554153522
+a 0.0002628811777076761
-1 0.0011829652996845426
r= 0.0003943217665615142
&&array[l] 0.0002628811777076761
array[i]{ 0.0002628811777076761
and:i) 0.0009200841219768665
on2017/10/15. 0.0003943217665615142
=array[cycleStart] 0.0002628811777076761
pos= 0.0002628811777076761
=cycleStart 0.0002628811777076761
//count 0.0003943217665615142
countall 0.0002628811777076761
allsmaller 0.0002628811777076761
smallerelements 0.0002628811777076761
elementson 0.0002628811777076761
onright 0.0002628811777076761
rightside 0.0003943217665615142
sideof 0.0002628811777076761
incycleStart 0.0002628811777076761
cycleStart+ 0.0002628811777076761
+1..<array.count 0.0002628811777076761
pos+= 0.0005257623554153522
//if 0.0003943217665615142
rightplace 0.0003943217665615142
ifpos 0.0002628811777076761
pos== 0.0002628811777076761
==cycleStart 0.0002628811777076761
cycleStart{ 0.0003943217665615142
//ignore 0.0002628811777076761
ignoreall 0.0002628811777076761
allduplicate 0.0002628811777076761
duplicateelements 0.0003943217665615142
whilearray[pos] 0.0002628811777076761
array[pos]== 0.0002628811777076761
//put 0.0010515247108307045
putthe 0.0002628811777076761
valueto 0.0003943217665615142
theright 0.0003943217665615142
at:pos, 0.0002628811777076761
pos,and: 0.0002628811777076761
and:cycleStart) 0.0002628811777076761
varh 0.0002628811777076761
h= 0.0002628811777076761
=array.count 0.0005257623554153522
array.count/ 0.0002628811777076761
=array[i] 0.0002628811777076761
j>= 0.0005257623554153522
&&key 0.0002628811777076761
<array[j 0.0002628811777076761
array[j- 0.0005257623554153522
-h] 0.0002628811777076761
array[j]= 0.0005257623554153522
=array[j 0.0002628811777076761
gap= 0.0002628811777076761
varswapped 0.0003943217665615142
swapped= 0.0009200841219768665
gap>= 0.0002628811777076761
>=1 0.0005257623554153522
stride(from:0, 0.0009200841219768665
by:1) 0.0010515247108307045
1){ 0.0010515247108307045
array[i]> 0.0002628811777076761
i+ 0.0006572029442691904
//find 0.0009200841219768665
findmax 0.0002628811777076761
maxand 0.0005257623554153522
andmin 0.0005257623554153522
minvalue 0.0003943217665615142
varmax 0.0005257623554153522
max= 0.0010515247108307045
=Int.min 0.0006572029442691904
varmin 0.0009200841219768665
min= 0.001840168243953733
=Int.max 0.0005257623554153522
foritem 0.0009200841219768665
itemin 0.0009200841219768665
ifitem 0.0007886435331230284
item> 0.0003943217665615142
>max 0.0005257623554153522
max{ 0.0005257623554153522
=item 0.0009200841219768665
item< 0.0003943217665615142
<min 0.0005257623554153522
min{ 0.0006572029442691904
toright 0.0003943217665615142
letrange 0.0003943217665615142
range= 0.0003943217665615142
=max 0.0002628811777076761
max- 0.0002628811777076761
=[[Int]](repeatElement([Int](), 0.0002628811777076761
[[Int]](repeatElement([Int](),count: 0.0002628811777076761
count:range)) 0.0002628811777076761
array[index]= 0.0003943217665615142
funcquickSort(_ 0.0002628811777076761
quickSort(_array: 0.0002628811777076761
quickSort(&array,low: 0.0003943217665615142
high:div 0.0002628811777076761
low:div 0.0002628811777076761
funcswap<T>(_ 0.0003943217665615142
swap<T>(_array: 0.0003943217665615142
[T],at 0.0003943217665615142
funcquickSort(compareWith 0.0002628811777076761
quickSort(compareWithless: 0.0002628811777076761
quickSort(compareWith:less, 0.0003943217665615142
swap(&self,at: 0.0006572029442691904
on2017/10/12. 0.0002628811777076761
letn 0.0002628811777076761
n= 0.0002628811777076761
m= 0.0003943217665615142
findthe 0.0003943217665615142
themax 0.0003943217665615142
in0..<n 0.0005257623554153522
0..<n{ 0.0005257623554153522
m{ 0.0002628811777076761
count:m 0.0002628811777076761
in0..<m 0.0002628811777076761
0..<m{ 0.0002628811777076761
beads[i* 0.0005257623554153522
*m 0.0006572029442691904
m+ 0.0007886435331230284
+j] 0.0005257623554153522
j]= 0.0003943217665615142
//move 0.0002628811777076761
=j 0.0010515247108307045
funccircleSort(_ 0.0002628811777076761
circleSort(_array: 0.0002628811777076761
circleSort(&array,low: 0.0003943217665615142
swaped= 0.0003943217665615142
returnswaped 0.0002628811777076761
varl 0.0002628811777076761
h{ 0.0002628811777076761
array[l]> 0.0002628811777076761
at:l, 0.0002628811777076761
l,and: 0.0002628811777076761
ifl 0.0002628811777076761
l+ 0.0002628811777076761
<array.count 0.0003943217665615142
+1] 0.0003943217665615142
=circleSort(&array, 0.0002628811777076761
=Int(i) 0.0002628811777076761
=array[j] 0.0002628811777076761
1..<self.count{ 0.0002628811777076761
self[j- 0.0002628811777076761
self[j]= 0.0002628811777076761
swap= 0.0003943217665615142
2- 0.0005257623554153522
i,to: 0.0003943217665615142
-i 0.0007886435331230284
ifv[j] 0.0002628811777076761
v[j+ 0.0003943217665615142
=v[j]; 0.0002628811777076761
v[j]= 0.0002628811777076761
=v[j 0.0002628811777076761
1]= 0.0002628811777076761
=tmp; 0.0002628811777076761
=true; 0.0002628811777076761
-2 0.0003943217665615142
v[j- 0.0003943217665615142
ini 0.0002628811777076761
at:min, 0.0003943217665615142
min,and: 0.0003943217665615142
ini+1..<array.count 0.0002628811777076761
i+1..<array.count{ 0.0002628811777076761
ifarray[j] 0.0006572029442691904
array[j]< 0.0005257623554153522
<array[min] 0.0002628811777076761
array[min]{ 0.0002628811777076761
//calculate 0.0002628811777076761
everyelement 0.0005257623554153522
=[Int](repeatElement(0, 0.0002628811777076761
[Int](repeatElement(0,count: 0.0002628811777076761
funcbucketSort(_ 0.0002628811777076761
bucketSort(_array: 0.0002628811777076761
forval 0.0002628811777076761
valin 0.0002628811777076761
ifval 0.0002628811777076761
=val 0.0002628811777076761
-min) 0.0003943217665615142
min)/ 0.0002628811777076761
/step 0.0002628811777076761
putvalue 0.0002628811777076761
in0..<buckets.count 0.0002628811777076761
0..<buckets.count{ 0.0002628811777076761
funcsortCore(_ 0.0002628811777076761
sortCore(_array: 0.0002628811777076761
everyclass 0.0002628811777076761
=Int(c 0.0003943217665615142
Int(c* 0.0003943217665615142
-min)) 0.0003943217665615142
min))+ 0.0003943217665615142
pClass[k]+= 0.0002628811777076761
pointto 0.0002628811777076761
boundof 0.0002628811777076761
ofclass 0.0002628811777076761
rightclass 0.0002628811777076761
array.count{ 0.0002628811777076761
pClass[k]{ 0.0002628811777076761
<array[p] 0.0002628811777076761
array[p]{ 0.0002628811777076761
letn: 0.0002628811777076761
n:Int 0.0002628811777076761
to:n 0.0005257623554153522
at:j, 0.0002628811777076761
j,and: 0.0002628811777076761
j+ 0.0002628811777076761
if!swapped 0.0002628811777076761
!swapped{ 0.0002628811777076761
recursiveMediaSort(&array,left: 0.0003943217665615142
[Int],left: 0.0006572029442691904
left:Int, 0.0006572029442691904
Int,right: 0.0006572029442691904
right:Int) 0.0003943217665615142
ifleft 0.0002628811777076761
left< 0.0002628811777076761
<right 0.0003943217665615142
right{ 0.0005257623554153522
piv= 0.0005257623554153522
=pivot(&array, 0.0002628811777076761
pivot(&array,left: 0.0002628811777076761
partition(&array,left: 0.0002628811777076761
pivot:piv) 0.0002628811777076761
piv- 0.0002628811777076761
piv+ 0.0002628811777076761
=right 0.0003943217665615142
left+ 0.0003943217665615142
median5(&array,left: 0.0002628811777076761
subRight= 0.0002628811777076761
right:Int, 0.0002628811777076761
=left 0.0003943217665615142
left:l, 0.0002628811777076761
l,right: 0.0002628811777076761
ifpiv 0.0002628811777076761
=piv 0.0002628811777076761
and:p1) 0.0002628811777076761
stride(from:array.count 0.0002628811777076761
sink(array:&array, 0.0002628811777076761
&array,at: 0.0002628811777076761
(i+ 0.0003943217665615142
1)* 0.0003943217665615142
<=indexB 0.0002628811777076761
=(i 0.0002628811777076761
pMax= 0.0002628811777076761
UInt32)-> 0.0003943217665615142
origin= 0.0003943217665615142
expect= 0.0002628811777076761
actual= 0.0002628811777076761
=expect 0.0002628811777076761
testwith 0.0002628811777076761
=getRandomElements(UInt32(size), 0.0002628811777076761
getRandomElements(UInt32(size),limitBy: 0.0002628811777076761
limitBy:UInt32(size 0.0002628811777076761
matrix:inout 0.0005257623554153522
inout[[T]]) 0.0005257623554153522
[[T]]){ 0.0005257623554153522
guardmatrix.count 0.0006572029442691904
matrix.count> 0.0006572029442691904
&&matrix.count 0.0006572029442691904
matrix.count== 0.0006572029442691904
==matrix[0].count 0.0006572029442691904
matrix[0].countelse 0.0006572029442691904
12 0.0009200841219768665
23 0.0007886435331230284
78 0.0007886435331230284
89 0.0007886435331230284
97 0.0002628811777076761
74 0.0002628811777076761
41 0.0002628811777076761
45 0.0007886435331230284
56 0.0007886435331230284
6=> 0.0006572029442691904
=>4 0.0002628811777076761
=>8 0.0002628811777076761
85 0.0002628811777076761
52 0.0002628811777076761
//7 0.0006572029442691904
39 0.0002628811777076761
96 0.0002628811777076761
63 0.0002628811777076761
36 0.0002628811777076761
69 0.0002628811777076761
=>2 0.0002628811777076761
25 0.0002628811777076761
58 0.0002628811777076761
14 0.0003943217665615142
47 0.0002628811777076761
in0..<matrix.count 0.0009200841219768665
0..<matrix.count{ 0.0007886435331230284
31 0.0002628811777076761
-j 0.0002628811777076761
j- 0.0003943217665615142
-1][matrix.count 0.0002628811777076761
1][matrix.count- 0.0002628811777076761
01 0.0003943217665615142
forrow 0.0002628811777076761
rowin 0.0002628811777076761
matrix= 0.0006572029442691904
[[Int]]= 0.0002628811777076761
=[[1, 0.0007886435331230284
[[1,2], 0.0002628811777076761
=[[ 0.0007886435331230284
[[1, 0.0005257623554153522
1,2, 0.0005257623554153522
2,3, 0.0003943217665615142
3,4], 0.0002628811777076761
[5, 0.0002628811777076761
6,7, 0.0003943217665615142
7,8], 0.0002628811777076761
10,11, 0.0002628811777076761
11,12], 0.0002628811777076761
14,15, 0.0002628811777076761
[[1,0, 0.0002628811777076761
0,0, 0.0009200841219768665
0,0], 0.0003943217665615142
[2,1, 0.0002628811777076761
[0,0, 0.0005257623554153522
0,1, 0.0003943217665615142
1,0], 0.0003943217665615142
lets2 0.0002628811777076761
s2= 0.0002628811777076761
s4= 0.0002628811777076761
s5= 0.0002628811777076761
2,7, 0.0002628811777076761
7,12, 0.0002628811777076761
letms 0.0003943217665615142
ms= 0.0003943217665615142
=[m0, 0.0010515247108307045
[m0,m1, 0.0010515247108307045
m1,m2, 0.0003943217665615142
m2,m4, 0.0003943217665615142
ss= 0.0002628811777076761
m1,s2, 0.0002628811777076761
s2,s4, 0.0002628811777076761
s4,s5] 0.0002628811777076761
in0..<ms.count 0.0005257623554153522
0..<ms.count{ 0.0005257623554153522
=ms[i] 0.0005257623554153522
({return$0 0.0002628811777076761
assert(same(matrix,ss[i])) 0.0002628811777076761
[2, 0.0002628811777076761
[3, 0.0002628811777076761
[4, 0.0002628811777076761
letr2 0.0002628811777076761
r2= 0.0002628811777076761
letr4 0.0002628811777076761
r4= 0.0002628811777076761
12,8, 0.0002628811777076761
[15,11, 0.0002628811777076761
11,7, 0.0002628811777076761
7,3], 0.0002628811777076761
[14,10, 0.0002628811777076761
10,6, 0.0002628811777076761
6,2], 0.0002628811777076761
9,5, 0.0002628811777076761
letr5 0.0002628811777076761
r5= 0.0002628811777076761
20,15, 0.0002628811777076761
15,10, 0.0002628811777076761
[24,19, 0.0002628811777076761
19,14, 0.0002628811777076761
14,9, 0.0002628811777076761
9,4], 0.0002628811777076761
[23,18, 0.0002628811777076761
18,13, 0.0002628811777076761
13,8, 0.0002628811777076761
8,3], 0.0002628811777076761
[22,17, 0.0002628811777076761
17,12, 0.0002628811777076761
12,7, 0.0002628811777076761
7,2], 0.0002628811777076761
16,11, 0.0002628811777076761
11,6, 0.0002628811777076761
m4,m5] 0.0002628811777076761
transposeof 0.0002628811777076761
thematrices 0.0003943217665615142
letrs 0.0002628811777076761
rs= 0.0002628811777076761
m1,r2, 0.0002628811777076761
r2,r4, 0.0002628811777076761
r4,r5] 0.0002628811777076761
assert(same(matrix,rs[i])) 0.0002628811777076761
=dimension 0.0005257623554153522
dimension- 0.0003943217665615142
num= 0.0002628811777076761
j== 0.0002628811777076761
==dimension 0.0002628811777076761
nextnumber 0.0002628811777076761
numbergoes 0.0002628811777076761
goesto 0.0002628811777076761
toout 0.0002628811777076761
outof 0.0002628811777076761
ofsquare's 0.0002628811777076761
=num 0.0002628811777076761
Python
=input("Enter 0.0007808941237717186
a= 0.0030585019847725646
="" 0.003253725515715494
total= 0.0004555215722001692
=0 0.01613847855794885
fori 0.021995184486236743
iin 0.021995184486236743
+=i 0.0004555215722001692
total+= 0.0005205960825144791
="0" 0.0004555215722001692
#INPUT: 0.0003904470618858593
#Enter 0.0006507451031430989
#OUTPUT: 0.0004555215722001692
astring 0.0005856705928287889
s= 0.0014967137372291273
m= 0.001626862757857747
l= 0.0010411921650289582
=[] 0.012299082449404568
"": 0.0003904470618858593
#The 0.001691937268172057
importcollections 0.0004555215722001692
=[ 0.002863278453829635
pathin 0.0003904470618858593
andnot 0.0005856705928287889
notin 0.0020173098197436064
={ 0.0006507451031430989
=set() 0.0007808941237717186
insuffixes: 0.0009110431444003384
forsuffix 0.0009110431444003384
suffixin 0.0010411921650289582
=None 0.004815513763258931
isthe 0.0026029804125723955
listof 0.001757011778486367
ofCosmos 0.010932517732804061
end="") 0.0021474588403722263
print("-"* 0.0005856705928287889
+1), 0.0005856705928287889
forp 0.0012364156959718878
pin 0.0012364156959718878
+=1 0.009631027526517863
",end="") 0.0005205960825144791
forx 0.004750439252944621
xin 0.0046853647426303114
+"/" 0.0005856705928287889
yin 0.0020173098197436064
-1 0.003318800026029804
defmain(): 0.0036441725776013537
canbe 0.0006507451031430989
forall 0.0005205960825144791
if__name__ 0.007548643196459946
__name__== 0.007548643196459946
=="__main__": 0.007483568686145637
p= 0.0007808941237717186
=dict() 0.0007808941237717186
foreach 0.0007158196134574087
x= 0.003774321598229973
"/"+ 0.0004555215722001692
#if 0.001757011778486367
ifnot 0.0026029804125723955
#Part 0.009110431444003383
Partof 0.010737294201861132
Cosmosby 0.010867443222489752
byOpenGenus 0.010737294201861132
OpenGenusFoundation 0.010411921650289582
def__init__(self, 0.004815513763258931
self.data= 0.0014316392269148174
==0 0.0014316392269148174
returnFalse 0.004099694149801523
returnTrue 0.003514023556972734
==0: 0.00559640788703065
returnNone 0.0013014902062861977
-=1 0.0026680549228867054
returnx 0.0007158196134574087
print("Queueis 0.0003904470618858593
out= 0.0005856705928287889
+" 0.0009110431444003384
"" 0.0005856705928287889
"+ 0.003318800026029804
print("Enterthe 0.0006507451031430989
thesize 0.0003904470618858593
sizeof 0.0005856705928287889
n= 0.005336109845773411
=int(input()) 0.001626862757857747
q= 0.0005856705928287889
whileTrue: 0.0014967137372291273
elementsof 0.0004555215722001692
ofthe 0.008589835361488905
==None: 0.0012364156959718878
#Make 0.0003904470618858593
anew 0.0007158196134574087
tothe 0.003383874536344114
thefirst 0.0011713411856575779
#Returns 0.0007158196134574087
Returnsthe 0.0009110431444003384
themaximum 0.0005205960825144791
defsize(self): 0.0003904470618858593
thatthe 0.0006507451031430989
#Return 0.0003904470618858593
>0: 0.0030585019847725646
tobe 0.0013665647166005077
foritem 0.0005856705928287889
itemin 0.0009761176547146483
isin 0.0005205960825144791
temp= 0.0020173098197436064
#Add 0.0005205960825144791
itwill 0.0004555215722001692
=[1, 0.0006507451031430989
willbe 0.001691937268172057
def__init__(self): 0.0019522353094292965
defpush(self, 0.0005205960825144791
defpop(self): 0.0003904470618858593
elementsin 0.0006507451031430989
whilenot 0.0007808941237717186
fromrandom 0.0005856705928287889
randomimport 0.0005856705928287889
inrange(1, 0.0035790980672870437
for_ 0.0008459686340860285
_in 0.0008459686340860285
inrange(0, 0.004750439252944621
=x 0.0011062666753432681
+1) 0.0030585019847725646
1)% 0.0006507451031430989
forn 0.0005856705928287889
nin 0.0007808941237717186
classNode: 0.0010411921650289582
=data 0.0011062666753432681
self.next= 0.0006507451031430989
=next 0.0004555215722001692
N= 0.0003904470618858593
!=None: 0.0013014902062861977
first= 0.0003904470618858593
inpython 0.0003904470618858593
[]# 0.0007158196134574087
#''' 0.0004555215722001692
k= 0.0022125333506865363
nodeis 0.0006507451031430989
isa 0.001691937268172057
alist 0.0015617882475434373
tothis 0.0004555215722001692
ofthis 0.0004555215722001692
def__str__(self): 0.0004555215722001692
forthe 0.0019522353094292965
thekey 0.0008459686340860285
i= 0.004945662783887551
whilei 0.0018871607991149866
i< 0.0014316392269148174
forindex 0.0004555215722001692
indexof 0.0006507451031430989
i+= 0.0022125333506865363
ifi 0.0025379059022580855
k== 0.0003904470618858593
else:# 0.0004555215722001692
definsert(self, 0.0003904470618858593
r= 0.0011713411856575779
=self.root 0.0004555215722001692
(2* 0.0013665647166005077
-1: 0.0011062666753432681
rootis 0.0004555215722001692
#insert 0.0003904470618858593
>=0 0.0006507451031430989
0and 0.001626862757857747
k< 0.0003904470618858593
+1] 0.0013665647166005077
1]= 0.001691937268172057
=k 0.0007158196134574087
ifk 0.0006507451031430989
t= 0.0012364156959718878
y= 0.0025379059022580855
theright 0.0005205960825144791
+1, 0.0030585019847725646
-1]) 0.0008459686340860285
-1, 0.0023426823713151557
arrayof 0.0007158196134574087
arrayfor 0.0003904470618858593
arrayto 0.0004555215722001692
tostore 0.0006507451031430989
inthe 0.004815513763258931
fromthe 0.0014316392269148174
theindex 0.0005856705928287889
i- 0.0009761176547146483
+1 0.005986854948916509
thelast 0.0007808941237717186
#To 0.0005856705928287889
+1): 0.0031886510054011845
defupdate(self, 0.0003904470618858593
ina 0.0009110431444003384
anumber 0.0006507451031430989
x+ 0.0005205960825144791
x> 0.0004555215722001692
x- 0.0003904470618858593
=int(input("Enter 0.0021474588403722263
int(input("Enterthe 0.0005205960825144791
thelist 0.0013014902062861977
int(input("Enternumber 0.0003904470618858593
numberof 0.0030585019847725646
"% 0.0003904470618858593
-1)) 0.0003904470618858593
={} 0.0031886510054011845
=a 0.0005856705928287889
path= 0.0004555215722001692
nodein 0.0006507451031430989
ifa 0.0007808941237717186
=1 0.007028047113945468
return0 0.0008459686340860285
return2 0.0005856705928287889
2* 0.0020823843300579164
*i 0.0009110431444003384
i+ 0.002798203943515325
+2 0.0007808941237717186
length= 0.0008459686340860285
=l 0.0004555215722001692
=i 0.002863278453829635
ifr 0.0006507451031430989
-1) 0.0031886510054011845
1)// 0.0003904470618858593
-1,-1): 0.0003904470618858593
thearray 0.0013014902062861977
youwant 0.0007808941237717186
wantto 0.0010411921650289582
tocreate 0.0004555215722001692
createa 0.0005205960825144791
smallest= 0.0005205960825144791
ina: 0.0003904470618858593
importmath 0.0014316392269148174
p- 0.0003904470618858593
<0: 0.0007158196134574087
return-1 0.0009761176547146483
return1 0.0007158196134574087
ifn 0.0031235764950868746
start= 0.0009110431444003384
/2) 0.0008459686340860285
0,-1): 0.0003904470618858593
n== 0.0009761176547146483
-1] 0.0035790980672870437
-1], 0.0005205960825144791
n- 0.0018871607991149866
if( 0.0004555215722001692
ornot 0.0007808941237717186
<0 0.0007808941237717186
=( 0.0013014902062861977
index= 0.0013665647166005077
=index 0.0007158196134574087
=2 0.0024077568816294657
j= 0.0020823843300579164
<n 0.0004555215722001692
nand 0.0006507451031430989
=j 0.0012364156959718878
returni 0.0005856705928287889
i> 0.0004555215722001692
def__repr__(self): 0.0007808941237717186
characterin 0.0005205960825144791
node= 0.0004555215722001692
c= 0.0014967137372291273
=c 0.0005856705928287889
root= 0.0015617882475434373
self.left= 0.0008459686340860285
self.right= 0.0008459686340860285
tmp= 0.0011062666753432681
=node 0.0005205960825144791
=tmp.parent 0.0004555215722001692
result= 0.0031235764950868746
returnresult 0.0014967137372291273
self.head= 0.001691937268172057
isNone: 0.0018220862888006768
=self.head 0.0014316392269148174
=list() 0.0013665647166005077
thenode 0.0005856705928287889
withthe 0.0013665647166005077
ifthe 0.0013665647166005077
anode 0.0007158196134574087
!=0: 0.0020823843300579164
=True 0.0020823843300579164
=False 0.0011713411856575779
#Python 0.0011713411856575779
Pythonprogram 0.0009761176547146483
programto 0.0013014902062861977
toprint 0.0005856705928287889
#A 0.0018871607991149866
binarytree 0.0004555215722001692
functionto 0.0013014902062861977
#is 0.0003904470618858593
ifroot 0.0005856705928287889
#If 0.002798203943515325
thisis 0.0004555215722001692
#Recur 0.0003904470618858593
Recurfor 0.0003904470618858593
level+ 0.0003904470618858593
1,max_level) 0.0003904470618858593
=[0] 0.0009761176547146483
#Driver 0.0011713411856575779
Driverprogram 0.0006507451031430989
totest 0.0006507451031430989
testabove 0.0004555215722001692
abovefunction 0.0004555215722001692
root.left= 0.0004555215722001692
root.right= 0.0005205960825144791
ofa 0.001691937268172057
ifval 0.0005205960825144791
val< 0.0004555215722001692
current= 0.0011713411856575779
isnot 0.0026029804125723955
notNone: 0.0012364156959718878
ifcurrent 0.0003904470618858593
functionfor 0.0003904470618858593
right= 0.0014316392269148174
left= 0.0009761176547146483
#Given 0.0004555215722001692
abinary 0.0003904470618858593
needto 0.0005205960825144791
thelength 0.0007158196134574087
lengthof 0.0011062666753432681
#1 0.0004555215722001692
#/ 0.0005205960825144791
/\ 0.0010411921650289582
#2 0.0004555215722001692
23 0.0011713411856575779
45 0.0008459686340860285
thepath 0.0005205960825144791
bythe 0.0005856705928287889
thenumber 0.0011713411856575779
fora 0.0011062666753432681
returnsthe 0.0006507451031430989
andthe 0.0005856705928287889
0,0 0.0003904470618858593
1+ 0.0004555215722001692
tofind 0.0010411921650289582
agiven 0.0008459686340860285
=left 0.0007158196134574087
ifroot: 0.0003904470618858593
=root 0.0003904470618858593
ifx 0.0013665647166005077
x== 0.0006507451031430989
i== 0.0012364156959718878
k+= 0.0005856705928287889
-1): 0.0013014902062861977
forj 0.006507451031430988
jin 0.006702674562373918
shouldbe 0.0003904470618858593
12 0.0009110431444003384
ifit 0.0005205960825144791
ifself.head 0.0003904470618858593
num= 0.0009761176547146483
Computethe 0.0004555215722001692
ofeach 0.0005856705928287889
mid= 0.0009110431444003384
//2 0.0013014902062861977
ifindex 0.0005205960825144791
*node) 0.0005205960825144791
node)+ 0.0005205960825144791
*2 0.0005856705928287889
2+ 0.0011713411856575779
+1]) 0.0004555215722001692
mid+ 0.0008459686340860285
xand 0.0008459686340860285
r== 0.0003904470618858593
andy 0.0010411921650289582
arr= 0.0011062666753432681
=list(map(int, 0.0011062666753432681
valuefor 0.0003904470618858593
x,y 0.0009761176547146483
thegiven 0.0013014902062861977
is" 0.0005856705928287889
=y 0.0007808941237717186
1,0, 0.0013014902062861977
=len(arr) 0.0007808941237717186
#number 0.0005856705928287889
[0]* 0.0008459686340860285
)# 0.0010411921650289582
/2 0.0008459686340860285
*node 0.0003904470618858593
node+ 0.0003904470618858593
1# 0.0010411921650289582
leftchild 0.0003904470618858593
childindex 0.0003904470618858593
2# 0.0003904470618858593
rightchild 0.0005205960825144791
sumof 0.0005856705928287889
ifj 0.0004555215722001692
j< 0.0004555215722001692
andj 0.0003904470618858593
i<= 0.0007158196134574087
#update 0.0005205960825144791
2,3, 0.0006507451031430989
=4 0.0003904470618858593
Createa 0.0007808941237717186
toadd 0.0005205960825144791
methodto 0.0003904470618858593
#Initialize 0.0005205960825144791
asa 0.0009110431444003384
thebag 0.0003904470618858593
#Test 0.0004555215722001692
sis 0.0005205960825144791
input("Enterthe 0.0007808941237717186
importsys 0.0009110431444003384
ifself._verbose: 0.0005856705928287889
instack 0.0004555215722001692
:", 0.0005856705928287889
b= 0.0020823843300579164
{}and 0.0003904470618858593
andb 0.0004555215722001692
a,b 0.0005205960825144791
0# 0.0006507451031430989
arrayin 0.0003904470618858593
anarray 0.0005856705928287889
onthe 0.0013014902062861977
returnthe 0.0005856705928287889
=3 0.0009110431444003384
return" 0.0004555215722001692
#check 0.0008459686340860285
checkif 0.0003904470618858593
thestack 0.0007158196134574087
intothe 0.0005856705928287889
#get 0.0005205960825144791
#this 0.0008459686340860285
cur_node= 0.0005205960825144791
==1: 0.0021474588403722263
new_node= 0.0003904470618858593
=new_node 0.0004555215722001692
atthe 0.0011713411856575779
SinglyLinked 0.0003904470618858593
LinkedList 0.0006507451031430989
singly-linkedlist 0.0005205960825144791
storedin 0.0003904470618858593
thenext 0.0005856705928287889
current_node= 0.0015617882475434373
=current_node.next 0.0007808941237717186
representationof 0.0006507451031430989
"-> 0.0003904470618858593
i!= 0.0003904470618858593
elementis 0.0004555215722001692
size= 0.0007158196134574087
newnode 0.0004555215722001692
#Function 0.0014967137372291273
Functionto 0.0010411921650289582
listis 0.0003904470618858593
tocheck 0.0005205960825144791
hasa 0.0003904470618858593
prev= 0.0003904470618858593
=n 0.0019522353094292965
self.first= 0.0003904470618858593
self.last= 0.0003904470618858593
ifself.count 0.0004555215722001692
self.count== 0.0004555215722001692
nodeas 0.0005205960825144791
asthe 0.0008459686340860285
result+= 0.0005205960825144791
+=" 0.0005205960825144791
basedon 0.0005205960825144791
usedto 0.0005856705928287889
inrange(n)] 0.0012364156959718878
output= 0.0010411921650289582
=-1 0.0007158196134574087
index== 0.0003904470618858593
state= 0.0015617882475434373
Afalse 0.0003904470618858593
+1], 0.0003904470618858593
inrange(n): 0.0010411921650289582
|Python 0.0005856705928287889
partof 0.0005205960825144791
j+= 0.0005856705928287889
-i 0.0005856705928287889
returna 0.0006507451031430989
>1: 0.0010411921650289582
3,4, 0.0005205960825144791
count= 0.0014316392269148174
%s"% 0.0005205960825144791
importnumpy 0.0020173098197436064
numpyas 0.0018871607991149866
asnp 0.0018220862888006768
i* 0.0006507451031430989
d= 0.0013665647166005077
e= 0.0009761176547146483
f= 0.0006507451031430989
g= 0.0014316392269148174
h= 0.0007158196134574087
inrange(r): 0.0005856705928287889
+j] 0.0005856705928287889
j]= 0.0005205960825144791
print("enterthe 0.0003904470618858593
r2= 0.0003904470618858593
y2= 0.0003904470618858593
row= 0.0005205960825144791
j+ 0.0006507451031430989
**2 0.0012364156959718878
**2) 0.0005205960825144791
#Call 0.0004555215722001692
ifd 0.0003904470618858593
#Create 0.0010411921650289582
inrange(i 0.0004555215722001692
ax= 0.0005856705928287889
==2: 0.0003904470618858593
!=1: 0.0003904470618858593
#Update 0.0004555215722001692
isused 0.0004555215722001692
#base 0.0004555215722001692
basecase 0.0003904470618858593
ifnum 0.0004555215722001692
0or 0.0012364156959718878
=input() 0.0003904470618858593
//2] 0.0003904470618858593
ans= 0.0007808941237717186
buffer= 0.0003904470618858593
chin 0.0003904470618858593
ofnumbers 0.0005205960825144791
toa 0.0004555215722001692
:i 0.0004555215722001692
plaintext= 0.0004555215722001692
ciphertext= 0.0004555215722001692
ciphertext+= 0.0008459686340860285
fori, 0.0004555215722001692
cin 0.0006507451031430989
thefollowing 0.0006507451031430989
findthe 0.0007808941237717186
#the 0.0010411921650289582
#and 0.0004555215722001692
mustbe 0.0007808941237717186
AB 0.003383874536344114
BC 0.003383874536344114
CD 0.003383874536344114
DE 0.003383874536344114
EF 0.003383874536344114
FG 0.003383874536344114
GH 0.003383874536344114
HI 0.003383874536344114
IJ 0.003383874536344114
JK 0.003383874536344114
KL 0.003383874536344114
LM 0.003383874536344114
MN 0.003383874536344114
NO 0.003383874536344114
OP 0.003383874536344114
PQ 0.003383874536344114
QR 0.003383874536344114
RS 0.003383874536344114
ST 0.003383874536344114
TU 0.003383874536344114
UV 0.003383874536344114
VW 0.003383874536344114
WX 0.003383874536344114
XY 0.003383874536344114
YZ 0.003383874536344114
ZA 0.003253725515715494
key= 0.0007158196134574087
indexin 0.0003904470618858593
fork 0.0020173098197436064
kin 0.0021474588403722263
accordingto 0.0005856705928287889
stringto 0.0004555215722001692
string= 0.0005205960825144791
ret= 0.0005205960825144791
self.key[i]in 0.0008459686340860285
ret+= 0.0013665647166005077
elifself.key[i] 0.0007808941237717186
thesame 0.0006507451031430989
*n 0.0005856705928287889
=b 0.0004555215722001692
","") 0.0003904470618858593
keyin 0.0003904470618858593
setof 0.0006507451031430989
havethe 0.0003904470618858593
forc 0.0005856705928287889
%2 0.0018220862888006768
2!= 0.0003904470618858593
#Generate 0.0007158196134574087
=m 0.0005856705928287889
w= 0.0006507451031430989
=[[0 0.0009110431444003384
[[0for 0.0009110431444003384
fory 0.0014316392269148174
not_0= 0.0003904470618858593
=0, 0.0005856705928287889
0,0, 0.0037092470879156636
1and 0.0010411921650289582
forrow 0.0012364156959718878
rowin 0.0013014902062861977
#This 0.0009110431444003384
#Used 0.0003904470618858593
#output: 0.0006507451031430989
#=============================================================================== 0.0003904470618858593
theresult 0.0004555215722001692
inrange(4): 0.0009110431444003384
theleft 0.0006507451031430989
witha 0.0005205960825144791
elementin 0.0005205960825144791
toget 0.0003904470618858593
roundkey 0.0004555215722001692
j== 0.0004555215722001692
cyphertext 0.0003904470618858593
trueif 0.0003904470618858593
tosee 0.0003904470618858593
#all 0.0004555215722001692
allthe 0.0013665647166005077
ifprocess: 0.0005205960825144791
c1= 0.0006507451031430989
+str(i) 0.0003904470618858593
str(i)+ 0.0003904470618858593
=addRoundKey(state, 0.0003904470618858593
andstore 0.0003904470618858593
nota 0.0003904470618858593
thestring 0.0004555215722001692
c2= 0.0005856705928287889
morsecode 0.0003904470618858593
trackof 0.0004555215722001692
torun 0.0005205960825144791
mainfunction 0.0003904470618858593
setto 0.0003904470618858593
==1 0.0006507451031430989
isset 0.0003904470618858593
greaterthan 0.0008459686340860285
*x 0.0007808941237717186
*/(4 0.0005856705928287889
(4bytes) 0.0005856705928287889
3,0, 0.0003904470618858593
01 0.0007808941237717186
34 0.0007158196134574087
56 0.0005205960825144791
67 0.0005856705928287889
78 0.0005205960825144791
89 0.0003904470618858593
90 0.0003904470618858593
isan 0.0003904470618858593
=flag 0.0003904470618858593
flag& 0.0003904470618858593
%hu"% 0.0005856705928287889
=" 0.0009110431444003384
recv= 0.0003904470618858593
>>1 0.0003904470618858593
ip= 0.0003904470618858593
#Check 0.0011713411856575779
Checkif 0.0009761176547146483
"is 0.0006507451031430989
==False 0.0004555215722001692
-1]: 0.0005205960825144791
end= 0.0005856705928287889
#should 0.0005856705928287889
shouldoutput 0.0005856705928287889
outputtrue 0.0003904470618858593
count+= 0.0003904470618858593
res= 0.001626862757857747
returnres 0.0004555215722001692
#for 0.0006507451031430989
stringis 0.0007158196134574087
=[False] 0.0006507451031430989
[False]* 0.0006507451031430989
"""Part 0.0003904470618858593
ofall 0.0007808941237717186
fors 0.0005205960825144791
sin 0.0005856705928287889
ifp 0.0004555215722001692
foundat 0.0004555215722001692
theabove 0.0005856705928287889
whilej 0.0005205960825144791
n/ 0.0003904470618858593
n<= 0.0007158196134574087
2== 0.0013014902062861977
frommath 0.0007158196134574087
mathimport 0.0007158196134574087
+=2 0.0003904470618858593
actual= 0.0004555215722001692
togenerate 0.0003904470618858593
inrange(2, 0.0007808941237717186
1)* 0.0004555215722001692
number= 0.0006507451031430989
numbers= 0.0003904470618858593
whilen 0.0006507451031430989
n% 0.0011713411856575779
==0) 0.0003904470618858593
itis 0.0004555215722001692
whileb 0.0003904470618858593
m+ 0.0004555215722001692
=mid 0.0003904470618858593
lambdax: 0.0005205960825144791
<=1: 0.0006507451031430989
returnn 0.0003904470618858593
2)+ 0.0004555215722001692
=num 0.0005205960825144791
-y 0.0003904470618858593
numberin 0.0004555215722001692
a% 0.0005205960825144791
1- 0.0003904470618858593
range(1,n 0.0007808941237717186
n+ 0.0011713411856575779
thesmallest 0.0003904470618858593
isgreater 0.0006507451031430989
#Start 0.0003904470618858593
thatis 0.0003904470618858593
thanthe 0.0004555215722001692
inrange(n 0.0008459686340860285
#Find 0.0004555215722001692
x* 0.0005856705928287889
=[0 0.0008459686340860285
[0for 0.0008459686340860285
+1)] 0.0008459686340860285
=[2, 0.0003904470618858593
(x,y) 0.0004555215722001692
*y 0.0004555215722001692
importrandom 0.0011713411856575779
ofan 0.0003904470618858593
equalto 0.0008459686340860285
=temp 0.0009110431444003384
1]+ 0.0007158196134574087
Returnsa 0.0005205960825144791
1,1, 0.0010411921650289582
%N 0.0005205960825144791
k+ 0.0004555215722001692
=5 0.0003904470618858593
=count 0.0003904470618858593
range(n)]for 0.0005205960825144791
-2 0.0004555215722001692
needsto 0.0005205960825144791
=0.0 0.0006507451031430989
=float(input("Enter 0.0006507451031430989
=step 0.0003904470618858593
step* 0.0007808941237717186
+step 0.0003904470618858593
move= 0.0005205960825144791
importmatplotlib.pyplot 0.0008459686340860285
matplotlib.pyplotas 0.0008459686340860285
fromcollections 0.0009761176547146483
collectionsimport 0.0009761176547146483
thegraph 0.0003904470618858593
#Calculate 0.0005856705928287889
target= 0.0005205960825144791
print("Numberof 0.0003904470618858593
exceptKeyError: 0.0005205960825144791
forstate 0.0007158196134574087
statein 0.0007808941237717186
amplitude= 0.0004555215722001692
forx, 0.0007158196134574087
no.of 0.0003904470618858593
arandom 0.0005856705928287889
=0.01 0.0003904470618858593
dataset= 0.0003904470618858593
Calculatethe 0.0005856705928287889
=10 0.0007158196134574087
asplt 0.0008459686340860285
+"and" 0.0005856705928287889
"and"+ 0.0005856705928287889
+k] 0.0003904470618858593
positions= 0.0003904470618858593
velocities= 0.0003904470618858593
=0.1 0.0003904470618858593
inrange(particles): 0.0005205960825144791
*(k 0.0005205960825144791
(k/ 0.0005205960825144791
/num_iters) 0.0005205960825144791
=0.5 0.0007158196134574087
neighbours_best= 0.0003904470618858593
inpositions] 0.0003904470618858593
gbest= 0.0003904470618858593
[1,1, 0.0003904470618858593
4,5, 0.0003904470618858593
data= 0.0004555215722001692
distance= 0.0004555215722001692
dist= 0.0003904470618858593
ifself.board[y][x] 0.0003904470618858593
inrange(self.n): 0.0007808941237717186
thecurrent 0.0013014902062861977
self.board[y][x]== 0.0004555215722001692
theplayer 0.0004555215722001692
1]== 0.0006507451031430989
importdefaultdict 0.0006507451031430989
i,j 0.0003904470618858593
#Testing 0.0003904470618858593
Enterthe 0.0004555215722001692
y1,x2, 0.0004555215722001692
#step 0.0007158196134574087
forv 0.0013014902062861977
vin 0.0013665647166005077
X= 0.0007158196134574087
u= 0.0005856705928287889
Y= 0.0003904470618858593
W= 0.0003904470618858593
thewhole 0.0003904470618858593
scattermatrix 0.0003904470618858593
eigenvectors 0.0003904470618858593
valueof 0.0010411921650289582
0,0], 0.0009761176547146483
[0,1, 0.0005205960825144791
[0,0, 0.0008459686340860285
beta* 0.0004555215722001692
-lamda 0.0003904470618858593
lamda* 0.0003904470618858593
self.layers[i+ 0.0006507451031430989
==x: 0.0004555215722001692
left+ 0.0004555215722001692
ifleft 0.0004555215722001692
andarr[left] 0.0003904470618858593
search_funcs+= 0.0005205960825144791
dynamicprogramming 0.0004555215722001692
endingwith 0.0004555215722001692
range(n+ 0.0005856705928287889
arr[n- 0.0003904470618858593
list(map(int,input("Enter 0.0004555215722001692
allpossible 0.0007158196134574087
1to 0.0004555215722001692
theminimum 0.0005856705928287889
>0 0.0005205960825144791
+1][k] 0.0006507451031430989
editDistance(str1,str2, 0.0003904470618858593
#returns 0.0003904470618858593
#Node 0.0006507451031430989
arrayis 0.0003904470618858593
l[i+ 0.0003904470618858593
+1]: 0.0005856705928287889
pos= 0.0004555215722001692
swap= 0.0005856705928287889
classGraph: 0.0009761176547146483
__init__(self,vertices): 0.0005856705928287889
self.graph= 0.0008459686340860285
=defaultdict(list) 0.0003904470618858593
self.V= 0.0006507451031430989
=vertices 0.0005856705928287889
defaddEdge(self, 0.0005205960825144791
addEdge(self,u, 0.0003904470618858593
u,v): 0.0004555215722001692
#Mark 0.0007808941237717186
asvisited 0.0005205960825144791
ifvisited[i] 0.0005205960825144791
visited[i]== 0.0005205960825144791
==False: 0.0007808941237717186
visited= 0.0005205960825144791
*self.V 0.0005856705928287889
inrange(self.V): 0.0009761176547146483
sort_list[i+ 0.0003904470618858593
functionthat 0.0003904470618858593
#import 0.0003904470618858593
#sort_func 0.0009761176547146483
sort_func= 0.0009761176547146483
=random.randint(0, 0.0003904470618858593
thereis 0.0003904470618858593
=[-1] 0.0004555215722001692
[-1]* 0.0004555215722001692
=Graph(5) 0.0005205960825144791
|/ 0.0007158196134574087
inrange(vertices)] 0.0003904470618858593
thisvertex 0.0003904470618858593
forvertex 0.0003904470618858593
vertexin 0.0006507451031430989
\| 0.0003904470618858593
0,1, 0.0008459686340860285
[1,0, 0.0003904470618858593
ofvertices 0.0006507451031430989
thevertices 0.0007158196134574087
agraph 0.0004555215722001692
ifu 0.0004555215722001692
u,v, 0.0005205960825144791
shortestpath 0.0005856705928287889
range(0,vertex): 0.0003904470618858593
storethe 0.0005205960825144791
minimumdistance 0.0004555215722001692
pathtree 0.0004555215722001692
dist[u]+ 0.0007158196134574087
dist[v]= 0.0003904470618858593
2,0, 0.0003904470618858593
uin 0.0006507451031430989
foru 0.0005856705928287889
v,w 0.0003904470618858593
hasdistance: 0.0006507451031430989
graph= 0.0003904470618858593
destination,edgecost, 0.0003904470618858593
fromheap 0.0005205960825144791
[50,25, 0.0004555215722001692
25,10, 0.0005205960825144791
10,5, 0.0005205960825144791
5,1], 0.0004555215722001692
and(nim 0.0003904470618858593
"Pick{} 0.0003904470618858593
{}objects 0.0003904470618858593
objectsfrom 0.0004555215722001692
objectList.index(max(objectList))+ 0.0004555215722001692
theboard 0.0005205960825144791
movesfor 0.0003904470618858593
adisc 0.0003904470618858593
board(Board): 0.0003904470618858593
(Board):Current 0.0003904470618858593
Currentboard 0.0003904470618858593
boardstate 0.0003904470618858593
depth_limit(int): 0.0003904470618858593
(int):Depth 0.0003904470618858593
Depthlimit 0.0003904470618858593
ifplayers 0.0003904470618858593
best_value= 0.0003904470618858593
Generateall 0.0003904470618858593
possiblemoves 0.0003904470618858593
depth_limit- 0.0003904470618858593
inrange(9): 0.0003904470618858593
ofpoint 0.0007808941237717186
height- 0.0004555215722001692
theelements: 0.0006507451031430989
Go
//Part 0.006722024515618822
Partof 0.009489916963226572
ofCosmos 0.009885330170027679
Cosmosby 0.009621721365493607
byOpenGenus 0.010017134572294714
OpenGenusFoundation 0.010017134572294714
packagemain 0.014234875444839857
import"fmt" 0.008435481745090286
typeQueue 0.00026360880453407144
Queue[]int 0.00026360880453407144
func(s 0.0017134572294714644
(s*Queue) 0.0005272176090681429
*Queue)Push(v 0.00026360880453407144
Push(vint) 0.0005272176090681429
Queue{ 0.00026360880453407144
returnappend(*s, 0.00026360880453407144
append(*s,v) 0.00039541320680110717
*Queue)Pop() 0.00026360880453407144
length:= 0.0006590220113351786
:=len(*s) 0.00039541320680110717
iflength 0.0005272176090681429
length!= 0.0005272176090681429
!=0 0.0013180440226703571
0{ 0.0071174377224199285
return*s 0.00026360880453407144
*Queue)Top() 0.00026360880453407144
Top()int 0.0007908264136022143
int{ 0.009489916963226572
*Queue)Empty() 0.00026360880453407144
Empty()bool 0.0007908264136022143
bool{ 0.003690523263477
iflen(*s) 0.00039541320680110717
len(*s)== 0.00039541320680110717
==0 0.0046131540793462504
returntrue 0.0017134572294714644
returnfalse 0.0021088704362725716
funcmain() 0.014498484249373928
main(){ 0.014366679847106894
queue:= 0.00026360880453407144
:=Queue{} 0.00026360880453407144
fmt.Printf("CurrentQueue 0.00092263081586925
Queueis 0.0010544352181362858
is%s, 0.0005272176090681429
%s,Is 0.0005272176090681429
IsQueue 0.0006590220113351786
Queueempty 0.0006590220113351786
empty? 0.0013180440226703571
?%v 0.0007908264136022143
%v\n", 0.00092263081586925
\n",queue, 0.00039541320680110717
queue,queue.Empty()) 0.0005272176090681429
fmt.Printf("Tryto 0.002372479240806643
topush 0.0039541320680110716
push30 0.0007908264136022143
30into 0.0007908264136022143
intoQueue\n") 0.0011862396204033216
queue= 0.0007908264136022143
is%v, 0.0013180440226703571
%v,top 0.0007908264136022143
topvalue 0.0007908264136022143
valueis 0.0014498484249373929
is%v\n", 0.0013180440226703571
%v\n",queue, 0.0005272176090681429
queue,queue.Top()) 0.00039541320680110717
push12 0.0007908264136022143
12into 0.0007908264136022143
push34 0.0007908264136022143
34into 0.0007908264136022143
%v,Is 0.0005272176090681429
=queue.Pop() 0.00039541320680110717
?%v\n", 0.00026360880453407144
Exptectedoutput: 0.00026360880453407144
is[], 0.00026360880453407144
[],Is 0.00026360880453407144
?true 0.00026360880453407144
Tryto 0.0015816528272044287
intoQueue 0.0007908264136022143
push2 0.0005272176090681429
2into 0.0005272176090681429
push17 0.0005272176090681429
17into 0.0005272176090681429
push88 0.0005272176090681429
88into 0.0005272176090681429
func(q 0.0006590220113351786
(q*Queue) 0.0006590220113351786
int){ 0.0057993936997495716
Pop(){ 0.00039541320680110717
Reverse(){ 0.00026360880453407144
fori, 0.0017134572294714644
i,j 0.0007908264136022143
j:= 0.0039541320680110716
:=0, 0.00092263081586925
i< 0.006985633320152893
<j; 0.00026360880453407144
j;i, 0.00026360880453407144
j= 0.0010544352181362858
=i+1, 0.00026360880453407144
i+1,j-1 0.00026360880453407144
j-1{ 0.00026360880453407144
fmt.Printf("%d", 0.00026360880453407144
struct{ 0.004085936470278107
Nint 0.00039541320680110717
func(bit 0.0006590220113351786
(bit*FenwickTree) 0.0006590220113351786
Initialize(nint) 0.00039541320680110717
=n 0.0013180440226703571
=make([]int, 0.0014498484249373929
make([]int,n+1) 0.00026360880453407144
int)int 0.006590220113351786
int,val 0.0006590220113351786
valint) 0.0006590220113351786
for; 0.0007908264136022143
;idx 0.00026360880453407144
bit.lsb(idx){ 0.00026360880453407144
sum:= 0.0007908264136022143
:=0 0.003690523263477
>0; 0.00039541320680110717
sum+= 0.0005272176090681429
returnsum 0.0007908264136022143
int,r 0.00092263081586925
rint) 0.00039541320680110717
arr:= 0.0011862396204033216
:=[]int{1, 0.0021088704362725716
[]int{1,2, 0.0015816528272044287
2,3, 0.0018452616317385
3,4, 0.0014498484249373929
4,5} 0.0006590220113351786
n:= 0.002372479240806643
:=len(arr) 0.0005272176090681429
fori 0.011203374192698037
i:= 0.011862396204033215
:=0; 0.007776459733755107
0;i 0.005667589297482536
<n; 0.0017134572294714644
n;i++ 0.0022406748385396073
i++{ 0.008435481745090286
fmt.Printf("Rangesum 0.00026360880453407144
sumfrom 0.00026360880453407144
from2 0.00039541320680110717
2to 0.0006590220113351786
to4: 0.00039541320680110717
4:%v\n", 0.00039541320680110717
from1 0.0006590220113351786
1to 0.0006590220113351786
to5: 0.00092263081586925
5:%v\n", 0.00092263081586925
left,right 0.0005272176090681429
lengthint 0.00026360880453407144
func(st 0.0015816528272044287
(st*splayTree) 0.0015816528272044287
Item){ 0.00026360880453407144
l,r 0.00026360880453407144
r:= 0.0006590220113351786
t:= 0.00026360880453407144
:=st.root 0.00039541320680110717
:=true 0.00026360880453407144
switch{ 0.00026360880453407144
//item 0.00026360880453407144
itemmight 0.00026360880453407144
mightbe 0.00026360880453407144
beon 0.00026360880453407144
onthe 0.00039541320680110717
ift.left 0.0005272176090681429
t.left== 0.00039541320680110717
==nil 0.0039541320680110716
nil{ 0.005667589297482536
splaying= 0.0006590220113351786
=false 0.0014498484249373929
{// 0.00039541320680110717
y= 0.00026360880453407144
=t.left 0.00039541320680110717
t.left= 0.00039541320680110717
=t 0.0010544352181362858
t= 0.0006590220113351786
=y 0.00026360880453407144
r.left= 0.00026360880453407144
r= 0.00039541320680110717
ift.right 0.0005272176090681429
t.right== 0.00039541320680110717
=t.right 0.00039541320680110717
t.right= 0.00039541320680110717
l.right= 0.00026360880453407144
l= 0.0005272176090681429
foundthe 0.00026360880453407144
theitem 0.0011862396204033216
st.root= 0.0006590220113351786
Item)Item 0.00039541320680110717
Item{ 0.0006590220113351786
ifst.root 0.0005272176090681429
st.root== 0.0005272176090681429
returnnil 0.0011862396204033216
!=nil 0.0025042836430736785
panic("notimplemented") 0.0005272176090681429
n.left= 0.00026360880453407144
=st.root.left 0.00026360880453407144
n.right= 0.00026360880453407144
=st.root 0.00026360880453407144
=nil 0.0006590220113351786
=st.root.right 0.00026360880453407144
st.root.right= 0.00026360880453407144
//delete 0.00026360880453407144
deletethe 0.00026360880453407144
theroot 0.00026360880453407144
}else 0.009094503756425464
else{ 0.006985633320152893
x:= 0.00092263081586925
forx 0.0005272176090681429
x!= 0.00026360880453407144
x= 0.00039541320680110717
returnx.item 0.00026360880453407144
Len()int 0.00026360880453407144
Item,iterator 0.00039541320680110717
iteratorItemIterator) 0.00039541320680110717
ItemIterator){ 0.00039541320680110717
/*Part 0.0013180440226703571
Foundation*/ 0.0014498484249373929
//New 0.00026360880453407144
int)*UnionFind 0.00026360880453407144
*UnionFind{ 0.00026360880453407144
sizearrays 0.00026360880453407144
func(uf 0.0006590220113351786
(uf*UnionFind) 0.0006590220113351786
make([]int,N) 0.00026360880453407144
=i 0.0014498484249373929
=1 0.0013180440226703571
thetree 0.0005272176090681429
int,q 0.00026360880453407144
qint) 0.00026360880453407144
//Root 0.00026360880453407144
Rootor 0.00026360880453407144
orFind 0.00026360880453407144
tofind 0.00026360880453407144
//If 0.0010544352181362858
thearray 0.0006590220113351786
return-1 0.0010544352181362858
returnuf.Root(p) 0.00026360880453407144
//Check 0.0006590220113351786
Checkif 0.0005272176090681429
int)bool 0.0017134572294714644
<10; 0.0006590220113351786
10;i++ 0.00026360880453407144
forj 0.0028996968498747858
:=i 0.00092263081586925
i+ 0.0007908264136022143
+1; 0.0005272176090681429
1;j 0.0006590220113351786
j< 0.0015816528272044287
j++{ 0.0018452616317385
j){ 0.00039541320680110717
inthe 0.002372479240806643
thesame 0.00026360880453407144
typeMaxHeap 0.00039541320680110717
MaxHeapstruct 0.00039541320680110717
data[]int 0.00026360880453407144
funcswap(x, 0.00026360880453407144
swap(x,y 0.00026360880453407144
yint) 0.00092263081586925
int)(int, 0.0005272176090681429
(int,int) 0.00039541320680110717
returny, 0.00039541320680110717
y,x 0.00039541320680110717
func(h 0.0019770660340055358
(h*MaxHeap) 0.0014498484249373929
h.data= 0.0006590220113351786
=append(h.data, 0.00026360880453407144
append(h.data,value) 0.00026360880453407144
index:= 0.0013180440226703571
:=len(h.data) 0.0006590220113351786
len(h.data)- 0.0006590220113351786
-1 0.00276789244760775
parent:= 0.00039541320680110717
:=(index 0.0005272176090681429
(index- 0.0005272176090681429
-1) 0.0010544352181362858
1)/ 0.00092263081586925
/2 0.0017134572294714644
forindex 0.00039541320680110717
index> 0.00026360880453407144
>0 0.0015816528272044287
0&& 0.0011862396204033216
&&h.data[index] 0.00026360880453407144
h.data[parent]{ 0.00026360880453407144
h.data[index],h.data[parent] 0.00026360880453407144
h.data[parent]= 0.00026360880453407144
=swap(h.data[index], 0.0005272176090681429
swap(h.data[index],h.data[parent]) 0.00026360880453407144
index= 0.0006590220113351786
=parent 0.00026360880453407144
parent= 0.00026360880453407144
=(index 0.00026360880453407144
*MaxHeap)Top() 0.00026360880453407144
returnh.data[0] 0.00026360880453407144
max:= 0.0006590220113351786
:=h.Top() 0.00026360880453407144
h.data[0],h.data[index] 0.00039541320680110717
h.data[index]= 0.00039541320680110717
=swap(h.data[0], 0.00039541320680110717
swap(h.data[0],h.data[index]) 0.00039541320680110717
=h.data[:index] 0.00039541320680110717
returnmax 0.00026360880453407144
*MaxHeap)heapify(index 0.00026360880453407144
heapify(indexint) 0.00026360880453407144
left:= 0.00039541320680110717
(index* 0.00026360880453407144
*2) 0.00026360880453407144
2)+ 0.00026360880453407144
+1 0.0018452616317385
right:= 0.0006590220113351786
:=left 0.0007908264136022143
left+ 0.0006590220113351786
target:= 0.0006590220113351786
:=index 0.00026360880453407144
ifleft 0.0005272176090681429
left< 0.00039541320680110717
<len(h.data) 0.0005272176090681429
len(h.data)&& 0.0005272176090681429
&&h.data[left] 0.00026360880453407144
h.data[index]{ 0.00026360880453407144
target= 0.0005272176090681429
=left 0.00026360880453407144
ifright 0.0005272176090681429
right< 0.00026360880453407144
&&h.data[right] 0.00026360880453407144
h.data[target]{ 0.00026360880453407144
=right 0.00026360880453407144
iftarget 0.0006590220113351786
target!= 0.00039541320680110717
!=index 0.00026360880453407144
index{ 0.00026360880453407144
h.data[index],h.data[target] 0.00026360880453407144
h.data[target]= 0.00026360880453407144
swap(h.data[index],h.data[target]) 0.00026360880453407144
*MaxHeap)Empty() 0.00026360880453407144
returnlen(h.data) 0.00026360880453407144
len(h.data)== 0.00026360880453407144
data:= 0.0014498484249373929
:=[]int{45, 0.00026360880453407144
[]int{45,6, 0.00026360880453407144
6,4, 0.00039541320680110717
4,3, 0.00039541320680110717
3,2, 0.00039541320680110717
2,72, 0.00026360880453407144
72,34, 0.00026360880453407144
34,12, 0.00026360880453407144
12,456, 0.00026360880453407144
456,29, 0.00026360880453407144
29,312} 0.00026360880453407144
varh 0.00026360880453407144
hMaxHeap 0.00026360880453407144
for_, 0.004876762883880322
_,v 0.0015816528272044287
v:= 0.002372479240806643
:=range 0.00896269935415843
rangedata 0.0011862396204033216
data{ 0.0011862396204033216
for!h.Empty() 0.00026360880453407144
!h.Empty(){ 0.00026360880453407144
hasa 0.00026360880453407144
avalue 0.00026360880453407144
apointer 0.00026360880453407144
pointerto 0.00026360880453407144
valueinterface{} 0.00026360880453407144
anew 0.00039541320680110717
func(trie 0.00039541320680110717
(trie*TrieNode) 0.00039541320680110717
string)bool 0.0007908264136022143
node:= 0.0006590220113351786
:=trie 0.00039541320680110717
_,ch 0.00039541320680110717
ch:= 0.00039541320680110717
rangekey 0.0005272176090681429
key{ 0.0013180440226703571
node= 0.00039541320680110717
=node.children[ch] 0.00026360880453407144
ifnode 0.00039541320680110717
node== 0.00039541320680110717
valueint) 0.0006590220113351786
_:= 0.00092263081586925
=child 0.00039541320680110717
node.value= 0.00026360880453407144
=value 0.00092263081586925
ofthe 0.0017134572294714644
nodedoes 0.00026360880453407144
doesnot 0.00026360880453407144
notexist 0.00026360880453407144
itfrom 0.00026360880453407144
-1; 0.0005272176090681429
1;i 0.0017134572294714644
i>= 0.0011862396204033216
>=0; 0.00026360880453407144
0;i-- 0.00026360880453407144
i--{ 0.0007908264136022143
==0) 0.00039541320680110717
contains= 0.0005272176090681429
="contains" 0.00026360880453407144
="does 0.00026360880453407144
"doesnot 0.00026360880453407144
notcontain" 0.00026360880453407144
fmt.Printf("Trie%v 0.00026360880453407144
%v%v\n", 0.00026360880453407144
%v\n",contains, 0.00026360880453407144
typeNode 0.00026360880453407144
Nodestruct 0.00026360880453407144
func(ref 0.00026360880453407144
(ref*Node) 0.00026360880453407144
*Node){ 0.00026360880453407144
ifref.val 0.00026360880453407144
newNode.val{ 0.00026360880453407144
ifref.rchild 0.00026360880453407144
=newNode 0.0005272176090681429
ifref.lchild 0.00026360880453407144
bint) 0.00092263081586925
ifa 0.0005272176090681429
b{ 0.00039541320680110717
returna 0.0014498484249373929
returnb 0.00039541320680110717
return0 0.0006590220113351786
func(BSTree 0.00039541320680110717
(BSTree*BSTree) 0.00039541320680110717
insert(valueint) 0.00026360880453407144
tree:= 0.00039541320680110717
*Segment 0.00026360880453407144
SegmentTree 0.00026360880453407144
*Update: 0.00026360880453407144
Update:1 0.00026360880453407144
1point 0.00026360880453407144
*Query: 0.00026360880453407144
Query:Range 0.00026360880453407144
*Query 0.00026360880453407144
QueryType: 0.00026360880453407144
Type:Range 0.00026360880453407144
typeSegmentTree 0.00026360880453407144
SegmentTreestruct 0.00026360880453407144
tree[]int 0.00026360880453407144
func(stree 0.0018452616317385
(stree*SegmentTree) 0.0018452616317385
*SegmentTree)Initialize(n 0.00026360880453407144
stree.N= 0.00026360880453407144
stree.tree= 0.00026360880453407144
make([]int,4*n) 0.00026360880453407144
*SegmentTree)build(arr 0.00026360880453407144
build(arr[]int, 0.00026360880453407144
[]int,idx 0.00026360880453407144
idxint, 0.00026360880453407144
int,l 0.0007908264136022143
lint, 0.0007908264136022143
ifl 0.00092263081586925
l== 0.0007908264136022143
==r 0.0005272176090681429
r{ 0.0006590220113351786
stree.tree[idx]= 0.0010544352181362858
=arr[l] 0.00026360880453407144
mid:= 0.0010544352181362858
:=(l 0.0007908264136022143
(l+ 0.0007908264136022143
+r) 0.0007908264136022143
r)/ 0.0007908264136022143
stree.build(arr,2*idx+1, 0.00026360880453407144
2*idx+1,l, 0.00026360880453407144
l,mid) 0.00026360880453407144
stree.build(arr,2*idx+2, 0.00026360880453407144
2*idx+2,mid+1, 0.00026360880453407144
mid+1,r) 0.00026360880453407144
=stree.tree[2*idx+1] 0.00026360880453407144
stree.tree[2*idx+1]+ 0.00026360880453407144
+stree.tree[2*idx+2] 0.00026360880453407144
*SegmentTree)Build(arr 0.00026360880453407144
Build(arr[]int) 0.00026360880453407144
[]int){ 0.0021088704362725716
stree.build(arr,0, 0.00026360880453407144
0,0, 0.0006590220113351786
0,stree.N-1) 0.00026360880453407144
*SegmentTree)update(idx 0.00026360880453407144
update(idxint, 0.00026360880453407144
rint, 0.0005272176090681429
int,pos 0.00026360880453407144
posint, 0.00026360880453407144
=val 0.00026360880453407144
ifpos 0.0005272176090681429
pos<= 0.00026360880453407144
<=mid 0.0005272176090681429
mid{ 0.0007908264136022143
stree.update(2*idx+1,l, 0.00026360880453407144
l,mid, 0.0005272176090681429
mid,pos, 0.00026360880453407144
pos,val) 0.0007908264136022143
stree.update(2*idx+2,mid+1, 0.00026360880453407144
mid+1,r, 0.0005272176090681429
r,pos, 0.00026360880453407144
*SegmentTree)Update(pos 0.00026360880453407144
Update(posint, 0.00026360880453407144
stree.update(0,0, 0.00026360880453407144
0,stree.N-1, 0.0005272176090681429
stree.N-1,pos, 0.00026360880453407144
*SegmentTree)query(idx 0.00026360880453407144
query(idxint, 0.00026360880453407144
int,ql 0.00026360880453407144
qlint, 0.00026360880453407144
int,qr 0.0005272176090681429
qrint) 0.0005272176090681429
ifql 0.0005272176090681429
ql<= 0.0005272176090681429
<=l 0.00026360880453407144
l&& 0.00026360880453407144
&&r 0.0021088704362725716
r<= 0.0018452616317385
<=qr 0.00026360880453407144
qr{ 0.00026360880453407144
returnstree.tree[idx] 0.00026360880453407144
left= 0.00026360880453407144
=stree.query(2*idx+1, 0.00026360880453407144
stree.query(2*idx+1,l, 0.00026360880453407144
mid,ql, 0.00026360880453407144
ql,qr) 0.0007908264136022143
ifqr 0.00026360880453407144
qr> 0.00026360880453407144
>mid 0.00026360880453407144
right= 0.0005272176090681429
=stree.query(2*idx+2, 0.00026360880453407144
stree.query(2*idx+2,mid+1, 0.00026360880453407144
r,ql, 0.00026360880453407144
*SegmentTree)Query(ql 0.00026360880453407144
Query(qlint, 0.00026360880453407144
returnstree.query(0, 0.00026360880453407144
stree.query(0,0, 0.00026360880453407144
stree.N-1,ql, 0.00026360880453407144
varstree 0.00026360880453407144
streeSegmentTree 0.00026360880453407144
fmt.Printf("RSQfrom 0.0005272176090681429
%v\n",stree.Query(1, 0.00026360880453407144
stree.Query(1,3)) 0.00026360880453407144
%v\n",stree.Query(0, 0.0005272176090681429
stree.Query(0,4)) 0.0005272176090681429
stree.Update(2,7) 0.00026360880453407144
fmt.Println("Changeto 0.00026360880453407144
to7") 0.00026360880453407144
from3 0.00026360880453407144
3to 0.00026360880453407144
%v\n",stree.Query(2, 0.00026360880453407144
stree.Query(2,4)) 0.00026360880453407144
int,y 0.00039541320680110717
ifx 0.00026360880453407144
x< 0.00026360880453407144
<y 0.00026360880453407144
y{ 0.00026360880453407144
returnx 0.00039541320680110717
returny 0.00026360880453407144
=Min(stree.tree[2*idx+1], 0.00026360880453407144
Min(stree.tree[2*idx+1],stree.tree[2*idx+2]) 0.00026360880453407144
:=1<<31 0.00026360880453407144
1<<31- 0.00026360880453407144
fmt.Printf("RMQfrom 0.0005272176090681429
typeStack 0.00026360880453407144
Stack[]int 0.00026360880453407144
(s*Stack) 0.0011862396204033216
*Stack)Push(v 0.00026360880453407144
Stack{ 0.00026360880453407144
*Stack)Pop() 0.00026360880453407144
*Stack)Top() 0.00026360880453407144
return(*s)[len(*s)-1] 0.00026360880453407144
*Stack)Empty() 0.00026360880453407144
stack:= 0.00026360880453407144
:=Stack{} 0.00026360880453407144
fmt.Printf("CurrentStack 0.00092263081586925
Stackis 0.0010544352181362858
IsStack 0.0006590220113351786
Stackempty 0.0006590220113351786
\n",stack, 0.00039541320680110717
stack,stack.Empty()) 0.0005272176090681429
intoStack\n") 0.0011862396204033216
stack= 0.0007908264136022143
%v\n",stack, 0.0005272176090681429
stack,stack.Top()) 0.00039541320680110717
=stack.Pop() 0.00039541320680110717
intoStack 0.0007908264136022143
func(list 0.00039541320680110717
(list*node) 0.00039541320680110717
new_node:= 0.00026360880453407144
next:nil, 0.00039541320680110717
label:new_label, 0.00026360880453407144
elseif 0.0021088704362725716
iflist.next 0.00026360880453407144
list.next== 0.00026360880453407144
:=&node{ 0.00026360880453407144
list.next= 0.00026360880453407144
string){ 0.00039541320680110717
l:= 0.0006590220113351786
import( 0.006326611308817715
func(l 0.00039541320680110717
(l*DoubleLinkedList) 0.00039541320680110717
interface{}){ 0.00039541320680110717
l.head= 0.00026360880453407144
temp:= 0.00026360880453407144
:=l.head 0.00026360880453407144
iftemp 0.00026360880453407144
temp!= 0.00026360880453407144
nil&& 0.00026360880453407144
&&temp.key 0.00026360880453407144
==key 0.0005272176090681429
=temp.next 0.00039541320680110717
=temp 0.00026360880453407144
Show(){ 0.00026360880453407144
list:= 0.00026360880453407144
list= 0.00026360880453407144
var( 0.00039541320680110717
typeItem 0.00026360880453407144
Itemstruct 0.00026360880453407144
keyint 0.00026360880453407144
(h*Hashtable) 0.00026360880453407144
int,value 0.00039541320680110717
item:= 0.00039541320680110717
hashed:= 0.00026360880453407144
:=key 0.00026360880453407144
key% 0.00026360880453407144
%h.size 0.00026360880453407144
:=h.data[hashed] 0.00026360880453407144
=l 0.00039541320680110717
forelem 0.00026360880453407144
elem:= 0.00026360880453407144
:=l.Front(); 0.00026360880453407144
l.Front();elem 0.00026360880453407144
elem!= 0.00026360880453407144
!=nil; 0.00026360880453407144
nil;elem 0.00026360880453407144
elem= 0.00026360880453407144
=elem.Next() 0.00026360880453407144
elem.Next(){ 0.00026360880453407144
theelement 0.00026360880453407144
i,_ 0.0005272176090681429
:=elem.Value.(*Item) 0.00026360880453407144
error){ 0.00039541320680110717
returnnil, 0.00026360880453407144
nil,ErrKeyNotFound 0.00026360880453407144
h:= 0.0006590220113351786
value,_ 0.00026360880453407144
=%s\n", 0.00026360880453407144
%s\n",value) 0.00026360880453407144
value)// 0.00026360880453407144
//Print 0.00026360880453407144
err:= 0.0010544352181362858
Add(item[]byte) 0.00026360880453407144
//Adds 0.00026360880453407144
Addsthe 0.00026360880453407144
iteminto 0.00039541320680110717
intothe 0.00039541320680110717
Check(item[]byte) 0.00026360880453407144
ifthe 0.00039541320680110717
theset 0.0005272176090681429
//The 0.0006590220113351786
uint// 0.00039541320680110717
//Number 0.00026360880453407144
Numberof 0.00026360880453407144
hashvalues 0.00026360880453407144
ofelements 0.00026360880453407144
elementsin 0.00039541320680110717
thebloom 0.00039541320680110717
bloomfilter 0.0011862396204033216
hashfunctions 0.0005272176090681429
setby 0.00026360880453407144
byhashing 0.00039541320680110717
hashingin 0.00039541320680110717
inover 0.00039541320680110717
overthe 0.0005272176090681429
thehash 0.0005272176090681429
func(bf 0.00039541320680110717
(bf*BloomFilter) 0.00039541320680110717
hashes:= 0.00026360880453407144
:=bf.hashValues(item) 0.00026360880453407144
:=uint(0) 0.00026360880453407144
for{ 0.0007908264136022143
ifi 0.0010544352181362858
>=bf.k 0.00026360880453407144
bf.k{ 0.00026360880453407144
position:= 0.00026360880453407144
:=uint(hashes[i]) 0.00026360880453407144
uint(hashes[i])% 0.00026360880453407144
%bf.m 0.00026360880453407144
=true 0.0018452616317385
i+= 0.00026360880453407144
+=1 0.0011862396204033216
//Test 0.00039541320680110717
bool){ 0.00039541320680110717
exists= 0.00026360880453407144
allthe 0.00026360880453407144
varresult 0.00039541320680110717
result= 0.00092263081586925
=append(result, 0.0005272176090681429
returnresult 0.0006590220113351786
inbloom 0.0007908264136022143
filter= 0.0007908264136022143
=%t 0.0007908264136022143
%t\n", 0.0007908264136022143
-1, 0.0005272176090681429
[]int,left 0.0005272176090681429
leftint, 0.0005272176090681429
int,right 0.0005272176090681429
rightint, 0.0005272176090681429
//move 0.00026360880453407144
movepivot 0.00026360880453407144
pivotto 0.00026360880453407144
itsfinal 0.00026360880453407144
int,k 0.00039541320680110717
kint) 0.00039541320680110717
left,right, 0.00026360880453407144
ifk 0.0006590220113351786
pivotIndex{ 0.00026360880453407144
string,key 0.0005272176090681429
keystring) 0.00026360880453407144
string)string 0.0007908264136022143
string{ 0.0015816528272044287
iferr 0.0007908264136022143
:=checkKey(key); 0.0005272176090681429
checkKey(key);err 0.0005272176090681429
err!= 0.0006590220113351786
fmt.Println("Error:", 0.0005272176090681429
",err.Error()) 0.0005272176090681429
return"Err" 0.00026360880453407144
:=len(text) 0.00026360880453407144
res:= 0.0006590220113351786
:="" 0.0005272176090681429
:=text[i] 0.00026360880453407144
ifr 0.0011862396204033216
r>= 0.0014498484249373929
>='a' 0.0006590220113351786
'a'&& 0.0006590220113351786
<='z' 0.0007908264136022143
'z'{ 0.00039541320680110717
res+= 0.00092263081586925
+'a') 0.00026360880453407144
>='A' 0.0006590220113351786
'A'&& 0.0006590220113351786
<='Z' 0.0006590220113351786
'Z'{ 0.0006590220113351786
+'A') 0.00026360880453407144
+=string(r) 0.00026360880453407144
=(j 0.00039541320680110717
(j+ 0.00039541320680110717
+1) 0.0007908264136022143
1)% 0.00026360880453407144
%len(key) 0.00026360880453407144
returnres 0.0005272176090681429
+=string((r-key[j]+26)%26 0.00026360880453407144
string((r-key[j]+26)%26+ 0.00026360880453407144
error{ 0.00026360880453407144
'z'|| 0.00039541320680110717
||r 0.0006590220113351786
returnfmt.Errorf("Invalid 0.00026360880453407144
moderune 0.00026360880453407144
fmt.Println("Entertext 0.00026360880453407144
textto 0.00026360880453407144
toencrypt\\decrypt") 0.00026360880453407144
fmt.Scanf("%s\n",&msg) 0.00026360880453407144
fmt.Println("Enterkey") 0.00026360880453407144
fmt.Println("Enter'e' 0.00026360880453407144
'e'to 0.00026360880453407144
toencrypt 0.00026360880453407144
encryptor 0.00026360880453407144
or'd' 0.00026360880453407144
'd'to 0.00026360880453407144
todecrypt") 0.00026360880453407144
fmt.Scanf("%c",&mode) 0.00026360880453407144
ifmode 0.0005272176090681429
mode== 0.0005272176090681429
==rune('e') 0.00026360880453407144
rune('e'){ 0.00026360880453407144
fmt.Println("EncryptedMessage: 0.00026360880453407144
Message:", 0.0005272176090681429
",Encrypt(msg, 0.00026360880453407144
Encrypt(msg,key)) 0.00026360880453407144
==rune('d') 0.00026360880453407144
rune('d'){ 0.00026360880453407144
fmt.Println("DeccryptedMessage: 0.00026360880453407144
",Decrypt(msg, 0.00026360880453407144
Decrypt(msg,key)) 0.00026360880453407144
fmt.Println("Unknownmode") 0.00026360880453407144
keyint) 0.00039541320680110717
int)string 0.0006590220113351786
return"" 0.00026360880453407144
shift:= 0.00026360880453407144
:=rune(key) 0.00026360880453407144
dec:= 0.00026360880453407144
:=strings.Map(func(r 0.00026360880453407144
strings.Map(func(rrune) 0.00026360880453407144
rune)rune 0.00026360880453407144
rune{ 0.00026360880453407144
returnr 0.0007908264136022143
r+ 0.00026360880453407144
+shift 0.00026360880453407144
r> 0.00026360880453407144
},str) 0.00026360880453407144
returndec 0.00026360880453407144
r- 0.00039541320680110717
-shift 0.00026360880453407144
r< 0.00039541320680110717
k<= 0.00026360880453407144
fmt.Printf("%vis 0.00026360880453407144
isnot 0.0007908264136022143
anIPv4 0.00026360880453407144
IPv4address\n", 0.00026360880453407144
address\n",ip) 0.00026360880453407144
///Part 0.0005272176090681429
///Find 0.00026360880453407144
outif 0.00026360880453407144
agiven 0.0006590220113351786
///Contributed 0.00026360880453407144
Contributedby: 0.00026360880453407144
by:Guilherme 0.00026360880453407144
GuilhermeLucas 0.0006590220113351786
Lucas(guilhermeslucas) 0.0005272176090681429
array= 0.00092263081586925
size:= 0.00039541320680110717
:=len(array) 0.00026360880453407144
=0 0.0019770660340055358
=r 0.00026360880453407144
fmt.Println("annais 0.00026360880453407144
ispalindrome") 0.00026360880453407144
notpalindrome") 0.00026360880453407144
fmt.Println("hellois 0.00026360880453407144
_,s 0.00026360880453407144
s:= 0.0010544352181362858
=(1 0.00026360880453407144
(1<< 0.00026360880453407144
_,c 0.00026360880453407144
c:= 0.0010544352181362858
ranges 0.00026360880453407144
s{ 0.00026360880453407144
<=c 0.00026360880453407144
c&& 0.00026360880453407144
&&c 0.00026360880453407144
c<= 0.00026360880453407144
=uint32(c 0.00026360880453407144
uint32(c- 0.00026360880453407144
//Partof 0.0006590220113351786
CosmosProject 0.00039541320680110717
Projectby 0.00039541320680110717
//Writtenby 0.00039541320680110717
byGuilherme 0.0005272176090681429
fmt.Println("Dogand 0.00026360880453407144
andGod 0.00026360880453407144
Godare 0.00026360880453407144
areanagrams") 0.00026360880453407144
arenot 0.00026360880453407144
notanagrams") 0.00026360880453407144
fmt.Println("Pieand 0.00026360880453407144
andApple 0.00026360880453407144
Appleare 0.00026360880453407144
m:= 0.0007908264136022143
=c 0.00026360880453407144
returnsthe 0.00039541320680110717
morsecoded 0.00026360880453407144
result:= 0.0007908264136022143
ok:= 0.00039541320680110717
ok{ 0.00039541320680110717
"") 0.0006590220113351786
ofa 0.0007908264136022143
calculatesthe 0.00026360880453407144
themean 0.00026360880453407144
valueof 0.00039541320680110717
givenslice. 0.00039541320680110717
slice.If 0.00026360880453407144
Ifan 0.00026360880453407144
anempty 0.00039541320680110717
sliceis 0.00026360880453407144
isgiven 0.00026360880453407144
//it 0.00026360880453407144
itwill 0.00026360880453407144
willreturn 0.00026360880453407144
azero 0.00026360880453407144
byconvention. 0.00026360880453407144
[]float64)float64 0.00039541320680110717
float64{ 0.0011862396204033216
:=0.0 0.00026360880453407144
:=len(x) 0.00026360880453407144
ifn 0.0015816528272044287
n== 0.0005272176090681429
sum= 0.00039541320680110717
=sum 0.00026360880453407144
sum+ 0.00026360880453407144
sum/ 0.00039541320680110717
/float64(n) 0.00026360880453407144
fromthe 0.0005272176090681429
returnvariance 0.00026360880453407144
(x[i]- 0.00026360880453407144
-mean) 0.00026360880453407144
forb 0.0005272176090681429
secondnumber 0.00026360880453407144
firstnumber 0.00026360880453407144
a= 0.0007908264136022143
=a 0.00039541320680110717
thesecond 0.00026360880453407144
b= 0.0006590220113351786
=b 0.00026360880453407144
ifinput 0.00026360880453407144
<0 0.0005272176090681429
fmt.Printf("%dis 0.0005272176090681429
issquare 0.00039541320680110717
square:%v\n", 0.00039541320680110717
twonumbers 0.00026360880453407144
upto 0.00026360880453407144
tosum 0.00026360880453407144
:=[]float64{1, 0.00026360880453407144
a,b, 0.0006590220113351786
}packagemain 0.00039541320680110717
n<= 0.00039541320680110717
==1 0.0007908264136022143
1{ 0.0014498484249373929
return1 0.0007908264136022143
int)float64 0.00039541320680110717
:=float64(n) 0.00026360880453407144
a:= 0.0007908264136022143
of%v 0.00039541320680110717
%vis 0.0006590220113351786
ifexponent 0.00039541320680110717
exponent== 0.00026360880453407144
returnbase 0.00026360880453407144
bool= 0.00026360880453407144
rangem 0.00026360880453407144
m{ 0.00026360880453407144
num:= 0.0005272176090681429
(num* 0.00026360880453407144
returni 0.0005272176090681429
*Part 0.00039541320680110717
isn'ta 0.00026360880453407144
afactorial 0.00026360880453407144
ifnum 0.00026360880453407144
num== 0.00026360880453407144
ans:= 0.00092263081586925
:=[]int{} 0.0005272176090681429
ford 0.00026360880453407144
d:= 0.0006590220113351786
:=2; 0.0006590220113351786
<=n; 0.0013180440226703571
n%d== 0.00026360880453407144
ans= 0.00092263081586925
=append(ans, 0.00039541320680110717
n> 0.0005272176090681429
>1 0.00026360880453407144
primefactors 0.00026360880453407144
factorsof 0.00026360880453407144
of%d 0.00026360880453407144
%dis 0.00026360880453407144
is%d\n", 0.0013180440226703571
input:= 0.0007908264136022143
:=[]int{10, 0.00026360880453407144
>=1 0.00026360880453407144
:=1 0.00092263081586925
n< 0.00026360880453407144
numberof 0.0018452616317385
n- 0.00026360880453407144
:=1; 0.0017134572294714644
i<= 0.0025042836430736785
(n- 0.00026360880453407144
/i 0.00026360880453407144
matrix:= 0.00026360880453407144
:=make([][]int, 0.00092263081586925
fory 0.00039541320680110717
y:= 0.00039541320680110717
0;y 0.00026360880453407144
y<= 0.00039541320680110717
<=rows; 0.00039541320680110717
rows;y++ 0.00039541320680110717
y++{ 0.00039541320680110717
:=10 0.00039541320680110717
k:= 0.0005272176090681429
0;j 0.0011862396204033216
j<= 0.0007908264136022143
i;j++ 0.0006590220113351786
//Get 0.00026360880453407144
thenumber 0.0005272176090681429
dividen 0.00026360880453407144
pfs= 0.00039541320680110717
=append(pfs, 0.00039541320680110717
n= 0.00026360880453407144
n/ 0.00026360880453407144
i= 0.0005272176090681429
:=3; 0.00039541320680110717
i*i<= 0.00026360880453407144
n;i 0.00026360880453407144
2{ 0.0007908264136022143
tohandle 0.00026360880453407144
isa 0.00026360880453407144
<i; 0.0005272176090681429
3;i 0.00026360880453407144
==i 0.00026360880453407144
i{ 0.0005272176090681429
i== 0.0006590220113351786
i* 0.00039541320680110717
b!= 0.00026360880453407144
=b, 0.00026360880453407144
b:= 0.0005272176090681429
:=15 0.00026360880453407144
:=make([][]float64, 0.00026360880453407144
=make([]float64, 0.00026360880453407144
=1; 0.00026360880453407144
func(p 0.0005272176090681429
(p*polynomial) 0.0005272176090681429
i,data 0.00026360880453407144
rangep.Data 0.00026360880453407144
p.Data{ 0.00026360880453407144
ifindex 0.0006590220113351786
index== 0.00039541320680110717
==-1 0.00039541320680110717
-1{ 0.0005272176090681429
p.Data= 0.00039541320680110717
=append(p.Data, 0.00026360880453407144
PolyNode{Coeff:coeff, 0.00026360880453407144
coeff,Pow: 0.00026360880453407144
Pow:pow}) 0.00026360880453407144
:=polynomial{} 0.00039541320680110717
0,0 0.00026360880453407144
=0, 0.00026360880453407144
<p2.Length(); 0.00026360880453407144
:=p1.GetNode(i) 0.00026360880453407144
:=p2.GetNode(j) 0.00026360880453407144
ifp1N.Pow 0.00026360880453407144
p2N.Pow{ 0.00026360880453407144
pow= 0.00039541320680110717
=p1N.Pow 0.00026360880453407144
coeff= 0.00039541320680110717
=p1N.Coeff 0.00026360880453407144
pN:= 0.00026360880453407144
ans.AddNode(pN.Coeff,pN.Pow) 0.00026360880453407144
;j 0.00026360880453407144
returnans 0.00039541320680110717
is") 0.00039541320680110717
sumof 0.00039541320680110717
Expectedoutput 0.00039541320680110717
ofdigits 0.0007908264136022143
digitsis 0.0007908264136022143
is7 0.00026360880453407144
target== 0.00026360880453407144
count:= 0.00039541320680110717
fmt.Printf("%d,number 0.00039541320680110717
a< 0.00039541320680110717
*10) 0.00026360880453407144
int)[]int 0.00039541320680110717
[]int{ 0.0013180440226703571
anarray 0.0005272176090681429
2;i 0.00039541320680110717
<n+1; 0.00026360880453407144
n+1;i++ 0.00026360880453407144
ifintegers[i] 0.00026360880453407144
integers[i]== 0.00026360880453407144
==true 0.00026360880453407144
true{ 0.00026360880453407144
+=i 0.00039541320680110717
<=n 0.00026360880453407144
:=a 0.00026360880453407144
fmt.Println(calculateLCM(4,5, 0.00026360880453407144
5,6, 0.0005272176090681429
6,7, 0.0006590220113351786
ongolang 0.00039541320680110717
a+ 0.00026360880453407144
fmt.Println("Conversionof 0.00039541320680110717
b,c 0.00039541320680110717
c= 0.00026360880453407144
(input/ 0.00026360880453407144
/div) 0.00026360880453407144
+ans 0.00026360880453407144
*=10 0.00026360880453407144
fmt.Printf("Change%d 0.00039541320680110717
%dto 0.00039541320680110717
to%d\n", 0.00039541320680110717
err== 0.00026360880453407144
isthe 0.00026360880453407144
varsum 0.00026360880453407144
atindex 0.00026360880453407144
[]int,x 0.00026360880453407144
xint) 0.00039541320680110717
rangearr 0.00026360880453407144
arr{ 0.00026360880453407144
==x 0.00039541320680110717
x{ 0.0010544352181362858
right>= 0.00026360880453407144
>=left 0.00026360880453407144
left{ 0.00026360880453407144
==value 0.0005272176090681429
value{ 0.00092263081586925
ifvalue 0.0007908264136022143
value< 0.0005272176090681429
returnternarySearch(data, 0.00039541320680110717
value> 0.00026360880453407144
right,value) 0.00026360880453407144
values:= 0.0005272176090681429
4,5, 0.0010544352181362858
5,12, 0.0005272176090681429
12,30, 0.00039541320680110717
30,35, 0.00039541320680110717
35,46, 0.00039541320680110717
46,84} 0.0005272176090681429
fmt.Println(ternarySearch(values,0, 0.00026360880453407144
0,len(values)-1, 0.00026360880453407144
len(values)-1,5)) 0.00026360880453407144
len(values)-1,7)) 0.00026360880453407144
funcbinarySearch(data 0.00026360880453407144
binarySearch(data[]int, 0.00026360880453407144
[]int,value 0.00026360880453407144
ifmid 0.00026360880453407144
=midIndex 0.00026360880453407144
>value 0.00026360880453407144
{return 0.0005272176090681429
&&data[i] 0.00026360880453407144
ifkey 0.00026360880453407144
<min 0.00039541320680110717
min{ 0.00039541320680110717
>max 0.00039541320680110717
max{ 0.00039541320680110717
guess= 0.00026360880453407144
ifarray[guess] 0.00026360880453407144
=guess 0.00026360880453407144
max= 0.0006590220113351786
min= 0.0005272176090681429
items:= 0.00026360880453407144
ifdata[mid] 0.00026360880453407144
returnbinarySearch(data, 0.00039541320680110717
funcmin(a, 0.00026360880453407144
min(a,b 0.00026360880453407144
<b 0.00026360880453407144
[]int,n 0.00026360880453407144
<=x 0.0005272176090681429
*2 0.00026360880453407144
fmt.Println(exponentialSearch(values,len(values)-1, 0.00039541320680110717
<length 0.00026360880453407144
arr[left]<= 0.00026360880453407144
=min(length-1, 0.00026360880453407144
indexint) 0.00026360880453407144
fmt.Printf("Theelement 0.00026360880453407144
element%d 0.00026360880453407144
*dynamic 0.00026360880453407144
dynamicprogramming 0.00026360880453407144
programming| 0.00026360880453407144
|Go 0.00026360880453407144
waysto 0.0007908264136022143
tocombine 0.0006590220113351786
from[1 0.00026360880453407144
[12 0.0005272176090681429
23 0.0005272176090681429
34 0.00039541320680110717
45 0.00039541320680110717
56 0.00039541320680110717
67 0.00039541320680110717
78 0.00026360880453407144
89 0.00039541320680110717
targetint) 0.00026360880453407144
dp:= 0.0006590220113351786
:=make([]int, 0.0015816528272044287
v{ 0.00039541320680110717
7,8, 0.00026360880453407144
8,9, 0.0010544352181362858
fmt.Printf("Thereare 0.00039541320680110717
are%d 0.00039541320680110717
%dways 0.0005272176090681429
combine%d 0.00026360880453407144
%dfrom 0.0005272176090681429
from%v\n", 0.00026360880453407144
Thelength 0.00026360880453407144
lengthof 0.0006590220113351786
ofLCS 0.00026360880453407144
LCSof 0.00026360880453407144
funcmax(n1, 0.0005272176090681429
max(n1,n2 0.0005272176090681429
n2int) 0.0005272176090681429
ifn1 0.0005272176090681429
n1> 0.0005272176090681429
>n2 0.0005272176090681429
n2{ 0.0005272176090681429
returnn1 0.0005272176090681429
returnn2 0.0005272176090681429
string)int 0.00039541320680110717
forv 0.00026360880453407144
rangedp 0.00039541320680110717
dp{ 0.00039541320680110717
ifstr1[i-1] 0.00026360880453407144
str1[i-1]== 0.00026360880453407144
==str2[j-1] 0.00026360880453407144
str2[j-1]{ 0.00026360880453407144
dp[i][j]= 0.00092263081586925
str1:= 0.00026360880453407144
str2:= 0.00026360880453407144
fmt.Printf("Thelength 0.00039541320680110717
oflongest_increasing_subsequece 0.00039541320680110717
longest_increasing_subsequecein 0.00039541320680110717
235 0.00026360880453407144
581 0.00026360880453407144
[]int)int 0.00039541320680110717
make([]int,len(data)) 0.00026360880453407144
dp[i]= 0.0005272176090681429
data[i]{ 0.00026360880453407144
find= 0.00026360880453407144
=-1 0.0005272176090681429
searchfrom 0.00026360880453407144
1- 0.0005272176090681429
23,5, 0.00026360880453407144
in%v 0.00026360880453407144
%d\n",input, 0.00039541320680110717
input,ans) 0.00026360880453407144
minfloat64 0.00026360880453407144
nint) 0.00039541320680110717
max_val= 0.00026360880453407144
5,8, 0.0005272176090681429
9,10, 0.0005272176090681429
Thevalue 0.00039541320680110717
valuelist 0.00026360880453407144
listis 0.0005272176090681429
weightlist 0.00026360880453407144
43 0.00026360880453407144
themax 0.00026360880453407144
maxvalue 0.00026360880453407144
rangedp[i] 0.00026360880453407144
dp[i]{ 0.00026360880453407144
j{ 0.00026360880453407144
=dp[i-1][j] 0.00026360880453407144
value:= 0.0006590220113351786
:=[]int{5, 0.00039541320680110717
3,7, 0.00039541320680110717
5,1, 0.0005272176090681429
fmt.Printf("Themax 0.00026360880453407144
maxsum 0.00026360880453407144
3{ 0.00026360880453407144
tothe 0.00092263081586925
min:= 0.00039541320680110717
//Create 0.0006590220113351786
getthe 0.00026360880453407144
store[i][j]= 0.0005272176090681429
=j 0.0005272176090681429
ifj 0.00039541320680110717
//Remove 0.00026360880453407144
infirst 0.00026360880453407144
int= 0.00039541320680110717
subsetis 0.00026360880453407144
Wecan't 0.00039541320680110717
can'tget 0.0005272176090681429
getsum 0.00092263081586925
fromset 0.0006590220113351786
Wecan 0.00026360880453407144
canget 0.00039541320680110717
j>= 0.0006590220113351786
thereis 0.00026360880453407144
equalto 0.00026360880453407144
sum%d 0.00026360880453407144
fromset\n", 0.00026360880453407144
set\n",v) 0.00026360880453407144
[]int)[]int 0.00092263081586925
returnarr 0.00039541320680110717
returnarray 0.00026360880453407144
vararray 0.00026360880453407144
sorted:= 0.00039541320680110717
A:= 0.00026360880453407144
1,6, 0.00026360880453407144
6,1, 0.00026360880453407144
1,7, 0.00026360880453407144
7,2, 0.00026360880453407144
2,4, 0.0006590220113351786
<=1 0.00026360880453407144
andB 0.00039541320680110717
<len(arr); 0.00026360880453407144
len(arr);i++ 0.00026360880453407144
arr[i]= 0.0006590220113351786
=B[k] 0.00026360880453407144
=A[j] 0.00026360880453407144
*Structures 0.00026360880453407144
//Define 0.00039541320680110717
binarytree 0.00039541320680110717
//- 0.00039541320680110717
:the 0.00039541320680110717
thevalue 0.0006590220113351786
valuein 0.0005272176090681429
thesub-tree 0.00026360880453407144
sub-treeof 0.00026360880453407144
greateror 0.00026360880453407144
orequal 0.00026360880453407144
Createa 0.00026360880453407144
//and 0.0006590220113351786
int)*Tree 0.00026360880453407144
*Tree{ 0.00039541320680110717
thegiven 0.0011862396204033216
Ifthe 0.0005272176090681429
thanthe 0.00039541320680110717
theone 0.00026360880453407144
onehold 0.00026360880453407144
holdby 0.00026360880453407144
bythe 0.00026360880453407144
thecurrent 0.00026360880453407144
currentnode, 0.00026360880453407144
//try 0.00026360880453407144
tryto 0.00026360880453407144
toinsert 0.00026360880453407144
insertit 0.00026360880453407144
itto 0.00039541320680110717
func(t 0.00026360880453407144
(t*Tree) 0.00026360880453407144
=createTree(value) 0.00026360880453407144
givenfunction 0.00026360880453407144
functionto 0.00026360880453407144
toeach 0.00026360880453407144
fromleft 0.00026360880453407144
leftto 0.00026360880453407144
func(int)){ 0.00026360880453407144
*Algorithm 0.00026360880453407144
//Perform 0.00026360880453407144
Performa 0.00026360880453407144
treesort 0.00026360880453407144
andreturn 0.00026360880453407144
*Tests 0.00026360880453407144
Testthe 0.00026360880453407144
3,10, 0.00026360880453407144
//Should 0.00026360880453407144
Shouldoutput: 0.00026360880453407144
//NOTE: 0.00026360880453407144
thevalues 0.00039541320680110717
valuesin 0.00026360880453407144
youwant 0.00039541320680110717
wantto 0.00039541320680110717
arraywith 0.00026360880453407144
withthe 0.00039541320680110717
*If 0.00026360880453407144
valueat 0.00026360880453407144
atthe 0.00026360880453407144
*Stooge 0.00039541320680110717
Stoogesort 0.00039541320680110717
sortthe 0.00039541320680110717
theinitial 0.00039541320680110717
initial2/3 0.00026360880453407144
2/3of 0.00039541320680110717
thelist 0.00039541320680110717
start,end 0.00026360880453407144
endint) 0.00026360880453407144
(end- 0.00026360880453407144
stoogeSort(data,start, 0.00026360880453407144
start,end-third) 0.00026360880453407144
fmt.Println("Beforesorting", 0.00039541320680110717
sorting",data) 0.0006590220113351786
[]int{1,6, 0.00026360880453407144
4,7, 0.00026360880453407144
sort:%v\n", 0.00026360880453407144
%v\n",arr) 0.00026360880453407144
arrayto 0.00026360880453407144
//Find 0.00026360880453407144
Findwhere 0.00026360880453407144
whereto 0.00026360880453407144
toput 0.00026360880453407144
putthe 0.00026360880453407144
pos:= 0.00026360880453407144
:=cycleStart 0.00039541320680110717
cycleStart+ 0.00026360880453407144
<len(*arr); 0.00026360880453407144
len(*arr);i++ 0.00026360880453407144
if(*arr)[i] 0.00026360880453407144
(*arr)[i]< 0.00026360880453407144
<item 0.00026360880453407144
item{ 0.00026360880453407144
isalready 0.00039541320680110717
thisis 0.00026360880453407144
pos!= 0.00026360880453407144
!=cycleStart 0.00026360880453407144
cycleStart{ 0.00026360880453407144
//Put 0.00026360880453407144
Putthe 0.00026360880453407144
itemthere 0.00026360880453407144
thereor 0.00026360880453407144
orright 0.00026360880453407144
rightafter 0.00026360880453407144
afterany 0.00026360880453407144
anyduplicates. 0.00026360880453407144
foritem 0.00026360880453407144
item== 0.00026360880453407144
==(*arr)[pos] 0.00026360880453407144
(*arr)[pos]{ 0.00026360880453407144
(*arr)[pos],item 0.00026360880453407144
item= 0.00026360880453407144
=item, 0.00026360880453407144
item,(*arr)[pos] 0.00026360880453407144
therest 0.00026360880453407144
restof 0.00026360880453407144
forpos 0.00026360880453407144
import"math/rand" 0.00026360880453407144
:=i; 0.00026360880453407144
i;j 0.00026360880453407144
-=d 0.00026360880453407144
d{ 0.00026360880453407144
is:", 0.00026360880453407144
make([]int,n) 0.00039541320680110717
1;i++ 0.00026360880453407144
varn 0.00039541320680110717
nint 0.00039541320680110717
enterthe 0.00026360880453407144
array:%v\n", 0.00026360880453407144
forh 0.00026360880453407144
h= 0.00026360880453407144
=3 0.00026360880453407144
<len(array); 0.0006590220113351786
len(array);i++ 0.0005272176090681429
&&array[j] 0.00026360880453407144
array[j]< 0.00026360880453407144
j- 0.00039541320680110717
}//Part 0.00026360880453407144
gap= 0.00026360880453407144
:=false 0.00026360880453407144
flag= 0.00026360880453407144
-") 0.00026360880453407144
Sortin 0.0005272176090681429
inGolang 0.0005272176090681429
sortsthe 0.00039541320680110717
givenslice 0.00039541320680110717
:=a[0] 0.00026360880453407144
_,value 0.00039541320680110717
rangea 0.00039541320680110717
a{ 0.00039541320680110717
<size; 0.00026360880453407144
size;i++ 0.00026360880453407144
thecorresponding 0.00026360880453407144
randomSlice:= 0.00039541320680110717
[]int{5,2, 0.00026360880453407144
2,8, 0.00026360880453407144
10,1, 0.00039541320680110717
1,3} 0.00026360880453407144
fmt.Println("UnsortedSlice: 0.00039541320680110717
Slice:", 0.0007908264136022143
",randomSlice) 0.0007908264136022143
//should 0.00026360880453407144
shouldreceive 0.00026360880453407144
receive[ 0.00026360880453407144
[1, 0.00026360880453407144
1,2, 0.0006590220113351786
3,5, 0.00039541320680110717
9,10 0.00026360880453407144
10] 0.00026360880453407144
fmt.Println("SortedSlice: 0.00039541320680110717
a[right]= 0.00026360880453407144
=a[right], 0.00026360880453407144
6,2, 0.00026360880453407144
4,9, 0.00039541320680110717
9,0, 0.00026360880453407144
0,5, 0.00026360880453407144
5,3, 0.00039541320680110717
array:= 0.0005272176090681429
ifsortMe[i] 0.00026360880453407144
sortMe[i]> 0.00026360880453407144
>sortMe[i+1] 0.00026360880453407144
sortMe[i+1]{ 0.00026360880453407144
sortMe[i],sortMe[i+1] 0.00026360880453407144
sortMe[i+1]= 0.00026360880453407144
=sortMe[i+1], 0.00026360880453407144
sortMe[i+1],sortMe[i] 0.00026360880453407144
swap= 0.00039541320680110717
if!swap 0.00026360880453407144
!swap{ 0.00026360880453407144
constMaxUint 0.00026360880453407144
MaxUint= 0.00026360880453407144
=^uint(0) 0.00026360880453407144
constMaxInt 0.00026360880453407144
MaxInt= 0.00026360880453407144
=int(MaxUint 0.00026360880453407144
int(MaxUint>> 0.00026360880453407144
>>1) 0.00026360880453407144
constMinInt 0.00026360880453407144
MinInt= 0.00026360880453407144
=-MaxInt 0.00026360880453407144
-MaxInt- 0.00026360880453407144
maxNumber:= 0.00026360880453407144
:=MinInt 0.00026360880453407144
rangelist 0.00026360880453407144
list{ 0.00026360880453407144
ifv 0.0006590220113351786
v> 0.00026360880453407144
>maxNumber 0.00026360880453407144
maxNumber{ 0.00039541320680110717
maxNumber= 0.00026360880453407144
=v 0.00039541320680110717
sorting",list) 0.00026360880453407144
>=0 0.0006590220113351786
array[j+1]= 0.00026360880453407144
_,n 0.00026360880453407144
rangearray 0.00026360880453407144
array{ 0.00026360880453407144
make([]float64,0) 0.00039541320680110717
:=make([]float64, 0.00026360880453407144
bucket:= 0.00026360880453407144
=append(array, 0.00026360880453407144
fmt.Printf("%v\n",array) 0.00026360880453407144
import"time" 0.00026360880453407144
data[i]= 0.0006590220113351786
1,4, 0.00026360880453407144
i,v 0.00039541320680110717
_,d 0.00026360880453407144
rangev 0.00026360880453407144
swapped= 0.00026360880453407144
array:", 0.00026360880453407144
",arrayzor) 0.00026360880453407144
(hMaxHeap) 0.00026360880453407144
<h.size() 0.00026360880453407144
h.size()&& 0.00026360880453407144
>h.slice[max] 0.00026360880453407144
h.slice[max]{ 0.00026360880453407144
||i 0.00026360880453407144
*-1 0.00026360880453407144
0|| 0.00026360880453407144
:=func 0.00026360880453407144
func(candidate 0.00026360880453407144
(candidatestring) 0.00026360880453407144
start:= 0.00026360880453407144
string,length 0.00026360880453407144
lengthint) 0.00026360880453407144
bestParent= 0.00026360880453407144
bestFitness= 0.00026360880453407144
:=rand.Intn(len(geneSet)) 0.00026360880453407144
candidate+= 0.00039541320680110717
*Game{ 0.00026360880453407144
func(g 0.00092263081586925
(g*Game) 0.0007908264136022143
i++ 0.0005272176090681429
++{ 0.0007908264136022143
int,j 0.00026360880453407144
jint) 0.00039541320680110717
:=-1; 0.00026360880453407144
<=1; 0.00026360880453407144
alive== 0.00026360880453407144
==3 0.00026360880453407144
==2 0.00026360880453407144
<g.width; 0.00026360880453407144
g.width;i 0.00026360880453407144
<g.height; 0.00026360880453407144
g.height;j 0.00026360880453407144
j++ 0.00026360880453407144
g= 0.00026360880453407144
//s 0.00026360880453407144
:=make(set) 0.00026360880453407144
//Add 0.00026360880453407144
thegraph 0.00039541320680110717
alreadyin 0.00026360880453407144
//Nope. 0.00026360880453407144
Nope.Add 0.00026360880453407144
Addit 0.00026360880453407144
=make(set) 0.00026360880453407144
//1 0.0005272176090681429
/// 0.00039541320680110717
/\ 0.0005272176090681429
//2 0.00026360880453407144
//3 0.00026360880453407144
3- 0.00026360880453407144
12 0.00026360880453407144
mayvary 0.00026360880453407144
float32{ 0.00039541320680110717
totalPrice= 0.00026360880453407144
=totalPrice 0.00026360880453407144
totalPrice+ 0.00026360880453407144
maxWeight= 0.00026360880453407144
func(c 0.00039541320680110717
(cByPrice) 0.00039541320680110717
:=Item{ 0.00039541320680110717
items= 0.00039541320680110717
Denoms:[]int{50, 0.0007908264136022143
[]int{50,25, 0.00092263081586925
25,10, 0.0010544352181362858
10,5, 0.0010544352181362858
5,1}, 0.00092263081586925
1},Result: 0.00092263081586925
Result:[]int{50, 0.00039541320680110717
1,1}}, 0.0005272176090681429
[]int{100,50, 0.00026360880453407144
50,25, 0.00026360880453407144
Result:", 0.00026360880453407144
fordividend 0.00026360880453407144
dividend>= 0.00026360880453407144
<<=1 0.00026360880453407144
*r1= 0.00026360880453407144
=*r1 0.00039541320680110717
*r1^ 0.00039541320680110717
^*r2 0.00039541320680110717
swapping:A 0.00026360880453407144
A= 0.00026360880453407144
=%d 0.00026360880453407144
%dand 0.00026360880453407144
B= 0.00026360880453407144
=%d\n", 0.00026360880453407144
%d\n",A, 0.00026360880453407144
A,B) 0.00026360880453407144
Xint 0.00026360880453407144
Yint 0.00026360880453407144
varboardSize 0.00026360880453407144
<boardSize 0.00026360880453407144
&&nextY 0.00026360880453407144
board[nextX][nextY]= 0.00026360880453407144
moves){ 0.00026360880453407144
boardSize= 0.00026360880453407144
board:= 0.00026360880453407144
rangeboard 0.00026360880453407144
board{ 0.00026360880453407144
make([]int,boardSize) 0.00026360880453407144
{X:2, 0.00026360880453407144
2,Y: 0.00026360880453407144
Y:1}, 0.00026360880453407144
{X:1, 0.00026360880453407144
1,Y: 0.00026360880453407144
Y:2}, 0.00026360880453407144
{X:-1, 0.00026360880453407144
-1,Y: 0.00026360880453407144
{X:-2, 0.00026360880453407144
-2,Y: 0.00026360880453407144
Y:-1}, 0.00026360880453407144
Y:-2}, 0.00026360880453407144
1,0, 0.00026360880453407144
vartotalSol 0.0006590220113351786
totalSolint 0.0006590220113351786
23] 0.00026360880453407144
[]int,index, 0.00026360880453407144
len(data){ 0.00026360880453407144
%d\n",totalSol) 0.00026360880453407144
<=currentLevel; 0.00026360880453407144
v== 0.00026360880453407144
indexArr[index]= 0.00026360880453407144
setPartition(data,indexArr, 0.00026360880453407144
indexArr,index+1, 0.00026360880453407144
index+1,currentLevel) 0.00026360880453407144
2,3} 0.00026360880453407144
totalSol= 0.0006590220113351786
=='1' 0.00026360880453407144
'1'{ 0.00026360880453407144
sol[current.X][current.Y]= 0.00026360880453407144
==end 0.00026360880453407144
end{ 0.00026360880453407144
current.X+= 0.00026360880453407144
SolveMaze(maze,sol, 0.0005272176090681429
sol,current, 0.0005272176090681429
current,end, 0.0005272176090681429
end,limitH, 0.0005272176090681429
limitH,limitW) 0.0005272176090681429
current.X-= 0.00026360880453407144
-=1 0.0005272176090681429
current.Y+= 0.00026360880453407144
current.Y-= 0.00026360880453407144
:=[][]byte{ 0.00026360880453407144
{'0','0', 0.0010544352181362858
'0','1', 0.00026360880453407144
'1','1', 0.00026360880453407144
'0','0', 0.0018452616317385
'0','0'}, 0.0010544352181362858
{'0','1', 0.00026360880453407144
'1','0', 0.00026360880453407144
:=Point{X: 0.00026360880453407144
sol[]int, 0.00026360880453407144
:=start; 0.00026360880453407144
start;i 0.00026360880453407144
sol= 0.0005272176090681429
=append(sol, 0.00026360880453407144
=sol[:len(sol)-1] 0.00026360880453407144
sol:= 0.00026360880453407144
%d\n",totalSol, 0.00026360880453407144
forbordsize 0.00026360880453407144
returnnumber 0.00026360880453407144
ifboard[i] 0.00026360880453407144
board[i]== 0.00026360880453407144
thedifferent 0.00026360880453407144
differentcount 0.00026360880453407144
countbetween 0.00026360880453407144
<len(board); 0.00039541320680110717
len(board);i++ 0.00026360880453407144
data[start],data[i] 0.00026360880453407144
=data[i], 0.00026360880453407144
data[i],data[start] 0.00026360880453407144
{12 0.00026360880453407144
3} 0.00039541320680110717
record[index]= 0.00026360880453407144
powerSet(input,record, 0.00039541320680110717
record,index+1) 0.00026360880453407144
subSetSum(data,sol, 0.00039541320680110717
sol,index+1, 0.00026360880453407144
typevector 0.00039541320680110717
vectorstruct 0.00039541320680110717
x,y 0.00039541320680110717
yfloat64 0.00039541320680110717
vector)float64 0.00026360880453407144
-b.x) 0.00039541320680110717
b.x)* 0.00026360880453407144
-b.y) 0.00039541320680110717
(a.y- 0.00039541320680110717
b.y)* 0.00026360880453407144
:=vector{x: 0.0006590220113351786
vector{x:5, 0.0005272176090681429
5,y: 0.0005272176090681429
y:5} 0.0005272176090681429
y:10} 0.00026360880453407144
fmt.Println(calculateArea(a,b, 0.00026360880453407144
b,c)) 0.00026360880453407144
=vector{x: 0.0006590220113351786
vector{x:2, 0.00026360880453407144
2,y: 0.00026360880453407144
y:4} 0.00026360880453407144
fmt.Println(calculateDistance(a,b)) 0.00026360880453407144
:=shape{center: 0.00026360880453407144
shape{center:vector{3, 0.0005272176090681429
vector{3,3}, 0.00026360880453407144
3},height: 0.0005272176090681429
height:5, 0.00026360880453407144
5,width: 0.00026360880453407144
width:4} 0.00039541320680110717
height:4, 0.00026360880453407144
4,width: 0.00026360880453407144
width:6} 0.00039541320680110717
//0 0.00026360880453407144
0- 0.00026360880453407144
fmt.Println(checkAABBCollision(shapeA,shapeB)) 0.00039541320680110717
shapeA= 0.00026360880453407144
=shape{center: 0.0005272176090681429
shapeB= 0.00026360880453407144
-collision 0.00026360880453407144
height:6, 0.00026360880453407144
6,width: 0.00026360880453407144
k)+ 0.00026360880453407144
fmt.Println("Enterthe 0.00026360880453407144
-traverse 0.0005272176090681429
ifdir 0.0005272176090681429
dir== 0.0005272176090681429
dir= 0.0005272176090681429
:=len(l) 0.00026360880453407144
len(l)// 0.00026360880453407144
//number 0.00026360880453407144
C++
#include<cstdlib> 0.0008849810157298239
#include<iostream> 0.013131976362442548
#include<vector> 0.005167147220874133
intk 0.000485312169916355
k= 0.0015701276085529133
=0; 0.0373975848582603
for(int 0.024265608495817752
std::cout<< 0.013702931856461788
array: 0.0005995032687202032
:\n"; 0.0005424077193182792
intmain() 0.013560192982956978
main(){ 0.000913528790430786
<<"Enter 0.004796026149761626
"Enterthe 0.0017985098061606098
thesize 0.0007136943675240515
sizeof 0.00097062433983271
ofarray 0.000485312169916355
std::cin>> 0.005252790544977019
thevalues 0.000485312169916355
(inti 0.015844014959033943
i= 0.02398013074880813
0;i 0.01664335265066088
i< 0.019355391247252277
++i){ 0.0011419109880384823
intval; 0.0003425732964115447
Enterthe 0.0007707899169259756
usingnamespace 0.010362842216449227
namespacestd; 0.010220103342944417
inti 0.0017985098061606098
while(true) 0.0005138599446173171
cout<< 0.02857632247566302
=1; 0.009192383453709783
=1 0.0006565988181221273
shouldbe 0.0003711210711125068
a,int 0.0006851465928230894
intb) 0.00039966884581346885
canbe 0.000913528790430786
template<typename 0.0011419109880384823
<typenameT> 0.0008564332410288618
returntrue; 0.0021410831025721546
returnfalse; 0.002426560849581775
thereis 0.0005138599446173171
isan 0.0004282166205144309
inthe 0.0026834908218904335
willbe 0.0005138599446173171
temp= 0.0029689685689000544
returntemp; 0.000456764395215393
i> 0.0003425732964115447
>0; 0.00039966884581346885
isa 0.0014844842844500272
ofthe 0.006166319335407805
<<endl; 0.009791886722429987
return0; 0.013360358560050243
#include<iterator> 0.0003425732964115447
-1); 0.0015415798338519512
return-1; 0.000942076565131748
pos= 0.0003711210711125068
<<" 0.007793542493362642
""; 0.003796854035227954
<<"\n"; 0.004424905078649119
intl 0.00039966884581346885
l= 0.001513032059150989
=2 0.000485312169916355
2* 0.0011990065374404065
+1; 0.0031973507665077508
r= 0.001427388735048103
p= 0.0011419109880384823
==0) 0.004796026149761626
>=0 0.0008564332410288618
0&& 0.0015701276085529133
inttemp 0.0005424077193182792
=temp; 0.0011704587627394444
>0 0.000485312169916355
theelement 0.0004282166205144309
elementto 0.0003425732964115447
tobe 0.001427388735048103
elementsof 0.0004282166205144309
return1; 0.0007707899169259756
/*Part 0.0017699620314596477
Partof 0.007194039224642439
ofCosmos 0.007593708070455908
Cosmosby 0.007565160295754946
byOpenGenus 0.007593708070455908
OpenGenusFoundation 0.0072511347740443636
Foundation*/ 0.0017414142567586856
#include<cassert> 0.000485312169916355
sz= 0.000485312169916355
atthe 0.0005995032687202032
theend 0.000485312169916355
endof 0.000456764395215393
+1) 0.0016557709326557996
1)% 0.0006565988181221273
==0 0.0005995032687202032
==-1) 0.0008564332410288618
=0 0.0008564332410288618
//If 0.0017128664820577236
f= 0.0005138599446173171
=-1; 0.0011704587627394444
Checkif 0.000456764395215393
elseif 0.005452624967883754
thearray 0.0011419109880384823
avalue 0.0003425732964115447
equalto 0.000485312169916355
*temp= 0.0005709554940192411
=new 0.005224242770276057
tothe 0.001969796454366382
thenew 0.00039966884581346885
for(auto 0.0014559365097490651
==1); 0.0030546118930029403
==3); 0.0003711210711125068
//Part 0.003825401809928916
thequeue 0.0006565988181221273
//Returns 0.0005424077193182792
ifthe 0.0011419109880384823
thevalue 0.0004282166205144309
fromthe 0.0011419109880384823
thefirst 0.0007707899169259756
isempty 0.0003425732964115447
Returnsthe 0.0005709554940192411
intj 0.0004282166205144309
j= 0.00679437037882897
"<< 0.010134460018841532
<<i 0.0010562676639355962
i<< 0.0007422421422250136
intothe 0.0003711210711125068
<<"The 0.0008849810157298239
isnot 0.0012275543121413686
#include<stack> 0.0007422421422250136
#include<queue> 0.0007422421422250136
i<= 0.0030831596677039024
theelements 0.0004282166205144309
cin>> 0.00845014131148477
"Enternumber 0.0003425732964115447
for(long 0.00039966884581346885
=x; 0.0015986753832538754
<<std::endl; 0.004253618430443347
template<class 0.0006565988181221273
<classT> 0.0005995032687202032
!=NULL) 0.0014559365097490651
=head; 0.001427388735048103
head= 0.0017414142567586856
=newNode; 0.0005424077193182792
it!= 0.00039966884581346885
intmain 0.00039966884581346885
main() 0.0004282166205144309
<<"\n 0.0010562676639355962
:"; 0.0020839875531702304
(leftt== 0.0003425732964115447
-1 0.0006280510434211653
-1) 0.002455108624282737
-1; 0.0031402552171058266
elementis 0.0006280510434211653
is: 0.0003711210711125068
:" 0.0007136943675240515
//C++ 0.0004282166205144309
//A 0.0016843187073567615
arrayof 0.00039966884581346885
intt; 0.0006280510434211653
therange 0.0003711210711125068
numberof 0.0029118730194981303
intn; 0.0024836563989836993
functionto 0.0022838219760769646
ina 0.0006280510434211653
thisnode 0.00039966884581346885
//returns 0.0004282166205144309
Autility 0.0005138599446173171
utilityfunction 0.0007422421422250136
toinsert 0.0003425732964115447
anew 0.0005709554940192411
//The 0.0007707899169259756
thenode 0.0004282166205144309
mustbe 0.000456764395215393
//function 0.0008564332410288618
functionis 0.0003425732964115447
thatwe 0.0003711210711125068
root= 0.003026064118301978
=NULL; 0.0030831596677039024
t= 0.0008564332410288618
thetree 0.0006565988181221273
if(root 0.0008564332410288618
(root== 0.0007422421422250136
==NULL) 0.0021981786519740787
thegiven 0.000456764395215393
-1]; 0.0007136943675240515
//Initialize 0.0005709554940192411
thenumber 0.001427388735048103
n= 0.003996688458134688
//Function 0.0006280510434211653
Functionto 0.0005995032687202032
inti; 0.0004282166205144309
for(i 0.0023123697507779267
(i= 0.0023123697507779267
<n; 0.005937937137800109
n;i++) 0.004053784007536612
==false) 0.0006280510434211653
"" 0.000485312169916355
//Print 0.0003711210711125068
//Find 0.0006280510434211653
greaterthan 0.0003425732964115447
while(i 0.0008278854663278998
(i< 0.0007707899169259756
<n 0.0008278854663278998
Ifthe 0.000456764395215393
returnNULL; 0.0004282166205144309
treeis 0.0003711210711125068
1;// 0.000456764395215393
//Update 0.000456764395215393
else// 0.0003711210711125068
=root; 0.0004282166205144309
indexof 0.0005424077193182792
=n 0.00097062433983271
n- 0.0017128664820577236
+1] 0.0005709554940192411
1]= 0.0004282166205144309
+1, 0.0030546118930029403
//Create 0.000456764395215393
newnode 0.0006851465928230894
tostore 0.0004282166205144309
(intj 0.004282166205144309
0;j 0.004310713979845271
j< 0.005195694995575095
//create 0.000456764395215393
=n; 0.0005709554940192411
j>= 0.0003711210711125068
i+ 0.001827057580861572
tothis 0.0003425732964115447
1;j 0.0008849810157298239
//Driver 0.0007707899169259756
Driverprogram 0.0005138599446173171
programto 0.0008278854663278998
totest 0.000456764395215393
testabove 0.00039966884581346885
#include<cstring> 0.0006851465928230894
ans= 0.0015986753832538754
returnans; 0.0007707899169259756
<=n; 0.0015701276085529133
>>n 0.0005138599446173171
1;i 0.003368637414713523
i>= 0.0007422421422250136
>=0; 0.0006280510434211653
ans<< 0.000485312169916355
intsum 0.0003711210711125068
sum= 0.0012561020868423307
>0) 0.0014559365097490651
sum+= 0.0008849810157298239
sumof 0.000456764395215393
ofelements 0.0005424077193182792
l,int 0.0005709554940192411
={1, 0.0007993376916269377
{1,2, 0.0006851465928230894
2,3, 0.0005995032687202032
intn 0.00194124867966542
#include<memory> 0.000456764395215393
#include<string> 0.001884153130263496
template<typename_Type, 0.0008278854663278998
usingValueType 0.00039966884581346885
ValueType= 0.00039966884581346885
=_Type; 0.00039966884581346885
usingSPNodeType 0.00039966884581346885
SPNodeType= 0.00039966884581346885
SPNodeTypel 0.0003425732964115447
=nullptr, 0.0005424077193182792
SPNodeTyper 0.0003425732964115447
=nullptr) 0.0003711210711125068
=v; 0.0003425732964115447
=l; 0.0003425732964115447
template<typename_Type> 0.001884153130263496
:public 0.0003711210711125068
_Type,typename 0.0006280510434211653
root_= 0.0007707899169259756
const&); 0.0003711210711125068
//for 0.000456764395215393
typename_Compare> 0.0015986753832538754
!=sentinel_) 0.0003425732964115447
==sentinel_) 0.00039966884581346885
autotemp 0.0003711210711125068
returnroot; 0.0005424077193182792
*The 0.0003425732964115447
s= 0.000999172114533672
*Part 0.001513032059150989
*template<typename 0.0017128664820577236
*class 0.0004282166205144309
*{ 0.0006851465928230894
*using 0.0010848154386365583
*public: 0.000456764395215393
*void 0.0018556053555625338
*SPNodeType 0.0005995032687202032
*}; 0.0006280510434211653
*private: 0.000456764395215393
=typename 0.0021696308772731166
*typename 0.0010848154386365583
#include<functional> 0.0007707899169259756
#include<algorithm> 0.002340917525478889
=nullptr; 0.0008849810157298239
==nullptr) 0.0005424077193182792
min= 0.0007707899169259756
while(n 0.0005138599446173171
returnn; 0.0004282166205144309
right= 0.0005995032687202032
if(n 0.0017128664820577236
(n== 0.0005424077193182792
left= 0.0005424077193182792
=left; 0.0003711210711125068
1+ 0.0004282166205144309
*// 0.001912700904964458
*if 0.0006280510434211653
*} 0.000999172114533672
==1) 0.0017985098061606098
*return 0.0003425732964115447
for(size_t 0.003853949584629878
(size_ti 0.0031688029918067887
<size; 0.0005709554940192411
size;i++) 0.0003425732964115447
=i; 0.002226726426675041
a= 0.0015986753832538754
b= 0.0010562676639355962
if(a 0.0003425732964115447
+=1; 0.00039966884581346885
//Check 0.00039966884581346885
01 0.0004282166205144309
34 0.0010277198892346341
(size_tj 0.0005995032687202032
=i 0.0011704587627394444
usingvalue_type 0.0003425732964115447
value_type= 0.0003425732964115447
it= 0.0007707899169259756
x,int 0.000999172114533672
returnx 0.00039966884581346885
intx, 0.0006851465928230894
if(x 0.0011133632133375204
x= 0.002854777470096206
intx) 0.000456764395215393
(x== 0.0005424077193182792
u= 0.00039966884581346885
themaximum 0.000456764395215393
#include<cstdio> 0.00039966884581346885
#include<climits> 0.0003711210711125068
size= 0.0005138599446173171
n/ 0.0004282166205144309
/2; 0.002369465300179851
2;i 0.0007422421422250136
>1) 0.0005709554940192411
max= 0.0006280510434211653
!=0) 0.0014844842844500272
<<'\n'; 0.0016843187073567615
last= 0.0003425732964115447
intdata; 0.0006565988181221273
<<"\nEnter 0.001398840960347141
*left,*right; 0.0003425732964115447
isthe 0.0012561020868423307
thedistance 0.0003711210711125068
val= 0.000456764395215393
=0, 0.0016843187073567615
//if 0.0011704587627394444
if(y 0.0003425732964115447
returnx; 0.000485312169916355
anode 0.0006280510434211653
*1 0.0006851465928230894
#include<list> 0.000456764395215393
}// 0.0006565988181221273
elementsin 0.0005709554940192411
structnode 0.001513032059150989
forthe 0.0006851465928230894
itis 0.000456764395215393
theleft 0.0003425732964115447
//the 0.0005995032687202032
ofa 0.0005995032687202032
withthe 0.0005995032687202032
theminimum 0.00039966884581346885
thecurrent 0.0007136943675240515
ofall 0.0003425732964115447
for(unsigned 0.0007422421422250136
start= 0.0004282166205144309
=true; 0.0017128664820577236
if(i 0.0022838219760769646
<20; 0.0005424077193182792
20;++i) 0.0005138599446173171
1<< 0.0011419109880384823
tmp= 0.000999172114533672
linkedlist 0.0010277198892346341
curr= 0.0005138599446173171
prev= 0.0006565988181221273
next= 0.0006851465928230894
=next; 0.0005424077193182792
traversalof 0.0005709554940192411
#definell 0.00039966884581346885
lllong 0.0003711210711125068
longlong 0.0035399240629192955
longint 0.0013417454109452167
res= 0.00830740243797996
&1) 0.000485312169916355
(a* 0.0003425732964115447
returnres; 0.0007422421422250136
c= 0.001398840960347141
intn, 0.001427388735048103
i,j, 0.0003425732964115447
v= 0.0007993376916269377
intc 0.0003711210711125068
>>n; 0.0027691341459933198
<N; 0.0007707899169259756
#include<cmath> 0.0017699620314596477
for(j 0.0006280510434211653
(j= 0.0006280510434211653
n;j++) 0.0008849810157298239
=j; 0.000456764395215393
i- 0.0005995032687202032
>>s; 0.0005138599446173171
template<typename_Tp, 0.0003425732964115447
_Tp,typename 0.0003425732964115447
typename_Comp 0.0003425732964115447
_Comp= 0.0003425732964115447
*struct 0.0004282166205144309
*typedef 0.0007707899169259756
theAVL 0.0005709554940192411
AVLtree 0.0005709554940192411
heightof 0.0003425732964115447
tofind 0.0012275543121413686
findthe 0.0005995032687202032
elementin 0.000485312169916355
*p_node_type 0.0005424077193182792
!=nullptr) 0.000913528790430786
==2) 0.0005138599446173171
*cout 0.0011133632133375204
if(ch 0.0003425732964115447
p_node_typeconst 0.000456764395215393
usingtypename 0.00039966884581346885
if(f 0.0003425732964115447
(n!= 0.0005424077193182792
!=nil_) 0.00039966884581346885
nis 0.0003425732964115447
1|| 0.000456764395215393
*aat->inOrder(cout); 0.0005138599446173171
aat->inOrder(cout);cout 0.0005138599446173171
"\n";aat->preOrder(cout); 0.0005138599446173171
aat->preOrder(cout);cout 0.0005138599446173171
<<aat->size() 0.0005138599446173171
aat->size()<< 0.0005138599446173171
<<"\n\n"; 0.0005995032687202032
*0 0.00039966884581346885
*2 0.0008278854663278998
12 0.0007993376916269377
*3 0.0003711210711125068
23 0.0013702931856461788
*4 0.0005424077193182792
24 0.000456764395215393
45 0.0010277198892346341
56 0.0007707899169259756
35 0.0003425732964115447
structnode* 0.0006565988181221273
newnode; 0.0005424077193182792
temp->right= 0.0003711210711125068
node*root 0.00039966884581346885
*root= 0.000485312169916355
root->left= 0.0003711210711125068
root->right= 0.00039966884581346885
typedeflong 0.000456764395215393
node* 0.0005138599446173171
//Functionto 0.00039966884581346885
=false; 0.0017128664820577236
a<< 0.0003425732964115447
"is 0.0005138599446173171
*x 0.0004282166205144309
if(c 0.0004282166205144309
*/ 0.0007993376916269377
/\ 0.0008278854663278998
#include<map> 0.0005709554940192411
structNode 0.0005138599446173171
i!= 0.000456764395215393
trueif 0.000456764395215393
-1, 0.0017414142567586856
1,0, 0.0005424077193182792
*std::string 0.00039966884581346885
//find 0.000485312169916355
ofeach 0.0003425732964115447
is" 0.0008564332410288618
l+ 0.0003711210711125068
#include<stdio.h> 0.000485312169916355
#include<stdlib.h> 0.00039966884581346885
//To 0.0003711210711125068
intleft, 0.0004282166205144309
m= 0.00097062433983271
+1 0.0013702931856461788
(1<< 0.0008849810157298239
andthe 0.0005424077193182792
#include<utility> 0.0003425732964115447
inlineint 0.0003425732964115447
no.of 0.0004282166205144309
intx 0.000456764395215393
tocheck 0.0003425732964115447
intx; 0.00039966884581346885
y= 0.0016843187073567615
=y; 0.0004282166205144309
#include<bits/stdc++.h> 0.0007422421422250136
=x 0.0007422421422250136
inty) 0.000456764395215393
<<endl 0.0004282166205144309
//Partof 0.0003425732964115447
intlow, 0.0005424077193182792
<<", 0.000485312169916355
"," 0.0004282166205144309
=" 0.0008278854663278998
constint 0.0021981786519740787
=2; 0.0016843187073567615
+1); 0.001427388735048103
intsize 0.00039966884581346885
arr[],int 0.000999172114533672
low,int 0.0005138599446173171
intmid 0.0004282166205144309
mid= 0.0008564332410288618
*pos 0.0003711210711125068
pos+ 0.0005995032687202032
mid+ 0.0005995032687202032
0,n 0.0005138599446173171
<m; 0.0006565988181221273
m;i++) 0.0007707899169259756
intl, 0.000456764395215393
v,int 0.0005709554940192411
x- 0.000456764395215393
-1], 0.0005709554940192411
>>t; 0.0006280510434211653
lengthof 0.000999172114533672
/2 0.0003425732964115447
2+ 0.0003711210711125068
n;++i) 0.0017128664820577236
<<' 0.0003425732964115447
''; 0.00039966884581346885
+1]; 0.0006851465928230894
//This 0.0006851465928230894
!=end) 0.0003711210711125068
//Mark 0.00039966884581346885
0;// 0.0006280510434211653
Thisfunction 0.0005138599446173171
=rand() 0.0007136943675240515
rand()% 0.0008278854663278998
setof 0.00039966884581346885
1;i++) 0.0004282166205144309
j+ 0.0006851465928230894
(i== 0.0011704587627394444
={ 0.000942076565131748
|C++ 0.00039966884581346885
%2 0.0007422421422250136
for(const 0.0004282166205144309
foreach 0.000485312169916355
ptr= 0.0006280510434211653
=ptr; 0.0003711210711125068
characteris 0.0005995032687202032
agiven 0.0003425732964115447
functionthat 0.0003425732964115447
inti, 0.0005138599446173171
allthe 0.0007993376916269377
=""; 0.0007993376916269377
"\nEnterthe 0.0008564332410288618
toprint 0.0004282166205144309
count= 0.0005424077193182792
if(pos 0.000456764395215393
<0 0.00039966884581346885
0|| 0.0005709554940192411
0;--i) 0.00039966884581346885
<i; 0.0003425732964115447
oflinked 0.0003425732964115447
intn) 0.001427388735048103
len= 0.0003425732964115447
if(p 0.00039966884581346885
=temp->next; 0.0005995032687202032
intd 0.0003425732964115447
d= 0.0006565988181221273
if(k 0.0004282166205144309
C++program 0.0005424077193182792
<<n 0.0004282166205144309
n<< 0.000456764395215393
0){ 0.000456764395215393
}else 0.0004282166205144309
else{ 0.0005995032687202032
accordingto 0.0003711210711125068
valueof 0.0005709554940192411
>>k; 0.0003711210711125068
=1, 0.0003711210711125068
returnresult; 0.0005709554940192411
*@param 0.0005709554940192411
result= 0.000913528790430786
i,int 0.0003425732964115447
>>m; 0.0004282166205144309
constvalue_type 0.0003425732964115447
inlinevoid 0.0006851465928230894
inlineauto 0.0005138599446173171
i++){ 0.0005995032687202032
-1] 0.0016272231579548375
1]+ 0.0006565988181221273
str= 0.0003711210711125068
==0); 0.0007707899169259756
5# 0.0005995032687202032
## 0.0053955294184818295
#3 0.0011419109880384823
3# 0.0011419109880384823
#4 0.0005138599446173171
4# 0.0010277198892346341
#2 0.0005424077193182792
2# 0.0011704587627394444
=(sol.*pf)(root, 0.006337605983613577
CHECK(res== 0.003911045134031802
=ts.deserialize("1 0.0014844842844500272
ts.deserialize("1# 0.0003425732964115447
#"); 0.0021410831025721546
(sol.*pf)(root,1); 0.0011133632133375204
1# 0.0005424077193182792
#1 0.0003425732964115447
ts.deserialize("12 0.0010277198892346341
(sol.*pf)(root,2); 0.0010277198892346341
(sol.*pf)(root,3); 0.00097062433983271
==2); 0.0008849810157298239
(sol.*pf)(root,4); 0.0005138599446173171
(sol.*pf)(root,5); 0.0005709554940192411
(sol.*pf)(root,6); 0.000456764395215393
(sol.*pf)(root,7); 0.00039966884581346885
<a.size(); 0.0004282166205144309
expect= 0.003026064118301978
={}; 0.002398013074880813
CHECK(isSame(res,expect)); 0.002797681920694282
={{1, 0.0007707899169259756
=-20; 0.000485312169916355
-20;i 0.000485312169916355
(sol.*pf)(root,i); 0.000485312169916355
i== 0.0005709554940192411
root_a= 0.00039966884581346885
root_b= 0.00039966884581346885
=serializer.deserialize("1 0.0006565988181221273
REQUIRE_FALSE(comparer.isSameTree(root_a,root_b)); 0.0005138599446173171
std::swap(root_a,root_b); 0.0003425732964115447
if(rand() 0.0005709554940192411
(rand()% 0.0006280510434211653
%2) 0.000485312169916355
//const 0.0011419109880384823
relyon 0.000485312169916355
CHECK(actual.front()== 0.0006280510434211653
CHECK(actual.back()== 0.0006280510434211653
CHECK(actual.size()== 0.0005424077193182792
SECTION("sizeis 0.0003425732964115447
randomValue= 0.0011704587627394444
=rand(); 0.0010848154386365583
expectReturnPos= 0.0012561020868423307
actualReturnPos= 0.0012561020868423307
CHECK(expectReturnPos== 0.0012561020868423307
CHECK(actualReturnPos== 0.0012561020868423307
==actual.end()); 0.0003711210711125068
isSame(expect,actual); 0.0012561020868423307
==expect.begin()); 0.00039966884581346885
==actual.begin()); 0.00039966884581346885
=expect.insert(expect.end(), 0.000456764395215393
=actual.insert(actual.end(), 0.000456764395215393
sz,randomValue); 0.0005138599446173171
==111); 0.0005709554940192411
<expectRandomContainer.end()) 0.0003425732964115447
if(expectIt 0.000913528790430786
(expectIt> 0.0007993376916269377
&&expectIt 0.000456764395215393
CHECK(*actualIt== 0.000456764395215393
==*expectIt); 0.000456764395215393
<expectRandomContainer.rend()) 0.0003425732964115447
pivot= 0.0003425732964115447
j<= 0.0007707899169259756
arr[]= 0.0003711210711125068
=sizeof(arr) 0.0003425732964115447
sizeof(arr)/ 0.0003425732964115447
m- 0.0003425732964115447
1&& 0.0003425732964115447
intm 0.000456764395215393
x+ 0.0008849810157298239
flag= 0.0003711210711125068
for(std::vector<int>::size_type 0.000485312169916355
(std::vector<int>::size_typej 0.000456764395215393
if(j 0.000456764395215393
for(std::vector<std::vector<int>>::size_type 0.0005138599446173171
(std::vector<std::vector<int>>::size_typei 0.000456764395215393
0;k 0.000485312169916355
k< 0.0007422421422250136
s2= 0.0003425732964115447
a,b, 0.0005709554940192411
inta 0.000456764395215393
-i 0.0003425732964115447
index= 0.0004282166205144309
x,y; 0.00039966884581346885
0;x 0.000456764395215393
x< 0.0007422421422250136
0;y 0.0004282166205144309
y< 0.0006851465928230894
(n% 0.0005709554940192411
2== 0.000485312169916355
Numberof 0.0004282166205144309
//Add 0.00039966884581346885
result+= 0.0003425732964115447
unsignedlong 0.000456764395215393
//no 0.0004282166205144309
nocover 0.0003425732964115447
covertest 0.0003425732964115447
1)= 0.00039966884581346885
'') 0.00039966884581346885
==' 0.0003425732964115447
==1 0.0003711210711125068
assert(res== 0.0005995032687202032
n,int 0.0007707899169259756
N;i++) 0.0003711210711125068
(intx 0.0006565988181221273
(inty 0.0005709554940192411
asa 0.00039966884581346885
endl;// 0.0006280510434211653
for(std::size_t 0.0003711210711125068
-2 0.0003711210711125068
anarray 0.0005138599446173171
unsignedchar 0.00039966884581346885
<4; 0.0007993376916269377
4;i++) 0.0004282166205144309
4;j++) 0.0003425732964115447
=3; 0.000913528790430786
(intk 0.000456764395215393
"Entera 0.0003425732964115447
ch= 0.000456764395215393
thestring 0.00039966884581346885
n% 0.0006280510434211653
<0) 0.0007422421422250136
thelength 0.0003711210711125068
(unsignedint 0.00039966884581346885
string:" 0.0005424077193182792
j- 0.0007707899169259756
s,int 0.00039966884581346885
(n- 0.0003711210711125068
answer= 0.0003425732964115447
while(t--) 0.000456764395215393
n>> 0.0005138599446173171
longdouble 0.0005709554940192411
=begin; 0.000456764395215393
<2; 0.0003425732964115447
>>=1; 0.0003425732964115447
0; 0.0004282166205144309
i;j 0.00039966884581346885
-1]) 0.0005995032687202032
<v.size(); 0.0003425732964115447
n/= 0.00039966884581346885
i* 0.00039966884581346885
unsignedint 0.0006851465928230894
oneof 0.000456764395215393
weare 0.0003425732964115447
std::array<double,S> 0.0007136943675240515
step* 0.0003711210711125068
0,1, 0.000485312169916355
<arr.size(); 0.0004282166205144309
arr.size();i++) 0.00039966884581346885
pair<int,int> 0.000485312169916355
<=m; 0.000456764395215393
Timecomplexity: 0.00039966884581346885
1,j 0.0003425732964115447
1,x 0.000456764395215393
0,0 0.0003711210711125068
[begin,end) 0.00039966884581346885
template<typename_Input_Iter, 0.00039966884581346885
typename_Tp 0.000999172114533672
_Tp= 0.000999172114533672
_Input_Iterend, 0.00039966884581346885
_Tpconst 0.00097062433983271
const&find, 0.0007422421422250136
_Comparecomp, 0.0003425732964115447
begin,_Input_Iter 0.0003425732964115447
end,_Tp 0.0005138599446173171
end,find, 0.0003425732964115447
if(begin 0.0003425732964115447
template<typename_Random_Access_Iter, 0.0007422421422250136
typenamestd::iterator_traits<_Random_Access_Iter>::value_type, 0.0005138599446173171
*_Random_Access_Iter 0.000485312169916355
begin,_Random_Access_Iter 0.0003425732964115447
_Random_Access_Iterend, 0.0005709554940192411
-1]); 0.0005709554940192411
0,0, 0.003853949584629878
a[],int 0.0005709554940192411
<V; 0.0006280510434211653
for(inti=0;i<num_nodes;i++) 0.0003711210711125068
for(intj=0;j<num_nodes;j++) 0.0003711210711125068
g_graph.push_back(std::vector<int>{0, 0.0007136943675240515
2,// 0.0007993376916269377
3,// 0.0015986753832538754
4,// 0.001998344229067344
5,// 0.0015986753832538754
6,// 0.0007993376916269377
<<"Number: 0.0006280510434211653
"Number:" 0.0006280510434211653
<<'\n' 0.0006280510434211653
<<"\n\n" 0.000485312169916355
<<"to 0.000485312169916355
"tostring: 0.000485312169916355
classPoint 0.0003711210711125068
ofclass 0.0003425732964115447
constVec3& 0.0005995032687202032
*(iv+ 0.0003425732964115447
*(iv2+ 0.000456764395215393
JavaScript
*Part 0.0015309539756961056
Partof 0.005836762032341403
ofCosmos 0.005836762032341403
Cosmosby 0.005836762032341403
byOpenGenus 0.0059324466558224095
OpenGenusFoundation 0.005454023538417376
=[]; 0.00507128504449335
=() 0.0007654769878480528
()=> 0.000956846234810066
=>{ 0.00449717730360731
-1]; 0.0007654769878480528
this.size= 0.0003827384939240264
this.isEmpty= 0.0002870538704430198
===0; 0.0007654769878480528
=new 0.0032532771983542243
Element:", 0.0001913692469620132
/*Part 0.001913692469620132
Foundation*/ 0.001913692469620132
constructor(){ 0.0003827384939240264
v){ 0.0001913692469620132
b){ 0.0022007463400631516
===undefined) 0.0007654769878480528
undefined){ 0.0011482154817720792
=a; 0.0002870538704430198
=0; 0.01435269352215099
this.parents[b]= 0.0001913692469620132
=b; 0.0002870538704430198
a= 0.0007654769878480528
b= 0.0005741077408860396
if(a 0.000478423117405033
if(this.ranks[a] 0.0001913692469620132
this.ranks[b]){ 0.0001913692469620132
[a,b] 0.0001913692469620132
b]= 0.0001913692469620132
/**Source: 0.0001913692469620132
"usestrict"; 0.0005741077408860396
*The 0.0003827384939240264
Thefunction 0.0006697923643670462
functionto 0.000478423117405033
touse 0.000956846234810066
*@param 0.011099416323796766
@param{any} 0.0025834848339871784
{any}a 0.0006697923643670462
a- 0.0007654769878480528
-The 0.004975600421012343
Thefirst 0.0010525308582910726
firstelement 0.003157592574873218
elementto 0.0035403310687972442
tocompare 0.0016266385991771121
{any}b 0.0006697923643670462
b- 0.0007654769878480528
Thesecond 0.0006697923643670462
secondelement 0.0007654769878480528
*@returns 0.00449717730360731
@returns{number} 0.0010525308582910726
{number}A 0.0001913692469620132
Anegative 0.0001913692469620132
negativenumber, 0.0001913692469620132
number,zero, 0.0001913692469620132
zero,or 0.0001913692469620132
ora 0.0001913692469620132
apositive 0.0002870538704430198
positivenumber 0.0001913692469620132
*as 0.0003827384939240264
asthe 0.000478423117405033
thefirst 0.0026791694574681848
firstargument 0.0001913692469620132
argumentis 0.0001913692469620132
isless 0.0006697923643670462
lessthan, 0.0001913692469620132
than,equal 0.0001913692469620132
equalto, 0.0001913692469620132
to,or 0.0001913692469620132
orgreater 0.0001913692469620132
greaterthan 0.0008611616113290595
thanthe 0.0011482154817720792
thesecond 0.0012439001052530858
Comparatorclass 0.0001913692469620132
*@constructor 0.0006697923643670462
*@classdesc 0.0001913692469620132
@classdescThe 0.0001913692469620132
isa 0.0010525308582910726
accordingto 0.0003827384939240264
toa 0.0003827384939240264
fn- 0.000478423117405033
Thecomparator 0.0001913692469620132
comparatorfunction 0.0003827384939240264
this.compare= 0.0001913692469620132
*Default 0.0001913692469620132
Defaultcomparator 0.0001913692469620132
*@see 0.000478423117405033
=function(a, 0.0007654769878480528
function(a,b) 0.0007654769878480528
return0; 0.0006697923643670462
returna 0.0003827384939240264
b? 0.0001913692469620132
?-1 0.0002870538704430198
-1: 0.0002870538704430198
:1; 0.0001913692469620132
*Compare 0.000478423117405033
Compareif 0.000478423117405033
ifthe 0.0029662233279112047
elementis 0.0013395847287340924
isequal 0.0001913692469620132
equalto 0.0002870538704430198
tothe 0.0027748540809491916
*@example 0.0003827384939240264
*return 0.0001913692469620132
*} 0.0001913692469620132
*var 0.000478423117405033
vara 0.0002870538704430198
=[1,2]; 0.0001913692469620132
varb 0.0001913692469620132
*//Compare 0.0001913692469620132
//Comparethe 0.0001913692469620132
varc 0.0001913692469620132
c= 0.0002870538704430198
@returns{boolean} 0.0008611616113290595
{boolean}True 0.0006697923643670462
Trueif 0.0006697923643670462
*the 0.0008611616113290595
secondone, 0.000478423117405033
one,false 0.000478423117405033
falseotherwise 0.000478423117405033
returnthis.compare(a, 0.000478423117405033
this.compare(a,b) 0.000478423117405033
lessthan 0.0006697923643670462
secondone 0.0003827384939240264
b)< 0.0001913692469620132
thanor 0.0003827384939240264
orequal 0.0003827384939240264
equalthe 0.0001913692469620132
<0 0.0007654769878480528
0|| 0.0013395847287340924
||this.equal(a, 0.0001913692469620132
this.equal(a,b); 0.0001913692469620132
isgreater 0.0006697923643670462
b)> 0.0001913692469620132
>0; 0.0006697923643670462
>0 0.0006697923643670462
comparefunction 0.0001913692469620132
toreturn 0.0001913692469620132
returnthe 0.0003827384939240264
*// 0.0002870538704430198
//false 0.0002870538704430198
*Comparator.greaterThan(1, 0.0001913692469620132
Comparator.greaterThan(1,2); 0.0001913692469620132
//true 0.0002870538704430198
=function() 0.0037317003157592574
function(){ 0.0042101234331642905
BinaryHeap 0.0002870538704430198
HeapClass 0.0001913692469620132
binaryheap 0.0002870538704430198
datastructure 0.0001913692469620132
@param{function} 0.0002870538704430198
*@type 0.000478423117405033
this._elements= 0.0001913692469620132
willnot 0.0001913692469620132
firstindex 0.0001913692469620132
this._length= 0.0003827384939240264
Object.defineProperty(this,"length", 0.0001913692469620132
"length",{ 0.0001913692469620132
get:function() 0.0001913692469620132
returnthis._length; 0.0003827384939240264
thevalue 0.0010525308582910726
valueof 0.0007654769878480528
ofthe 0.006793608267151469
theelement 0.004401492680126303
Theelement 0.0013395847287340924
tobe 0.0029662233279112047
bereplaced 0.0001913692469620132
Thenew 0.0001913692469620132
newelement 0.0002870538704430198
for(var 0.00507128504449335
(vari 0.0037317003157592574
i= 0.008324562242847574
=1; 0.003157592574873218
1;i 0.001913692469620132
i<= 0.0008611616113290595
this._length;i 0.0005741077408860396
i+= 0.0010525308582910726
+=1) 0.0008611616113290595
1){ 0.003157592574873218
//Removesthe 0.0002870538704430198
fromthe 0.0005741077408860396
*Removes 0.0008611616113290595
Removesall 0.0001913692469620132
allthe 0.000956846234810066
theelements 0.0007654769878480528
elementsin 0.0002870538704430198
inthe 0.003444646445316238
theheap 0.0012439001052530858
=null; 0.0026791694574681848
functioncalled 0.0001913692469620132
calledby 0.0001913692469620132
bythe 0.0001913692469620132
theforEach 0.0001913692469620132
forEachmethod. 0.0001913692469620132
*@callback 0.0001913692469620132
*@function 0.0001913692469620132
{any}element 0.000956846234810066
element- 0.000956846234810066
Thecurrent 0.0001913692469620132
currentelement 0.0003827384939240264
@param{number} 0.001435269352215099
{number}[index] 0.0001913692469620132
[index]- 0.0001913692469620132
Theindex 0.0010525308582910726
indexof 0.0013395847287340924
thecurrent 0.0012439001052530858
itis 0.0005741077408860396
isusing 0.0001913692469620132
*Performs 0.000478423117405033
Performsthe 0.0003827384939240264
thefn 0.0007654769878480528
fnfunction 0.0007654769878480528
functionfor 0.0003827384939240264
forall 0.0003827384939240264
elementsof 0.000478423117405033
untillthe 0.0001913692469620132
thecallback 0.0001913692469620132
callbackfunction 0.0001913692469620132
functionreturns 0.0001913692469620132
returnsfalse 0.0001913692469620132
@param{iterateCallback} 0.0003827384939240264
{iterateCallback}fn 0.0003827384939240264
functionthe 0.0003827384939240264
thebe 0.0003827384939240264
beexecuted 0.0003827384939240264
executedon 0.0003827384939240264
oneach 0.0003827384939240264
eachelement 0.0003827384939240264
@param{object} 0.0003827384939240264
{object}[this_arg] 0.0003827384939240264
[this_arg]- 0.0003827384939240264
Theobject 0.0003827384939240264
objectto 0.0003827384939240264
useas 0.0003827384939240264
asthis 0.0003827384939240264
thiswhen 0.0003827384939240264
whencalling 0.0003827384939240264
callingthe 0.0003827384939240264
=function(fn, 0.0003827384939240264
function(fn,this_arg) 0.0003827384939240264
this_arg){ 0.0003827384939240264
varordered_array 0.0001913692469620132
ordered_array= 0.0001913692469620132
=this.toArray(); 0.0001913692469620132
varindex 0.0012439001052530858
index= 0.0020093770931011385
while(ordered_array[0] 0.0001913692469620132
(ordered_array[0]!== 0.0001913692469620132
!==undefined) 0.0005741077408860396
if(!fn.call(this_arg, 0.0001913692469620132
ordered_array.shift(),index, 0.0001913692469620132
index,this)) 0.0001913692469620132
this)){ 0.0001913692469620132
index+= 0.000478423117405033
+=1; 0.001722323222658119
thelist 0.0029662233279112047
index,this); 0.0001913692469620132
anarray 0.0011482154817720792
abinary 0.0001913692469620132
@param{array} 0.0005741077408860396
Thearray 0.0001913692469620132
arrayto 0.0002870538704430198
=array.length; 0.0003827384939240264
/2); 0.000956846234810066
2);i 0.0001913692469620132
i>= 0.0005741077408860396
>=1; 0.0001913692469620132
i-= 0.000478423117405033
-=1) 0.000478423117405033
*Inserts 0.0005741077408860396
Insertsthe 0.0005741077408860396
beinserted 0.0001913692469620132
=function(element) 0.0015309539756961056
function(element){ 0.0016266385991771121
this._length+= 0.0001913692469620132
*Returns 0.0011482154817720792
Returnsif 0.0002870538704430198
heapis 0.0002870538704430198
isempty 0.0005741077408860396
Ifthe 0.0007654769878480528
Returnsthe 0.0010525308582910726
elementwithout 0.0002870538704430198
withoutremoving 0.0002870538704430198
removingit 0.0002870538704430198
*This 0.0003827384939240264
Thismethod 0.000478423117405033
methodis 0.0003827384939240264
isequivalent 0.0003827384939240264
equivalentto 0.0003827384939240264
elementwhile 0.0001913692469620132
whileremoving 0.0001913692469620132
@returns{any} 0.0012439001052530858
{any}The 0.0012439001052530858
if(this._length 0.0006697923643670462
===1) 0.0003827384939240264
this._length-= 0.0002870538704430198
-=1; 0.0005741077408860396
}else 0.008802985360252607
elseif 0.0026791694574681848
(this._length> 0.0003827384939240264
>1) 0.0005741077408860396
*Shifts 0.0001913692469620132
Shiftsthe 0.0001913692469620132
theindex 0.0006697923643670462
indexto 0.0003827384939240264
acorrect 0.0001913692469620132
correctposition 0.0001913692469620132
{number}index 0.0005741077408860396
index- 0.0005741077408860396
toshift 0.0002870538704430198
=function(index) 0.0005741077408860396
function(index){ 0.0005741077408860396
if(index 0.001722323222658119
(index=== 0.0008611616113290595
undefined)index 0.0001913692469620132
varparent_index 0.0001913692469620132
parent_index= 0.0003827384939240264
=index; 0.0002870538704430198
left_child_index= 0.0001913692469620132
=parent_index 0.0003827384939240264
parent_index* 0.0003827384939240264
*2; 0.0001913692469620132
right_child_index= 0.0001913692469620132
*2 0.0002870538704430198
2+ 0.0002870538704430198
+1; 0.0026791694574681848
=this._length 0.000478423117405033
while( 0.0001913692469620132
<array_length 0.0001913692469620132
(left_child_index< 0.0002870538704430198
<array_length) 0.0003827384939240264
){ 0.001435269352215099
array_length){ 0.0002870538704430198
if(left_child_index 0.0001913692469620132
if( 0.0010525308582910726
smallest_child_index= 0.0002870538704430198
=left_child_index; 0.0001913692469620132
else{ 0.0065065543967084485
-1; 0.0029662233279112047
child_index= 0.0001913692469620132
=Math.floor(child_index 0.0001913692469620132
Math.floor(child_index/ 0.0001913692469620132
>1 0.0001913692469620132
1&& 0.000478423117405033
thesize 0.0002870538704430198
sizeof 0.0005741077408860396
{number}The 0.000478423117405033
Thesize 0.0002870538704430198
aux= 0.0002870538704430198
=aux; 0.0002870538704430198
*Converts 0.0001913692469620132
Convertsthe 0.0001913692469620132
toan 0.0002870538704430198
anordered 0.0001913692469620132
Notethat 0.0001913692469620132
thesame 0.0005741077408860396
@returns{array} 0.0001913692469620132
{array}The 0.0001913692469620132
Theconverted 0.0001913692469620132
inan 0.0001913692469620132
arrayformat 0.0001913692469620132
vararray 0.0002870538704430198
array= 0.000478423117405033
=this._elements.slice(); 0.0001913692469620132
=this._length; 0.0002870538704430198
returnarray; 0.0007654769878480528
module.exports= 0.000478423117405033
={ 0.000956846234810066
y){ 0.000478423117405033
returnthis; 0.0002870538704430198
this.push= 0.0001913692469620132
this.pop= 0.0001913692469620132
this.top= 0.0001913692469620132
thepriority 0.0001913692469620132
priorityqueue 0.0001913692469620132
if(this.data.length 0.0001913692469620132
letn 0.000478423117405033
n= 0.0015309539756961056
for(let 0.004975600421012343
(leti 0.0032532771983542243
2- 0.0001913692469620132
-1); 0.0011482154817720792
>=0; 0.0003827384939240264
0;i 0.006028131279303416
Getthe 0.000478423117405033
itemof 0.0001913692469620132
theitem 0.0003827384939240264
ontothe 0.0001913692469620132
theminimum 0.0002870538704430198
andreturns 0.000956846234810066
===0) 0.001435269352215099
0){ 0.004879915797531336
returnundefined; 0.0001913692469620132
functionis 0.0002870538704430198
itemto 0.0001913692469620132
-1if 0.0002870538704430198
ifp 0.0002870538704430198
p< 0.0001913692469620132
constdiff 0.0001913692469620132
diff= 0.0001913692469620132
0? 0.000956846234810066
?1 0.0003827384939240264
1: 0.0002870538704430198
:0; 0.0003827384939240264
*Percolate 0.0001913692469620132
fromindex 0.0001913692469620132
@paramindex 0.0003827384939240264
while(index 0.0001913692469620132
(index> 0.0005741077408860396
>0) 0.0015309539756961056
letcurrentItem 0.0001913692469620132
currentItem= 0.0001913692469620132
<0) 0.0007654769878480528
** 0.0001913692469620132
ifa 0.0002870538704430198
n){ 0.0005741077408860396
leti 0.0003827384939240264
while(true) 0.0002870538704430198
(true){ 0.0002870538704430198
+1 0.0005741077408860396
letj 0.0001913692469620132
j= 0.0016266385991771121
leftchild 0.0003827384939240264
1;// 0.0001913692469620132
rightchild 0.0001913692469620132
<n 0.0005741077408860396
=j; 0.0001913692469620132
i> 0.0003827384939240264
*Return 0.0001913692469620132
parentindex 0.0001913692469620132
indexcurrent 0.0001913692469620132
currentinter 0.0001913692469620132
-1) 0.0012439001052530858
1)/ 0.0002870538704430198
childindex 0.0001913692469620132
returnindex 0.0001913692469620132
functionmain() 0.0001913692469620132
main(){ 0.0001913692469620132
this.end= 0.0001913692469620132
=false; 0.0010525308582910726
=true; 0.001435269352215099
this.root= 0.0002870538704430198
node= 0.0021050617165821453
returnthis.add(input.substr(1), 0.0001913692469620132
this.add(input.substr(1),node.keys.get(input[0])); 0.0001913692469620132
returnfalse; 0.0011482154817720792
!==0) 0.0002870538704430198
onthe 0.000478423117405033
thenode 0.0007654769878480528
nodeto 0.0005741077408860396
*to 0.0001913692469620132
andthe 0.0002870538704430198
theparent 0.0002870538704430198
*A 0.0003827384939240264
inwhich 0.0001913692469620132
anelement 0.000478423117405033
childis 0.0001913692469620132
isusually 0.0001913692469620132
thetree 0.0003827384939240264
this.value= 0.0001913692469620132
this.left= 0.0001913692469620132
this.right= 0.0001913692469620132
fora 0.0001913692469620132
avalue 0.0003827384939240264
=function(val) 0.0002870538704430198
function(val){ 0.0002870538704430198
if(val 0.0001913692469620132
this.value&& 0.0001913692469620132
!=null) 0.0005741077408860396
null){ 0.0011482154817720792
(val> 0.0001913692469620132
returnnull; 0.000478423117405033
anode 0.0002870538704430198
//Recursively 0.0001913692469620132
Recursivelygo 0.0001913692469620132
if(this.left 0.0001913692469620132
//Print 0.0001913692469620132
if(this.right 0.0001913692469620132
//Add 0.0002870538704430198
Adda 0.0001913692469620132
function(n){ 0.0002870538704430198
if(n.value 0.0001913692469620132
this.value){ 0.0001913692469620132
==null) 0.0002870538704430198
=n; 0.0003827384939240264
storethe 0.0002870538704430198
theroot 0.0001913692469620132
found= 0.0001913692469620132
if(found 0.0001913692469620132
===null) 0.0001913692469620132
+" 0.000478423117405033
notfound"); 0.0001913692469620132
anew 0.000478423117405033
valueto 0.0002870538704430198
//Implementationof 0.0001913692469620132
this.add= 0.0001913692469620132
console.log(bag1.size());// 0.0002870538704430198
//1 0.0002870538704430198
addedto 0.0002870538704430198
thetop 0.0001913692469620132
topof 0.0001913692469620132
thestack 0.0006697923643670462
elementon 0.0001913692469620132
maybe 0.0001913692469620132
Thisis 0.0003827384939240264
isan 0.0002870538704430198
anexample 0.0001913692469620132
ofan 0.0001913692469620132
implementationof 0.0001913692469620132
ofa 0.0005741077408860396
elementcan 0.0001913692469620132
theend 0.0013395847287340924
endof 0.0010525308582910726
thearray. 0.0002870538704430198
//Createsa 0.0002870538704430198
representationof 0.0001913692469620132
={}; 0.000478423117405033
=function(value) 0.0003827384939240264
function(value){ 0.0003827384939240264
=value; 0.000478423117405033
returnsthe 0.0010525308582910726
valueat 0.0001913692469620132
atthe 0.0015309539756961056
varresult 0.0003827384939240264
result= 0.0007654769878480528
returnresult; 0.0006697923643670462
//Returnsthe 0.000478423117405033
this.view= 0.0001913692469620132
i< 0.007272031384556502
linkedlist 0.0003827384939240264
listis 0.0003827384939240264
ina 0.000478423117405033
alinked 0.0001913692469620132
donot 0.0002870538704430198
*a 0.0001913692469620132
notneed 0.0001913692469620132
needto 0.000956846234810066
*it 0.0001913692469620132
functionLinkedList() 0.0001913692469620132
LinkedList(){ 0.0001913692469620132
varlength 0.000478423117405033
length= 0.0006697923643670462
head= 0.000478423117405033
=element; 0.000478423117405033
this.next= 0.0001913692469620132
thehead 0.0001913692469620132
andadds 0.0001913692469620132
itto 0.0003827384939240264
varnode 0.0010525308582910726
newNode(element); 0.0002870538704430198
//Checkif 0.0006697923643670462
=node; 0.0016266385991771121
varcurrentNode 0.0007654769878480528
currentNode= 0.001435269352215099
=head; 0.0006697923643670462
presentin 0.0001913692469620132
=currentNode.next; 0.0010525308582910726
thelength 0.0007654769878480528
withthe 0.0001913692469620132
asparam 0.0001913692469620132
varpreviousNode; 0.0002870538704430198
nodeis 0.0002870538704430198
isthe 0.0022007463400631516
toremove 0.0001913692469620132
if(currentNode.element 0.0001913692469620132
(currentNode.element=== 0.0001913692469620132
===element) 0.0007654769878480528
element){ 0.0016266385991771121
previousNode= 0.0002870538704430198
=currentNode; 0.0005741077408860396
previousNode.next= 0.0002870538704430198
//Decrementingthe 0.0001913692469620132
=-1; 0.0002870538704430198
weare 0.0002870538704430198
index+ 0.0002870538704430198
return-1; 0.001435269352215099
elementat 0.0012439001052530858
anindex 0.0001913692469620132
varcount 0.0003827384939240264
count= 0.0005741077408860396
while(count 0.0002870538704430198
(count< 0.0001913692469620132
<index) 0.0002870538704430198
index){ 0.0012439001052530858
returncurrentNode.element; 0.0001913692469620132
atspecified 0.0002870538704430198
specifiedindex 0.000478423117405033
varcurrentIndex 0.0001913692469620132
currentIndex= 0.0001913692469620132
ifindex 0.0002870538704430198
indexis 0.000478423117405033
outof 0.000478423117405033
oflist 0.0003827384939240264
length){ 0.0005741077408860396
thestart 0.0002870538704430198
startof 0.0002870538704430198
node.next= 0.0005741077408860396
while(currentIndex 0.0001913692469620132
(currentIndex< 0.0001913692469620132
nodeat 0.0001913692469620132
(index< 0.0003827384939240264
||index 0.000478423117405033
index>= 0.0001913692469620132
<length) 0.0003827384939240264
value- 0.0001913692469620132
@type{node} 0.0001913692469620132
this._front= 0.0003827384939240264
this._back= 0.000478423117405033
thespecified 0.0006697923643670462
specifiedposition 0.0002870538704430198
positionin 0.0001913692469620132
thelist. 0.0002870538704430198
isnot 0.0006697923643670462
notspecified, 0.0001913692469620132
beadded 0.0002870538704430198
indexwhere 0.0001913692469620132
wherethe 0.0001913692469620132
elementmust 0.0001913692469620132
mustbe 0.0003827384939240264
=function(element, 0.0001913692469620132
function(element,index) 0.0001913692469620132
>this._length 0.0002870538704430198
index< 0.0003827384939240264
thrownew 0.0006697923643670462
newError("Index 0.0002870538704430198
Error("Indexout 0.0002870538704430198
ofbounds"); 0.0002870538704430198
//Addthe 0.000478423117405033
thefront 0.0001913692469620132
(this._length!== 0.0001913692469620132
=this._front; 0.000956846234810066
theback 0.0002870538704430198
this._length){ 0.0001913692469620132
node.prev= 0.0003827384939240264
=this._back; 0.0005741077408860396
varcurrent_node 0.0003827384939240264
current_node= 0.000956846234810066
vari; 0.0001913692469620132
iscloser 0.0001913692469620132
<this._length 0.0001913692469620132
this._length/ 0.0001913692469620132
/2) 0.0002870538704430198
2){ 0.0007654769878480528
for(i 0.0018180078461391255
(i= 0.0018180078461391255
<this._length; 0.000478423117405033
if(i 0.0012439001052530858
(i=== 0.0006697923643670462
===index) 0.0005741077408860396
//Getthe 0.0001913692469620132
=current_node.next; 0.0002870538704430198
this._length- 0.0006697923643670462
=current_node.prev; 0.0002870538704430198
listcontains 0.0001913692469620132
containsthe 0.0001913692469620132
found_element= 0.0001913692469620132
returntrue; 0.0007654769878480528
thelist, 0.0002870538704430198
while(current_node) 0.0002870538704430198
(current_node){ 0.0002870538704430198
current_node.value,index, 0.0001913692469620132
index,if 0.0001913692469620132
ifany. 0.0001913692469620132
returnnode.value; 0.0002870538704430198
=node.next; 0.0005741077408860396
elementin 0.0010525308582910726
returnthis.get(0); 0.0001913692469620132
thelast 0.0006697923643670462
lastelement 0.0003827384939240264
Thelast 0.0001913692469620132
tosearch 0.0001913692469620132
or-1 0.0001913692469620132
ifnot 0.0001913692469620132
notfound 0.0001913692469620132
if(node.value 0.0002870538704430198
(node.value=== 0.0002870538704430198
returni; 0.0002870538704430198
this._length=== 0.0002870538704430198
lastindex 0.0001913692469620132
index-= 0.0001913692469620132
Removesand 0.0005741077408860396
elementof 0.0006697923643670462
Theremoved 0.0006697923643670462
removedelement 0.0005741077408860396
andretrieves 0.000478423117405033
retrievesthe 0.000478423117405033
Ifnot 0.0001913692469620132
-1 0.0005741077408860396
1|| 0.0001913692469620132
||this._length 0.0001913692469620132
//Removethe 0.0002870538704430198
removed_node= 0.0003827384939240264
=node.prev; 0.0002870538704430198
occurrenceof 0.0001913692469620132
while(node) 0.0001913692469620132
(node){ 0.0001913692469620132
=function(node) 0.0002870538704430198
function(node){ 0.0005741077408860396
if(node 0.0001913692469620132
(node=== 0.0001913692469620132
this._storage= 0.0003827384939240264
this._count= 0.0001913692469620132
this._limit= 0.0001913692469620132
value){ 0.001435269352215099
indexfor 0.0002870538704430198
ourstorage 0.0002870538704430198
throughour 0.0002870538704430198
=this.hashFunc(key, 0.0002870538704430198
this.hashFunc(key,this._limit); 0.0002870538704430198
thebucket 0.0005741077408860396
atthis 0.0002870538704430198
inour 0.0001913692469620132
ifone 0.0001913692469620132
[k,v],[k,v] 0.0001913692469620132
[k,v]] 0.0002870538704430198
varbucket 0.0003827384939240264
bucket= 0.0003827384939240264
=this._storage[index]; 0.0002870538704430198
abucket 0.0002870538704430198
if(!bucket) 0.0003827384939240264
(!bucket){ 0.0003827384939240264
override= 0.0001913692469620132
ourbucket 0.0001913692469620132
tosee 0.000478423117405033
seeif 0.0003827384939240264
thereare 0.0002870538704430198
areany 0.0001913692469620132
Ifthere 0.0001913692469620132
<bucket.length; 0.0003827384939240264
bucket.length;i++) 0.0003827384939240264
i++){ 0.006410869773227443
vartuple 0.0003827384939240264
tuple= 0.0003827384939240264
=bucket[i]; 0.0003827384939240264
if(tuple[0] 0.0002870538704430198
(tuple[0]=== 0.0002870538704430198
===key) 0.0002870538704430198
key){ 0.0007654769878480528
bethe 0.0001913692469620132
thenew 0.000478423117405033
arein 0.0001913692469620132
hashfunction. 0.0002870538704430198
weneed 0.0002870538704430198
if(this._count 0.0001913692469620132
this._limit* 0.0001913692469620132
=function(key) 0.0001913692469620132
function(key){ 0.0001913692469620132
overthe 0.0001913692469620132
keyis 0.0001913692469620132
returntuple[1]; 0.0001913692469620132
max){ 0.0001913692469620132
hash= 0.0012439001052530858
<str.length; 0.0001913692469620132
str.length;i++) 0.0001913692469620132
=(hash 0.0001913692469620132
*@author 0.0002870538704430198
SidharthMishra 0.0001913692469620132
beused 0.0002870538704430198
WedOct 0.0001913692469620132
Oct18 0.0001913692469620132
182017 0.0001913692469620132
GMT-0700(PDT) 0.0001913692469620132
bf-- 0.0001913692469620132
fornow. 0.0001913692469620132
Murmur3hash 0.0001913692469620132
TimeComplexity 0.0001913692469620132
Complexity: 0.0001913692469620132
:O(k) 0.0001913692469620132
O(k)where 0.0001913692469620132
wherek 0.0001913692469620132
k= 0.0010525308582910726
=number 0.0005741077408860396
numberof 0.0022964309635441584
ofhash 0.0003827384939240264
hashfunctions 0.0005741077408860396
bloomfilter. 0.0002870538704430198
FNVHash 0.0001913692469620132
thehash 0.0002870538704430198
*FNV 0.0003827384939240264
*-> 0.0001913692469620132
->FNV 0.0001913692469620132
{number}m 0.0001913692469620132
mThe 0.0002870538704430198
Thenumber 0.0003827384939240264
ofbits 0.0001913692469620132
bitsin 0.0002870538704430198
backingthe 0.0001913692469620132
thebloom 0.0007654769878480528
bloomfilter 0.0016266385991771121
@param{[Function]} 0.0001913692469620132
{[Function]}k 0.0001913692469620132
functionsto 0.0001913692469620132
abloom 0.0001913692469620132
withm 0.0001913692469620132
mbits 0.0001913692469620132
bitsand 0.0001913692469620132
=function 0.0007654769878480528
k){ 0.0005741077408860396
<2 0.0001913692469620132
2|| 0.0001913692469620132
undefined== 0.0002870538704430198
==0 0.0002870538704430198
bloomfilter, 0.0001913692469620132
countof 0.0001913692469620132
ofelements 0.0001913692469620132
[];// 0.0001913692469620132
//the 0.0003827384939240264
thebit 0.000478423117405033
bitvector 0.0003827384939240264
=k; 0.0001913692469620132
<m; 0.0002870538704430198
<this.hashFunctions.length; 0.0002870538704430198
this.hashFunctions.length;i++) 0.0002870538704430198
if(typeof 0.0007654769878480528
nota 0.000478423117405033
FNVhashing 0.0001913692469620132
hashingusing 0.0001913692469620132
usingthe 0.0003827384939240264
theFNVHash 0.0001913692469620132
FNVHash- 0.0001913692469620132
seelink: 0.0001913692469620132
link:http://isthe.com/chongo/tech/comp/fnv/#history, 0.0001913692469620132
*uses: 0.0001913692469620132
*32 0.0003827384939240264
32bit 0.0005741077408860396
bitoffset 0.0003827384939240264
offsetbasis 0.0003827384939240264
basis= 0.0001913692469620132
=2166136261 0.0001913692469620132
bitFNV_prime 0.0001913692469620132
FNV_prime= 0.0001913692469620132
=224 0.0001913692469620132
224+ 0.0001913692469620132
+28 0.0001913692469620132
28+ 0.0001913692469620132
+0x93 0.0001913692469620132
0x93= 0.0001913692469620132
=16777619 0.0001913692469620132
@param{Buffer} 0.0001913692469620132
{Buffer}toBeHashed 0.0001913692469620132
toBeHashedThe 0.0001913692469620132
behashed, 0.0001913692469620132
hashed,Node.js 0.0001913692469620132
Node.jsbuffer 0.0001913692469620132
=function(toBeHashed) 0.0001913692469620132
function(toBeHashed){ 0.0001913692469620132
constOFFSET_BASIS_32 0.0001913692469620132
OFFSET_BASIS_32= 0.0001913692469620132
=2166136261; 0.0001913692469620132
constFNV_PRIME 0.0001913692469620132
FNV_PRIME= 0.0001913692469620132
=16777619; 0.0001913692469620132
lethash 0.0003827384939240264
=OFFSET_BASIS_32; 0.0001913692469620132
OFFSET_BASIS_32;// 0.0001913692469620132
//32 0.0001913692469620132
//or 0.0001913692469620132
oreach 0.0001913692469620132
eachoctet_of_data 0.0001913692469620132
octet_of_datato 0.0001913692469620132
behashed 0.000478423117405033
//toBeHashed 0.0001913692469620132
toBeHashedis 0.0001913692469620132
aBuffer 0.0001913692469620132
Bufferthat 0.0001913692469620132
thathas 0.0002870538704430198
hasoctets 0.0001913692469620132
octetsof 0.0001913692469620132
ofdata 0.0001913692469620132
datato 0.0001913692469620132
<toBeHashed.length; 0.0001913692469620132
toBeHashed.length;i++) 0.0001913692469620132
=hash 0.0003827384939240264
hash^ 0.0001913692469620132
^toBeHashed[i]; 0.0001913692469620132
hash* 0.0001913692469620132
*FNV_PRIME; 0.0001913692469620132
//since 0.0001913692469620132
sincehash 0.0001913692469620132
hashbeing 0.0001913692469620132
beingreturned 0.0001913692469620132
returnedis 0.0002870538704430198
isnegative 0.0001913692469620132
negativemost 0.0001913692469620132
mostof 0.0001913692469620132
thetimes 0.0001913692469620132
returnMath.abs(hash); 0.0001913692469620132
itgets 0.0001913692469620132
hashedk 0.0001913692469620132
*T:: 0.0001913692469620132
T::O(k) 0.0001913692469620132
O(k)operation 0.0001913692469620132
@param{string} 0.0007654769878480528
{string}element 0.0001913692469620132
elementThe 0.0001913692469620132
andthen 0.0001913692469620132
(typeofelement 0.0001913692469620132
element!== 0.0001913692469620132
!=="string") 0.0002870538704430198
"string"){ 0.0001913692469620132
element= 0.0005741077408860396
=String(element); 0.0001913692469620132
letbuffE 0.0001913692469620132
buffE= 0.0001913692469620132
=Buffer.from(element); 0.0001913692469620132
Buffer.from(element);// 0.0001913692469620132
//get 0.0001913692469620132
getthe 0.0001913692469620132
elementbuffer 0.0001913692469620132
=this.hashFunctions[i](buffE); 0.0001913692469620132
this.bitVector[hash% 0.0001913692469620132
Checkif 0.0002870538704430198
elementthat 0.0001913692469620132
needsto 0.0002870538704430198
toget 0.0001913692469620132
prob= 0.0001913692469620132
return{ 0.0006697923643670462
isMember:prob 0.0001913692469620132
ofmembership 0.0001913692469620132
filter= 0.0010525308582910726
@param{*} 0.0002870538704430198
kThe 0.0001913692469620132
elementneeds 0.0001913692469620132
inbloom 0.000956846234810066
=${JSON.stringify( 0.0001913692469620132
console.log("----------test 0.0006697923643670462
try{ 0.0006697923643670462
}catch 0.0006697923643670462
catch(e) 0.0006697923643670462
(e){ 0.0006697923643670462
test(32,[bf.fnvHash1a, 0.0001913692469620132
[bf.fnvHash1a,bf.fnvHash1a, 0.0001913692469620132
//Part 0.0022964309635441584
size){ 0.0001913692469620132
if(array.length 0.0001913692469620132
(array.length=== 0.0001913692469620132
===0 0.0007654769878480528
1)return 0.0001913692469620132
vartemp 0.0005741077408860396
temp= 0.000956846234810066
mergeSortHelper(arr,temp, 0.0003827384939240264
temp,left, 0.0003827384939240264
right){ 0.000478423117405033
mid= 0.0007654769878480528
if(right 0.0003827384939240264
left){ 0.0001913692469620132
left)/ 0.0003827384939240264
/2; 0.0005741077408860396
thenumber 0.0016266385991771121
inv_count= 0.0002870538704430198
inv_count+= 0.0001913692469620132
mid+ 0.0006697923643670462
+1, 0.000478423117405033
1,right); 0.0001913692469620132
merge(arr,temp, 0.0001913692469620132
left,mid 0.0001913692469620132
returninv_count; 0.0001913692469620132
vari 0.000478423117405033
=left; 0.0003827384939240264
varj 0.0001913692469620132
vark 0.0002870538704430198
while(i 0.000478423117405033
(i<= 0.0003827384939240264
<=mid 0.0001913692469620132
mid- 0.0005741077408860396
<=right) 0.0001913692469620132
if(arr[i] 0.000478423117405033
temp[k++]= 0.0003827384939240264
=arr[i++]; 0.0001913692469620132
=arr[j++]; 0.0001913692469620132
while(j 0.0003827384939240264
ona 0.0001913692469620132
toencrypt 0.0001913692469620132
n- 0.0006697923643670462
*@return 0.0001913692469620132
=""; 0.0012439001052530858
//Get 0.0005741077408860396
ASCIIcode 0.0001913692469620132
ascii= 0.0001913692469620132
//Check 0.0002870538704430198
characteris 0.0001913692469620132
output+= 0.0001913692469620132
=ascii 0.0001913692469620132
//Convert 0.0003827384939240264
startingfrom 0.0001913692469620132
13));// 0.0001913692469620132
char=> 0.0001913692469620132
letresult 0.0001913692469620132
constpreparedKey 0.0001913692469620132
preparedKey= 0.0001913692469620132
=key.toLowerCase(); 0.0001913692469620132
constalphabetLen 0.0001913692469620132
alphabetLen= 0.0001913692469620132
=Viegenere.alphabetLen_(); 0.0001913692469620132
constchar 0.0001913692469620132
char= 0.0001913692469620132
constkeyChar 0.0001913692469620132
keyChar= 0.0001913692469620132
=preparedKey[i 0.0001913692469620132
preparedKey[i% 0.0001913692469620132
%preparedKey.length]; 0.0001913692469620132
shift= 0.0003827384939240264
result+= 0.0001913692469620132
>=0 0.000478423117405033
shift: 0.0001913692469620132
text= 0.0001913692469620132
stringto 0.0002870538704430198
setthe 0.0001913692469620132
ofcharacters 0.0001913692469620132
notin 0.0001913692469620132
beencoded 0.0001913692469620132
=the 0.0001913692469620132
thestring 0.000478423117405033
loc+ 0.0002870538704430198
+shift 0.0002870538704430198
=caesar_cipher( 0.0001913692469620132
todecrypt 0.0001913692469620132
Javascriptprogram 0.0003827384939240264
programto 0.0001913692469620132
morsecode 0.0007654769878480528
->'stores 0.0003827384939240264
'storesthe 0.0002870538704430198
themorse 0.0003827384939240264
translatedform 0.0001913692469620132
formof 0.0001913692469620132
theenglish 0.0001913692469620132
codeof 0.0001913692469620132
asingle 0.0001913692469620132
codechart 0.0001913692469620132
A:".-", 0.0001913692469620132
B:"-...", 0.0001913692469620132
C:"-.-.", 0.0001913692469620132
D:"-..", 0.0001913692469620132
E:".", 0.0001913692469620132
F:"..-.", 0.0001913692469620132
G:"--.", 0.0001913692469620132
H:"....", 0.0001913692469620132
I:"..", 0.0001913692469620132
J:".---", 0.0001913692469620132
K:"-.-", 0.0001913692469620132
L:".-..", 0.0001913692469620132
M:"--", 0.0001913692469620132
N:"-.", 0.0001913692469620132
O:"---", 0.0001913692469620132
P:".--.", 0.0001913692469620132
Q:"--.-", 0.0001913692469620132
R:".-.", 0.0001913692469620132
S:"...", 0.0001913692469620132
T:"-", 0.0001913692469620132
U:"..-", 0.0001913692469620132
V:"...-", 0.0001913692469620132
W:".--", 0.0001913692469620132
X:"-..-", 0.0001913692469620132
Y:"-.--", 0.0001913692469620132
Z:"--..", 0.0001913692469620132
"1":".----", 0.0001913692469620132
"2":"..---", 0.0001913692469620132
"3":"...--", 0.0001913692469620132
"4":"....-", 0.0001913692469620132
"5":".....", 0.0001913692469620132
"6":"-....", 0.0001913692469620132
"7":"--...", 0.0001913692469620132
"8":"---..", 0.0001913692469620132
"9":"----.", 0.0001913692469620132
//Array 0.0001913692469620132
ofvalues 0.0002870538704430198
valuesfrom 0.0002870538704430198
//Function 0.0002870538704430198
Functionto 0.0002870538704430198
message.split("").forEach(letter=> 0.0001913692469620132
if(letter 0.0001913692469620132
(letter!== 0.0001913692469620132
!==" 0.0002870538704430198
"") 0.0002870538704430198
"){ 0.0002870538704430198
upthe 0.0002870538704430198
witha 0.0001913692469620132
spaceto 0.0001913692469620132
toseparate 0.0001913692469620132
differentcharacters 0.0001913692469620132
cipher+= 0.0001913692469620132
""; 0.0003827384939240264
indicatesdifferent 0.0001913692469620132
+=" 0.0002870538704430198
";// 0.0001913692469620132
citext= 0.0001913692469620132
ofspace 0.0001913692469620132
checksfor 0.0001913692469620132
//in 0.0001913692469620132
//if 0.0006697923643670462
ifi 0.0001913692469620132
=1 0.0005741077408860396
thatindicates 0.0001913692469620132
indicatesa 0.0001913692469620132
=2 0.0003827384939240264
decipher+= 0.0001913692469620132
arrayof 0.0008611616113290595
..-. 0.0001913692469620132
.-.-- 0.0001913692469620132
ofstring 0.0001913692469620132
doesnot 0.0002870538704430198
adot 0.0001913692469620132
Thenumbers 0.0001913692469620132
=[ 0.000478423117405033
"+ 0.0008611616113290595
+s); 0.0001913692469620132
findthe 0.0006697923643670462
thelongest 0.0001913692469620132
longestpalindromic 0.0001913692469620132
palindromicsubstring 0.0003827384939240264
inJavaScript 0.0003827384939240264
Example: 0.0001913692469620132
String: 0.0001913692469620132
substringis 0.0003827384939240264
//A 0.0003827384939240264
Autility 0.0001913692469620132
utilityfunction 0.0001913692469620132
tocheck 0.000478423117405033
checkif 0.0003827384939240264
apalindrome 0.0001913692469620132
//The 0.0005741077408860396
tofind 0.0010525308582910726
maxp= 0.0001913692469620132
//loop 0.0001913692469620132
j--){ 0.0003827384939240264
if(sub_subs_str.length 0.0001913692469620132
//to 0.0001913692469620132
thesubstring 0.0001913692469620132
lengthof 0.000478423117405033
maximumlength 0.0001913692469620132
//of 0.0001913692469620132
//return 0.0002870538704430198
thesolution 0.0002870538704430198
/*Checker 0.0002870538704430198
Checker*/ 0.0002870538704430198
constalphabet 0.0001913692469620132
alphabet= 0.0001913692469620132
=[..."abcdefghijklmnopqrstuvwxyz"]; 0.0001913692469620132
=str 0.0006697923643670462
str=> 0.0006697923643670462
apangram 0.0001913692469620132
pangrambut 0.0001913692469620132
butmight 0.0001913692469620132
mighta 0.0001913692469620132
==1 0.0001913692469620132
/*Test 0.0002870538704430198
Test*/ 0.0002870538704430198
quickbrown 0.0001913692469620132
brownfox 0.0001913692469620132
foxjumps 0.0001913692469620132
jumpsover 0.0001913692469620132
lazydog"); 0.0001913692469620132
dog");// 0.0001913692469620132
//should 0.002870538704430198
shouldreturn 0.0016266385991771121
//Author: 0.0001913692469620132
//Github: 0.0002870538704430198
IgorAntun 0.0001913692469620132
Github:@IgorAntun 0.0001913692469620132
returntrue 0.0006697923643670462
returnfalse 0.0005741077408860396
varscore 0.0001913692469620132
score= 0.0001913692469620132
everyunique 0.0001913692469620132
varletters 0.0002870538704430198
letters= 0.0002870538704430198
score+= 0.0001913692469620132
itup 0.0001913692469620132
==true 0.0001913692469620132
if(score 0.0002870538704430198
(score> 0.0001913692469620132
apanagram"); 0.0001913692469620132
panagram");// 0.0001913692469620132
twostrings 0.0005741077408860396
inboth 0.0002870538704430198
bothstrings 0.0001913692469620132
foreach 0.0008611616113290595
containingthe 0.0002870538704430198
containedin 0.0002870538704430198
theother 0.0001913692469620132
isused 0.0002870538704430198
=str.split(""); 0.0001913692469620132
//=> 0.0008611616113290595
=>false 0.0001913692469620132
=>true 0.0001913692469620132
|javascript 0.0001913692469620132
=input 0.0002870538704430198
input=> 0.0002870538704430198
//Tests 0.0002870538704430198
letsum 0.000478423117405033
sum= 0.0005741077408860396
num1= 0.0001913692469620132
num2= 0.0001913692469620132
letcurrent 0.0001913692469620132
current= 0.0002870538704430198
sum+= 0.0005741077408860396
%2 0.0001913692469620132
=2; 0.0008611616113290595
numberis 0.0002870538704430198
thearray 0.0007654769878480528
num= 0.0002870538704430198
highestPrimeFactor= 0.0001913692469620132
while(num 0.0001913692469620132
(num> 0.0001913692469620132
if(num 0.0003827384939240264
(num% 0.0001913692469620132
num/= 0.0001913692469620132
+=i; 0.0003827384939240264
constreadline 0.0003827384939240264
readline= 0.0003827384939240264
=require("readline"); 0.0005741077408860396
constrl 0.000478423117405033
rl= 0.000478423117405033
=readline.createInterface({ 0.0003827384939240264
input:process.stdin, 0.0005741077408860396
output:process.stdout 0.0005741077408860396
rl.question("Entera 0.0002870538704430198
aNumber: 0.0001913692469620132
Number:", 0.0001913692469620132
",number 0.0001913692469620132
number=> 0.0001913692469620132
hasPerfect= 0.0001913692469620132
number= 0.000478423117405033
1;i++) 0.0007654769878480528
number% 0.0001913692469620132
returnsum 0.0001913692469620132
<arr.length; 0.0003827384939240264
++i){ 0.0005741077408860396
arr[i];// 0.0001913692469620132
//sum 0.0001913692469620132
sumof 0.0002870538704430198
valuesin 0.0001913692469620132
inarray 0.0001913692469620132
/arr.length; 0.0001913692469620132
arr.length;// 0.0001913692469620132
//this 0.000478423117405033
thisis 0.000478423117405033
//returns 0.0003827384939240264
asexpected 0.0002870538704430198
0,1, 0.0002870538704430198
letres 0.0001913692469620132
res= 0.0003827384939240264
while(b 0.0001913692469620132
&1) 0.0001913692469620132
=a 0.0001913692469620132
<<1; 0.0002870538704430198
returnres; 0.0002870538704430198
num=> 0.0002870538704430198
shouldoutput 0.0007654769878480528
outputtrue 0.000478423117405033
outputfalse 0.0002870538704430198
/*Partof 0.0001913692469620132
ofcosmos 0.0001913692469620132
OpenGenusFoundation*/ 0.0001913692469620132
if(n 0.0007654769878480528
<=1) 0.0001913692469620132
returnn; 0.0002870538704430198
fibonacci(n- 0.0001913692469620132
-2) 0.0001913692469620132
2)+ 0.0001913692469620132
if(!(n 0.0001913692469620132
memoizedFibonacci(n- 0.0001913692469620132
-2, 0.0001913692469620132
-1, 0.0005741077408860396
varx 0.0003827384939240264
x= 0.0010525308582910726
n/ 0.0002870538704430198
/x 0.0001913692469620132
=(n 0.0001913692469620132
=["", 0.0003827384939240264
anautomorphic 0.0002870538704430198
asa 0.0002870538704430198
anumber 0.0002870538704430198
5,6, 0.0002870538704430198
",num 0.0001913692469620132
console.log(`${num}is 0.0001913692469620132
automorphicnumber.`); 0.0001913692469620132
notan 0.0001913692469620132
numbers= 0.0001913692469620132
while(number 0.0002870538704430198
(number> 0.0001913692469620132
constn 0.0001913692469620132
/10); 0.0001913692469620132
//Move 0.0002870538704430198
towerof 0.0001913692469620132
thedest 0.0001913692469620132
towerOfHanoi(n- 0.0001913692469620132
Movethe 0.0001913692469620132
theremaining 0.0001913692469620132
Tower", 0.0001913692469620132
%i 0.0002870538704430198
i== 0.0001913692469620132
==0) 0.0008611616113290595
console.log("Numbersare 0.0002870538704430198
arenot 0.000478423117405033
notAmicable"); 0.0001913692469620132
//Note:This 0.0001913692469620132
returnarr 0.0001913692469620132
returnarr; 0.0006697923643670462
b)=> 0.0001913692469620132
functionfactorial(n) 0.0001913692469620132
factorial(n){ 0.0001913692469620132
constnum 0.0001913692469620132
=3; 0.0002870538704430198
ans= 0.0001913692469620132
constReadline 0.0001913692469620132
Readline= 0.0001913692469620132
=Readline.createInterface({ 0.0001913692469620132
functiongcd(a, 0.0001913692469620132
gcd(a,b) 0.0002870538704430198
!=0) 0.0001913692469620132
lettemp 0.0001913692469620132
a% 0.0001913692469620132
=temp; 0.0007654769878480528
returna; 0.0002870538704430198
==1; 0.0001913692469620132
valuesto 0.0001913692469620132
//3 0.0001913692469620132
integers= 0.0001913692469620132
(n== 0.000478423117405033
0)return 0.0001913692469620132
return1; 0.0003827384939240264
=>1 0.0001913692469620132
max- 0.0002870538704430198
numberto 0.0001913692469620132
upto 0.0002870538704430198
tomax. 0.0001913692469620132
from2 0.0003827384939240264
2;i 0.0003827384939240264
0&& 0.0006697923643670462
i){ 0.000478423117405033
primenumbers 0.0001913692469620132
2to 0.0002870538704430198
//All 0.0001913692469620132
testcases 0.0001913692469620132
=[1, 0.0002870538704430198
returnb 0.0001913692469620132
b=== 0.0001913692469620132
?0 0.0001913692469620132
0: 0.0001913692469620132
(a* 0.0002870538704430198
higherthan 0.0001913692469620132
s= 0.0001913692469620132
//Conversion 0.0002870538704430198
Conversionfrom 0.0002870538704430198
fromdecimal 0.0002870538704430198
decimalto 0.0002870538704430198
returndecimal_to_base(N, 0.0002870538704430198
==1) 0.0001913692469620132
==2) 0.0002870538704430198
tribonacci(n- 0.0002870538704430198
+tribonacci(n 0.0001913692469620132
(number% 0.0001913692469620132
number/ 0.0001913692469620132
/i; 0.0001913692469620132
if(number 0.0001913692469620132
//test 0.0008611616113290595
//[2, 0.0002870538704430198
[2,2, 0.0001913692469620132
2,5, 0.0005741077408860396
5,5] 0.0001913692469620132
2,3, 0.0007654769878480528
3,5, 0.0002870538704430198
number:", 0.0001913692469620132
i*= 0.0001913692469620132
if(k 0.0002870538704430198
(k> 0.0001913692469620132
=n 0.0002870538704430198
-i; 0.0001913692469620132
i+ 0.0006697923643670462
(n+ 0.0001913692469620132
+1); 0.0002870538704430198
(letj 0.0002870538704430198
0;j 0.0005741077408860396
j< 0.0008611616113290595
j++){ 0.0005741077408860396
bea 0.0001913692469620132
(typeofval 0.0001913692469620132
val!== 0.0003827384939240264
!=="number" 0.0001913692469620132
||val 0.0001913692469620132
&&typeof 0.0001913692469620132
},0); 0.0001913692469620132
//Q 0.0001913692469620132
QLearning 0.0001913692469620132
=10; 0.0001913692469620132
actions){ 0.0001913692469620132
this.actions= 0.0001913692469620132
returnnew 0.0003827384939240264
newPromise(resolve 0.0002870538704430198
Promise(resolve=> 0.0002870538704430198
bestAction= 0.0003827384939240264
bestActionReward= 0.0002870538704430198
=stateActions[actionName]; 0.0001913692469620132
=actionName; 0.0001913692469620132
nextAction= 0.0002870538704430198
if(Math.random() 0.0001913692469620132
//choose 0.0001913692469620132
choosenext 0.0001913692469620132
nextaction 0.0001913692469620132
basedon 0.0006697923643670462
=await 0.0002870538704430198
Math.floor(Math.random()* 0.0003827384939240264
="0"; 0.0001913692469620132
"-","-", 0.0002870538704430198
nextStateName:TERMINAL, 0.0001913692469620132
done:true 0.0001913692469620132
step= 0.0001913692469620132
totalSteps= 0.0001913692469620132
*Author: 0.0001913692469620132
Author:Daniel 0.0001913692469620132
DanielHernández 0.0001913692469620132
Hernández(https://github.com/DHDaniel) 0.0001913692469620132
*Description: 0.0001913692469620132
Description:Multivariate 0.0001913692469620132
Multivariatelinear 0.0001913692469620132
linearregression 0.0001913692469620132
regressionthat 0.0001913692469620132
thatuses 0.0001913692469620132
usesthe 0.0001913692469620132
thenormal 0.0003827384939240264
normalequation 0.0007654769878480528
asan 0.0001913692469620132
anoptimizer. 0.0001913692469620132
optimizer.The 0.0001913692469620132
Thenormal 0.0001913692469620132
equationis 0.0001913692469620132
isfine 0.0001913692469620132
fineto 0.0001913692469620132
*when 0.0001913692469620132
whenn, 0.0001913692469620132
n,the 0.0001913692469620132
offeatures 0.0001913692469620132
featuresbeing 0.0001913692469620132
beingworked 0.0001913692469620132
workedwith, 0.0001913692469620132
with,is 0.0001913692469620132
*less 0.0001913692469620132
than10,000. 0.0001913692469620132
10,000.Beyond 0.0001913692469620132
Beyondthat, 0.0001913692469620132
that,it 0.0001913692469620132
isbest 0.0001913692469620132
bestto 0.0001913692469620132
*other 0.0001913692469620132
othermethods 0.0001913692469620132
methodslike 0.0001913692469620132
likegradient 0.0001913692469620132
gradientdescent. 0.0001913692469620132
*Requirements: 0.0001913692469620132
*- 0.0001913692469620132
-mathjs 0.0001913692469620132
mathjs(install 0.0001913692469620132
(installusing 0.0001913692469620132
usingnpm) 0.0001913692469620132
isinstalled 0.0001913692469620132
installedusing 0.0001913692469620132
usingnpm: 0.0001913692469620132
npm:`npm 0.0001913692469620132
`npminstall 0.0001913692469620132
installmathjs` 0.0001913692469620132
constmath 0.0001913692469620132
math= 0.0001913692469620132
=require("mathjs"); 0.0001913692469620132
*Solves 0.0001913692469620132
Solvesthe 0.0001913692469620132
equationand 0.0001913692469620132
theoptimum 0.0001913692469620132
optimumthetas 0.0001913692469620132
thetasfor 0.0003827384939240264
themodel 0.0001913692469620132
modelhypothesis. 0.0001913692469620132
@param{mathjs.matrix} 0.0007654769878480528
{mathjs.matrix}X 0.0003827384939240264
X- 0.0003827384939240264
-a 0.0007654769878480528
amatrix 0.0005741077408860396
matrixof 0.0003827384939240264
ofm 0.0007654769878480528
mx 0.0007654769878480528
xn 0.0003827384939240264
n(rows 0.0003827384939240264
(rowsx 0.0007654769878480528
xcolumns), 0.0007654769878480528
columns),where 0.0007654769878480528
wherem 0.0007654769878480528
mis 0.0007654769878480528
ofrecords 0.0003827384939240264
recordsand 0.0003827384939240264
andn 0.0003827384939240264
nis 0.0003827384939240264
offeatures. 0.0003827384939240264
features.It 0.0003827384939240264
Itis 0.0003827384939240264
iscommon 0.0003827384939240264
commonpractice 0.0003827384939240264
practiceto 0.0003827384939240264
toadd 0.0003827384939240264
adda 0.0003827384939240264
aleading 0.0003827384939240264
leading1 0.0003827384939240264
1to 0.000478423117405033
toeach 0.0003827384939240264
eachrow 0.0003827384939240264
rowm, 0.0003827384939240264
m,in 0.0003827384939240264
inorder 0.0003827384939240264
orderto 0.0003827384939240264
toaccount 0.0003827384939240264
accountfor 0.0003827384939240264
forthe 0.000956846234810066
they-intercept 0.0003827384939240264
y-interceptin 0.0003827384939240264
inregression. 0.0003827384939240264
{mathjs.matrix}y 0.0003827384939240264
y- 0.0003827384939240264
avector 0.0005741077408860396
vectorof 0.0003827384939240264
x1 0.0005741077408860396
1(rows 0.0003827384939240264
ofrecords. 0.0003827384939240264
records.Contains 0.0003827384939240264
Containsthe 0.0003827384939240264
thelabeled 0.0003827384939240264
labeledvalues 0.0003827384939240264
valuesfor 0.0005741077408860396
eachcorresponding 0.0003827384939240264
correspondingX 0.0003827384939240264
Xrow. 0.0003827384939240264
@returns{mathjs.matrix} 0.0001913692469620132
{mathjs.matrix}A 0.0001913692469620132
An 0.0001913692469620132
nx 0.0001913692469620132
1matrix 0.0001913692469620132
matrixcontaining 0.0001913692469620132
theoptimal 0.0001913692469620132
optimalthetas. 0.0001913692469620132
constnormalEqn 0.0001913692469620132
normalEqn= 0.0001913692469620132
functionnormalEqn(X, 0.0001913692469620132
normalEqn(X,y) 0.0001913692469620132
//computing 0.0001913692469620132
computingthe 0.0001913692469620132
theequation 0.0001913692469620132
equationtheta 0.0001913692469620132
theta= 0.0001913692469620132
=(X^T 0.0001913692469620132
(X^T* 0.0001913692469620132
*X)^-1 0.0001913692469620132
X)^-1* 0.0001913692469620132
*X^T 0.0001913692469620132
X^T* 0.0001913692469620132
*y 0.0001913692469620132
varthetas 0.0003827384939240264
thetas= 0.0007654769878480528
=math.multiply(math.transpose(X), 0.0001913692469620132
math.multiply(math.transpose(X),X); 0.0001913692469620132
=math.multiply(math.inv(thetas), 0.0001913692469620132
math.multiply(math.inv(thetas),math.transpose(X)); 0.0001913692469620132
=math.multiply(thetas, 0.0001913692469620132
math.multiply(thetas,y); 0.0001913692469620132
//returning 0.0001913692469620132
returninga 0.0001913692469620132
vectorcontaining 0.0001913692469620132
containingthetas 0.0001913692469620132
forhypothesis 0.0001913692469620132
returnthetas; 0.0001913692469620132
*Trains 0.0001913692469620132
Trainsand 0.0001913692469620132
returnsa 0.0002870538704430198
afunction 0.0001913692469620132
functionthat 0.0003827384939240264
thatserves 0.0001913692469620132
servesas 0.0001913692469620132
amodel 0.0005741077408860396
modelfor 0.0001913692469620132
forpredicting 0.0001913692469620132
predictingvalues 0.0001913692469620132
valuesy 0.0001913692469620132
ybased 0.0001913692469620132
onan 0.0002870538704430198
aninput 0.0001913692469620132
inputX 0.0001913692469620132
@returns{function} 0.0001913692469620132
{function}A 0.0001913692469620132
Afunction 0.0001913692469620132
thataccepts 0.0003827384939240264
acceptsa 0.0002870538704430198
matrixX, 0.0001913692469620132
X,and 0.0001913692469620132
returnspredictions 0.0001913692469620132
predictionsfor 0.0001913692469620132
eachrow. 0.0001913692469620132
consttrain 0.0001913692469620132
train= 0.0001913692469620132
functiontrain(X, 0.0001913692469620132
train(X,y) 0.0001913692469620132
//getting 0.0001913692469620132
gettingoptimal 0.0001913692469620132
optimalthetas 0.0001913692469620132
thetasusing 0.0001913692469620132
usingnormal 0.0001913692469620132
=normalEqn(X, 0.0001913692469620132
normalEqn(X,y); 0.0001913692469620132
//creating 0.0001913692469620132
creatinga 0.0003827384939240264
modelthat 0.0003827384939240264
constmodel 0.0001913692469620132
model= 0.0001913692469620132
=function(X) 0.0001913692469620132
function(X){ 0.0001913692469620132
//create 0.0002870538704430198
createpredictions 0.0001913692469620132
predictionsby 0.0001913692469620132
bymultiplying 0.0001913692469620132
multiplyingtheta^T 0.0001913692469620132
theta^T* 0.0001913692469620132
*X, 0.0001913692469620132
X,creating 0.0001913692469620132
thatlooks 0.0001913692469620132
lookslike 0.0001913692469620132
like(theta_1 0.0001913692469620132
(theta_1* 0.0001913692469620132
*x_1) 0.0001913692469620132
x_1)+ 0.0001913692469620132
+(theta_2 0.0001913692469620132
(theta_2* 0.0001913692469620132
*x_2) 0.0001913692469620132
x_2)+ 0.0001913692469620132
+(theta_3 0.0001913692469620132
(theta_3* 0.0001913692469620132
*x_3) 0.0001913692469620132
x_3)etc. 0.0001913692469620132
returnmath.multiply(math.transpose(thetas), 0.0001913692469620132
math.multiply(math.transpose(thetas),X); 0.0001913692469620132
returnmodel; 0.0001913692469620132
/*TESTS 0.0001913692469620132
TESTS*/ 0.0001913692469620132
testvalues 0.0005741077408860396
forX 0.0001913692469620132
Xand 0.0001913692469620132
andy 0.0001913692469620132
varXmatrix 0.0001913692469620132
Xmatrix= 0.0005741077408860396
=math.matrix([[2, 0.0001913692469620132
math.matrix([[2,1, 0.0001913692469620132
1,3], 0.0001913692469620132
3],[7, 0.0001913692469620132
[7,1, 0.0001913692469620132
1,9], 0.0001913692469620132
9],[1, 0.0001913692469620132
[1,8, 0.0001913692469620132
8,1], 0.0001913692469620132
1],[3, 0.0001913692469620132
[3,7, 0.0001913692469620132
7,4]]); 0.0001913692469620132
varylabels 0.0001913692469620132
ylabels= 0.0005741077408860396
=math.matrix([[2], 0.0001913692469620132
math.matrix([[2],[5], 0.0001913692469620132
[5],[5], 0.0001913692469620132
[5],[6]]); 0.0001913692469620132
shouldshow 0.0005741077408860396
showthetas 0.0003827384939240264
thetas(in 0.0001913692469620132
(inthe 0.0001913692469620132
the_data 0.0001913692469620132
_datapart 0.0001913692469620132
partof 0.0001913692469620132
ofobject) 0.0001913692469620132
object)to 0.0001913692469620132
be0.008385744234748138, 0.0001913692469620132
0.008385744234748138,0.5681341719077577, 0.0001913692469620132
0.5681341719077577,0.4863731656184376 0.0001913692469620132
console.log(normalEqn(Xmatrix,ylabels)); 0.0005741077408860396
values#2 0.0001913692469620132
=math.matrix([[1], 0.0005741077408860396
math.matrix([[1],[2], 0.0003827384939240264
[2],[3], 0.0003827384939240264
[3],[4]]); 0.0003827384939240264
showtheta 0.0001913692469620132
thetaof 0.0001913692469620132
of1 0.0001913692469620132
1(which 0.0001913692469620132
(whichforms 0.0001913692469620132
formsa 0.0001913692469620132
aperfectly 0.0001913692469620132
perfectlydiagonal 0.0001913692469620132
diagonalline 0.0001913692469620132
lineif 0.0001913692469620132
ifplotted) 0.0001913692469620132
values#3 0.0001913692469620132
=math.matrix([[1, 0.0001913692469620132
math.matrix([[1,5], 0.0001913692469620132
5],[1, 0.0001913692469620132
[1,2], 0.0001913692469620132
2],[1, 0.0001913692469620132
[1,4], 0.0001913692469620132
4],[1, 0.0001913692469620132
[1,5]]); 0.0001913692469620132
math.matrix([[1],[6], 0.0001913692469620132
[6],[4], 0.0001913692469620132
[4],[2]]); 0.0001913692469620132
thetasof 0.0001913692469620132
of9.25 0.0001913692469620132
9.25and 0.0001913692469620132
and-1.5 0.0001913692469620132
besearched 0.0002870538704430198
Output: 0.0001913692469620132
3,4, 0.000478423117405033
arr.length;i++) 0.0002870538704430198
left,right, 0.0001913692469620132
absolutePrecision){ 0.0001913692469620132
-left) 0.0003827384939240264
=left 0.0001913692469620132
left+ 0.0002870538704430198
(right- 0.0002870538704430198
/3; 0.0001913692469620132
right- 0.0002870538704430198
left= 0.0002870538704430198
right= 0.0002870538704430198
if(needle_length 0.0001913692469620132
haystack_length){ 0.0002870538704430198
=0, 0.0011482154817720792
//implementation 0.0003827384939240264
implementationby 0.0001913692469620132
lo= 0.0001913692469620132
hi= 0.0001913692469620132
array.length- 0.0001913692469620132
while(lo 0.0001913692469620132
hi){ 0.0003827384939240264
letmid 0.0002870538704430198
/2, 0.0001913692469620132
2,10); 0.0001913692469620132
if(element 0.0001913692469620132
=mid 0.0003827384939240264
returnmid; 0.000478423117405033
@param{* 0.0003827384939240264
-the 0.0003827384939240264
thesorted 0.0001913692469620132
sortedarray 0.0003827384939240264
{*number} 0.0002870538704430198
thesearch 0.0001913692469620132
searchrange 0.0001913692469620132
binarySearchByRecursion(arr,value, 0.0002870538704430198
low= 0.000478423117405033
high= 0.000478423117405033
=arr.length 0.0003827384939240264
arr.length- 0.0005741077408860396
constmid 0.0001913692469620132
start+ 0.0002870538704430198
value&& 0.0002870538704430198
===value) 0.0006697923643670462
if(arr[mid] 0.0006697923643670462
(arr[mid]=== 0.0002870538704430198
>value 0.0001913692469620132
implementationwith 0.0001913692469620132
if(arr.length 0.0001913692469620132
(arr.length=== 0.0001913692469620132
low+ 0.0002870538704430198
-arr[low]) 0.0001913692469620132
arr[low])/ 0.0001913692469620132
/(arr[high] 0.0001913692469620132
(arr[high]- 0.0001913692469620132
-arr[low])) 0.0001913692469620132
arr[low]))* 0.0001913692469620132
*(arr.length 0.0001913692469620132
(arr.length- 0.0001913692469620132
-1)); 0.0001913692469620132
arr.length){ 0.0001913692469620132
(arr[mid]> 0.0002870538704430198
>value) 0.0002870538704430198
returninterpolationSearchRecursion(arr, 0.0001913692469620132
interpolationSearchRecursion(arr,value, 0.0001913692469620132
(low< 0.0001913692469620132
<high) 0.0001913692469620132
high){ 0.0001913692469620132
=parseInt( 0.0001913692469620132
testcase 0.0001913692469620132
consta 0.0001913692469620132
=[0, 0.0003827384939240264
[0,1, 0.0001913692469620132
1,2, 0.000478423117405033
6,7, 0.000478423117405033
7,8, 0.0003827384939240264
binarySearch(arr,left, 0.0001913692469620132
Math.floor((right- 0.0001913692469620132
==element) 0.0001913692469620132
returnbinarySearch(arr, 0.0002870538704430198
arrLength= 0.0002870538704430198
=arr.length; 0.0003827384939240264
(i< 0.0001913692469620132
&&arr[i] 0.0001913692469620132
arr= 0.0002870538704430198
4,5, 0.0002870538704430198
8,9, 0.000478423117405033
==-1) 0.0002870538704430198
-1){ 0.0002870538704430198
letarray 0.0001913692469620132
pos= 0.0002870538704430198
if(pos 0.0001913692469620132
(pos== 0.0001913692469620132
wanted){ 0.0003827384939240264
arrayLength= 0.0001913692469620132
findBlockWithWanted(array,arrayLength, 0.0001913692469620132
arrayLength,wanted, 0.0001913692469620132
wanted,block); 0.0001913692469620132
findValueInBlock(array,arrayLength, 0.0001913692469620132
wanted,block) 0.0001913692469620132
block){ 0.0001913692469620132
prevStep= 0.0001913692469620132
<wanted) 0.0001913692469620132
if(prevStep 0.0002870538704430198
arrayLength){ 0.0001913692469620132
returnprevStep; 0.0002870538704430198
(prevStep== 0.0001913692469620132
secondPreceding= 0.0003827384939240264
firstPreceding= 0.0003827384939240264
nextNum= 0.0003827384939240264
=secondPreceding 0.0001913692469620132
secondPreceding+ 0.0001913692469620132
+firstPreceding; 0.0001913692469620132
while(nextNum 0.0001913692469620132
=firstPreceding; 0.0001913692469620132
range= 0.0001913692469620132
if(x 0.0001913692469620132
ar[i]){ 0.0001913692469620132
=nextNum 0.0002870538704430198
nextNum- 0.0002870538704430198
-firstPreceding; 0.0002870538704430198
=i; 0.0006697923643670462
+1] 0.0012439001052530858
*Method 0.0003827384939240264
whichreturns 0.0001913692469620132
Cutsto 0.0001913692469620132
toperform 0.0001913692469620132
performPalindrome 0.0001913692469620132
PalindromePartioning 0.0001913692469620132
leti, 0.0002870538704430198
solutionin 0.0001913692469620132
inbottom 0.0001913692469620132
bottomup 0.0001913692469620132
upmanner 0.0001913692469620132
cutMatrix= 0.0001913692469620132
palMatrix= 0.0001913692469620132
//for 0.0001913692469620132
<strLength; 0.0001913692469620132
strLength;i++) 0.0001913692469620132
//lazy 0.0002870538704430198
lazyinitialize 0.0002870538704430198
initializethe 0.0002870538704430198
of2d 0.0002870538704430198
2darray 0.0002870538704430198
if(!palMatrix[i]) 0.0002870538704430198
(!palMatrix[i])palMatrix[i] 0.0002870538704430198
palMatrix[i]= 0.0002870538704430198
Lis 0.0001913692469620132
oflength 0.0002870538704430198
=i 0.000478423117405033
//Set 0.0001913692469620132
endingindex 0.0001913692469620132
//If 0.0008611616113290595
thenwe 0.0001913692469620132
palMatrix[i][j]= 0.0001913692469620132
inputString[i]== 0.0001913692469620132
+1][j 0.0001913692469620132
1][j- 0.0003827384939240264
cutMatrix[i]= 0.0002870538704430198
for(j 0.0003827384939240264
(j= 0.0003827384939240264
<i; 0.0002870538704430198
i;j++) 0.0002870538704430198
1+ 0.0002870538704430198
Returnthe 0.0001913692469620132
Methodthat 0.0002870538704430198
thatreturns 0.0002870538704430198
theLongest 0.0001913692469620132
LongestIncreasing 0.0001913692469620132
IncreasingSubsequence 0.0002870538704430198
Subsequencefor 0.0001913692469620132
theinput 0.0002870538704430198
inputarray 0.0002870538704430198
{array}inputArray 0.0002870538704430198
functionlongestIncreasingSubsequence(inputArray) 0.0001913692469620132
longestIncreasingSubsequence(inputArray){ 0.0001913692469620132
letarrLength 0.0001913692469620132
=inputArray.length; 0.0003827384939240264
i,j; 0.0001913692469620132
letsubsequenceLengthArray 0.0001913692469620132
subsequenceLengthArray= 0.0001913692469620132
<arrLength; 0.0003827384939240264
arrLength;i++) 0.0003827384939240264
subsequenceLengthArray[i]= 0.0003827384939240264
inputArray[j]< 0.0001913692469620132
<inputArray[i] 0.0001913692469620132
inputArray[i]&& 0.0001913692469620132
subsequenceLengthArray[j]+ 0.0003827384939240264
1> 0.0002870538704430198
>subsequenceLengthArray[i] 0.0001913692469620132
=subsequenceLengthArray[j] 0.0001913692469620132
SubsequenceLength 0.0001913692469620132
Length- 0.0001913692469620132
thenth 0.0002870538704430198
nthFibonacci 0.0001913692469620132
Fibonaccinumber 0.0001913692469620132
nthfibonacci 0.0001913692469620132
fibonaccinumber 0.0001913692469620132
=(num) 0.0002870538704430198
(num)=> 0.0002870538704430198
FibonacciNumberRec(num- 0.0001913692469620132
1)+ 0.0001913692469620132
fib[n- 0.0001913692469620132
-1] 0.0013395847287340924
1]+ 0.0005741077408860396
letfib 0.0001913692469620132
fib= 0.0001913692469620132
[0,1] 0.0001913692469620132
1]// 0.0001913692469620132
//fib[0] 0.0001913692469620132
fib[0]= 0.0002870538704430198
0,fib[1] 0.0002870538704430198
fib[1]= 0.0002870538704430198
<=num; 0.0001913692469620132
num;i++) 0.0001913692469620132
fib.push(fib[i- 0.0001913692469620132
+fib[i 0.0001913692469620132
fib[i- 0.0001913692469620132
-2]); 0.0001913692469620132
=6 0.0001913692469620132
console.log(`The${n}th 0.0001913692469620132
${n}thFibonacci 0.0001913692469620132
FibonacciNumber 0.0003827384939240264
Numberis 0.0003827384939240264
=8 0.0001913692469620132
=10 0.0001913692469620132
FibonacciSeries 0.0001913692469620132
Seriesupto 0.0001913692469620132
termis 0.0001913692469620132
//Output 0.0001913692469620132
=1, 0.0001913692469620132
1= 0.0001913692469620132
number* 0.0001913692469620132
themaximum 0.0002870538704430198
valuein 0.0001913692469620132
n+ 0.0003827384939240264
1;j 0.000478423117405033
1;j++) 0.0001913692469620132
currentitem 0.0003827384939240264
wehave 0.0002870538704430198
<=j) 0.0002870538704430198
j){ 0.0002870538704430198
Givena 0.0001913692469620132
valuewithout 0.0001913692469620132
withoutthe 0.0001913692469620132
matrix[i][j]= 0.0001913692469620132
matrix[i- 0.0002870538704430198
-1][j 0.0001913692469620132
-1][j]; 0.0001913692469620132
thefunction 0.0001913692469620132
ofn 0.0001913692469620132
=[n 0.0001913692469620132
[n+ 0.0001913692469620132
+1]; 0.000478423117405033
(i== 0.0001913692469620132
ar[i][j]= 0.0001913692469620132
(j> 0.0001913692469620132
ar[i- 0.0001913692469620132
tostore 0.0001913692469620132
if(str[i] 0.0001913692469620132
(str[i]== 0.0001913692469620132
longest[i][j]= 0.0002870538704430198
longest[i+ 0.0001913692469620132
+2; 0.0001913692469620132
lengthfor 0.0001913692469620132
incSubsequenceLengthArray[i]+ 0.0002870538704430198
+decSubsequenceLengthArray[i] 0.0002870538704430198
decSubsequenceLengthArray[i]- 0.0002870538704430198
maxBitonicLength= 0.0001913692469620132
1]> 0.0001913692469620132
=Math.floor(Math.random() 0.0002870538704430198
=arr[index]; 0.0001913692469620132
arr[index]= 0.0001913692469620132
varsorted 0.0001913692469620132
sorted= 0.0003827384939240264
3,7, 0.0001913692469620132
varleft 0.0001913692469620132
varright 0.0001913692469620132
//a 0.0002870538704430198
whereall 0.0001913692469620132
allvalues 0.0001913692469620132
valuesare 0.0001913692469620132
thanthan 0.0001913692469620132
currentvalue. 0.0001913692469620132
=undefined; 0.0001913692469620132
valueand 0.0001913692469620132
functionrecurse(bst) 0.0002870538704430198
recurse(bst){ 0.0002870538704430198
if(bst.value 0.000478423117405033
(bst.value> 0.0001913692469620132
(bst.value< 0.0001913692469620132
doesContain= 0.0001913692469620132
//acceptsa 0.0001913692469620132
thetree. 0.0001913692469620132
if(bst.left 0.0001913692469620132
(bst.left!== 0.0001913692469620132
!==undefined 0.0001913692469620132
undefined&& 0.0001913692469620132
&&value 0.0001913692469620132
bst.value){ 0.0001913692469620132
if(bst.right 0.0001913692469620132
(bst.right!== 0.0001913692469620132
-left 0.0001913692469620132
+1) 0.0002870538704430198
sort(left,right 0.0001913692469620132
-third); 0.0001913692469620132
letl 0.0001913692469620132
l= 0.0002870538704430198
2,8, 0.0001913692469620132
8,1, 0.0001913692469620132
SortImplementation 0.0001913692469620132
Implementationin 0.0001913692469620132
@authorAhmar 0.0001913692469620132
AhmarSiddiqui 0.0001913692469620132
Siddiqui<ahmar.siddiqui@gmail.com> 0.0001913692469620132
*@github 0.0001913692469620132
@github@ahhmarr 0.0001913692469620132
*@date 0.0001913692469620132
@date07/Oct/2017 0.0001913692469620132
=array 0.0002870538704430198
array=> 0.0001913692469620132
record= 0.0002870538704430198
//find 0.0002870538704430198
findwhere 0.0001913692469620132
whereto 0.0001913692469620132
toput 0.0001913692469620132
putthe 0.0006697923643670462
therecord 0.000478423117405033
=start; 0.0002870538704430198
=start 0.0001913692469620132
<array.length; 0.0002870538704430198
array.length;i++) 0.0001913692469620132
if(array[i] 0.0001913692469620132
(array[i]< 0.0001913692469620132
<record) 0.0001913692469620132
record)pos 0.0001913692469620132
pos+= 0.0002870538704430198
recordthere 0.0001913692469620132
thereor 0.0001913692469620132
orright 0.0001913692469620132
rightafter 0.0001913692469620132
afterany 0.0001913692469620132
anyduplicates 0.0001913692469620132
while(record 0.0001913692469620132
(record== 0.0001913692469620132
==array[pos]) 0.0001913692469620132
array[pos]){ 0.0001913692469620132
constswap 0.0001913692469620132
swap= 0.000478423117405033
=array[pos]; 0.0001913692469620132
array[pos]= 0.0001913692469620132
=record; 0.0001913692469620132
=swap; 0.0002870538704430198
//put 0.0002870538704430198
2,1, 0.0001913692469620132
h= 0.0001913692469620132
=a[i]; 0.0001913692469620132
(varj 0.0005741077408860396
i;j 0.0001913692469620132
j>= 0.0002870538704430198
k< 0.0001913692469620132
a[j- 0.0001913692469620132
-h]; 0.0001913692469620132
a[j]= 0.0002870538704430198
(arr[i]> 0.0001913692469620132
arr[i+ 0.0002870538704430198
+1]) 0.0006697923643670462
1]){ 0.0010525308582910726
//var 0.0001913692469620132
gap= 0.0001913692469620132
-2; 0.0001913692469620132
*Perform 0.0001913692469620132
@param{Array} 0.000478423117405033
{Array}- 0.0001913692469620132
ofints 0.0001913692469620132
@returns{Array} 0.0001913692469620132
outthe 0.0001913692469620132
max= 0.0005741077408860396
min= 0.000478423117405033
withitems 0.0001913692469620132
10,1, 0.0001913692469620132
forsorting 0.0003827384939240264
sortingwhole 0.0001913692469620132
wholearray*/ 0.0001913692469620132
isas 0.0001913692469620132
quickSort(a,low, 0.0001913692469620132
varpivot 0.0001913692469620132
pivot= 0.0001913692469620132
idx= 0.0001913692469620132
prev= 0.0003827384939240264
=determinePrev(ref, 0.0001913692469620132
determinePrev(ref,idx); 0.0001913692469620132
while(prev) 0.0001913692469620132
(prev){ 0.0001913692469620132
=determinePrev(inter, 0.0001913692469620132
determinePrev(inter,idx); 0.0001913692469620132
out= 0.0003827384939240264
1,6, 0.0001913692469620132
6,2, 0.0001913692469620132
5,3, 0.0001913692469620132
lett; 0.0001913692469620132
if(lo 0.0001913692469620132
(lo=== 0.0001913692469620132
===hi) 0.0001913692469620132
returnswaps; 0.0001913692469620132
if(arr[lo] 0.0001913692469620132
(arr[lo]> 0.0001913692469620132
t= 0.0001913692469620132
=arr[lo]; 0.0001913692469620132
arr[lo]= 0.0001913692469620132
=t; 0.0001913692469620132
arr[hi+ 0.0002870538704430198
1]= 0.0010525308582910726
swaps= 0.0001913692469620132
=circlesort(arr, 0.0001913692469620132
4,1]; 0.0002870538704430198
0)){ 0.0001913692469620132
functioninsertionSort(array) 0.0001913692469620132
insertionSort(array){ 0.0001913692469620132
<length; 0.0001913692469620132
length;i++) 0.0001913692469620132
=array[i]; 0.0001913692469620132
i- 0.0002870538704430198
&&array[j] 0.0001913692469620132
array[j]> 0.0001913692469620132
>temp; 0.0001913692469620132
temp;j--) 0.0001913692469620132
array[j+ 0.0003827384939240264
=array[j]; 0.0001913692469620132
//Sort 0.0001913692469620132
alist 0.0001913692469620132
swapped= 0.0003827384939240264
//Testing 0.0001913692469620132
Testingfrom 0.0001913692469620132
length- 0.000478423117405033
if(list[i] 0.0001913692469620132
(list[i]> 0.0001913692469620132
>list[i 0.0001913692469620132
list[i+ 0.0005741077408860396
letaux 0.0001913692469620132
=list[i]; 0.0001913692469620132
list[i]= 0.0001913692469620132
=list[i 0.0001913692469620132
===false) 0.0002870538704430198
=length 0.0003827384939240264
0;i--) 0.0002870538704430198
i--){ 0.0002870538704430198
<len; 0.0001913692469620132
minAt= 0.0001913692469620132
!=i) 0.0001913692469620132
vari, 0.0001913692469620132
=min; 0.0001913692469620132
min;i 0.0001913692469620132
<=max; 0.0001913692469620132
max;i++) 0.0001913692469620132
arra= 0.0001913692469620132
=[3, 0.0002870538704430198
[3,0, 0.0001913692469620132
0,2, 0.000478423117405033
ArrayElements"); 0.0001913692469620132
bucketsort 0.0001913692469620132
minValue= 0.0001913692469620132
=array[0], 0.0001913692469620132
maxValue= 0.0001913692469620132
array.forEach(function(currentVal){ 0.0001913692469620132
if(currentVal 0.0001913692469620132
=currentVal; 0.0001913692469620132
-minValue) 0.0001913692469620132
minValue)/ 0.0001913692469620132
//Pushing 0.0001913692469620132
letmin 0.0001913692469620132
=arr[0]; 0.0001913692469620132
m= 0.0001913692469620132
<n; 0.0002870538704430198
arr[max]){ 0.0001913692469620132
=~~(c1 0.0002870538704430198
~~(c1* 0.0002870538704430198
*(arr[j] 0.0001913692469620132
(arr[j]- 0.0001913692469620132
-min)); 0.0002870538704430198
hold= 0.0002870538704430198
=hold; 0.0002870538704430198
flash= 0.0001913692469620132
=arr[j]; 0.0001913692469620132
numbersare 0.0001913692469620132
closeto 0.0001913692469620132
setTimeout(function(){ 0.0001913692469620132
radixsort 0.0001913692469620132
={}, 0.0001913692469620132
buckets= 0.0001913692469620132
len1= 0.0002870538704430198
//radix 0.0001913692469620132
toprocess 0.0001913692469620132
for(idx1 0.0001913692469620132
(idx1= 0.0001913692469620132
0;idx1 0.0001913692469620132
idx1< 0.0001913692469620132
<len1; 0.0002870538704430198
len1;idx1++) 0.0001913692469620132
idx1++){ 0.0001913692469620132
inbuckets, 0.0001913692469620132
itemin 0.0001913692469620132
radixvalue 0.0001913692469620132
curr= 0.0002870538704430198
usedto 0.0001913692469620132
//only 0.0001913692469620132
bucketif 0.0001913692469620132
fromstart 0.0001913692469620132
//insert 0.0001913692469620132
theadjacent 0.0001913692469620132
items[j- 0.0002870538704430198
-1]) 0.0003827384939240264
tmp= 0.0001913692469620132
=tmp; 0.0001913692469620132
7,0, 0.0002870538704430198
2* 0.0002870538704430198
*i 0.0001913692469620132
<arrayLength 0.0001913692469620132
arrayLength&& 0.0001913692469620132
>inputArray[max]) 0.0001913692469620132
inputArray[max]){ 0.0001913692469620132
letindex 0.0001913692469620132
arr[index- 0.0002870538704430198
1,4, 0.0001913692469620132
4,0, 0.0002870538704430198
this.code= 0.0001913692469620132
this.cost= 0.0001913692469620132
<this.code.length; 0.0001913692469620132
this.code.length;i++) 0.0001913692469620132
newString+= 0.0001913692469620132
varchild1 0.0001913692469620132
child1= 0.0001913692469620132
pivot)+ 0.0001913692469620132
varchild2 0.0001913692469620132
child2= 0.0001913692469620132
(this.code.charCodeAt(i)- 0.0001913692469620132
document.body.innerHTML+= 0.0003827384939240264
<this.members.length; 0.0002870538704430198
this.members.length;i++) 0.0002870538704430198
varastar 0.0001913692469620132
astar= 0.0001913692469620132
[0,....., 0.0001913692469620132
=definition(); 0.0001913692469620132
agraph 0.0002870538704430198
@param{GridNode} 0.0001913692469620132
@param{Object} 0.0001913692469620132
{Object}[options] 0.0001913692469620132
@param{bool} 0.0001913692469620132
Specifieswhether 0.0001913692469620132
pathto 0.0002870538704430198
theclosest 0.0002870538704430198
closestnode 0.0002870538704430198
thetarget 0.0001913692469620132
options){ 0.0001913692469620132
options= 0.0001913692469620132
=options 0.0001913692469620132
options|| 0.0001913692469620132
||{}; 0.0001913692469620132
closestNode= 0.0001913692469620132
case-- 0.0001913692469620132
hasbeen 0.0001913692469620132
currentnode. 0.0001913692469620132
scoreis 0.0001913692469620132
theshortest 0.0001913692469620132
//Found 0.0001913692469620132
if(closest) 0.0001913692469620132
(closest){ 0.0001913692469620132
itin 0.0001913692469620132
return[]; 0.0001913692469620132
function(pos0,pos1) 0.0001913692469620132
pos1){ 0.0001913692469620132
vard1 0.0001913692469620132
d1= 0.0001913692469620132
=Math.abs(pos1.x 0.0001913692469620132
Math.abs(pos1.x- 0.0001913692469620132
-pos0.x); 0.0001913692469620132
vard2 0.0001913692469620132
d2= 0.0001913692469620132
=Math.abs(pos1.y 0.0001913692469620132
Math.abs(pos1.y- 0.0001913692469620132
-pos0.y); 0.0001913692469620132
(varx 0.0001913692469620132
0;x 0.0001913692469620132
x< 0.0001913692469620132
x++){ 0.0001913692469620132
(vary 0.0001913692469620132
y= 0.0006697923643670462
row= 0.0001913692469620132
y< 0.0001913692469620132
<row.length; 0.0001913692469620132
row.length;y++) 0.0001913692469620132
y++){ 0.0001913692469620132
GridNode(x,y, 0.0001913692469620132
this.dirtyNodes= 0.0001913692469620132
vary 0.0002870538704430198
=this.grid; 0.0001913692469620132
if(grid[x 0.0005741077408860396
(grid[x- 0.0002870538704430198
1]&& 0.0005741077408860396
&&grid[x 0.0005741077408860396
grid[x- 0.0002870538704430198
1][y]){ 0.0001913692469620132
ret.push(grid[x- 0.0002870538704430198
(grid[x+ 0.0002870538704430198
grid[x+ 0.0002870538704430198
ret.push(grid[x+ 0.0002870538704430198
if(grid[x] 0.0001913692469620132
(grid[x]&& 0.0001913692469620132
&&grid[x][y 0.0001913692469620132
-1]); 0.0002870538704430198
+1]); 0.0002870538704430198
-1][y 0.0003827384939240264
1][y- 0.0003827384939240264
+1][y 0.0003827384939240264
1][y+ 0.0003827384939240264
returnthis.weight 0.0001913692469620132
tosink 0.0001913692469620132
varend 0.0001913692469620132
end= 0.0001913692469620132
=this.content.pop(); 0.0001913692469620132
=end; 0.0001913692469620132
//When 0.0001913692469620132
varelement 0.0001913692469620132
=this.content[n]; 0.0001913692469620132
sinkany 0.0001913692469620132
anyfurther. 0.0001913692469620132
//Compute 0.0001913692469620132
Computethe 0.0001913692469620132
this.content[n]= 0.0001913692469620132
//Update 0.0001913692469620132
//Look 0.0001913692469620132
itsscore. 0.0001913692469620132
//This 0.0002870538704430198
positionof 0.0001913692469620132
null? 0.0001913692469620132
*Javascript 0.0002870538704430198
DirectedAcyclic 0.0001913692469620132
classGraph 0.0002870538704430198
Graph{ 0.0002870538704430198
constructor(noOfVertices){ 0.0001913692469620132
this.V= 0.0002870538704430198
=noOfVertices; 0.0001913692469620132
this.graph= 0.0002870538704430198
this.V- 0.0001913692469620132
for(const 0.0002870538704430198
if(visited[i] 0.0001913692469620132
(visited[i]=== 0.0001913692469620132
false){ 0.0001913692469620132
this.topologicalSortUtil(i,visited); 0.0001913692469620132
=Array(this.V).fill(false); 0.0001913692469620132
<this.V; 0.0005741077408860396
this.V;i++) 0.0002870538704430198
g= 0.0002870538704430198
programfor 0.0001913692469620132
Dijkstra'ssingle 0.0001913692469620132
shortestpath 0.0003827384939240264
adjacencymatrix 0.0001913692469620132
matrixrepresentation 0.0001913692469620132
printSolution(dist){ 0.0001913692469620132
(letv 0.0002870538704430198
v= 0.0002870538704430198
0;v 0.0002870538704430198
v< 0.0002870538704430198
this.V;v++) 0.0002870538704430198
v++){ 0.0002870538704430198
thevertex 0.0001913692469620132
minimumdistance 0.0002870538704430198
theset 0.0001913692469620132
setof 0.0001913692469620132
ofvertices 0.0001913692469620132
notyet 0.0001913692469620132
pathtree 0.0002870538704430198
letdist 0.0001913692469620132
dist= 0.0001913692469620132
=Array(this.V).fill(Infinity); 0.0001913692469620132
dist[src]= 0.0001913692469620132
distancevertex 0.0001913692469620132
vertexin 0.0001913692469620132
shotestpath 0.0001913692469620132
dist[u]+ 0.000478423117405033
dist[v]= 0.0001913692469620132
=dist[u] 0.0001913692469620132
0,0, 0.0018180078461391255
0,8, 0.0001913692469620132
8,0, 0.0001913692469620132
0,7, 0.0001913692469620132
0,4, 0.0001913692469620132
[0,0, 0.000478423117405033
0,9, 0.0001913692469620132
0,0], 0.0002870538704430198
10,0, 0.0001913692469620132
2,0, 0.0002870538704430198
*Given 0.0001913692469620132
findsthe 0.0001913692469620132
(const[u, 0.0001913692469620132
[u,v, 0.0001913692469620132
v,w] 0.0001913692469620132
w]of 0.0001913692469620132
ofthis.graph) 0.0001913692469620132
this.graph){ 0.0001913692469620132
if(dist[u] 0.0001913692469620132
(dist[u]!= 0.0001913692469620132
!=Infinity 0.0001913692469620132
Infinity&& 0.0001913692469620132
&&dist[u] 0.0001913692469620132
+w 0.0001913692469620132
w< 0.0001913692469620132
<dist[v]) 0.0001913692469620132
dist[v]){ 0.0001913692469620132
functiontest() 0.0002870538704430198
test(){ 0.0002870538704430198
{value: 0.0005741077408860396
denoms:[50, 0.0005741077408860396
[50,25, 0.0006697923643670462
25,10, 0.0007654769878480528
10,5, 0.0007654769878480528
5,1], 0.0006697923643670462
1],result: 0.0005741077408860396
result:[50, 0.0002870538704430198
1]}, 0.000478423117405033
1,1] 0.0003827384939240264
[1,1, 0.0001913692469620132
[100,50, 0.0001913692469620132
50,25, 0.0001913692469620132
Result:" 0.0001913692469620132
divisor){ 0.0001913692469620132
answer= 0.0001913692469620132
while(dividend 0.0001913692469620132
(dividend>= 0.0001913692469620132
<<=1; 0.0001913692469620132
letout 0.0001913692469620132
returnout; 0.0001913692469620132
counter[numbers[index]]= 0.0001913692469620132
m){ 0.0001913692469620132
letcarry 0.0001913692469620132
carry= 0.0001913692469620132
n& 0.0001913692469620132
&m; 0.0001913692469620132
carry<< 0.0001913692469620132
a.x* 0.0001913692469620132
a.y* 0.0001913692469620132
*c.x 0.0001913692469620132
*c.y 0.0001913692469620132
c.y- 0.0001913692469620132
},{ 0.0001913692469620132
{x: 0.0007654769878480528
x2,y1, 0.0001913692469620132
=x1 0.0001913692469620132
=x3 0.0001913692469620132
*y34 0.0001913692469620132
y34- 0.0001913692469620132
=(a 0.0001913692469620132
-b 0.0001913692469620132
b* 0.0001913692469620132
/c; 0.0001913692469620132
//Keeping 0.0001913692469620132
Keepingpoints 0.0001913692469620132
pointsintegers. 0.0001913692469620132
integers.Change 0.0001913692469620132
Changeaccording 0.0001913692469620132
torequirement 0.0001913692469620132
=parseInt(x); 0.0001913692469620132
=parseInt(y); 0.0001913692469620132
x:x, 0.0001913692469620132
x,y: 0.0001913692469620132
y:y 0.0001913692469620132
y}; 0.0001913692469620132
-A2 0.0001913692469620132
A2* 0.0001913692469620132
/delta; 0.0001913692469620132
{A: 0.0001913692469620132
intersection_point= 0.0001913692469620132
console.log("Testusing 0.0001913692469620132
`Linesintersect 0.0001913692469620132
intersectat 0.0001913692469620132
atx:${intersection_point["x"]}, 0.0001913692469620132
x:${intersection_point["x"]},y:${ 0.0001913692469620132
constresult 0.0001913692469620132
expected){ 0.0001913692469620132
Oneof 0.0003827384939240264
thetwo 0.0003827384939240264
stringsfor 0.0003827384939240264
forbiggest 0.0003827384939240264
biggestcommon 0.0003827384939240264
commonsuffix 0.0001913692469620132
commonsuffix. 0.0001913692469620132
suffix.It 0.0001913692469620132
Itserves 0.0001913692469620132
servesterminating 0.0001913692469620132
terminatingcondition 0.0001913692469620132
conditionfor 0.0001913692469620132
foralgorithm 0.0001913692469620132
counterfor 0.0001913692469620132
=(first, 0.0001913692469620132
(first,second) 0.0001913692469620132
second)=> 0.0001913692469620132
'NoSuffix' 0.0001913692469620132
'abc'));// 0.0001913692469620132
*Calculates 0.0001913692469620132
oftwo 0.0001913692469620132
twogiven 0.0001913692469620132
givensets 0.0001913692469620132
@param{Set} 0.0003827384939240264
{Set}setA 0.0001913692469620132
{Set}setB 0.0001913692469620132
=(setA, 0.0001913692469620132
(setA,setB) 0.0001913692469620132
setB)=> 0.0001913692469620132
(letelem 0.0001913692469620132
elemof 0.0001913692469620132
ofsetB) 0.0001913692469620132
setB){ 0.0001913692469620132
Set(first),new 0.0001913692469620132
newSet(second)).size; 0.0001913692469620132
parts){ 0.0001913692469620132
