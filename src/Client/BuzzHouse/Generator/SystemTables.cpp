#include <Client/BuzzHouse/Generator/SystemTables.h>

namespace BuzzHouse
{

SQLType *size_tp = nullptr, *null_tp = nullptr;

std::map<std::string, std::map<std::string, SQLType *>> systemTables;

void loadSystemTables(const bool has_cloud_features)
{
    size_tp = new IntType(64, true);
    null_tp = new BoolType();
    systemTables.insert(
        {{"one", {{"dummy", new IntType(8, true)}}},
         //{"numbers", {{"number", new IntType(64, true)}}},
         //{"numbers_mt", {{"number", new IntType(64, true)}}},
         //{"zeros", {{"zero", new IntType(8, true)}}},
         //{"zeros_mt", {{"zero", new IntType(8, true)}}},
         {"databases",
          {{"name", new StringType(std::nullopt)},
           {"engine", new StringType(std::nullopt)},
           {"data_path", new StringType(std::nullopt)},
           {"metadata_path", new StringType(std::nullopt)},
           {"uuid", new UUIDType()},
           {"engine_full", new StringType(std::nullopt)},
           {"comment", new StringType(std::nullopt)}}},
         {"tables",
          {{"database", new StringType(std::nullopt)},
           {"name", new StringType(std::nullopt)},
           {"uuid", new UUIDType()},
           {"engine", new StringType(std::nullopt)},
           {"is_temporary", new IntType(8, true)},
           {"data_paths", new ArrayType(new StringType(std::nullopt))},
           {"metadata_path", new StringType(std::nullopt)},
           {"metadata_modification_time", new DateTimeType(false, std::nullopt, std::nullopt)},
           {"metadata_version", new IntType(32, true)},
           {"dependencies_database", new ArrayType(new StringType(std::nullopt))},
           {"dependencies_table", new ArrayType(new StringType(std::nullopt))},
           {"create_table_query", new StringType(std::nullopt)},
           {"engine_full", new StringType(std::nullopt)},
           {"as_select", new StringType(std::nullopt)},
           {"partition_key", new StringType(std::nullopt)},
           {"sorting_key", new StringType(std::nullopt)},
           {"primary_key", new StringType(std::nullopt)},
           {"sampling_key", new StringType(std::nullopt)},
           {"storage_policy", new StringType(std::nullopt)},
           {"total_rows", new Nullable(new IntType(64, true))},
           {"total_bytes", new Nullable(new IntType(64, true))},
           {"total_bytes_uncompressed", new Nullable(new IntType(64, true))},
           {"parts", new Nullable(new IntType(64, true))},
           {"active_parts", new Nullable(new IntType(64, true))},
           {"total_marks", new Nullable(new IntType(64, true))},
           {"lifetime_rows", new Nullable(new IntType(64, true))},
           {"lifetime_bytes", new Nullable(new IntType(64, true))},
           {"comment", new StringType(std::nullopt)},
           {"has_own_data", new IntType(8, true)},
           {"loading_dependencies_database", new ArrayType(new StringType(std::nullopt))},
           {"loading_dependencies_table", new ArrayType(new StringType(std::nullopt))},
           {"loading_dependent_database", new ArrayType(new StringType(std::nullopt))},
           {"loading_dependent_table", new ArrayType(new StringType(std::nullopt))}}},
         {"detached_tables",
          {{"database", new StringType(std::nullopt)},
           {"table", new StringType(std::nullopt)},
           {"uuid", new UUIDType()},
           {"metadata_path", new StringType(std::nullopt)},
           {"is_permanently", new IntType(8, true)}}},
         {"columns",
          {{"database", new StringType(std::nullopt)},
           {"table", new StringType(std::nullopt)},
           {"name", new StringType(std::nullopt)},
           {"type", new StringType(std::nullopt)},
           {"position", new IntType(64, true)},
           {"default_expression", new StringType(std::nullopt)},
           {"data_compressed_bytes", new IntType(64, true)},
           {"data_uncompressed_bytes", new IntType(64, true)},
           {"marks_bytes", new IntType(64, true)},
           {"comment", new StringType(std::nullopt)},
           {"is_in_partition_key", new IntType(8, true)},
           {"is_in_sorting_key", new IntType(8, true)},
           {"is_in_primary_key", new IntType(8, true)},
           {"is_in_sampling_key", new IntType(8, true)},
           {"compression_codec", new StringType(std::nullopt)},
           {"character_octet_length", new Nullable(new IntType(64, true))},
           {"numeric_precision", new Nullable(new IntType(64, true))},
           {"numeric_precision_radix", new Nullable(new IntType(64, true))},
           {"numeric_scale", new Nullable(new IntType(64, true))},
           {"datetime_precision", new Nullable(new IntType(64, true))}}},
         {"functions",
          {{"name", new StringType(std::nullopt)},
           {"is_aggregate", new IntType(8, true)},
           {"case_insensitive", new IntType(8, true)},
           {"alias_to", new StringType(std::nullopt)},
           {"create_query", new StringType(std::nullopt)},
           {"origin",
            new EnumType(
                8, std::vector<EnumValue>{EnumValue("System", 0), EnumValue("SQLUserDefined", 1), EnumValue("ExecutableUserDefined", 2)})},
           {"description", new StringType(std::nullopt)},
           {"syntax", new StringType(std::nullopt)},
           {"arguments", new StringType(std::nullopt)},
           {"returned_value", new StringType(std::nullopt)},
           {"examples", new StringType(std::nullopt)},
           {"categories", new StringType(std::nullopt)}}},
         {"events",
          {{"event", new StringType(std::nullopt)}, {"value", new IntType(64, true)}, {"description", new StringType(std::nullopt)}}},
         {"settings",
          {{"name", new StringType(std::nullopt)},
           {"value", new StringType(std::nullopt)},
           {"changed", new IntType(8, true)},
           {"description", new StringType(std::nullopt)},
           {"min", new Nullable(new StringType(std::nullopt))},
           {"max", new Nullable(new StringType(std::nullopt))},
           {"readonly", new IntType(8, true)},
           {"type", new StringType(std::nullopt)},
           {"default", new StringType(std::nullopt)},
           {"alias_for", new StringType(std::nullopt)},
           {"is_obsolete", new IntType(8, true)},
           {"tier",
            new EnumType(
                8,
                std::vector<EnumValue>{
                    EnumValue("Production", 0), EnumValue("Obsolete", 4), EnumValue("Beta", 12), EnumValue("Experimental", 8)})}}},
         {"server_settings",
          {{"name", new StringType(std::nullopt)},
           {"value", new StringType(std::nullopt)},
           {"default", new StringType(std::nullopt)},
           {"changed", new IntType(8, true)},
           {"description", new StringType(std::nullopt)},
           {"type", new StringType(std::nullopt)},
           {"changeable_without_restart",
            new EnumType(
                8,
                std::vector<EnumValue>{
                    EnumValue("No", 0), EnumValue("IncreaseOnly", 1), EnumValue("DecreaseOnly", 2), EnumValue("Yes", 3)})},
           {"is_obsolete", new IntType(8, true)}}},
         {"settings_changes",
          {{"type", new EnumType(8, std::vector<EnumValue>{EnumValue("Core", 0), EnumValue("MergeTree", 1)})},
           {"version", new StringType(std::nullopt)},
           {"changes",
            new ArrayType(new TupleType(std::vector<SubType>(
                {SubType(std::nullopt, new StringType(std::nullopt)),
                 SubType(std::nullopt, new StringType(std::nullopt)),
                 SubType(std::nullopt, new StringType(std::nullopt)),
                 SubType(std::nullopt, new StringType(std::nullopt))})))}}},
         {"merge_tree_settings",
          {{"name", new StringType(std::nullopt)},
           {"value", new StringType(std::nullopt)},
           {"changed", new IntType(8, true)},
           {"description", new StringType(std::nullopt)},
           {"min", new Nullable(new StringType(std::nullopt))},
           {"max", new Nullable(new StringType(std::nullopt))},
           {"readonly", new IntType(8, true)},
           {"type", new StringType(std::nullopt)},
           {"default", new StringType(std::nullopt)},
           {"alias_for", new StringType(std::nullopt)},
           {"is_obsolete", new IntType(8, true)},
           {"tier",
            new EnumType(
                8,
                std::vector<EnumValue>{
                    EnumValue("Production", 0), EnumValue("Obsolete", 4), EnumValue("Beta", 12), EnumValue("Experimental", 8)})}}},
         {"replicated_merge_tree_settings",
          {{"name", new StringType(std::nullopt)},
           {"value", new StringType(std::nullopt)},
           {"changed", new IntType(8, true)},
           {"description", new StringType(std::nullopt)},
           {"min", new Nullable(new StringType(std::nullopt))},
           {"max", new Nullable(new StringType(std::nullopt))},
           {"readonly", new IntType(8, true)},
           {"type", new StringType(std::nullopt)},
           {"default", new StringType(std::nullopt)},
           {"alias_for", new StringType(std::nullopt)},
           {"is_obsolete", new IntType(8, true)},
           {"tier",
            new EnumType(
                8,
                std::vector<EnumValue>{
                    EnumValue("Production", 0), EnumValue("Obsolete", 4), EnumValue("Beta", 12), EnumValue("Experimental", 8)})}}},
         {"shared_merge_tree_settings",
          {{"name", new StringType(std::nullopt)},
           {"value", new StringType(std::nullopt)},
           {"changed", new IntType(8, true)},
           {"description", new StringType(std::nullopt)},
           {"min", new Nullable(new StringType(std::nullopt))},
           {"max", new Nullable(new StringType(std::nullopt))},
           {"readonly", new IntType(8, true)},
           {"type", new StringType(std::nullopt)},
           {"default", new StringType(std::nullopt)},
           {"alias_for", new StringType(std::nullopt)},
           {"is_obsolete", new IntType(8, true)},
           {"tier",
            new EnumType(
                8,
                std::vector<EnumValue>{
                    EnumValue("Production", 0), EnumValue("Obsolete", 4), EnumValue("Beta", 12), EnumValue("Experimental", 8)})}}},
         {"build_options", {{"name", new StringType(std::nullopt)}, {"value", new StringType(std::nullopt)}}},
         {"formats",
          {{"name", new StringType(std::nullopt)},
           {"is_input", new StringType(std::nullopt)},
           {"is_output", new StringType(std::nullopt)},
           {"supports_parallel_parsing", new IntType(8, true)},
           {"supports_parallel_formatting", new IntType(8, true)},
           {"is_tty_friendly", new IntType(8, true)}}},
         {"table_functions",
          {{"name", new StringType(std::nullopt)},
           {"description", new StringType(std::nullopt)},
           {"allow_readonly", new IntType(8, true)}}},
         {"aggregate_function_combinators", {{"name", new StringType(std::nullopt)}, {"is_internal", new IntType(8, true)}}},
         {"data_type_families",
          {{"name", new StringType(std::nullopt)}, {"case_insensitive", new IntType(8, true)}, {"alias_to", new StringType(std::nullopt)}}},
         {"collations", {{"name", new StringType(std::nullopt)}, {"language", new Nullable(new StringType(std::nullopt))}}},
         {"database_engines", {{"name", new StringType(std::nullopt)}}},
         {"table_engines",
          {{"name", new StringType(std::nullopt)},
           {"supports_settings", new IntType(8, true)},
           {"supports_skipping_indices", new IntType(8, true)},
           {"supports_projections", new IntType(8, true)},
           {"supports_sort_order", new IntType(8, true)},
           {"supports_ttl", new IntType(8, true)},
           {"supports_replication", new IntType(8, true)},
           {"supports_deduplication", new IntType(8, true)},
           {"supports_parallel_insert", new IntType(8, true)}}},
         {"contributors", {{"name", new StringType(std::nullopt)}}},
         {"users",
          {{"name", new StringType(std::nullopt)},
           {"id", new UUIDType()},
           {"storage", new StringType(std::nullopt)},
           {"auth_type",
            new ArrayType(new EnumType(
                8,
                std::vector<EnumValue>{
                    EnumValue("no_password", 0),
                    EnumValue("plaintext_password", 1),
                    EnumValue("sha256_password", 2),
                    EnumValue("double_sha1_password", 3),
                    EnumValue("ldap", 4),
                    EnumValue("kerberos", 5),
                    EnumValue("ssl_certificate", 6),
                    EnumValue("bcrypt_password", 7),
                    EnumValue("ssh_key", 8),
                    EnumValue("http", 9),
                    EnumValue("jwt", 10)}))},
           {"auth_params", new ArrayType(new StringType(std::nullopt))},
           {"host_ip", new ArrayType(new StringType(std::nullopt))},
           {"host_names", new ArrayType(new StringType(std::nullopt))},
           {"host_names_regexp", new ArrayType(new StringType(std::nullopt))},
           {"host_names_like", new ArrayType(new StringType(std::nullopt))},
           {"default_roles_all", new IntType(8, true)},
           {"default_roles_list", new ArrayType(new StringType(std::nullopt))},
           {"default_roles_except", new ArrayType(new StringType(std::nullopt))},
           {"grantees_any", new IntType(8, true)},
           {"grantees_list", new ArrayType(new StringType(std::nullopt))},
           {"grantees_except", new ArrayType(new StringType(std::nullopt))},
           {"default_database", new StringType(std::nullopt)}}},
         {"roles", {{"name", new StringType(std::nullopt)}, {"id", new UUIDType()}, {"storage", new StringType(std::nullopt)}}},
         {"grants",
          {{"user_name", new Nullable(new StringType(std::nullopt))},
           {"role_name", new Nullable(new StringType(std::nullopt))},
           {"storage", new StringType(std::nullopt)},
           {"access_type",
            new EnumType(
                16,
                std::vector<EnumValue>{
                    EnumValue("SHOW DATABASES", 0),
                    EnumValue("SHOW TABLES", 1),
                    EnumValue("SHOW COLUMNS", 2),
                    EnumValue("SHOW DICTIONARIES", 3)})},
           {"database", new Nullable(new StringType(std::nullopt))},
           {"table", new Nullable(new StringType(std::nullopt))},
           {"column", new Nullable(new StringType(std::nullopt))},
           {"is_partial_revoke", new IntType(8, true)},
           {"grant_option", new IntType(8, true)}}},
         {"role_grants",
          {{"user_name", new Nullable(new StringType(std::nullopt))},
           {"role_name", new Nullable(new StringType(std::nullopt))},
           {"granted_role_name", new StringType(std::nullopt)},
           {"granted_role_id", new UUIDType()},
           {"granted_role_is_default", new IntType(8, true)},
           {"with_admin_option", new IntType(8, true)}}},
         {"current_roles",
          {{"role_name", new StringType(std::nullopt)}, {"with_admin_option", new IntType(8, true)}, {"is_default", new IntType(8, true)}}},
         {"enabled_roles",
          {{"role_name", new StringType(std::nullopt)},
           {"with_admin_option", new IntType(8, true)},
           {"is_current", new IntType(8, true)},
           {"is_default", new IntType(8, true)}}},
         {"settings_profiles",
          {{"name", new StringType(std::nullopt)},
           {"id", new UUIDType()},
           {"storage", new StringType(std::nullopt)},
           {"num_elements", new IntType(64, true)},
           {"apply_to_all", new IntType(8, true)},
           {"apply_to_list", new ArrayType(new StringType(std::nullopt))},
           {"apply_to_except", new ArrayType(new StringType(std::nullopt))}}},
         {"settings_profile_elements",
          {{"profile_name", new Nullable(new StringType(std::nullopt))},
           {"user_name", new Nullable(new StringType(std::nullopt))},
           {"role_name", new Nullable(new StringType(std::nullopt))},
           {"index", new IntType(64, true)},
           {"setting_name", new Nullable(new StringType(std::nullopt))},
           {"value", new Nullable(new StringType(std::nullopt))},
           {"min", new Nullable(new StringType(std::nullopt))},
           {"max", new Nullable(new StringType(std::nullopt))},
           {"writability",
            new EnumType(
                8, std::vector<EnumValue>{EnumValue("WRITABLE", 0), EnumValue("CONST", 1), EnumValue("CHANGEABLE_IN_READONLY", 2)})},
           {"inherit_profile", new Nullable(new StringType(std::nullopt))}}},
         {"row_policies",
          {{"name", new StringType(std::nullopt)},
           {"short_name", new StringType(std::nullopt)},
           {"database", new StringType(std::nullopt)},
           {"table", new StringType(std::nullopt)},
           {"id", new UUIDType()},
           {"storage", new StringType(std::nullopt)},
           {"select_filter", new Nullable(new StringType(std::nullopt))},
           {"is_restrictive", new IntType(8, true)},
           {"apply_to_all", new IntType(8, true)},
           {"apply_to_list", new ArrayType(new StringType(std::nullopt))},
           {"apply_to_except", new ArrayType(new StringType(std::nullopt))}}},
         {"quotas",
          {{"name", new StringType(std::nullopt)},
           {"id", new UUIDType()},
           {"storage", new StringType(std::nullopt)},
           {"keys",
            new ArrayType(new EnumType(
                8,
                std::vector<EnumValue>{
                    EnumValue("user_name", 1),
                    EnumValue("ip_address", 2),
                    EnumValue("forwarded_ip_address", 3),
                    EnumValue("client_key", 4)}))},
           {"durations", new ArrayType(new IntType(64, true))},
           {"apply_to_all", new IntType(8, true)},
           {"apply_to_list", new ArrayType(new StringType(std::nullopt))},
           {"apply_to_except", new ArrayType(new StringType(std::nullopt))}}},
         {"quota_limits",
          {{"quota_name", new StringType(std::nullopt)},
           {"duration", new IntType(32, true)},
           {"is_randomized_interval", new IntType(8, true)},
           {"max_queries", new Nullable(new IntType(64, true))},
           {"max_query_selects", new Nullable(new IntType(64, true))},
           {"max_query_inserts", new Nullable(new IntType(64, true))},
           {"max_errors", new Nullable(new IntType(64, true))},
           {"max_result_rows", new Nullable(new IntType(64, true))},
           {"max_result_bytes", new Nullable(new IntType(64, true))},
           {"max_read_rows", new Nullable(new IntType(64, true))},
           {"max_read_bytes", new Nullable(new IntType(64, true))},
           {"max_execution_time", new Nullable(new FloatType(64))},
           {"max_written_bytes", new Nullable(new IntType(64, true))},
           {"max_failed_sequential_authentications", new Nullable(new IntType(64, true))}}},
         {"quota_usage",
          {{"quota_name", new StringType(std::nullopt)},
           {"quota_key", new StringType(std::nullopt)},
           {"start_time", new Nullable(new DateTimeType(false, std::nullopt, std::nullopt))},
           {"end_time", new Nullable(new DateTimeType(false, std::nullopt, std::nullopt))},
           {"duration", new Nullable(new IntType(32, true))},
           {"queries", new Nullable(new IntType(64, true))},
           {"max_queries", new Nullable(new IntType(64, true))},
           {"query_selects", new Nullable(new IntType(64, true))},
           {"max_query_selects", new Nullable(new IntType(64, true))},
           {"query_inserts", new Nullable(new IntType(64, true))},
           {"max_query_inserts", new Nullable(new IntType(64, true))},
           {"errors", new Nullable(new IntType(64, true))},
           {"max_errors", new Nullable(new IntType(64, true))},
           {"result_rows", new Nullable(new IntType(64, true))},
           {"max_result_rows", new Nullable(new IntType(64, true))},
           {"result_bytes", new Nullable(new IntType(64, true))},
           {"max_result_bytes", new Nullable(new IntType(64, true))},
           {"read_rows", new Nullable(new IntType(64, true))},
           {"max_read_rows", new Nullable(new IntType(64, true))},
           {"read_bytes", new Nullable(new IntType(64, true))},
           {"max_read_bytes", new Nullable(new IntType(64, true))},
           {"execution_time", new Nullable(new FloatType(64))},
           {"max_execution_time", new Nullable(new FloatType(64))},
           {"written_bytes", new Nullable(new IntType(64, true))},
           {"max_written_bytes", new Nullable(new IntType(64, true))},
           {"failed_sequential_authentications", new Nullable(new IntType(64, true))},
           {"max_failed_sequential_authentications", new Nullable(new IntType(64, true))}}},
         {"quotas_usage",
          {{"quota_name", new StringType(std::nullopt)},
           {"quota_key", new StringType(std::nullopt)},
           {"is_current", new IntType(8, true)},
           {"start_time", new Nullable(new DateTimeType(false, std::nullopt, std::nullopt))},
           {"end_time", new Nullable(new DateTimeType(false, std::nullopt, std::nullopt))},
           {"duration", new Nullable(new IntType(32, true))},
           {"queries", new Nullable(new IntType(64, true))},
           {"max_queries", new Nullable(new IntType(64, true))},
           {"query_selects", new Nullable(new IntType(64, true))},
           {"max_query_selects", new Nullable(new IntType(64, true))},
           {"query_inserts", new Nullable(new IntType(64, true))},
           {"max_query_inserts", new Nullable(new IntType(64, true))},
           {"errors", new Nullable(new IntType(64, true))},
           {"max_errors", new Nullable(new IntType(64, true))},
           {"result_rows", new Nullable(new IntType(64, true))},
           {"max_result_rows", new Nullable(new IntType(64, true))},
           {"result_bytes", new Nullable(new IntType(64, true))},
           {"max_result_bytes", new Nullable(new IntType(64, true))},
           {"read_rows", new Nullable(new IntType(64, true))},
           {"max_read_rows", new Nullable(new IntType(64, true))},
           {"read_bytes", new Nullable(new IntType(64, true))},
           {"max_read_bytes", new Nullable(new FloatType(64))},
           {"execution_time", new Nullable(new FloatType(64))},
           {"max_execution_time", new Nullable(new FloatType(64))},
           {"written_bytes", new Nullable(new IntType(64, true))},
           {"max_written_bytes", new Nullable(new IntType(64, true))},
           {"failed_sequential_authentications", new Nullable(new IntType(64, true))},
           {"max_failed_sequential_authentications", new Nullable(new IntType(64, true))}}},
         {"user_directories",
          {{"name", new StringType(std::nullopt)},
           {"type", new StringType(std::nullopt)},
           {"params", new StringType(std::nullopt)},
           {"precedence", new IntType(64, true)}}},
         {"privileges",
          {{"privilege",
            new EnumType(
                16,
                std::vector<EnumValue>{
                    EnumValue("SHOW DATABASES", 0),
                    EnumValue("SHOW TABLES", 1),
                    EnumValue("SHOW COLUMNS", 2),
                    EnumValue("SHOW DICTIONARIES", 3)})}}},
         {"errors",
          {{"name", new StringType(std::nullopt)},
           {"code", new IntType(32, true)},
           {"value", new IntType(64, true)},
           {"last_error_time", new DateTimeType(false, std::nullopt, std::nullopt)},
           {"last_error_message", new StringType(std::nullopt)},
           {"last_error_trace", new ArrayType(new IntType(64, true))},
           {"remote", new IntType(8, true)}}},
         {"warnings", {{"message", new StringType(std::nullopt)}}},
         {"data_skipping_indices",
          {{"database", new StringType(std::nullopt)},
           {"table", new StringType(std::nullopt)},
           {"name", new StringType(std::nullopt)},
           {"type", new StringType(std::nullopt)},
           {"type_full", new StringType(std::nullopt)},
           {"expr", new StringType(std::nullopt)},
           {"granularity", new IntType(64, true)},
           {"data_compressed_bytes", new IntType(64, true)},
           {"data_uncompressed_bytes", new IntType(64, true)},
           {"marks", new IntType(64, true)}}},
         {"projections",
          {{"database", new StringType(std::nullopt)},
           {"table", new StringType(std::nullopt)},
           {"name", new StringType(std::nullopt)},
           {"type", new EnumType(8, std::vector<EnumValue>{EnumValue("Normal", 0), EnumValue("Aggregate", 1)})},
           {"sorting_key", new ArrayType(new StringType(std::nullopt))},
           {"query", new StringType(std::nullopt)}}},
         {"licenses",
          {{"library_name", new StringType(std::nullopt)},
           {"license_type", new StringType(std::nullopt)},
           {"license_path", new StringType(std::nullopt)},
           {"license_text", new StringType(std::nullopt)}}},
         {"time_zones", {{"time_zone", new StringType(std::nullopt)}}},
         {"backups",
          {{"id", new StringType(std::nullopt)},
           {"name", new StringType(std::nullopt)},
           {"base_backup_name", new StringType(std::nullopt)},
           {"query_id", new StringType(std::nullopt)},
           {"status",
            new EnumType(
                8,
                std::vector<EnumValue>{
                    EnumValue("CREATING_BACKUP", 0),
                    EnumValue("BACKUP_CREATED", 1),
                    EnumValue("BACKUP_FAILED", 2),
                    EnumValue("RESTORING", 3),
                    EnumValue("RESTORED", 4),
                    EnumValue("RESTORE_FAILED", 5),
                    EnumValue("BACKUP_CANCELLED", 6),
                    EnumValue("RESTORE_CANCELLED", 7)})},
           {"error", new StringType(std::nullopt)},
           {"start_time", new DateTimeType(false, std::nullopt, std::nullopt)},
           {"end_time", new DateTimeType(false, std::nullopt, std::nullopt)},
           {"num_files", new IntType(64, true)},
           {"total_size", new IntType(64, true)},
           {"num_entries", new IntType(64, true)},
           {"uncompressed_size", new IntType(64, true)},
           {"compressed_size", new IntType(64, true)},
           {"files_read", new IntType(64, true)},
           {"bytes_read", new IntType(64, true)},
           {"ProfileEvents", new MapType(new StringType(std::nullopt), new IntType(64, true))}}},
         {"schema_inference_cache",
          {{"storage", new StringType(std::nullopt)},
           {"source", new StringType(std::nullopt)},
           {"format", new StringType(std::nullopt)},
           {"additional_format_info", new StringType(std::nullopt)},
           {"registration_time", new DateTimeType(false, std::nullopt, std::nullopt)},
           {"schema", new Nullable(new StringType(std::nullopt))},
           {"number_of_rows", new Nullable(new IntType(64, true))},
           {"schema_inference_mode", new Nullable(new StringType(std::nullopt))}}},
         {"dropped_tables",
          {{"index", new IntType(32, true)},
           {"database", new StringType(std::nullopt)},
           {"table", new StringType(std::nullopt)},
           {"uuid", new UUIDType()},
           {"engine", new StringType(std::nullopt)},
           {"metadata_dropped_path", new StringType(std::nullopt)},
           {"table_dropped_time", new DateTimeType(false, std::nullopt, std::nullopt)}}},
         {"dropped_tables_parts",
          {//missing nested types
           {"partition", new StringType(std::nullopt)},
           {"name", new StringType(std::nullopt)},
           {"uuid", new UUIDType()},
           {"part_type", new StringType(std::nullopt)},
           {"active", new IntType(8, true)},
           {"marks", new IntType(64, true)},
           {"rows", new IntType(64, true)},
           {"bytes_on_disk", new IntType(64, true)},
           {"data_compressed_bytes", new IntType(64, true)},
           {"data_uncompressed_bytes", new IntType(64, true)},
           {"primary_key_size", new IntType(64, true)},
           {"marks_bytes", new IntType(64, true)},
           {"secondary_indices_compressed_bytes", new IntType(64, true)},
           {"secondary_indices_uncompressed_bytes", new IntType(64, true)},
           {"secondary_indices_marks_bytes", new IntType(64, true)},
           {"modification_time", new DateTimeType(false, std::nullopt, std::nullopt)},
           {"remove_time", new DateTimeType(false, std::nullopt, std::nullopt)},
           {"refcount", new IntType(32, true)},
           {"min_date", new DateType(false)},
           {"max_date", new DateType(false)},
           {"min_time", new DateTimeType(false, std::nullopt, std::nullopt)},
           {"max_time", new DateTimeType(false, std::nullopt, std::nullopt)},
           {"partition_id", new StringType(std::nullopt)},
           {"min_block_number", new IntType(64, false)},
           {"max_block_number", new IntType(64, false)},
           {"level", new IntType(32, true)},
           {"data_version", new IntType(64, true)},
           {"primary_key_bytes_in_memory", new IntType(64, true)},
           {"primary_key_bytes_in_memory_allocated", new IntType(64, true)},
           {"index_granularity_bytes_in_memory", new IntType(64, true)},
           {"index_granularity_bytes_in_memory_allocated", new IntType(64, true)},
           {"is_frozen", new IntType(8, true)},
           {"database", new StringType(std::nullopt)},
           {"table", new StringType(std::nullopt)},
           {"engine", new StringType(std::nullopt)},
           {"disk_name", new StringType(std::nullopt)},
           {"path", new StringType(std::nullopt)},
           {"hash_of_all_files", new StringType(std::nullopt)},
           {"hash_of_uncompressed_files", new StringType(std::nullopt)},
           {"uncompressed_hash_of_compressed_files", new StringType(std::nullopt)},
           {"delete_ttl_info_min", new DateTimeType(false, std::nullopt, std::nullopt)},
           {"delete_ttl_info_max", new DateTimeType(false, std::nullopt, std::nullopt)},
           {"default_compression_codec", new StringType(std::nullopt)},
           {"projections", new ArrayType(new StringType(std::nullopt))},
           {"visible", new IntType(8, true)},
           {"creation_tid",
            new TupleType(std::vector<SubType>(
                {SubType(std::nullopt, new IntType(64, true)),
                 SubType(std::nullopt, new IntType(64, true)),
                 SubType(std::nullopt, new UUIDType())}))},
           {"removal_tid_lock", new IntType(64, true)},
           {"removal_tid",
            new TupleType(std::vector<SubType>(
                {SubType(std::nullopt, new IntType(64, true)),
                 SubType(std::nullopt, new IntType(64, true)),
                 SubType(std::nullopt, new UUIDType())}))},
           {"creation_csn", new IntType(64, true)},
           {"removal_csn", new IntType(64, true)},
           {"has_lightweight_delete", new IntType(8, true)},
           {"last_removal_attempt_time", new DateTimeType(false, std::nullopt, std::nullopt)},
           {"removal_state", new StringType(std::nullopt)}}},
         {"dropped_tables",
          {{"scheduler", new StringType(std::nullopt)},
           {"path", new StringType(std::nullopt)},
           {"type", new StringType(std::nullopt)},
           {"weight", new FloatType(64)},
           {"priority", new IntType(64, false)},
           {"is_active", new IntType(8, true)},
           {"active_children", new IntType(64, true)},
           {"dequeued_requests", new IntType(64, true)},
           {"canceled_requests", new IntType(64, true)},
           {"dequeued_cost", new IntType(64, false)},
           {"throughput", new FloatType(64)},
           {"canceled_cost", new IntType(64, false)},
           {"busy_periods", new IntType(64, true)},
           {"vruntime", new Nullable(new FloatType(64))},
           {"queue_length", new Nullable(new IntType(64, true))},
           {"queue_cost", new Nullable(new IntType(64, false))},
           {"budget", new Nullable(new IntType(64, false))},
           {"is_satisfied", new Nullable(new IntType(8, true))},
           {"inflight_requests", new Nullable(new IntType(64, false))},
           {"inflight_cost", new Nullable(new IntType(64, false))},
           {"max_requests", new Nullable(new IntType(64, false))},
           {"max_cost", new Nullable(new IntType(64, false))},
           {"max_speed", new Nullable(new FloatType(64))},
           {"max_burst", new Nullable(new FloatType(64))},
           {"throttling_us", new Nullable(new IntType(64, false))},
           {"tokens", new Nullable(new FloatType(64))}}},
         {"dns_cache",
          {{"hostname", new StringType(std::nullopt)},
           {"ip_address", new StringType(std::nullopt)},
           {"ip_family", new EnumType(8, std::vector<EnumValue>{EnumValue("IPv4", 0), EnumValue("IPv6", 1), EnumValue("UNIX_LOCAL", 2)})},
           {"cached_at", new DateTimeType(false, std::nullopt, std::nullopt)}}},
         {"symbols",
          {{"symbol", new StringType(std::nullopt)}, {"address_begin", new IntType(64, true)}, {"address_end", new IntType(64, true)}}},
         {"kafka_consumers",
          {{"database", new StringType(std::nullopt)}, //missing nested types
           {"table", new StringType(std::nullopt)},
           {"consumer_id", new StringType(std::nullopt)},
           {"last_poll_time", new DateTimeType(false, std::nullopt, std::nullopt)},
           {"num_messages_read", new IntType(64, true)},
           {"last_commit_time", new DateTimeType(false, std::nullopt, std::nullopt)},
           {"num_commits", new IntType(64, true)},
           {"last_rebalance_time", new DateTimeType(false, std::nullopt, std::nullopt)},
           {"num_rebalance_revocations", new IntType(64, true)},
           {"num_rebalance_assignments", new IntType(64, true)},
           {"is_currently_used", new IntType(8, true)},
           {"last_used", new IntType(64, true)},
           {"rdkafka_stat", new StringType(std::nullopt)}}},
         /*{"stack_trace",
          {{"thread_name", new StringType(std::nullopt)},
           {"thread_id", new IntType(64, true)},
           {"query_id", new StringType(std::nullopt)},
           {"trace", new ArrayType(new IntType(64, true))}}},*/
         {"rocksdb",
          {{"database", new StringType(std::nullopt)},
           {"table", new StringType(std::nullopt)},
           {"name", new StringType(std::nullopt)},
           {"value", new IntType(64, true)}}},
         {"mysql_binlogs",
          {{"binlog_client_name", new StringType(std::nullopt)},
           {"name", new StringType(std::nullopt)},
           {"mysql_binlog_name", new StringType(std::nullopt)},
           {"mysql_binlog_pos", new IntType(64, true)},
           {"mysql_binlog_timestamp", new IntType(64, true)},
           {"mysql_binlog_executed_gtid_set", new StringType(std::nullopt)},
           {"dispatcher_name", new StringType(std::nullopt)},
           {"dispatcher_mysql_binlog_name", new StringType(std::nullopt)},
           {"dispatcher_mysql_binlog_pos", new IntType(64, true)},
           {"dispatcher_mysql_binlog_timestamp", new IntType(64, true)},
           {"dispatcher_mysql_binlog_executed_gtid_set", new StringType(std::nullopt)},
           {"size", new IntType(64, true)},
           {"bytes", new IntType(64, true)},
           {"max_bytes", new IntType(64, true)},
           {"max_waiting_ms", new IntType(64, true)},
           {"dispatcher_events_read_per_sec", new FloatType(32)},
           {"dispatcher_bytes_read_per_sec", new FloatType(32)},
           {"dispatcher_events_flush_per_sec", new FloatType(32)},
           {"dispatcher_bytes_flush_per_sec", new FloatType(32)}}},
         {"keywords", {{"keyword", new StringType(std::nullopt)}}},
         {"parts",
          {//missing nested types
           {"partition", new StringType(std::nullopt)},
           {"name", new StringType(std::nullopt)},
           {"uuid", new UUIDType()},
           {"part_type", new StringType(std::nullopt)},
           {"active", new IntType(8, true)},
           {"marks", new IntType(64, true)},
           {"rows", new IntType(64, true)},
           {"bytes_on_disk", new IntType(64, true)},
           {"data_compressed_bytes", new IntType(64, true)},
           {"data_uncompressed_bytes", new IntType(64, true)},
           {"primary_key_size", new IntType(64, true)},
           {"marks_bytes", new IntType(64, true)},
           {"secondary_indices_compressed_bytes", new IntType(64, true)},
           {"secondary_indices_uncompressed_bytes", new IntType(64, true)},
           {"secondary_indices_marks_bytes", new IntType(64, true)},
           {"modification_time", new DateTimeType(false, std::nullopt, std::nullopt)},
           {"remove_time", new DateTimeType(false, std::nullopt, std::nullopt)},
           {"refcount", new IntType(32, true)},
           {"min_date", new DateType(false)},
           {"max_date", new DateType(false)},
           {"min_time", new DateTimeType(false, std::nullopt, std::nullopt)},
           {"max_time", new DateTimeType(false, std::nullopt, std::nullopt)},
           {"partition_id", new StringType(std::nullopt)},
           {"min_block_number", new IntType(64, false)},
           {"max_block_number", new IntType(64, false)},
           {"level", new IntType(32, true)},
           {"data_version", new IntType(64, true)},
           {"primary_key_bytes_in_memory", new IntType(64, true)},
           {"primary_key_bytes_in_memory_allocated", new IntType(64, true)},
           {"index_granularity_bytes_in_memory", new IntType(64, true)},
           {"index_granularity_bytes_in_memory_allocated", new IntType(64, true)},
           {"is_frozen", new IntType(8, true)},
           {"database", new StringType(std::nullopt)},
           {"table", new StringType(std::nullopt)},
           {"engine", new StringType(std::nullopt)},
           {"disk_name", new StringType(std::nullopt)},
           {"path", new StringType(std::nullopt)},
           {"hash_of_all_files", new StringType(std::nullopt)},
           {"hash_of_uncompressed_files", new StringType(std::nullopt)},
           {"uncompressed_hash_of_compressed_files", new StringType(std::nullopt)},
           {"delete_ttl_info_min", new DateTimeType(false, std::nullopt, std::nullopt)},
           {"delete_ttl_info_max", new DateTimeType(false, std::nullopt, std::nullopt)},
           {"default_compression_codec", new StringType(std::nullopt)},
           {"projections", new ArrayType(new StringType(std::nullopt))},
           {"visible", new IntType(8, true)},
           {"creation_tid",
            new TupleType(std::vector<SubType>(
                {SubType(std::nullopt, new IntType(64, true)),
                 SubType(std::nullopt, new IntType(64, true)),
                 SubType(std::nullopt, new UUIDType())}))},
           {"removal_tid_lock", new IntType(64, true)},
           {"removal_tid",
            new TupleType(std::vector<SubType>(
                {SubType(std::nullopt, new IntType(64, true)),
                 SubType(std::nullopt, new IntType(64, true)),
                 SubType(std::nullopt, new UUIDType())}))},
           {"creation_csn", new IntType(64, true)},
           {"removal_csn", new IntType(64, true)},
           {"has_lightweight_delete", new IntType(8, true)},
           {"last_removal_attempt_time", new DateTimeType(false, std::nullopt, std::nullopt)},
           {"removal_state", new StringType(std::nullopt)}}},
         {"projection_parts",
          {//missing nested types
           {"partition", new StringType(std::nullopt)},
           {"name", new StringType(std::nullopt)},
           {"part_type", new StringType(std::nullopt)},
           {"parent_name", new StringType(std::nullopt)},
           {"parent_uuid", new UUIDType()},
           {"parent_part_type", new StringType(std::nullopt)},
           {"active", new IntType(8, true)},
           {"marks", new IntType(64, true)},
           {"rows", new IntType(64, true)},
           {"bytes_on_disk", new IntType(64, true)},
           {"data_compressed_bytes", new IntType(64, true)},
           {"data_uncompressed_bytes", new IntType(64, true)},
           {"primary_key_size", new IntType(64, true)},
           {"marks_bytes", new IntType(64, true)},
           {"secondary_indices_compressed_bytes", new IntType(64, true)},
           {"secondary_indices_uncompressed_bytes", new IntType(64, true)},
           {"secondary_indices_marks_bytes", new IntType(64, true)},
           {"modification_time", new DateTimeType(false, std::nullopt, std::nullopt)},
           {"remove_time", new DateTimeType(false, std::nullopt, std::nullopt)},
           {"refcount", new IntType(32, true)},
           {"min_date", new DateType(false)},
           {"max_date", new DateType(false)},
           {"min_time", new DateTimeType(false, std::nullopt, std::nullopt)},
           {"max_time", new DateTimeType(false, std::nullopt, std::nullopt)},
           {"partition_id", new StringType(std::nullopt)},
           {"min_block_number", new IntType(64, false)},
           {"max_block_number", new IntType(64, false)},
           {"level", new IntType(32, true)},
           {"data_version", new IntType(64, true)},
           {"primary_key_bytes_in_memory", new IntType(64, true)},
           {"primary_key_bytes_in_memory_allocated", new IntType(64, true)},
           {"index_granularity_bytes_in_memory", new IntType(64, true)},
           {"index_granularity_bytes_in_memory_allocated", new IntType(64, true)},
           {"is_frozen", new IntType(8, true)},
           {"database", new StringType(std::nullopt)},
           {"table", new StringType(std::nullopt)},
           {"engine", new StringType(std::nullopt)},
           {"disk_name", new StringType(std::nullopt)},
           {"path", new StringType(std::nullopt)},
           {"hash_of_all_files", new StringType(std::nullopt)},
           {"hash_of_uncompressed_files", new StringType(std::nullopt)},
           {"uncompressed_hash_of_compressed_files", new StringType(std::nullopt)},
           {"delete_ttl_info_min", new DateTimeType(false, std::nullopt, std::nullopt)},
           {"delete_ttl_info_max", new DateTimeType(false, std::nullopt, std::nullopt)},
           {"default_compression_codec", new StringType(std::nullopt)},
           {"is_broken", new IntType(8, true)},
           {"exception_code", new IntType(32, false)},
           {"exception", new StringType(std::nullopt)}}},
         {"detached_parts",
          {{"database", new StringType(std::nullopt)},
           {"table", new StringType(std::nullopt)},
           {"partition_id", new Nullable(new StringType(std::nullopt))},
           {"name", new StringType(std::nullopt)},
           {"bytes_on_disk", new IntType(64, true)},
           {"modification_time", new DateTimeType(false, std::nullopt, std::nullopt)},
           {"disk", new StringType(std::nullopt)},
           {"path", new StringType(std::nullopt)},
           {"reason", new Nullable(new StringType(std::nullopt))},
           {"min_block_number", new Nullable(new IntType(64, true))},
           {"max_block_number", new Nullable(new IntType(64, true))},
           {"level", new Nullable(new IntType(32, true))}}},
         {"parts_columns",
          {//missing nested types
           {"partition", new StringType(std::nullopt)},
           {"name", new StringType(std::nullopt)},
           {"uuid", new UUIDType()},
           {"part_type", new StringType(std::nullopt)},
           {"active", new IntType(8, true)},
           {"marks", new IntType(64, true)},
           {"rows", new IntType(64, true)},
           {"bytes_on_disk", new IntType(64, true)},
           {"data_compressed_bytes", new IntType(64, true)},
           {"data_uncompressed_bytes", new IntType(64, true)},
           {"marks_bytes", new IntType(64, true)},
           {"modification_time", new DateTimeType(false, std::nullopt, std::nullopt)},
           {"remove_time", new DateTimeType(false, std::nullopt, std::nullopt)},
           {"refcount", new IntType(32, true)},
           {"min_date", new DateType(false)},
           {"max_date", new DateType(false)},
           {"min_time", new DateTimeType(false, std::nullopt, std::nullopt)},
           {"max_time", new DateTimeType(false, std::nullopt, std::nullopt)},
           {"partition_id", new StringType(std::nullopt)},
           {"min_block_number", new IntType(64, false)},
           {"max_block_number", new IntType(64, false)},
           {"level", new IntType(32, true)},
           {"data_version", new IntType(64, true)},
           {"primary_key_bytes_in_memory", new IntType(64, true)},
           {"primary_key_bytes_in_memory_allocated", new IntType(64, true)},
           {"database", new StringType(std::nullopt)},
           {"table", new StringType(std::nullopt)},
           {"engine", new StringType(std::nullopt)},
           {"disk_name", new StringType(std::nullopt)},
           {"path", new StringType(std::nullopt)},
           {"column", new StringType(std::nullopt)},
           {"type", new StringType(std::nullopt)},
           {"column_position", new IntType(64, true)},
           {"default_kind", new StringType(std::nullopt)},
           {"default_expression", new StringType(std::nullopt)},
           {"column_bytes_on_disk", new IntType(64, true)},
           {"column_data_compressed_bytes", new IntType(64, true)},
           {"column_data_uncompressed_bytes", new IntType(64, true)},
           {"column_marks_bytes", new IntType(64, true)},
           {"column_modification_time", new Nullable(new DateTimeType(false, std::nullopt, std::nullopt))},
           {"column_ttl_min", new Nullable(new DateTimeType(false, std::nullopt, std::nullopt))},
           {"column_ttl_max", new Nullable(new DateTimeType(false, std::nullopt, std::nullopt))},
           {"serialization_kind", new StringType(std::nullopt)},
           {"substreams", new ArrayType(new StringType(std::nullopt))},
           {"filenames", new ArrayType(new StringType(std::nullopt))}}},
         {"projection_parts_columns",
          {//missing nested types
           {"partition", new StringType(std::nullopt)},
           {"name", new StringType(std::nullopt)},
           {"part_type", new StringType(std::nullopt)},
           {"parent_name", new StringType(std::nullopt)},
           {"parent_uuid", new UUIDType()},
           {"parent_part_type", new StringType(std::nullopt)},
           {"active", new IntType(8, true)},
           {"marks", new IntType(64, true)},
           {"rows", new IntType(64, true)},
           {"bytes_on_disk", new IntType(64, true)},
           {"data_compressed_bytes", new IntType(64, true)},
           {"data_uncompressed_bytes", new IntType(64, true)},
           {"marks_bytes", new IntType(64, true)},
           {"parent_marks", new IntType(64, true)},
           {"parent_rows", new IntType(64, true)},
           {"parent_bytes_on_disk", new IntType(64, true)},
           {"parent_data_compressed_bytes", new IntType(64, true)},
           {"parent_data_uncompressed_bytes", new IntType(64, true)},
           {"parent_marks_bytes", new IntType(64, true)},
           {"modification_time", new DateTimeType(false, std::nullopt, std::nullopt)},
           {"remove_time", new DateTimeType(false, std::nullopt, std::nullopt)},
           {"refcount", new IntType(32, true)},
           {"min_date", new DateType(false)},
           {"max_date", new DateType(false)},
           {"min_time", new DateTimeType(false, std::nullopt, std::nullopt)},
           {"max_time", new DateTimeType(false, std::nullopt, std::nullopt)},
           {"partition_id", new StringType(std::nullopt)},
           {"min_block_number", new IntType(64, false)},
           {"max_block_number", new IntType(64, false)},
           {"level", new IntType(32, true)},
           {"data_version", new IntType(64, true)},
           {"primary_key_bytes_in_memory", new IntType(64, true)},
           {"primary_key_bytes_in_memory_allocated", new IntType(64, true)},
           {"database", new StringType(std::nullopt)},
           {"table", new StringType(std::nullopt)},
           {"engine", new StringType(std::nullopt)},
           {"disk_name", new StringType(std::nullopt)},
           {"path", new StringType(std::nullopt)},
           {"column", new StringType(std::nullopt)},
           {"type", new StringType(std::nullopt)},
           {"column_position", new IntType(64, true)},
           {"default_kind", new StringType(std::nullopt)},
           {"default_expression", new StringType(std::nullopt)},
           {"column_bytes_on_disk", new IntType(64, true)},
           {"column_data_compressed_bytes", new IntType(64, true)},
           {"column_data_uncompressed_bytes", new IntType(64, true)},
           {"column_marks_bytes", new IntType(64, true)},
           {"column_modification_time", new Nullable(new DateTimeType(false, std::nullopt, std::nullopt))}}},
         {"disks",
          {{"name", new StringType(std::nullopt)},
           {"path", new StringType(std::nullopt)},
           {"free_space", new IntType(64, true)},
           {"total_space", new IntType(64, true)},
           {"unreserved_space", new IntType(64, true)},
           {"keep_free_space", new IntType(64, true)},
           {"type", new StringType(std::nullopt)},
           {"object_storage_type", new StringType(std::nullopt)},
           {"metadata_type", new StringType(std::nullopt)},
           {"is_encrypted", new IntType(8, true)},
           {"is_read_only", new IntType(8, true)},
           {"is_write_once", new IntType(8, true)},
           {"is_remote", new IntType(8, true)},
           {"is_broken", new IntType(8, true)},
           {"cache_path", new StringType(std::nullopt)}}},
         {"storage_policies",
          {{"policy_name", new StringType(std::nullopt)},
           {"volume_name", new StringType(std::nullopt)},
           {"volume_priority", new IntType(64, true)},
           {"disks", new ArrayType(new StringType(std::nullopt))},
           {"volume_type",
            new EnumType(8, std::vector<EnumValue>{EnumValue("JBOD", 0), EnumValue("SINGLE_DISK", 1), EnumValue("UNKNOWN", 2)})},
           {"max_data_part_size", new IntType(64, true)},
           {"move_factor", new FloatType(64)},
           {"prefer_not_to_merge", new IntType(8, true)},
           {"perform_ttl_move_on_insert", new IntType(8, true)},
           {"load_balancing", new EnumType(8, std::vector<EnumValue>{EnumValue("ROUND_ROBIN", 0), EnumValue("LEAST_USED", 1)})}}},
         {"processes",
          {{"is_initial_query", new IntType(8, true)},
           {"user", new StringType(std::nullopt)},
           {"query_id", new StringType(std::nullopt)},
           {"address", new IPv6Type()},
           {"port", new IntType(64, true)},
           {"initial_user", new StringType(std::nullopt)},
           {"initial_query_id", new StringType(std::nullopt)},
           {"initial_address", new IPv6Type()},
           {"initial_port", new IntType(16, true)},
           {"interface", new IntType(8, true)},
           {"os_user", new StringType(std::nullopt)},
           {"client_hostname", new StringType(std::nullopt)},
           {"client_name", new StringType(std::nullopt)},
           {"client_revision", new IntType(64, true)},
           {"client_version_major", new IntType(64, true)},
           {"client_version_minor", new IntType(64, true)},
           {"client_version_patch", new IntType(64, true)},
           {"http_method", new IntType(8, true)},
           {"http_user_agent", new StringType(std::nullopt)},
           {"http_referer", new StringType(std::nullopt)},
           {"forwarded_for", new StringType(std::nullopt)},
           {"quota_key", new StringType(std::nullopt)},
           {"distributed_depth", new IntType(64, true)},
           {"elapsed", new FloatType(64)},
           {"is_cancelled", new IntType(8, true)},
           {"is_all_data_sent", new IntType(8, true)},
           {"read_rows", new IntType(64, true)},
           {"read_bytes", new IntType(64, true)},
           {"total_rows_approx", new IntType(64, true)},
           {"written_rows", new IntType(64, true)},
           {"written_bytes", new IntType(64, true)},
           {"memory_usage", new IntType(64, false)},
           {"peak_memory_usage", new IntType(64, false)},
           {"query", new StringType(std::nullopt)},
           {"query_kind", new StringType(std::nullopt)},
           {"thread_ids", new ArrayType(new IntType(64, true))},
           {"ProfileEvents", new MapType(new StringType(std::nullopt), new IntType(64, true))},
           {"Settings", new MapType(new StringType(std::nullopt), new StringType(std::nullopt))},
           {"current_database", new StringType(std::nullopt)}}},
         {"metrics",
          {{"metric", new StringType(std::nullopt)}, {"value", new IntType(64, false)}, {"description", new StringType(std::nullopt)}}},
         {"merges",
          {{"database", new StringType(std::nullopt)},
           {"table", new StringType(std::nullopt)},
           {"elapsed", new FloatType(64)},
           {"progress", new FloatType(64)},
           {"num_parts", new IntType(64, true)},
           {"source_part_names", new ArrayType(new StringType(std::nullopt))},
           {"result_part_name", new StringType(std::nullopt)},
           {"source_part_paths", new ArrayType(new StringType(std::nullopt))},
           {"result_part_path", new StringType(std::nullopt)},
           {"partition_id", new StringType(std::nullopt)},
           {"partition", new StringType(std::nullopt)},
           {"is_mutation", new IntType(8, true)},
           {"total_size_bytes_compressed", new IntType(64, true)},
           {"total_size_bytes_uncompressed", new IntType(64, true)},
           {"total_size_marks", new IntType(64, true)},
           {"bytes_read_uncompressed", new IntType(64, true)},
           {"rows_read", new IntType(64, true)},
           {"bytes_written_uncompressed", new IntType(64, true)},
           {"rows_written", new IntType(64, true)},
           {"columns_written", new IntType(64, true)},
           {"memory_usage", new IntType(64, true)},
           {"thread_id", new IntType(64, true)},
           {"merge_type", new StringType(std::nullopt)},
           {"merge_algorithm", new StringType(std::nullopt)}}},
         {"moves",
          {{"database", new StringType(std::nullopt)},
           {"table", new StringType(std::nullopt)},
           {"elapsed", new FloatType(64)},
           {"target_disk_name", new StringType(std::nullopt)},
           {"target_disk_path", new StringType(std::nullopt)},
           {"part_name", new StringType(std::nullopt)},
           {"part_size", new IntType(64, true)},
           {"thread_id", new IntType(64, true)}}},
         {"mutations",
          {{"database", new StringType(std::nullopt)}, //has nested
           {"table", new StringType(std::nullopt)},
           {"mutation_id", new StringType(std::nullopt)},
           {"command", new StringType(std::nullopt)},
           {"create_time", new DateTimeType(false, std::nullopt, std::nullopt)},
           {"parts_to_do_names", new ArrayType(new StringType(std::nullopt))},
           {"parts_to_do", new IntType(64, false)},
           {"is_done", new IntType(8, true)},
           {"is_killed", new IntType(8, true)},
           {"latest_failed_part", new StringType(std::nullopt)},
           {"latest_fail_time", new DateTimeType(false, std::nullopt, std::nullopt)},
           {"latest_fail_reason", new StringType(std::nullopt)},
           {"latest_fail_error_code_name", new StringType(std::nullopt)}}},
         {"replicas",
          {{"database", new StringType(std::nullopt)},
           {"table", new StringType(std::nullopt)},
           {"engine", new StringType(std::nullopt)},
           {"is_leader", new IntType(8, true)},
           {"can_become_leader", new IntType(8, true)},
           {"is_readonly", new IntType(8, true)},
           {"readonly_start_time", new Nullable(new DateTimeType(false, std::nullopt, std::nullopt))},
           {"is_session_expired", new IntType(8, true)},
           {"future_parts", new IntType(32, true)},
           {"parts_to_check", new IntType(32, true)},
           {"zookeeper_name", new StringType(std::nullopt)},
           {"zookeeper_path", new StringType(std::nullopt)},
           {"replica_name", new StringType(std::nullopt)},
           {"replica_path", new StringType(std::nullopt)},
           {"columns_version", new IntType(32, true)},
           {"queue_size", new IntType(32, true)},
           {"inserts_in_queue", new IntType(32, true)},
           {"merges_in_queue", new IntType(32, true)},
           {"part_mutations_in_queue", new IntType(32, true)},
           {"queue_oldest_time", new DateTimeType(false, std::nullopt, std::nullopt)},
           {"inserts_oldest_time", new DateTimeType(false, std::nullopt, std::nullopt)},
           {"merges_oldest_time", new DateTimeType(false, std::nullopt, std::nullopt)},
           {"part_mutations_oldest_time", new DateTimeType(false, std::nullopt, std::nullopt)},
           {"oldest_part_to_get", new StringType(std::nullopt)},
           {"oldest_part_to_merge_to", new StringType(std::nullopt)},
           {"oldest_part_to_mutate_to", new StringType(std::nullopt)},
           {"log_max_index", new IntType(64, true)},
           {"log_pointer", new IntType(64, true)},
           {"last_queue_update", new DateTimeType(false, std::nullopt, std::nullopt)},
           {"absolute_delay", new IntType(64, true)},
           {"total_replicas", new IntType(32, true)},
           {"active_replicas", new IntType(32, true)},
           {"lost_part_count", new IntType(64, true)},
           {"last_queue_update_exception", new StringType(std::nullopt)},
           {"zookeeper_exception", new StringType(std::nullopt)},
           {"replica_is_active", new MapType(new StringType(std::nullopt), new IntType(8, true))}}},
         {"replication_queue",
          {{"database", new StringType(std::nullopt)},
           {"table", new StringType(std::nullopt)},
           {"replica_name", new StringType(std::nullopt)},
           {"position", new IntType(32, true)},
           {"node_name", new StringType(std::nullopt)},
           {"type", new StringType(std::nullopt)},
           {"create_time", new DateTimeType(false, std::nullopt, std::nullopt)},
           {"required_quorum", new IntType(32, true)},
           {"source_replica", new StringType(std::nullopt)},
           {"new_part_name", new StringType(std::nullopt)},
           {"parts_to_merge", new ArrayType(new StringType(std::nullopt))},
           {"is_detach", new IntType(8, true)},
           {"is_currently_executing", new IntType(8, true)},
           {"num_tries", new IntType(32, true)},
           {"last_exception", new StringType(std::nullopt)},
           {"last_exception_time", new DateTimeType(false, std::nullopt, std::nullopt)},
           {"last_attempt_time", new DateTimeType(false, std::nullopt, std::nullopt)},
           {"num_postponed", new IntType(32, true)},
           {"postpone_reason", new StringType(std::nullopt)},
           {"last_postpone_time", new DateTimeType(false, std::nullopt, std::nullopt)},
           {"merge_type", new StringType(std::nullopt)}}},
         {"distributed_ddl_queue",
          {{"entry", new StringType(std::nullopt)},
           {"entry_version", new Nullable(new IntType(8, true))},
           {"initiator_host", new Nullable(new StringType(std::nullopt))},
           {"initiator_port", new Nullable(new IntType(16, true))},
           {"cluster", new StringType(std::nullopt)},
           {"query", new StringType(std::nullopt)},
           {"settings", new MapType(new StringType(std::nullopt), new StringType(std::nullopt))},
           {"query_create_time", new DateTimeType(false, std::nullopt, std::nullopt)},
           {"host", new Nullable(new StringType(std::nullopt))},
           {"port", new Nullable(new IntType(16, true))},
           {"status",
            new EnumType(
                8,
                std::vector<EnumValue>{
                    EnumValue("Inactive", 0),
                    EnumValue("Active", 1),
                    EnumValue("Finished", 2),
                    EnumValue("Removing", 3),
                    EnumValue("Unknown", 4)})},
           {"exception_code", new Nullable(new IntType(16, true))},
           {"exception_text", new Nullable(new StringType(std::nullopt))},
           {"node_name", new StringType(std::nullopt)},
           {"type", new StringType(std::nullopt)},
           {"query_finish_time", new Nullable(new DateTimeType(false, std::nullopt, std::nullopt))},
           {"query_duration_ms", new Nullable(new IntType(64, true))}}},
         {"distribution_queue",
          {{"database", new StringType(std::nullopt)},
           {"table", new StringType(std::nullopt)},
           {"data_path", new StringType(std::nullopt)},
           {"is_blocked", new IntType(8, true)},
           {"error_count", new IntType(64, true)},
           {"data_files", new IntType(64, true)},
           {"data_compressed_bytes", new IntType(64, true)},
           {"broken_data_files", new IntType(64, true)},
           {"broken_data_compressed_bytes", new IntType(64, true)},
           {"last_exception", new StringType(std::nullopt)},
           {"last_exception_time", new DateTimeType(false, std::nullopt, std::nullopt)}}},
         {"dictionaries",
          {{"database", new StringType(std::nullopt)}, //has nested
           {"name", new StringType(std::nullopt)},
           {"uuid", new UUIDType()},
           {"status",
            new EnumType(
                8,
                std::vector<EnumValue>{
                    EnumValue("NOT_LOADED", 0),
                    EnumValue("LOADED", 1),
                    EnumValue("FAILED", 2),
                    EnumValue("LOADING", 3),
                    EnumValue("FAILED_AND_RELOADING", 4),
                    EnumValue("LOADED_AND_RELOADING", 5),
                    EnumValue("NOT_EXIST", 6)})},
           {"origin", new StringType(std::nullopt)},
           {"type", new StringType(std::nullopt)},
           {"bytes_allocated", new IntType(64, true)},
           {"hierarchical_index_bytes_allocated", new IntType(64, true)},
           {"query_count", new IntType(64, true)},
           {"hit_rate", new FloatType(64)},
           {"found_rate", new FloatType(64)},
           {"element_count", new IntType(64, true)},
           {"load_factor", new FloatType(64)},
           {"source", new StringType(std::nullopt)},
           {"lifetime_min", new IntType(64, true)},
           {"lifetime_max", new IntType(64, true)},
           {"loading_start_time", new DateTimeType(false, std::nullopt, std::nullopt)},
           {"last_successful_update_time", new DateTimeType(false, std::nullopt, std::nullopt)},
           {"loading_duration", new FloatType(32)},
           {"last_exception", new StringType(std::nullopt)},
           {"comment", new StringType(std::nullopt)}}},
         {"models",
          {{"model_path", new StringType(std::nullopt)},
           {"type", new StringType(std::nullopt)},
           {"loading_start_time", new DateTimeType(false, std::nullopt, std::nullopt)},
           {"loading_duration", new FloatType(32)}}},
         {"clusters",
          {{"cluster", new StringType(std::nullopt)},
           {"shard_num", new IntType(32, true)},
           {"shard_weight", new IntType(32, true)},
           {"internal_replication", new IntType(8, true)},
           {"replica_num", new IntType(32, true)},
           {"host_name", new StringType(std::nullopt)},
           {"host_address", new StringType(std::nullopt)},
           {"port", new IntType(16, true)},
           {"is_local", new IntType(8, true)},
           {"user", new StringType(std::nullopt)},
           {"default_database", new StringType(std::nullopt)},
           {"errors_count", new IntType(32, true)},
           {"slowdowns_count", new IntType(32, true)},
           {"estimated_recovery_time", new IntType(32, true)},
           {"database_shard_name", new StringType(std::nullopt)},
           {"database_replica_name", new StringType(std::nullopt)},
           {"is_active", new Nullable(new IntType(8, true))},
           {"replication_lag", new Nullable(new IntType(32, true))},
           {"recovery_time", new Nullable(new IntType(64, true))}}},
         {"graphite_retentions",
          {{"config_name", new StringType(std::nullopt)}, //has nested
           {"rule_type", new StringType(std::nullopt)},
           {"regexp", new StringType(std::nullopt)},
           {"function", new StringType(std::nullopt)},
           {"age", new IntType(64, true)},
           {"precision", new IntType(64, true)},
           {"priority", new IntType(16, true)},
           {"is_default", new IntType(8, true)}}},
         {"macros", {{"macro", new StringType(std::nullopt)}, {"substitution", new StringType(std::nullopt)}}},
         {"replicated_fetches",
          {{"database", new StringType(std::nullopt)},
           {"table", new StringType(std::nullopt)},
           {"elapsed", new FloatType(64)},
           {"progress", new FloatType(64)},
           {"result_part_name", new StringType(std::nullopt)},
           {"result_part_path", new StringType(std::nullopt)},
           {"partition_id", new StringType(std::nullopt)},
           {"total_size_bytes_compressed", new IntType(64, true)},
           {"bytes_read_compressed", new IntType(64, true)},
           {"source_replica_path", new StringType(std::nullopt)},
           {"source_replica_hostname", new StringType(std::nullopt)},
           {"source_replica_port", new IntType(16, true)},
           {"interserver_scheme", new StringType(std::nullopt)},
           {"URI", new StringType(std::nullopt)},
           {"to_detached", new IntType(8, true)},
           {"thread_id", new IntType(64, true)}}},
         {"part_moves_between_shards",
          {{"database", new StringType(std::nullopt)},
           {"table", new StringType(std::nullopt)},
           {"task_name", new StringType(std::nullopt)},
           {"task_uuid", new UUIDType()},
           {"create_time", new DateTimeType(false, std::nullopt, std::nullopt)},
           {"part_name", new StringType(std::nullopt)},
           {"part_uuid", new UUIDType()},
           {"to_shard", new StringType(std::nullopt)},
           {"dst_part_name", new StringType(std::nullopt)},
           {"update_time", new DateTimeType(false, std::nullopt, std::nullopt)},
           {"state", new StringType(std::nullopt)},
           {"rollback", new IntType(8, true)},
           {"num_tries", new IntType(64, true)},
           {"last_exception", new StringType(std::nullopt)}}},
         {"asynchronous_inserts",
          {//has nested
           {"query", new StringType(std::nullopt)},
           {"database", new StringType(std::nullopt)},
           {"table", new StringType(std::nullopt)},
           {"format", new StringType(std::nullopt)},
           {"first_update", new DateTimeType(true, 6, std::nullopt)},
           {"total_bytes", new IntType(64, true)}}},
         {"filesystem_cache",
          {{"cache_name", new StringType(std::nullopt)},
           {"cache_base_path", new StringType(std::nullopt)},
           {"cache_path", new StringType(std::nullopt)},
           {"key", new StringType(std::nullopt)},
           {"file_segment_range_begin", new IntType(64, true)},
           {"file_segment_range_end", new IntType(64, true)},
           {"size", new IntType(64, true)},
           {"state", new StringType(std::nullopt)},
           {"cache_hits", new IntType(64, true)},
           {"references", new IntType(64, true)},
           {"downloaded_size", new IntType(64, true)},
           {"kind", new StringType(std::nullopt)},
           {"unbound", new IntType(8, true)},
           {"user_id", new StringType(std::nullopt)},
           {"file_size", new Nullable(new IntType(64, true))}}},
         {"filesystem_cache_settings",
          {{"cache_name", new StringType(std::nullopt)},
           {"path", new StringType(std::nullopt)},
           {"max_size", new IntType(64, true)},
           {"max_elements", new IntType(64, true)},
           {"is_initialized", new IntType(8, true)},
           {"current_size", new IntType(64, true)},
           {"current_elements", new IntType(64, true)},
           {"max_file_segment_size", new IntType(64, true)},
           {"boundary_alignment", new IntType(64, true)},
           {"cache_on_write_operations", new IntType(8, true)},
           {"cache_hits_threshold", new IntType(8, true)},
           {"background_download_threads", new IntType(64, true)},
           {"background_download_queue_size_limit", new IntType(64, true)},
           {"load_metadata_threads", new IntType(64, true)},
           {"enable_bypass_cache_threshold", new IntType(64, true)}}},
         {"query_cache",
          {{"query", new StringType(std::nullopt)},
           {"result_size", new IntType(64, true)},
           {"tag", new LowCardinality(new StringType(std::nullopt))},
           {"stale", new IntType(8, true)},
           {"shared", new IntType(8, true)},
           {"compressed", new IntType(8, true)},
           {"expires_at", new DateTimeType(false, std::nullopt, std::nullopt)},
           {"key_hash", new IntType(64, true)}}},
         {"remote_data_paths",
          {{"disk_name", new StringType(std::nullopt)},
           {"path", new StringType(std::nullopt)},
           {"cache_base_path", new StringType(std::nullopt)},
           {"local_path", new StringType(std::nullopt)},
           {"remote_path", new StringType(std::nullopt)},
           {"size", new IntType(64, true)},
           {"common_prefix_for_blobs", new StringType(std::nullopt)},
           {"cache_paths", new ArrayType(new StringType(std::nullopt))}}},
         {"certificates",
          {{"version", new IntType(32, false)},
           {"serial_number", new Nullable(new StringType(std::nullopt))},
           {"signature_algo", new Nullable(new StringType(std::nullopt))},
           {"issuer", new Nullable(new StringType(std::nullopt))},
           {"not_before", new Nullable(new StringType(std::nullopt))},
           {"not_after", new Nullable(new StringType(std::nullopt))},
           {"subject", new Nullable(new StringType(std::nullopt))},
           {"pkey_algo", new Nullable(new StringType(std::nullopt))},
           {"path", new StringType(std::nullopt)},
           {"default", new IntType(8, true)}}},
         {"named_collections",
          {{"name", new StringType(std::nullopt)},
           {"collection", new MapType(new StringType(std::nullopt), new StringType(std::nullopt))}}},
         {"asynchronous_loader",
          {{"job", new StringType(std::nullopt)},
           {"job_id", new IntType(64, true)},
           {"dependencies", new ArrayType(new IntType(64, true))},
           {"dependencies_left", new IntType(64, true)},
           {"status",
            new EnumType(
                8, std::vector<EnumValue>{EnumValue("PENDING", 0), EnumValue("OK", 1), EnumValue("FAILED", 2), EnumValue("CANCELED", 3)})},
           {"is_executing", new IntType(8, true)},
           {"is_blocked", new IntType(8, true)},
           {"is_ready", new IntType(8, true)},
           {"elapsed", new FloatType(64)},
           {"pool_id", new IntType(64, true)},
           {"pool", new StringType(std::nullopt)},
           {"priority", new IntType(64, false)},
           {"execution_pool_id", new IntType(64, true)},
           {"execution_pool", new StringType(std::nullopt)},
           {"execution_priority", new IntType(64, false)},
           {"ready_seqno", new Nullable(new IntType(64, true))},
           {"waiters", new IntType(64, true)},
           {"exception", new Nullable(new StringType(std::nullopt))},
           {"schedule_time", new DateTimeType(true, 6, std::nullopt)},
           {"enqueue_time", new Nullable(new DateTimeType(true, 6, std::nullopt))},
           {"start_time", new Nullable(new DateTimeType(true, 6, std::nullopt))},
           {"finish_time", new Nullable(new DateTimeType(true, 6, std::nullopt))}}},
         {"user_processes",
          {{"user", new StringType(std::nullopt)},
           {"memory_usage", new IntType(64, false)},
           {"peak_memory_usage", new IntType(64, false)},
           {"ProfileEvents", new MapType(new StringType(std::nullopt), new IntType(64, true))}}},
         {"jemalloc_bins",
          {{"index", new IntType(16, true)},
           {"large", new IntType(8, true)},
           {"size", new IntType(64, true)},
           {"allocations", new IntType(16, false)},
           {"deallocations", new IntType(16, false)}}},
         {"s3queue",
          {{"zookeeper_path", new StringType(std::nullopt)},
           {"file_path", new StringType(std::nullopt)},
           {"file_name", new StringType(std::nullopt)},
           {"rows_processed", new IntType(64, true)},
           {"status", new StringType(std::nullopt)},
           {"processing_start_time", new Nullable(new DateTimeType(false, std::nullopt, std::nullopt))},
           {"processing_end_time", new Nullable(new DateTimeType(false, std::nullopt, std::nullopt))},
           {"exception", new StringType(std::nullopt)}}},
         {"azure_queue",
          {{"zookeeper_path", new StringType(std::nullopt)},
           {"file_path", new StringType(std::nullopt)},
           {"file_name", new StringType(std::nullopt)},
           {"rows_processed", new IntType(64, true)},
           {"status", new StringType(std::nullopt)},
           {"processing_start_time", new Nullable(new DateTimeType(false, std::nullopt, std::nullopt))},
           {"processing_end_time", new Nullable(new DateTimeType(false, std::nullopt, std::nullopt))},
           {"exception", new StringType(std::nullopt)}}},
         {"s3_queue_settings",
          {{"database", new StringType(std::nullopt)},
           {"table", new StringType(std::nullopt)},
           {"name", new StringType(std::nullopt)},
           {"value", new StringType(std::nullopt)},
           {"type", new StringType(std::nullopt)},
           {"changed", new IntType(8, true)},
           {"description", new StringType(std::nullopt)},
           {"alterable", new IntType(8, true)}}},
         {"azure_queue_settings",
          {{"database", new StringType(std::nullopt)},
           {"table", new StringType(std::nullopt)},
           {"name", new StringType(std::nullopt)},
           {"value", new StringType(std::nullopt)},
           {"type", new StringType(std::nullopt)},
           {"changed", new IntType(8, true)},
           {"description", new StringType(std::nullopt)},
           {"alterable", new IntType(8, true)}}},
         {"dashboards",
          {{"dashboard", new StringType(std::nullopt)}, {"title", new StringType(std::nullopt)}, {"query", new StringType(std::nullopt)}}},
         {"view_refreshes",
          {{"database", new StringType(std::nullopt)},
           {"view", new StringType(std::nullopt)},
           {"uuid", new UUIDType()},
           {"status", new StringType(std::nullopt)},
           {"last_success_time", new Nullable(new DateTimeType(false, std::nullopt, std::nullopt))},
           {"last_success_duration_ms", new Nullable(new IntType(64, true))},
           {"last_refresh_time", new Nullable(new DateTimeType(false, std::nullopt, std::nullopt))},
           {"last_refresh_replica", new StringType(std::nullopt)},
           {"next_refresh_time", new Nullable(new DateTimeType(false, std::nullopt, std::nullopt))},
           {"exception", new StringType(std::nullopt)},
           {"retry", new IntType(64, true)},
           {"progress", new FloatType(64)},
           {"read_rows", new IntType(64, true)},
           {"read_bytes", new IntType(64, true)},
           {"total_rows", new IntType(64, true)},
           {"written_rows", new IntType(64, true)},
           {"written_bytes", new IntType(64, true)}}},
         {"workloads",
          {{"name", new StringType(std::nullopt)},
           {"parent", new StringType(std::nullopt)},
           {"create_query", new StringType(std::nullopt)}}},
         {"resources",
          {{"name", new StringType(std::nullopt)},
           {"read_disks", new ArrayType(new StringType(std::nullopt))},
           {"write_disks", new ArrayType(new StringType(std::nullopt))},
           {"create_query", new StringType(std::nullopt)}}},
         {"asynchronous_metrics",
          {{"metric", new StringType(std::nullopt)}, {"value", new FloatType(64)}, {"description", new StringType(std::nullopt)}}},
         {"zookeeper",
          {{"name", new StringType(std::nullopt)}, {"value", new StringType(std::nullopt)}, {"path", new StringType(std::nullopt)}}},
         {"zookeeper_connection",
          {{"name", new StringType(std::nullopt)},
           {"host", new StringType(std::nullopt)},
           {"port", new IntType(16, true)},
           {"index", new Nullable(new IntType(8, true))},
           {"connected_time", new DateTimeType(false, std::nullopt, std::nullopt)},
           {"session_uptime_elapsed_seconds", new IntType(64, true)},
           {"is_expired", new IntType(8, true)},
           {"keeper_api_version", new IntType(8, true)},
           {"client_id", new IntType(64, false)},
           {"xid", new IntType(64, false)},
           {"enabled_feature_flags",
            new EnumType(
                16,
                std::vector<EnumValue>{
                    EnumValue("FILTERED_LIST", 0),
                    EnumValue("MULTI_READ", 1),
                    EnumValue("CHECK_NOT_EXISTS", 2),
                    EnumValue("CREATE_IF_NOT_EXISTS", 3),
                    EnumValue("REMOVE_RECURSIVE", 4)})},
           {"availability_zone", new StringType(std::nullopt)}}},
         {"transactions",
          {{"tid",
            new TupleType(std::vector<SubType>(
                {SubType(std::nullopt, new IntType(64, true)),
                 SubType(std::nullopt, new IntType(64, true)),
                 SubType(std::nullopt, new UUIDType())}))},
           {"tid_hash", new IntType(64, true)},
           {"elapsed", new FloatType(64)},
           {"is_readonly", new IntType(8, true)},
           {"state",
            new EnumType(
                8,
                std::vector<EnumValue>{
                    EnumValue("RUNNING", 0), EnumValue("COMMITTING", 1), EnumValue("COMMITTED", 2), EnumValue("ROLLED_BACK", 3)})}}}});
    if (has_cloud_features)
    {
        systemTables.insert(
            {{"distributed_cache_registry",
              {{"distributed_cache_server", new StringType(std::nullopt)},
               {"availability_zone", new StringType(std::nullopt)},
               {"total_space", new IntType(64, true)},
               {"ips", new ArrayType(new StringType(std::nullopt))},
               {"hostname", new StringType(std::nullopt)},
               {"port", new IntType(16, true)},
               {"from_current_availability_zone", new IntType(8, true)},
               {"unallowed_ips", new ArrayType(new StringType(std::nullopt))}}},
             {"distributed_cache_client_settings",
              {{"client_id", new StringType(std::nullopt)},
               {"client_weight", new IntType(64, true)},
               {"secure", new IntType(8, true)},
               {"connection_pool_size", new IntType(64, true)},
               {"connection_pool_connection_ttl_sec", new IntType(64, true)},
               {"max_packet_size", new IntType(64, true)},
               {"max_virtual_nodes_in_hash_ring", new IntType(64, true)},
               {"offset_alignment", new IntType(64, true)},
               {"local", new IntType(8, true)},
               {"registry_watch_wait_timeout_milliseconds", new IntType(64, true)}}},
             {"distributed_cache",
              {{"distributed_cache_server", new StringType(std::nullopt)},
               {"path", new StringType(std::nullopt)},
               {"file_segment_range_begin", new IntType(64, true)},
               {"file_segment_range_end", new IntType(64, true)},
               {"state", new StringType(std::nullopt)},
               {"size", new IntType(64, true)},
               {"downloaded_size", new IntType(64, true)},
               {"cache_hits", new IntType(64, true)},
               {"references", new IntType(64, true)},
               {"kind", new StringType(std::nullopt)},
               {"unbound", new IntType(8, true)}}},
             {"distributed_cache_events",
              {{"event", new StringType(std::nullopt)},
               {"value", new IntType(64, true)},
               {"description", new StringType(std::nullopt)},
               {"distributed_cache_server", new StringType(std::nullopt)}}},
             {"distributed_cache_metrics",
              {{"metric", new StringType(std::nullopt)},
               {"value", new IntType(64, false)},
               {"description", new StringType(std::nullopt)},
               {"distributed_cache_server", new StringType(std::nullopt)}}},
             {"shared_merge_tree_fetches",
              {{"database", new StringType(std::nullopt)},
               {"table", new StringType(std::nullopt)},
               {"elapsed", new FloatType(64)},
               {"part_name", new StringType(std::nullopt)},
               {"partition_id", new StringType(std::nullopt)},
               {"thread_id", new IntType(64, true)}}},
             {"virtual_parts",
              {{"database", new StringType(std::nullopt)},
               {"table", new StringType(std::nullopt)},
               {"part_name", new StringType(std::nullopt)},
               {"partition_id", new StringType(std::nullopt)},
               {"part_type",
                new EnumType(
                    8,
                    std::vector<EnumValue>{
                        EnumValue("Merge", 0),
                        EnumValue("Mutation", 1),
                        EnumValue("Current", 2),
                        EnumValue("Drop", 3),
                        EnumValue("Detach", 4)})},
               {"elapsed", new FloatType(64)},
               {"part_name", new StringType(std::nullopt)},
               {"partition_id", new StringType(std::nullopt)},
               {"thread_id", new IntType(64, true)}}},
             {"shared_merge_tree_outdated_parts",
              {{"database", new StringType(std::nullopt)},
               {"table", new StringType(std::nullopt)},
               {"part_name", new StringType(std::nullopt)},
               {"partition_id", new StringType(std::nullopt)},
               {"outdated_since", new DateTimeType(false, std::nullopt, std::nullopt)},
               {"replica_created_entry", new StringType(std::nullopt)},
               {"replicas_to_confirm", new ArrayType(new StringType(std::nullopt))}}}});
    }
}

void clearSystemTables()
{
    delete size_tp;
    delete null_tp;

    for (auto & entry : systemTables)
    {
        for (auto & col : entry.second)
        {
            delete col.second;
        }
    }
}

}
