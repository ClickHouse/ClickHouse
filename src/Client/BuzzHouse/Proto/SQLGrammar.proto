syntax = "proto2";

package BuzzHouse;

enum SQLFunc {
    FUNCabs = 1;
    FUNCaccurateCast = 2;
    FUNCacos = 3;
    FUNCacosh = 4;
    FUNCaddDate = 5;
    FUNCaddDays = 6;
    FUNCaddHours = 7;
    FUNCaddInterval = 8;
    FUNCaddMicroseconds = 9;
    FUNCaddMilliseconds = 10;
    FUNCaddMinutes = 11;
    FUNCaddMonths = 12;
    FUNCaddNanoseconds = 13;
    FUNCaddQuarters = 14;
    FUNCaddressToLine = 15;
    FUNCaddressToLineWithInlines = 16;
    FUNCaddressToSymbol = 17;
    FUNCaddSeconds = 18;
    FUNCaddTupleOfIntervals = 19;
    FUNCaddWeeks = 20;
    FUNCaddYears = 21;
    FUNCaes_decrypt_mysql = 22;
    FUNCaes_encrypt_mysql = 23;
    FUNCage = 24;
    FUNCaggThrow = 25;
    FUNCalphaTokens = 26;
    FUNCanalysisOfVariance = 27;
    FUNCand = 28;
    FUNCanova = 29;
    FUNCany = 30;
    FUNCany_value = 31;
    FUNCanyHeavy = 32;
    FUNCanyLast = 33;
    FUNCappendTrailingCharIfAbsent = 34;
    FUNCapprox_top_count = 35;
    FUNCapprox_top_k = 36;
    FUNCapprox_top_sum = 37;
    FUNCargMax = 38;
    FUNCargMin = 39;
    FUNCarray = 40;
    FUNCarray_agg = 41;
    FUNCarray_concat_agg = 42;
    FUNCarrayAll = 43;
    FUNCarrayAUC = 44;
    FUNCarrayAUCPR = 45;
    FUNCarrayAvg = 46;
    FUNCarrayCompact = 47;
    FUNCarrayConcat = 48;
    FUNCarrayCount = 49;
    FUNCarrayCumSum = 50;
    FUNCarrayCumSumNonNegative = 51;
    FUNCarrayDifference = 52;
    FUNCarrayDistinct = 53;
    FUNCarrayDotProduct = 54;
    FUNCarrayElement = 55;
    FUNCarrayElementOrNull = 56;
    FUNCarrayEnumerate = 57;
    FUNCarrayEnumerateDense = 58;
    FUNCarrayEnumerateDenseRanked = 59;
    FUNCarrayEnumerateUniq = 60;
    FUNCarrayEnumerateUniqRanked = 61;
    FUNCarrayExists = 62;
    FUNCarrayFill = 63;
    FUNCarrayFilter = 64;
    FUNCarrayFirst = 65;
    FUNCarrayFirstIndex = 66;
    FUNCarrayFirstOrNull = 67;
    FUNCarrayFlatten = 68;
    FUNCarrayFold = 69;
    FUNCarrayIntersect = 70;
    FUNCarrayJaccardIndex = 71;
    FUNCarrayJoin = 72;
    FUNCarrayLast = 73;
    FUNCarrayLastIndex = 74;
    FUNCarrayLastOrNull = 75;
    FUNCarrayMap = 76;
    FUNCarrayMax = 77;
    FUNCarrayMin = 78;
    FUNCarrayNormalizedGini = 79;
    FUNCarrayPartialReverseSort = 80;
    FUNCarrayPartialShuffle = 81;
    FUNCarrayPartialSort = 82;
    FUNCarrayPopBack = 83;
    FUNCarrayPopFront = 84;
    FUNCarrayPRAUC = 85;
    FUNCarrayProduct = 86;
    FUNCarrayPushBack = 87;
    FUNCarrayPushFront = 88;
    FUNCarrayRandomSample = 89;
    FUNCarrayReduce = 90;
    FUNCarrayReduceInRanges = 91;
    FUNCarrayResize = 92;
    FUNCarrayReverse = 93;
    FUNCarrayReverseFill = 94;
    FUNCarrayReverseSort = 95;
    FUNCarrayReverseSplit = 96;
    FUNCarrayROCAUC = 97;
    FUNCarrayRotateLeft = 98;
    FUNCarrayRotateRight = 99;
    FUNCarrayShiftLeft = 100;
    FUNCarrayShiftRight = 101;
    FUNCarrayShingles = 102;
    FUNCarrayShuffle = 103;
    FUNCarraySlice = 104;
    FUNCarraySort = 105;
    FUNCarraySplit = 106;
    FUNCarrayStringConcat = 107;
    FUNCarraySum = 108;
    FUNCarraySymmetricDifference = 109;
    FUNCarrayUnion = 110;
    FUNCarrayUniq = 111;
    FUNCarrayWithConstant = 112;
    FUNCarrayZip = 113;
    FUNCarrayZipUnaligned = 114;
    FUNCascii = 115;
    FUNCasin = 116;
    FUNCasinh = 117;
    FUNCassumeNotNull = 118;
    FUNCatan = 119;
    FUNCatan2 = 120;
    FUNCatanh = 121;
    FUNCavg = 122;
    FUNCavgWeighted = 123;
    FUNCbar = 124;
    FUNCbase58Decode = 125;
    FUNCbase58Encode = 126;
    FUNCbase64Decode = 127;
    FUNCbase64Encode = 128;
    FUNCbase64URLDecode = 129;
    FUNCbase64URLEncode = 130;
    FUNCbasename = 131;
    FUNCbin = 132;
    FUNCBIT_AND = 133;
    FUNCBIT_OR = 134;
    FUNCBIT_XOR = 135;
    FUNCbitAnd = 136;
    FUNCbitCount = 137;
    FUNCbitHammingDistance = 138;
    FUNCbitmapAnd = 139;
    FUNCbitmapAndCardinality = 140;
    FUNCbitmapAndnot = 141;
    FUNCbitmapAndnotCardinality = 142;
    FUNCbitmapBuild = 143;
    FUNCbitmapCardinality = 144;
    FUNCbitmapContains = 145;
    FUNCbitmapHasAll = 146;
    FUNCbitmapHasAny = 147;
    FUNCbitmapMax = 148;
    FUNCbitmapMin = 149;
    FUNCbitmapOr = 150;
    FUNCbitmapOrCardinality = 151;
    FUNCbitmapSubsetInRange = 152;
    FUNCbitmapSubsetLimit = 153;
    FUNCbitmapToArray = 154;
    FUNCbitmapTransform = 155;
    FUNCbitmapXor = 156;
    FUNCbitmapXorCardinality = 157;
    FUNCbitmaskToArray = 158;
    FUNCbitmaskToList = 159;
    FUNCbitNot = 160;
    FUNCbitOr = 161;
    FUNCbitPositionsToArray = 162;
    FUNCbitRotateLeft = 163;
    FUNCbitRotateRight = 164;
    FUNCbitShiftLeft = 165;
    FUNCbitShiftRight = 166;
    FUNCbitSlice = 167;
    FUNCbitTest = 168;
    FUNCbitTestAll = 169;
    FUNCbitTestAny = 170;
    FUNCbitXor = 171;
    FUNCBLAKE3 = 172;
    FUNCblockNumber = 173;
    FUNCblockSerializedSize = 174;
    FUNCblockSize = 175;
    FUNCboundingRatio = 176;
    FUNCbuildId = 177;
    FUNCbyteHammingDistance = 178;
    FUNCbyteSize = 179;
    FUNCbyteSlice = 180;
    FUNCbyteSwap = 181;
    FUNCcaseWithExpr = 182;
    FUNCcaseWithExpression = 183;
    FUNCcaseWithoutExpr = 184;
    FUNCcaseWithoutExpression = 185;
    FUNCCAST = 186;
    FUNCcatboostEvaluate = 187;
    FUNCcategoricalInformationValue = 188;
    FUNCcbrt = 189;
    FUNCceil = 190;
    FUNCceiling = 191;
    FUNCchangeDay = 192;
    FUNCchangeHour = 193;
    FUNCchangeMinute = 194;
    FUNCchangeMonth = 195;
    FUNCchangeSecond = 196;
    FUNCchangeYear = 197;
    FUNCchar = 198;
    FUNCCHAR_LENGTH = 199;
    FUNCCHARACTER_LENGTH = 200;
    FUNCcityHash64 = 201;
    FUNCclamp = 202;
    FUNCcoalesce = 203;
    FUNCcompareSubstrings = 204;
    FUNCconcat = 205;
    FUNCconcat_ws = 206;
    FUNCconcatAssumeInjective = 207;
    FUNCconcatWithSeparator = 208;
    FUNCconcatWithSeparatorAssumeInjective = 209;
    FUNCconnection_id = 210;
    FUNCconnectionId = 211;
    FUNCcontingency = 212;
    FUNCconvertCharset = 213;
    FUNCcorr = 214;
    FUNCcorrMatrix = 215;
    FUNCcorrStable = 216;
    FUNCcos = 217;
    FUNCcosh = 218;
    FUNCcosineDistance = 219;
    FUNCcount = 220;
    FUNCcountDigits = 221;
    FUNCcountEqual = 222;
    FUNCcountMatches = 223;
    FUNCcountMatchesCaseInsensitive = 224;
    FUNCcountSubstrings = 225;
    FUNCcountSubstringsCaseInsensitive = 226;
    FUNCcountSubstringsCaseInsensitiveUTF8 = 227;
    FUNCCOVAR_POP = 228;
    FUNCCOVAR_SAMP = 229;
    FUNCcovarPop = 230;
    FUNCcovarPopMatrix = 231;
    FUNCcovarPopStable = 232;
    FUNCcovarSamp = 233;
    FUNCcovarSampMatrix = 234;
    FUNCcovarSampStable = 235;
    FUNCcramersV = 236;
    FUNCcramersVBiasCorrected = 237;
    FUNCCRC32 = 238;
    FUNCCRC32IEEE = 239;
    FUNCCRC64 = 240;
    FUNCcurdate = 241;
    FUNCcurrent_database = 242;
    FUNCcurrent_date = 243;
    FUNCcurrent_schemas = 244;
    FUNCcurrent_timestamp = 245;
    FUNCcurrent_user = 246;
    FUNCcurrentDatabase = 247;
    FUNCcurrentProfiles = 248;
    FUNCcurrentRoles = 249;
    FUNCcurrentSchemas = 250;
    FUNCcurrentUser = 251;
    FUNCcutFragment = 252;
    FUNCcutIPv6 = 253;
    FUNCcutQueryString = 254;
    FUNCcutQueryStringAndFragment = 255;
    FUNCcutToFirstSignificantSubdomain = 256;
    FUNCcutToFirstSignificantSubdomainCustom = 257;
    FUNCcutToFirstSignificantSubdomainCustomRFC = 258;
    FUNCcutToFirstSignificantSubdomainCustomWithWWW = 259;
    FUNCcutToFirstSignificantSubdomainCustomWithWWWRFC = 260;
    FUNCcutToFirstSignificantSubdomainRFC = 261;
    FUNCcutToFirstSignificantSubdomainWithWWW = 262;
    FUNCcutToFirstSignificantSubdomainWithWWWRFC = 263;
    FUNCcutURLParameter = 264;
    FUNCcutWWW = 265;
    FUNCdamerauLevenshteinDistance = 266;
    FUNCDATABASE = 267;
    FUNCDATE = 268;
    FUNCdate_add = 269;
    FUNCdate_diff = 270;
    FUNCDATE_FORMAT = 271;
    FUNCdate_sub = 272;
    FUNCDATE_TRUNC = 273;
    FUNCdateDiff = 274;
    FUNCdateName = 275;
    FUNCdateTime64ToSnowflake = 276;
    FUNCdateTime64ToSnowflakeID = 277;
    FUNCdateTimeToSnowflake = 278;
    FUNCdateTimeToSnowflakeID = 279;
    FUNCdateTrunc = 280;
    FUNCDAY = 281;
    FUNCDAYOFMONTH = 282;
    FUNCDAYOFWEEK = 283;
    FUNCDAYOFYEAR = 284;
    FUNCdecodeHTMLComponent = 285;
    FUNCdecodeURLComponent = 286;
    FUNCdecodeURLFormComponent = 287;
    FUNCdecodeXMLComponent = 288;
    FUNCdecrypt = 289;
    FUNCdefaultProfiles = 290;
    FUNCdefaultRoles = 291;
    FUNCdefaultValueOfArgumentType = 292;
    FUNCdefaultValueOfTypeName = 293;
    FUNCdegrees = 294;
    FUNCdeltaSum = 295;
    FUNCdeltaSumTimestamp = 296;
    FUNCdemangle = 297;
    FUNCdense_rank = 298;
    FUNCdenseRank = 299;
    FUNCdetectCharset = 300;
    FUNCdetectLanguage = 301;
    FUNCdetectLanguageMixed = 302;
    FUNCdetectLanguageUnknown = 303;
    FUNCdetectProgrammingLanguage = 304;
    FUNCdetectTonality = 305;
    FUNCdictGet = 306;
    FUNCdictGetAll = 307;
    FUNCdictGetChildren = 308;
    FUNCdictGetDate = 309;
    FUNCdictGetDateTime = 310;
    FUNCdictGetDescendants = 311;
    FUNCdictGetFloat32 = 312;
    FUNCdictGetFloat64 = 313;
    FUNCdictGetHierarchy = 314;
    FUNCdictGetInt16 = 315;
    FUNCdictGetInt32 = 316;
    FUNCdictGetInt64 = 317;
    FUNCdictGetInt8 = 318;
    FUNCdictGetIPv4 = 319;
    FUNCdictGetIPv6 = 320;
    FUNCdictGetString = 321;
    FUNCdictGetUInt16 = 322;
    FUNCdictGetUInt32 = 323;
    FUNCdictGetUInt64 = 324;
    FUNCdictGetUInt8 = 325;
    FUNCdictGetUUID = 326;
    FUNCdictHas = 327;
    FUNCdictIsIn = 328;
    FUNCdisplayName = 329;
    FUNCdistanceL1 = 330;
    FUNCdistanceL2 = 331;
    FUNCdistanceL2Squared = 332;
    FUNCdistanceLinf = 333;
    FUNCdistanceLp = 334;
    FUNCdistinctDynamicTypes = 335;
    FUNCdistinctJSONPaths = 336;
    FUNCdistinctJSONPathsAndTypes = 337;
    FUNCdivide = 338;
    FUNCdivideDecimal = 339;
    FUNCdomain = 340;
    FUNCdomainRFC = 341;
    FUNCdomainWithoutWWW = 342;
    FUNCdomainWithoutWWWRFC = 343;
    FUNCdotProduct = 344;
    FUNCdumpColumnStructure = 345;
    FUNCdynamicElement = 346;
    FUNCdynamicType = 347;
    FUNCe = 348;
    FUNCeditDistance = 349;
    FUNCeditDistanceUTF8 = 350;
    FUNCempty = 351;
    FUNCemptyArrayDate = 352;
    FUNCemptyArrayDateTime = 353;
    FUNCemptyArrayFloat32 = 354;
    FUNCemptyArrayFloat64 = 355;
    FUNCemptyArrayInt16 = 356;
    FUNCemptyArrayInt32 = 357;
    FUNCemptyArrayInt64 = 358;
    FUNCemptyArrayInt8 = 359;
    FUNCemptyArrayString = 360;
    FUNCemptyArrayToSingle = 361;
    FUNCemptyArrayUInt16 = 362;
    FUNCemptyArrayUInt32 = 363;
    FUNCemptyArrayUInt64 = 364;
    FUNCemptyArrayUInt8 = 365;
    FUNCenabledProfiles = 366;
    FUNCenabledRoles = 367;
    FUNCencodeURLComponent = 368;
    FUNCencodeURLFormComponent = 369;
    FUNCencodeXMLComponent = 370;
    FUNCencrypt = 371;
    FUNCendsWith = 372;
    FUNCendsWithUTF8 = 373;
    FUNCentropy = 374;
    FUNCequals = 375;
    FUNCerf = 376;
    FUNCerfc = 377;
    FUNCerrorCodeToName = 378;
    FUNCestimateCompressionRatio = 379;
    FUNCevalMLMethod = 380;
    FUNCexp = 381;
    FUNCexp10 = 382;
    FUNCexp2 = 383;
    FUNCexponentialMovingAverage = 384;
    FUNCexponentialTimeDecayedAvg = 385;
    FUNCexponentialTimeDecayedCount = 386;
    FUNCexponentialTimeDecayedMax = 387;
    FUNCexponentialTimeDecayedSum = 388;
    FUNCextract = 389;
    FUNCextractAll = 390;
    FUNCextractAllGroups = 391;
    FUNCextractAllGroupsHorizontal = 392;
    FUNCextractAllGroupsVertical = 393;
    FUNCextractGroups = 394;
    FUNCextractKeyValuePairs = 395;
    FUNCextractKeyValuePairsWithEscaping = 396;
    FUNCextractTextFromHTML = 397;
    FUNCextractURLParameter = 398;
    FUNCextractURLParameterNames = 399;
    FUNCextractURLParameters = 400;
    FUNCfactorial = 401;
    FUNCfarmFingerprint64 = 402;
    FUNCfarmHash64 = 403;
    FUNCfile = 404;
    FUNCfilesystemAvailable = 405;
    FUNCfilesystemCapacity = 406;
    FUNCfilesystemUnreserved = 407;
    FUNCfinalizeAggregation = 408;
    FUNCfirst_value = 409;
    FUNCfirstLine = 410;
    FUNCfirstSignificantSubdomain = 411;
    FUNCfirstSignificantSubdomainCustom = 412;
    FUNCfirstSignificantSubdomainCustomRFC = 413;
    FUNCfirstSignificantSubdomainRFC = 414;
    FUNCflameGraph = 415;
    FUNCflatten = 416;
    FUNCflattenTuple = 417;
    FUNCfloor = 418;
    FUNCformat = 419;
    FUNCFORMAT_BYTES = 420;
    FUNCformatDateTime = 421;
    FUNCformatDateTimeInJodaSyntax = 422;
    FUNCformatQuery = 423;
    FUNCformatQuerySingleLine = 424;
    FUNCformatReadableDecimalSize = 425;
    FUNCformatReadableQuantity = 426;
    FUNCformatReadableSize = 427;
    FUNCformatReadableTimeDelta = 428;
    FUNCformatRow = 429;
    FUNCformatRowNoNewline = 430;
    FUNCfqdn = 431;
    FUNCfragment = 432;
    FUNCFROM_BASE64 = 433;
    FUNCFROM_DAYS = 434;
    FUNCFROM_UNIXTIME = 435;
    FUNCfrom_utc_timestamp = 436;
    FUNCfromDaysSinceYearZero = 437;
    FUNCfromDaysSinceYearZero32 = 438;
    FUNCfromModifiedJulianDay = 439;
    FUNCfromModifiedJulianDayOrNull = 440;
    FUNCfromUnixTimestamp = 441;
    FUNCfromUnixTimestamp64Micro = 442;
    FUNCfromUnixTimestamp64Milli = 443;
    FUNCfromUnixTimestamp64Nano = 444;
    FUNCfromUnixTimestamp64Second = 445;
    FUNCfromUnixTimestampInJodaSyntax = 446;
    FUNCfromUTCTimestamp = 447;
    FUNCfullHostName = 448;
    FUNCfuzzBits = 449;
    FUNCgccMurmurHash = 450;
    FUNCgcd = 451;
    FUNCgenerateRandomStructure = 452;
    FUNCgenerateSnowflakeID = 453;
    FUNCgenerateULID = 454;
    FUNCgenerateUUIDv4 = 455;
    FUNCgenerateUUIDv7 = 456;
    FUNCgeoDistance = 457;
    FUNCgeohashDecode = 458;
    FUNCgeohashEncode = 459;
    FUNCgeohashesInBox = 460;
    FUNCgeoToH3 = 461;
    FUNCgeoToS2 = 462;
    FUNCgetClientHTTPHeader = 463;
    FUNCgetMacro = 464;
    FUNCgetOSKernelVersion = 465;
    FUNCgetServerPort = 466;
    FUNCgetSetting = 467;
    FUNCgetSizeOfEnumType = 468;
    FUNCgetSubcolumn = 469;
    FUNCgetTypeSerializationStreams = 470;
    FUNCglobalIn = 471;
    FUNCglobalInIgnoreSet = 472;
    FUNCglobalNotIn = 473;
    FUNCglobalNotInIgnoreSet = 474;
    FUNCglobalNotNullIn = 475;
    FUNCglobalNotNullInIgnoreSet = 476;
    FUNCglobalNullIn = 477;
    FUNCglobalNullInIgnoreSet = 478;
    FUNCglobalVariable = 479;
    FUNCgreatCircleAngle = 480;
    FUNCgreatCircleDistance = 481;
    FUNCgreater = 482;
    FUNCgreaterOrEquals = 483;
    FUNCgreatest = 484;
    FUNCgroup_concat = 485;
    FUNCgroupArray = 486;
    FUNCgroupArrayInsertAt = 487;
    FUNCgroupArrayIntersect = 488;
    FUNCgroupArrayLast = 489;
    FUNCgroupArrayMovingAvg = 490;
    FUNCgroupArrayMovingSum = 491;
    FUNCgroupArraySample = 492;
    FUNCgroupArraySorted = 493;
    FUNCgroupBitAnd = 494;
    FUNCgroupBitmap = 495;
    FUNCgroupBitmapAnd = 496;
    FUNCgroupBitmapOr = 497;
    FUNCgroupBitmapXor = 498;
    FUNCgroupBitOr = 499;
    FUNCgroupBitXor = 500;
    FUNCgroupConcat = 501;
    FUNCgrouping = 502;
    FUNCgroupUniqArray = 503;
    FUNCh3CellAreaM2 = 504;
    FUNCh3CellAreaRads2 = 505;
    FUNCh3Distance = 506;
    FUNCh3EdgeAngle = 507;
    FUNCh3EdgeLengthKm = 508;
    FUNCh3EdgeLengthM = 509;
    FUNCh3ExactEdgeLengthKm = 510;
    FUNCh3ExactEdgeLengthM = 511;
    FUNCh3ExactEdgeLengthRads = 512;
    FUNCh3GetBaseCell = 513;
    FUNCh3GetDestinationIndexFromUnidirectionalEdge = 514;
    FUNCh3GetFaces = 515;
    FUNCh3GetIndexesFromUnidirectionalEdge = 516;
    FUNCh3GetOriginIndexFromUnidirectionalEdge = 517;
    FUNCh3GetPentagonIndexes = 518;
    FUNCh3GetRes0Indexes = 519;
    FUNCh3GetResolution = 520;
    FUNCh3GetUnidirectionalEdge = 521;
    FUNCh3GetUnidirectionalEdgeBoundary = 522;
    FUNCh3GetUnidirectionalEdgesFromHexagon = 523;
    FUNCh3HexAreaKm2 = 524;
    FUNCh3HexAreaM2 = 525;
    FUNCh3HexRing = 526;
    FUNCh3IndexesAreNeighbors = 527;
    FUNCh3IsPentagon = 528;
    FUNCh3IsResClassIII = 529;
    FUNCh3IsValid = 530;
    FUNCh3kRing = 531;
    FUNCh3Line = 532;
    FUNCh3NumHexagons = 533;
    FUNCh3PointDistKm = 534;
    FUNCh3PointDistM = 535;
    FUNCh3PointDistRads = 536;
    FUNCh3ToCenterChild = 537;
    FUNCh3ToChildren = 538;
    FUNCh3ToGeo = 539;
    FUNCh3ToGeoBoundary = 540;
    FUNCh3ToParent = 541;
    FUNCh3ToString = 542;
    FUNCh3UnidirectionalEdgeIsValid = 543;
    FUNChalfMD5 = 544;
    FUNChas = 545;
    FUNChasAll = 546;
    FUNChasAny = 547;
    FUNChasColumnInTable = 548;
    FUNChasSubsequence = 549;
    FUNChasSubsequenceCaseInsensitive = 550;
    FUNChasSubsequenceCaseInsensitiveUTF8 = 551;
    FUNChasSubsequenceUTF8 = 552;
    FUNChasSubstr = 553;
    FUNChasThreadFuzzer = 554;
    FUNChasToken = 555;
    FUNChasTokenCaseInsensitive = 556;
    FUNChasTokenCaseInsensitiveOrNull = 557;
    FUNChasTokenOrNull = 558;
    FUNChex = 559;
    FUNChilbertDecode = 560;
    FUNChilbertEncode = 561;
    FUNChistogram = 562;
    FUNChiveHash = 563;
    FUNChop = 564;
    FUNChopEnd = 565;
    FUNChopStart = 566;
    FUNChostname = 567;
    FUNCHOUR = 568;
    FUNChypot = 569;
    FUNCidentity = 570;
    FUNCidnaDecode = 571;
    FUNCidnaEncode = 572;
    FUNCif = 573;
    FUNCifNotFinite = 574;
    FUNCifNull = 575;
    FUNCignore = 576;
    FUNCilike = 577;
    FUNCin = 578;
    FUNCindexHint = 579;
    FUNCindexOf = 580;
    FUNCindexOfAssumeSorted = 581;
    FUNCINET6_ATON = 582;
    FUNCINET6_NTOA = 583;
    FUNCINET_ATON = 584;
    FUNCINET_NTOA = 585;
    FUNCinIgnoreSet = 586;
    FUNCinitcap = 587;
    FUNCinitcapUTF8 = 588;
    FUNCinitial_query_id = 589;
    FUNCinitializeAggregation = 590;
    FUNCinitialQueryID = 591;
    FUNCinitialQueryStartTime = 592;
    FUNCinstr = 593;
    FUNCintDiv = 594;
    FUNCintDivOrZero = 595;
    FUNCintervalLengthSum = 596;
    FUNCintExp10 = 597;
    FUNCintExp2 = 598;
    FUNCintHash32 = 599;
    FUNCintHash64 = 600;
    FUNCIPv4CIDRToRange = 601;
    FUNCIPv4NumToString = 602;
    FUNCIPv4NumToStringClassC = 603;
    FUNCIPv4StringToNum = 604;
    FUNCIPv4StringToNumOrDefault = 605;
    FUNCIPv4StringToNumOrNull = 606;
    FUNCIPv4ToIPv6 = 607;
    FUNCIPv6CIDRToRange = 608;
    FUNCIPv6NumToString = 609;
    FUNCIPv6StringToNum = 610;
    FUNCIPv6StringToNumOrDefault = 611;
    FUNCIPv6StringToNumOrNull = 612;
    FUNCisConstant = 613;
    FUNCisDecimalOverflow = 614;
    FUNCisDynamicElementInSharedData = 615;
    FUNCisFinite = 616;
    FUNCisInfinite = 617;
    FUNCisIPAddressInRange = 618;
    FUNCisIPv4String = 619;
    FUNCisIPv6String = 620;
    FUNCisNaN = 621;
    FUNCisNotDistinctFrom = 622;
    FUNCisNotNull = 623;
    FUNCisNull = 624;
    FUNCisNullable = 625;
    FUNCisValidJSON = 626;
    FUNCisValidUTF8 = 627;
    FUNCisZeroOrNull = 628;
    FUNCjaroSimilarity = 629;
    FUNCjaroWinklerSimilarity = 630;
    FUNCjavaHash = 631;
    FUNCjavaHashUTF16LE = 632;
    FUNCjoinGet = 633;
    FUNCJSON_ARRAY_LENGTH = 634;
    FUNCJSON_EXISTS = 635;
    FUNCJSON_QUERY = 636;
    FUNCJSON_VALUE = 637;
    FUNCJSONAllPaths = 638;
    FUNCJSONAllPathsWithTypes = 639;
    FUNCJSONArrayLength = 640;
    FUNCJSONDynamicPaths = 641;
    FUNCJSONDynamicPathsWithTypes = 642;
    FUNCJSONEmpty = 643;
    FUNCJSONExtract = 644;
    FUNCJSONExtractArrayRaw = 645;
    FUNCJSONExtractBool = 646;
    FUNCJSONExtractFloat = 647;
    FUNCJSONExtractInt = 648;
    FUNCJSONExtractKeys = 649;
    FUNCJSONExtractKeysAndValues = 650;
    FUNCJSONExtractKeysAndValuesRaw = 651;
    FUNCJSONExtractRaw = 652;
    FUNCJSONExtractString = 653;
    FUNCJSONExtractUInt = 654;
    FUNCJSONHas = 655;
    FUNCJSONKey = 656;
    FUNCJSONLength = 657;
    FUNCJSONMergePatch = 658;
    FUNCJSONSharedDataPaths = 659;
    FUNCJSONSharedDataPathsWithTypes = 660;
    FUNCJSONType = 661;
    FUNCjumpConsistentHash = 662;
    FUNCkafkaMurmurHash = 663;
    FUNCkeccak256 = 664;
    FUNCkolmogorovSmirnovTest = 665;
    FUNCkostikConsistentHash = 666;
    FUNCkql_array_sort_asc = 667;
    FUNCkql_array_sort_desc = 668;
    FUNCkurtPop = 669;
    FUNCkurtSamp = 670;
    FUNCL1Distance = 671;
    FUNCL1Norm = 672;
    FUNCL1Normalize = 673;
    FUNCL2Distance = 674;
    FUNCL2Norm = 675;
    FUNCL2Normalize = 676;
    FUNCL2SquaredDistance = 677;
    FUNCL2SquaredNorm = 678;
    FUNClagInFrame = 679;
    FUNClargestTriangleThreeBuckets = 680;
    FUNCLAST_DAY = 681;
    FUNClast_value = 682;
    FUNClcase = 683;
    FUNClcm = 684;
    FUNCleadInFrame = 685;
    FUNCleast = 686;
    FUNCleft = 687;
    FUNCleftPad = 688;
    FUNCleftPadUTF8 = 689;
    FUNCleftUTF8 = 690;
    FUNClemmatize = 691;
    FUNClength = 692;
    FUNClengthUTF8 = 693;
    FUNCless = 694;
    FUNClessOrEquals = 695;
    FUNClevenshteinDistance = 696;
    FUNClevenshteinDistanceUTF8 = 697;
    FUNClgamma = 698;
    FUNClike = 699;
    FUNCLinfDistance = 700;
    FUNCLinfNorm = 701;
    FUNCLinfNormalize = 702;
    FUNCln = 703;
    FUNClocate = 704;
    FUNClog = 705;
    FUNClog10 = 706;
    FUNClog1p = 707;
    FUNClog2 = 708;
    FUNClogTrace = 709;
    FUNClowCardinalityIndices = 710;
    FUNClowCardinalityKeys = 711;
    FUNClower = 712;
    FUNClowerUTF8 = 713;
    FUNClpad = 714;
    FUNCLpDistance = 715;
    FUNCLpNorm = 716;
    FUNCLpNormalize = 717;
    FUNCltrim = 718;
    FUNClttb = 719;
    FUNCMACNumToString = 720;
    FUNCMACStringToNum = 721;
    FUNCMACStringToOUI = 722;
    FUNCmakeDate = 723;
    FUNCmakeDate32 = 724;
    FUNCmakeDateTime = 725;
    FUNCmakeDateTime64 = 726;
    FUNCmannWhitneyUTest = 727;
    FUNCmap = 728;
    FUNCMAP_FROM_ARRAYS = 729;
    FUNCmapAdd = 730;
    FUNCmapAll = 731;
    FUNCmapApply = 732;
    FUNCmapConcat = 733;
    FUNCmapContains = 734;
    FUNCmapContainsKeyLike = 735;
    FUNCmapExists = 736;
    FUNCmapExtractKeyLike = 737;
    FUNCmapFilter = 738;
    FUNCmapFromArrays = 739;
    FUNCmapFromString = 740;
    FUNCmapKeys = 741;
    FUNCmapPartialReverseSort = 742;
    FUNCmapPartialSort = 743;
    FUNCmapPopulateSeries = 744;
    FUNCmapReverseSort = 745;
    FUNCmapSort = 746;
    FUNCmapSubtract = 747;
    FUNCmapUpdate = 748;
    FUNCmapValues = 749;
    FUNCmatch = 750;
    FUNCmaterialize = 751;
    FUNCmax = 752;
    FUNCmax2 = 753;
    FUNCmaxIntersections = 754;
    FUNCmaxIntersectionsPosition = 755;
    FUNCmaxMap = 756;
    FUNCmaxMappedArrays = 757;
    FUNCMD4 = 758;
    FUNCMD5 = 759;
    FUNCmeanZTest = 760;
    FUNCmedian = 761;
    FUNCmedianBFloat16 = 762;
    FUNCmedianBFloat16Weighted = 763;
    FUNCmedianDD = 764;
    FUNCmedianDeterministic = 765;
    FUNCmedianExact = 766;
    FUNCmedianExactHigh = 767;
    FUNCmedianExactLow = 768;
    FUNCmedianExactWeighted = 769;
    FUNCmedianGK = 770;
    FUNCmedianInterpolatedWeighted = 771;
    FUNCmedianTDigest = 772;
    FUNCmedianTDigestWeighted = 773;
    FUNCmedianTiming = 774;
    FUNCmedianTimingWeighted = 775;
    FUNCmetroHash64 = 776;
    FUNCmid = 777;
    FUNCMILLISECOND = 778;
    FUNCmin = 779;
    FUNCmin2 = 780;
    FUNCminMap = 781;
    FUNCminMappedArrays = 782;
    FUNCminSampleSizeContinous = 783;
    FUNCminSampleSizeContinuous = 784;
    FUNCminSampleSizeConversion = 785;
    FUNCminus = 786;
    FUNCMINUTE = 787;
    FUNCmismatches = 788;
    FUNCmod = 789;
    FUNCmodulo = 790;
    FUNCmoduloLegacy = 791;
    FUNCmoduloOrZero = 792;
    FUNCMONTH = 793;
    FUNCmonthName = 794;
    FUNCmortonDecode = 795;
    FUNCmortonEncode = 796;
    FUNCmultiFuzzyMatchAllIndices = 797;
    FUNCmultiFuzzyMatchAny = 798;
    FUNCmultiFuzzyMatchAnyIndex = 799;
    FUNCmultiIf = 800;
    FUNCmultiMatchAllIndices = 801;
    FUNCmultiMatchAny = 802;
    FUNCmultiMatchAnyIndex = 803;
    FUNCmultiply = 804;
    FUNCmultiplyDecimal = 805;
    FUNCmultiSearchAllPositions = 806;
    FUNCmultiSearchAllPositionsCaseInsensitive = 807;
    FUNCmultiSearchAllPositionsCaseInsensitiveUTF8 = 808;
    FUNCmultiSearchAllPositionsUTF8 = 809;
    FUNCmultiSearchAny = 810;
    FUNCmultiSearchAnyCaseInsensitive = 811;
    FUNCmultiSearchAnyCaseInsensitiveUTF8 = 812;
    FUNCmultiSearchAnyUTF8 = 813;
    FUNCmultiSearchFirstIndex = 814;
    FUNCmultiSearchFirstIndexCaseInsensitive = 815;
    FUNCmultiSearchFirstIndexCaseInsensitiveUTF8 = 816;
    FUNCmultiSearchFirstIndexUTF8 = 817;
    FUNCmultiSearchFirstPosition = 818;
    FUNCmultiSearchFirstPositionCaseInsensitive = 819;
    FUNCmultiSearchFirstPositionCaseInsensitiveUTF8 = 820;
    FUNCmultiSearchFirstPositionUTF8 = 821;
    FUNCmurmurHash2_32 = 822;
    FUNCmurmurHash2_64 = 823;
    FUNCmurmurHash3_128 = 824;
    FUNCmurmurHash3_32 = 825;
    FUNCmurmurHash3_64 = 826;
    FUNCnegate = 827;
    FUNCneighbor = 828;
    FUNCnested = 829;
    FUNCnetloc = 830;
    FUNCngramDistance = 831;
    FUNCngramDistanceCaseInsensitive = 832;
    FUNCngramDistanceCaseInsensitiveUTF8 = 833;
    FUNCngramDistanceUTF8 = 834;
    FUNCngramMinHash = 835;
    FUNCngramMinHashArg = 836;
    FUNCngramMinHashArgCaseInsensitive = 837;
    FUNCngramMinHashArgCaseInsensitiveUTF8 = 838;
    FUNCngramMinHashArgUTF8 = 839;
    FUNCngramMinHashCaseInsensitive = 840;
    FUNCngramMinHashCaseInsensitiveUTF8 = 841;
    FUNCngramMinHashUTF8 = 842;
    FUNCngrams = 843;
    FUNCngramSearch = 844;
    FUNCngramSearchCaseInsensitive = 845;
    FUNCngramSearchCaseInsensitiveUTF8 = 846;
    FUNCngramSearchUTF8 = 847;
    FUNCngramSimHash = 848;
    FUNCngramSimHashCaseInsensitive = 849;
    FUNCngramSimHashCaseInsensitiveUTF8 = 850;
    FUNCngramSimHashUTF8 = 851;
    FUNCnonNegativeDerivative = 852;
    FUNCnormalizedQueryHash = 853;
    FUNCnormalizedQueryHashKeepNames = 854;
    FUNCnormalizeL1 = 855;
    FUNCnormalizeL2 = 856;
    FUNCnormalizeLinf = 857;
    FUNCnormalizeLp = 858;
    FUNCnormalizeQuery = 859;
    FUNCnormalizeQueryKeepNames = 860;
    FUNCnormalizeUTF8NFC = 861;
    FUNCnormalizeUTF8NFD = 862;
    FUNCnormalizeUTF8NFKC = 863;
    FUNCnormalizeUTF8NFKD = 864;
    FUNCnormL1 = 865;
    FUNCnormL2 = 866;
    FUNCnormL2Squared = 867;
    FUNCnormLinf = 868;
    FUNCnormLp = 869;
    FUNCnot = 870;
    FUNCnotEmpty = 871;
    FUNCnotEquals = 872;
    FUNCnothing = 873;
    FUNCnothingUInt64 = 874;
    FUNCnotILike = 875;
    FUNCnotIn = 876;
    FUNCnotInIgnoreSet = 877;
    FUNCnotLike = 878;
    FUNCnotNullIn = 879;
    FUNCnotNullInIgnoreSet = 880;
    FUNCnow = 881;
    FUNCnow64 = 882;
    FUNCnowInBlock = 883;
    FUNCnth_value = 884;
    FUNCntile = 885;
    FUNCnullIf = 886;
    FUNCnullIn = 887;
    FUNCnullInIgnoreSet = 888;
    FUNCOCTET_LENGTH = 889;
    FUNCor = 890;
    FUNCoverlay = 891;
    FUNCoverlayUTF8 = 892;
    FUNCparseDateTime = 893;
    FUNCparseDateTime32BestEffort = 894;
    FUNCparseDateTime32BestEffortOrNull = 895;
    FUNCparseDateTime32BestEffortOrZero = 896;
    FUNCparseDateTime64BestEffort = 897;
    FUNCparseDateTime64BestEffortOrNull = 898;
    FUNCparseDateTime64BestEffortOrZero = 899;
    FUNCparseDateTime64BestEffortUS = 900;
    FUNCparseDateTime64BestEffortUSOrNull = 901;
    FUNCparseDateTime64BestEffortUSOrZero = 902;
    FUNCparseDateTimeBestEffort = 903;
    FUNCparseDateTimeBestEffortOrNull = 904;
    FUNCparseDateTimeBestEffortOrZero = 905;
    FUNCparseDateTimeBestEffortUS = 906;
    FUNCparseDateTimeBestEffortUSOrNull = 907;
    FUNCparseDateTimeBestEffortUSOrZero = 908;
    FUNCparseDateTimeInJodaSyntax = 909;
    FUNCparseDateTimeInJodaSyntaxOrNull = 910;
    FUNCparseDateTimeInJodaSyntaxOrZero = 911;
    FUNCparseDateTimeOrNull = 912;
    FUNCparseDateTimeOrZero = 913;
    FUNCparseReadableSize = 914;
    FUNCparseReadableSizeOrZero = 915;
    FUNCparseTimeDelta = 916;
    FUNCpartitionID = 917;
    FUNCpath = 918;
    FUNCpathFull = 919;
    FUNCpercent_rank = 920;
    FUNCpercentRank = 921;
    FUNCpi = 922;
    FUNCplus = 923;
    FUNCpmod = 924;
    FUNCpointInEllipses = 925;
    FUNCpointInPolygon = 926;
    FUNCpolygonAreaCartesian = 927;
    FUNCpolygonAreaSpherical = 928;
    FUNCpolygonConvexHullCartesian = 929;
    FUNCpolygonPerimeterCartesian = 930;
    FUNCpolygonPerimeterSpherical = 931;
    FUNCpolygonsDistanceCartesian = 932;
    FUNCpolygonsDistanceSpherical = 933;
    FUNCpolygonsEqualsCartesian = 934;
    FUNCpolygonsIntersectionCartesian = 935;
    FUNCpolygonsIntersectionSpherical = 936;
    FUNCpolygonsSymDifferenceCartesian = 937;
    FUNCpolygonsSymDifferenceSpherical = 938;
    FUNCpolygonsUnionCartesian = 939;
    FUNCpolygonsUnionSpherical = 940;
    FUNCpolygonsWithinCartesian = 941;
    FUNCpolygonsWithinSpherical = 942;
    FUNCport = 943;
    FUNCportRFC = 944;
    FUNCposition = 945;
    FUNCpositionCaseInsensitive = 946;
    FUNCpositionCaseInsensitiveUTF8 = 947;
    FUNCpositionUTF8 = 948;
    FUNCpositive_modulo = 949;
    FUNCpositiveModulo = 950;
    FUNCpow = 951;
    FUNCpower = 952;
    FUNCprintf = 953;
    FUNCproportionsZTest = 954;
    FUNCprotocol = 955;
    FUNCpunycodeDecode = 956;
    FUNCpunycodeEncode = 957;
    FUNCquantile = 958;
    FUNCquantileBFloat16 = 959;
    FUNCquantileBFloat16Weighted = 960;
    FUNCquantileDD = 961;
    FUNCquantileDeterministic = 962;
    FUNCquantileExact = 963;
    FUNCquantileExactExclusive = 964;
    FUNCquantileExactHigh = 965;
    FUNCquantileExactInclusive = 966;
    FUNCquantileExactLow = 967;
    FUNCquantileExactWeighted = 968;
    FUNCquantileGK = 969;
    FUNCquantileInterpolatedWeighted = 970;
    FUNCquantiles = 971;
    FUNCquantilesBFloat16 = 972;
    FUNCquantilesBFloat16Weighted = 973;
    FUNCquantilesDD = 974;
    FUNCquantilesDeterministic = 975;
    FUNCquantilesExact = 976;
    FUNCquantilesExactExclusive = 977;
    FUNCquantilesExactHigh = 978;
    FUNCquantilesExactInclusive = 979;
    FUNCquantilesExactLow = 980;
    FUNCquantilesExactWeighted = 981;
    FUNCquantilesGK = 982;
    FUNCquantilesInterpolatedWeighted = 983;
    FUNCquantilesTDigest = 984;
    FUNCquantilesTDigestWeighted = 985;
    FUNCquantilesTiming = 986;
    FUNCquantilesTimingWeighted = 987;
    FUNCquantileTDigest = 988;
    FUNCquantileTDigestWeighted = 989;
    FUNCquantileTiming = 990;
    FUNCquantileTimingWeighted = 991;
    FUNCQUARTER = 992;
    FUNCquery_id = 993;
    FUNCqueryID = 994;
    FUNCqueryString = 995;
    FUNCqueryStringAndFragment = 996;
    FUNCradians = 997;
    FUNCrand = 998;
    FUNCrand32 = 999;
    FUNCrand64 = 1000;
    FUNCrandBernoulli = 1001;
    FUNCrandBinomial = 1002;
    FUNCrandCanonical = 1003;
    FUNCrandChiSquared = 1004;
    FUNCrandConstant = 1005;
    FUNCrandExponential = 1006;
    FUNCrandFisherF = 1007;
    FUNCrandLogNormal = 1008;
    FUNCrandNegativeBinomial = 1009;
    FUNCrandNormal = 1010;
    FUNCrandomFixedString = 1011;
    FUNCrandomPrintableASCII = 1012;
    FUNCrandomString = 1013;
    FUNCrandomStringUTF8 = 1014;
    FUNCrandPoisson = 1015;
    FUNCrandStudentT = 1016;
    FUNCrandUniform = 1017;
    FUNCrange = 1018;
    FUNCrank = 1019;
    FUNCrankCorr = 1020;
    FUNCreadWKTLineString = 1021;
    FUNCreadWKTMultiLineString = 1022;
    FUNCreadWKTMultiPolygon = 1023;
    FUNCreadWKTPoint = 1024;
    FUNCreadWKTPolygon = 1025;
    FUNCreadWKTRing = 1026;
    FUNCREGEXP_EXTRACT = 1027;
    FUNCREGEXP_MATCHES = 1028;
    FUNCREGEXP_REPLACE = 1029;
    FUNCregexpExtract = 1030;
    FUNCregexpQuoteMeta = 1031;
    FUNCregionHierarchy = 1032;
    FUNCregionIn = 1033;
    FUNCregionToArea = 1034;
    FUNCregionToCity = 1035;
    FUNCregionToContinent = 1036;
    FUNCregionToCountry = 1037;
    FUNCregionToDistrict = 1038;
    FUNCregionToName = 1039;
    FUNCregionToPopulation = 1040;
    FUNCregionToTopContinent = 1041;
    FUNCreinterpret = 1042;
    FUNCreinterpretAsDate = 1043;
    FUNCreinterpretAsDateTime = 1044;
    FUNCreinterpretAsFixedString = 1045;
    FUNCreinterpretAsFloat32 = 1046;
    FUNCreinterpretAsFloat64 = 1047;
    FUNCreinterpretAsInt128 = 1048;
    FUNCreinterpretAsInt16 = 1049;
    FUNCreinterpretAsInt256 = 1050;
    FUNCreinterpretAsInt32 = 1051;
    FUNCreinterpretAsInt64 = 1052;
    FUNCreinterpretAsInt8 = 1053;
    FUNCreinterpretAsString = 1054;
    FUNCreinterpretAsUInt128 = 1055;
    FUNCreinterpretAsUInt16 = 1056;
    FUNCreinterpretAsUInt256 = 1057;
    FUNCreinterpretAsUInt32 = 1058;
    FUNCreinterpretAsUInt64 = 1059;
    FUNCreinterpretAsUInt8 = 1060;
    FUNCreinterpretAsUUID = 1061;
    FUNCrepeat = 1062;
    FUNCreplace = 1063;
    FUNCreplaceAll = 1064;
    FUNCreplaceOne = 1065;
    FUNCreplaceRegexpAll = 1066;
    FUNCreplaceRegexpOne = 1067;
    FUNCreplicate = 1068;
    FUNCretention = 1069;
    FUNCreverse = 1070;
    FUNCreverseUTF8 = 1071;
    FUNCrevision = 1072;
    FUNCright = 1073;
    FUNCrightPad = 1074;
    FUNCrightPadUTF8 = 1075;
    FUNCrightUTF8 = 1076;
    FUNCRIPEMD160 = 1077;
    FUNCround = 1078;
    FUNCroundAge = 1079;
    FUNCroundBankers = 1080;
    FUNCroundDown = 1081;
    FUNCroundDuration = 1082;
    FUNCroundToExp2 = 1083;
    FUNCrow_number = 1084;
    FUNCrowNumberInAllBlocks = 1085;
    FUNCrowNumberInBlock = 1086;
    FUNCrpad = 1087;
    FUNCrtrim = 1088;
    FUNCrunningAccumulate = 1089;
    FUNCrunningConcurrency = 1090;
    FUNCrunningDifference = 1091;
    FUNCrunningDifferenceStartingWithFirstValue = 1092;
    FUNCs2CapContains = 1093;
    FUNCs2CapUnion = 1094;
    FUNCs2CellsIntersect = 1095;
    FUNCs2GetNeighbors = 1096;
    FUNCs2RectAdd = 1097;
    FUNCs2RectContains = 1098;
    FUNCs2RectIntersection = 1099;
    FUNCs2RectUnion = 1100;
    FUNCs2ToGeo = 1101;
    FUNCscalarProduct = 1102;
    FUNCSCHEMA = 1103;
    FUNCSECOND = 1104;
    FUNCsequenceCount = 1105;
    FUNCsequenceMatch = 1106;
    FUNCsequenceNextNode = 1107;
    FUNCseriesDecomposeSTL = 1108;
    FUNCseriesOutliersDetectTukey = 1109;
    FUNCseriesPeriodDetectFFT = 1110;
    FUNCserverTimeZone = 1111;
    FUNCserverUUID = 1112;
    FUNCSHA1 = 1113;
    FUNCSHA224 = 1114;
    FUNCSHA256 = 1115;
    FUNCSHA384 = 1116;
    FUNCSHA512 = 1117;
    FUNCSHA512_256 = 1118;
    FUNCshardCount = 1119;
    FUNCshardNum = 1120;
    FUNCshowCertificate = 1121;
    FUNCsigmoid = 1122;
    FUNCsign = 1123;
    FUNCsimpleJSONExtractBool = 1124;
    FUNCsimpleJSONExtractFloat = 1125;
    FUNCsimpleJSONExtractInt = 1126;
    FUNCsimpleJSONExtractRaw = 1127;
    FUNCsimpleJSONExtractString = 1128;
    FUNCsimpleJSONExtractUInt = 1129;
    FUNCsimpleJSONHas = 1130;
    FUNCsimpleLinearRegression = 1131;
    FUNCsin = 1132;
    FUNCsingleValueOrNull = 1133;
    FUNCsinh = 1134;
    FUNCsipHash128 = 1135;
    FUNCsipHash128Keyed = 1136;
    FUNCsipHash128Reference = 1137;
    FUNCsipHash128ReferenceKeyed = 1138;
    FUNCsipHash64 = 1139;
    FUNCsipHash64Keyed = 1140;
    FUNCskewPop = 1141;
    FUNCskewSamp = 1142;
    FUNCsleep = 1143;
    FUNCsleepEachRow = 1144;
    FUNCsnowflakeIDToDateTime = 1145;
    FUNCsnowflakeIDToDateTime64 = 1146;
    FUNCsnowflakeToDateTime = 1147;
    FUNCsnowflakeToDateTime64 = 1148;
    FUNCsoundex = 1149;
    FUNCspace = 1150;
    FUNCsparkBar = 1151;
    FUNCsplitByAlpha = 1152;
    FUNCsplitByChar = 1153;
    FUNCsplitByNonAlpha = 1154;
    FUNCsplitByRegexp = 1155;
    FUNCsplitByString = 1156;
    FUNCsplitByWhitespace = 1157;
    FUNCsqid = 1158;
    FUNCsqidDecode = 1159;
    FUNCsqidEncode = 1160;
    FUNCsqrt = 1161;
    FUNCstartsWith = 1162;
    FUNCstartsWithUTF8 = 1163;
    FUNCSTD = 1164;
    FUNCSTDDEV_POP = 1165;
    FUNCSTDDEV_SAMP = 1166;
    FUNCstddevPop = 1167;
    FUNCstddevPopStable = 1168;
    FUNCstddevSamp = 1169;
    FUNCstddevSampStable = 1170;
    FUNCstem = 1171;
    FUNCstochasticLinearRegression = 1172;
    FUNCstochasticLogisticRegression = 1173;
    FUNCstr_to_date = 1174;
    FUNCstringJaccardIndex = 1175;
    FUNCstringJaccardIndexUTF8 = 1176;
    FUNCstringToH3 = 1177;
    FUNCstructureToCapnProtoSchema = 1178;
    FUNCstructureToProtobufSchema = 1179;
    FUNCstudentTTest = 1180;
    FUNCsubBitmap = 1181;
    FUNCsubDate = 1182;
    FUNCsubstr = 1183;
    FUNCsubstring = 1184;
    FUNCSUBSTRING_INDEX = 1185;
    FUNCsubstringIndex = 1186;
    FUNCsubstringIndexUTF8 = 1187;
    FUNCsubstringUTF8 = 1188;
    FUNCsubtractDays = 1189;
    FUNCsubtractHours = 1190;
    FUNCsubtractInterval = 1191;
    FUNCsubtractMicroseconds = 1192;
    FUNCsubtractMilliseconds = 1193;
    FUNCsubtractMinutes = 1194;
    FUNCsubtractMonths = 1195;
    FUNCsubtractNanoseconds = 1196;
    FUNCsubtractQuarters = 1197;
    FUNCsubtractSeconds = 1198;
    FUNCsubtractTupleOfIntervals = 1199;
    FUNCsubtractWeeks = 1200;
    FUNCsubtractYears = 1201;
    FUNCsum = 1202;
    FUNCsumCount = 1203;
    FUNCsumKahan = 1204;
    FUNCsumMap = 1205;
    FUNCsumMapFiltered = 1206;
    FUNCsumMapFilteredWithOverflow = 1207;
    FUNCsumMappedArrays = 1208;
    FUNCsumMapWithOverflow = 1209;
    FUNCsumWithOverflow = 1210;
    FUNCsvg = 1211;
    FUNCsynonyms = 1212;
    FUNCtan = 1213;
    FUNCtanh = 1214;
    FUNCtcpPort = 1215;
    FUNCtgamma = 1216;
    FUNCtheilsU = 1217;
    FUNCtid = 1218;
    FUNCtimeDiff = 1219;
    FUNCtimeSlot = 1220;
    FUNCtimeSlots = 1221;
    FUNCtimestamp = 1222;
    FUNCtimestamp_add = 1223;
    FUNCtimestamp_diff = 1224;
    FUNCtimestamp_sub = 1225;
    FUNCtimestampDiff = 1226;
    FUNCtimeZone = 1227;
    FUNCtimeZoneOf = 1228;
    FUNCtimeZoneOffset = 1229;
    FUNCTO_BASE64 = 1230;
    FUNCTO_DAYS = 1231;
    FUNCTO_UNIXTIME = 1232;
    FUNCto_utc_timestamp = 1233;
    FUNCtoBFloat16 = 1234;
    FUNCtoBFloat16OrNull = 1235;
    FUNCtoBFloat16OrZero = 1236;
    FUNCtoBool = 1237;
    FUNCtoColumnTypeName = 1238;
    FUNCtoDate = 1239;
    FUNCtoDate32 = 1240;
    FUNCtoDate32OrDefault = 1241;
    FUNCtoDate32OrNull = 1242;
    FUNCtoDate32OrZero = 1243;
    FUNCtoDateOrDefault = 1244;
    FUNCtoDateOrNull = 1245;
    FUNCtoDateOrZero = 1246;
    FUNCtoDateTime = 1247;
    FUNCtoDateTime32 = 1248;
    FUNCtoDateTime64 = 1249;
    FUNCtoDateTime64OrDefault = 1250;
    FUNCtoDateTime64OrNull = 1251;
    FUNCtoDateTime64OrZero = 1252;
    FUNCtoDateTimeOrDefault = 1253;
    FUNCtoDateTimeOrNull = 1254;
    FUNCtoDateTimeOrZero = 1255;
    FUNCtoday = 1256;
    FUNCtoDayOfMonth = 1257;
    FUNCtoDayOfWeek = 1258;
    FUNCtoDayOfYear = 1259;
    FUNCtoDaysSinceYearZero = 1260;
    FUNCtoDecimal128 = 1261;
    FUNCtoDecimal128OrDefault = 1262;
    FUNCtoDecimal128OrNull = 1263;
    FUNCtoDecimal128OrZero = 1264;
    FUNCtoDecimal256 = 1265;
    FUNCtoDecimal256OrDefault = 1266;
    FUNCtoDecimal256OrNull = 1267;
    FUNCtoDecimal256OrZero = 1268;
    FUNCtoDecimal32 = 1269;
    FUNCtoDecimal32OrDefault = 1270;
    FUNCtoDecimal32OrNull = 1271;
    FUNCtoDecimal32OrZero = 1272;
    FUNCtoDecimal64 = 1273;
    FUNCtoDecimal64OrDefault = 1274;
    FUNCtoDecimal64OrNull = 1275;
    FUNCtoDecimal64OrZero = 1276;
    FUNCtoDecimalString = 1277;
    FUNCtoFixedString = 1278;
    FUNCtoFloat32 = 1279;
    FUNCtoFloat32OrDefault = 1280;
    FUNCtoFloat32OrNull = 1281;
    FUNCtoFloat32OrZero = 1282;
    FUNCtoFloat64 = 1283;
    FUNCtoFloat64OrDefault = 1284;
    FUNCtoFloat64OrNull = 1285;
    FUNCtoFloat64OrZero = 1286;
    FUNCtoHour = 1287;
    FUNCtoInt128 = 1288;
    FUNCtoInt128OrDefault = 1289;
    FUNCtoInt128OrNull = 1290;
    FUNCtoInt128OrZero = 1291;
    FUNCtoInt16 = 1292;
    FUNCtoInt16OrDefault = 1293;
    FUNCtoInt16OrNull = 1294;
    FUNCtoInt16OrZero = 1295;
    FUNCtoInt256 = 1296;
    FUNCtoInt256OrDefault = 1297;
    FUNCtoInt256OrNull = 1298;
    FUNCtoInt256OrZero = 1299;
    FUNCtoInt32 = 1300;
    FUNCtoInt32OrDefault = 1301;
    FUNCtoInt32OrNull = 1302;
    FUNCtoInt32OrZero = 1303;
    FUNCtoInt64 = 1304;
    FUNCtoInt64OrDefault = 1305;
    FUNCtoInt64OrNull = 1306;
    FUNCtoInt64OrZero = 1307;
    FUNCtoInt8 = 1308;
    FUNCtoInt8OrDefault = 1309;
    FUNCtoInt8OrNull = 1310;
    FUNCtoInt8OrZero = 1311;
    FUNCtoIntervalDay = 1312;
    FUNCtoIntervalHour = 1313;
    FUNCtoIntervalMicrosecond = 1314;
    FUNCtoIntervalMillisecond = 1315;
    FUNCtoIntervalMinute = 1316;
    FUNCtoIntervalMonth = 1317;
    FUNCtoIntervalNanosecond = 1318;
    FUNCtoIntervalQuarter = 1319;
    FUNCtoIntervalSecond = 1320;
    FUNCtoIntervalWeek = 1321;
    FUNCtoIntervalYear = 1322;
    FUNCtoIPv4 = 1323;
    FUNCtoIPv4OrDefault = 1324;
    FUNCtoIPv4OrNull = 1325;
    FUNCtoIPv4OrZero = 1326;
    FUNCtoIPv6 = 1327;
    FUNCtoIPv6OrDefault = 1328;
    FUNCtoIPv6OrNull = 1329;
    FUNCtoIPv6OrZero = 1330;
    FUNCtoISOWeek = 1331;
    FUNCtoISOYear = 1332;
    FUNCtoJSONString = 1333;
    FUNCtokens = 1334;
    FUNCtoLastDayOfMonth = 1335;
    FUNCtoLastDayOfWeek = 1336;
    FUNCtoLowCardinality = 1337;
    FUNCtoMillisecond = 1338;
    FUNCtoMinute = 1339;
    FUNCtoModifiedJulianDay = 1340;
    FUNCtoModifiedJulianDayOrNull = 1341;
    FUNCtoMonday = 1342;
    FUNCtoMonth = 1343;
    FUNCtoNullable = 1344;
    FUNCtopK = 1345;
    FUNCtopKWeighted = 1346;
    FUNCtopLevelDomain = 1347;
    FUNCtopLevelDomainRFC = 1348;
    FUNCtoQuarter = 1349;
    FUNCtoRelativeDayNum = 1350;
    FUNCtoRelativeHourNum = 1351;
    FUNCtoRelativeMinuteNum = 1352;
    FUNCtoRelativeMonthNum = 1353;
    FUNCtoRelativeQuarterNum = 1354;
    FUNCtoRelativeSecondNum = 1355;
    FUNCtoRelativeWeekNum = 1356;
    FUNCtoRelativeYearNum = 1357;
    FUNCtoSecond = 1358;
    FUNCtoStartOfDay = 1359;
    FUNCtoStartOfFifteenMinutes = 1360;
    FUNCtoStartOfFiveMinute = 1361;
    FUNCtoStartOfFiveMinutes = 1362;
    FUNCtoStartOfHour = 1363;
    FUNCtoStartOfInterval = 1364;
    FUNCtoStartOfISOYear = 1365;
    FUNCtoStartOfMicrosecond = 1366;
    FUNCtoStartOfMillisecond = 1367;
    FUNCtoStartOfMinute = 1368;
    FUNCtoStartOfMonth = 1369;
    FUNCtoStartOfNanosecond = 1370;
    FUNCtoStartOfQuarter = 1371;
    FUNCtoStartOfSecond = 1372;
    FUNCtoStartOfTenMinutes = 1373;
    FUNCtoStartOfWeek = 1374;
    FUNCtoStartOfYear = 1375;
    FUNCtoString = 1376;
    FUNCtoStringCutToZero = 1377;
    FUNCtoTime = 1378;
    FUNCtoTimeZone = 1379;
    FUNCtoTypeName = 1380;
    FUNCtoUInt128 = 1381;
    FUNCtoUInt128OrDefault = 1382;
    FUNCtoUInt128OrNull = 1383;
    FUNCtoUInt128OrZero = 1384;
    FUNCtoUInt16 = 1385;
    FUNCtoUInt16OrDefault = 1386;
    FUNCtoUInt16OrNull = 1387;
    FUNCtoUInt16OrZero = 1388;
    FUNCtoUInt256 = 1389;
    FUNCtoUInt256OrDefault = 1390;
    FUNCtoUInt256OrNull = 1391;
    FUNCtoUInt256OrZero = 1392;
    FUNCtoUInt32 = 1393;
    FUNCtoUInt32OrDefault = 1394;
    FUNCtoUInt32OrNull = 1395;
    FUNCtoUInt32OrZero = 1396;
    FUNCtoUInt64 = 1397;
    FUNCtoUInt64OrDefault = 1398;
    FUNCtoUInt64OrNull = 1399;
    FUNCtoUInt64OrZero = 1400;
    FUNCtoUInt8 = 1401;
    FUNCtoUInt8OrDefault = 1402;
    FUNCtoUInt8OrNull = 1403;
    FUNCtoUInt8OrZero = 1404;
    FUNCtoUnixTimestamp = 1405;
    FUNCtoUnixTimestamp64Micro = 1406;
    FUNCtoUnixTimestamp64Milli = 1407;
    FUNCtoUnixTimestamp64Nano = 1408;
    FUNCtoUnixTimestamp64Second = 1409;
    FUNCtoUTCTimestamp = 1410;
    FUNCtoUUID = 1411;
    FUNCtoUUIDOrDefault = 1412;
    FUNCtoUUIDOrNull = 1413;
    FUNCtoUUIDOrZero = 1414;
    FUNCtoValidUTF8 = 1415;
    FUNCtoWeek = 1416;
    FUNCtoYear = 1417;
    FUNCtoYearWeek = 1418;
    FUNCtoYYYYMM = 1419;
    FUNCtoYYYYMMDD = 1420;
    FUNCtoYYYYMMDDhhmmss = 1421;
    FUNCtransactionID = 1422;
    FUNCtransactionLatestSnapshot = 1423;
    FUNCtransactionOldestSnapshot = 1424;
    FUNCtransform = 1425;
    FUNCtranslate = 1426;
    FUNCtranslateUTF8 = 1427;
    FUNCtrim = 1428;
    FUNCtrimBoth = 1429;
    FUNCtrimLeft = 1430;
    FUNCtrimRight = 1431;
    FUNCtrunc = 1432;
    FUNCtruncate = 1433;
    FUNCtryBase58Decode = 1434;
    FUNCtryBase64Decode = 1435;
    FUNCtryBase64URLDecode = 1436;
    FUNCtryDecrypt = 1437;
    FUNCtryIdnaEncode = 1438;
    FUNCtryPunycodeDecode = 1439;
    FUNCtumble = 1440;
    FUNCtumbleEnd = 1441;
    FUNCtumbleStart = 1442;
    FUNCtuple = 1443;
    FUNCtupleConcat = 1444;
    FUNCtupleDivide = 1445;
    FUNCtupleDivideByNumber = 1446;
    FUNCtupleElement = 1447;
    FUNCtupleHammingDistance = 1448;
    FUNCtupleIntDiv = 1449;
    FUNCtupleIntDivByNumber = 1450;
    FUNCtupleIntDivOrZero = 1451;
    FUNCtupleIntDivOrZeroByNumber = 1452;
    FUNCtupleMinus = 1453;
    FUNCtupleModulo = 1454;
    FUNCtupleModuloByNumber = 1455;
    FUNCtupleMultiply = 1456;
    FUNCtupleMultiplyByNumber = 1457;
    FUNCtupleNames = 1458;
    FUNCtupleNegate = 1459;
    FUNCtuplePlus = 1460;
    FUNCtupleToNameValuePairs = 1461;
    FUNCucase = 1462;
    FUNCULIDStringToDateTime = 1463;
    FUNCunbin = 1464;
    FUNCunhex = 1465;
    FUNCuniq = 1466;
    FUNCuniqCombined = 1467;
    FUNCuniqCombined64 = 1468;
    FUNCuniqExact = 1469;
    FUNCuniqHLL12 = 1470;
    FUNCuniqTheta = 1471;
    FUNCuniqThetaIntersect = 1472;
    FUNCuniqThetaNot = 1473;
    FUNCuniqThetaUnion = 1474;
    FUNCuniqUpTo = 1475;
    FUNCuntuple = 1476;
    FUNCupper = 1477;
    FUNCupperUTF8 = 1478;
    FUNCuptime = 1479;
    FUNCURLHash = 1480;
    FUNCURLHierarchy = 1481;
    FUNCURLPathHierarchy = 1482;
    FUNCuser = 1483;
    FUNCUTC_timestamp = 1484;
    FUNCUTCTimestamp = 1485;
    FUNCUUIDNumToString = 1486;
    FUNCUUIDStringToNum = 1487;
    FUNCUUIDToNum = 1488;
    FUNCUUIDv7ToDateTime = 1489;
    FUNCvalidateNestedArraySizes = 1490;
    FUNCVAR_POP = 1491;
    FUNCVAR_SAMP = 1492;
    FUNCvariantElement = 1493;
    FUNCvariantType = 1494;
    FUNCvarPop = 1495;
    FUNCvarPopStable = 1496;
    FUNCvarSamp = 1497;
    FUNCvarSampStable = 1498;
    FUNCvectorDifference = 1499;
    FUNCvectorSum = 1500;
    FUNCversion = 1501;
    FUNCvisibleWidth = 1502;
    FUNCvisitParamExtractBool = 1503;
    FUNCvisitParamExtractFloat = 1504;
    FUNCvisitParamExtractInt = 1505;
    FUNCvisitParamExtractRaw = 1506;
    FUNCvisitParamExtractString = 1507;
    FUNCvisitParamExtractUInt = 1508;
    FUNCvisitParamHas = 1509;
    FUNCweek = 1510;
    FUNCwelchTTest = 1511;
    FUNCwidth_bucket = 1512;
    FUNCwidthBucket = 1513;
    FUNCwindowFunnel = 1514;
    FUNCwindowID = 1515;
    FUNCwkt = 1516;
    FUNCwordShingleMinHash = 1517;
    FUNCwordShingleMinHashArg = 1518;
    FUNCwordShingleMinHashArgCaseInsensitive = 1519;
    FUNCwordShingleMinHashArgCaseInsensitiveUTF8 = 1520;
    FUNCwordShingleMinHashArgUTF8 = 1521;
    FUNCwordShingleMinHashCaseInsensitive = 1522;
    FUNCwordShingleMinHashCaseInsensitiveUTF8 = 1523;
    FUNCwordShingleMinHashUTF8 = 1524;
    FUNCwordShingleSimHash = 1525;
    FUNCwordShingleSimHashCaseInsensitive = 1526;
    FUNCwordShingleSimHashCaseInsensitiveUTF8 = 1527;
    FUNCwordShingleSimHashUTF8 = 1528;
    FUNCwyHash64 = 1529;
    FUNCxor = 1530;
    FUNCxxh3 = 1531;
    FUNCxxHash32 = 1532;
    FUNCxxHash64 = 1533;
    FUNCyandexConsistentHash = 1534;
    FUNCYEAR = 1535;
    FUNCyearweek = 1536;
    FUNCyesterday = 1537;
    FUNCYYYYMMDDhhmmssToDateTime = 1538;
    FUNCYYYYMMDDhhmmssToDateTime64 = 1539;
    FUNCYYYYMMDDToDate = 1540;
    FUNCYYYYMMDDToDate32 = 1541;
    FUNCzookeeperSessionUptime = 1542;
}

enum SQLTableFunc {
    TFazureBlobStorage = 1;
    TFazureBlobStorageCluster = 2;
    TFcluster = 3;
    TFclusterAllReplicas = 4;
    TFdeltaLake = 5;
    TFdeltaLakeCluster = 6;
    TFdictionary = 7;
    TFexecutable = 8;
    TFfile = 9;
    TFfileCluster = 10;
    TFformat = 11;
    TFgcs = 12;
    TFfuzzJSON = 13;
    TFfuzzQuery = 14;
    TFgenerateRandom = 15;
    TFmergeTreeIndex = 16;
    TFhdfs = 17;
    TFhdfsCluster = 18;
    TFhudi = 19;
    TFhudiCluster = 20;
    TFiceberg = 21;
    TFicebergCluster = 22;
    TFinput = 23;
    TFjdbc = 24;
    TFmerge = 25;
    TFmongodb = 26;
    TFmysql = 27;
    TFnull = 28;
    TFnumbers = 29;
    TFtimeSeriesData = 30;
    TFtimeSeriesMetrics = 31;
    TFtimeSeriesTags = 32;
    TFzeros = 33;
    TFgenerateSeries = 34;
    TFodbc = 35;
    TFpostgresql = 36;
    TFredis = 37;
    TFremote = 38;
    TFremoteSecure = 39;
    TFS3 = 40;
    TFS3Cluster = 41;
    TFsqlite = 42;
    TFurl = 43;
    TFurlCluster = 44;
    TFvalues = 45;
    TFview = 46;
    TFloop = 47;
}

message Database {
    required string database = 1;
}

message Table {
    required string table = 1;
}

message Column {
    required string column = 1;
}

message ColumnPath {
    required Column col = 1;
    repeated Column sub_cols = 2;
}

message Index {
    required string index = 1;
}

message Projection {
    required string projection = 1;
}

message Constraint {
    required string constraint = 1;
}

message Function {
    required string function = 1;
}

message Cluster {
    required string cluster = 1;
}

message Storage {
    enum DataStorage {
        DISK = 1;
        VOLUME = 2;
    }
    required DataStorage storage = 1;
    required string storage_name = 2;
}

message Window {
    required string window = 1;
}

enum SpecialVal {
    VAL_NULL = 1;
    VAL_TRUE = 2;
    VAL_FALSE = 3;
    VAL_ZERO = 4;
    VAL_ONE = 5;
    VAL_MINUS_ONE = 6;
    VAL_EMPTY_STRING = 7;
    VAL_EMPTY_ARRAY = 8;
    VAL_EMPTY_TUPLE = 9;
    VAL_EMPTY_MAP = 10;
    VAL_EMPTY_JSON = 11;
    VAL_MINUS_ZERO_FP = 12;
    VAL_PLUS_ZERO_FP = 13;
    VAL_ZERO_FP = 14;
    VAL_INF = 15;
    VAL_PLUS_INF = 16;
    VAL_MINUS_INF = 17;
    VAL_NAN = 18;
    VAL_PLUS_NAN = 19;
    VAL_MINUS_NAN = 20;
    VAL_HAPPY = 21;
    VAL_TEN_HAPPY = 22;
    MIN_INT32 = 23;
    MAX_INT32 = 24;
    MIN_INT64 = 25;
    MAX_INT64 = 26;
    MIN_INT128 = 27;
    MAX_INT128 = 28;
    MIN_INT256 = 29;
    MAX_INT256 = 30;
    MAX_UINT32 = 31;
    MAX_UINT64 = 32;
    MAX_UINT128 = 33;
    MAX_UINT256 = 34;
    MIN_DATE = 35;
    MAX_DATE = 36;
    MIN_DATE32 = 37;
    MAX_DATE32 = 38;
    MIN_DATETIME = 39;
    MAX_DATETIME = 40;
    MIN_DATETIME64 = 41;
    MAX_DATETIME64 = 42;
    VAL_NULL_CHAR = 43;
    VAL_DEFAULT = 44;
    VAL_STAR = 45;
}

message NumericLiteral {
    required bool negative = 1;
    repeated uint32 digits = 2;
    required bool decimal_point = 3;
    repeated uint32 dec_digits = 4;
    repeated uint32 exp_digits = 5;
    required bool negative_exp = 6;
}

enum Integers {
    UInt8 = 1;
    UInt16 = 2;
    UInt32 = 3;
    UInt64 = 4;
    UInt128 = 5;
    UInt256 = 6;
    Int8 = 7;
    Int16 = 8;
    Int32 = 9;
    Int64 = 10;
    Int128 = 11;
    Int256 = 12;
    Int = 13;
}

enum FloatingPoints {
    BFloat16 = 1;
    Float32 = 2;
    Float64 = 3;
}

enum Dates {
    Date = 1;
    Date32 = 2;
}

enum DateTimes {
    DateTime = 1;
    DateTime64 = 2;
}

message DateTimeTp {
    required DateTimes type = 1;
    optional uint32 precision = 2;
    optional string timezone = 3;
}

message HugeIntLiteral {
    required int64 upper = 1;
    required uint64 lower = 2;
}

message UHugeIntLiteral {
    required uint64 upper = 1;
    required uint64 lower = 2;
}

message IntLiteral {
    oneof int_oneof {
        int64 int_lit = 1;
        uint64 uint_lit = 2;
        HugeIntLiteral huge_lit = 3;
        UHugeIntLiteral uhuge_lit = 4;
    }
    optional Integers integers = 5;
}

message LiteralValue {
    oneof lit_val_oneof {
        IntLiteral int_lit = 1;
        NumericLiteral numeric_lit = 2;
        bytes string_lit = 3;
        bytes hex_string = 4;
        bytes heredoc = 5;
        SpecialVal special_val = 6;
        string no_quote_str = 7;
    }
}

message JSONColumn {
    required Column col = 1;
    oneof jcol_oneof {
        bool jcol = 2;
        uint32 jarray = 3;
    }
}

message JSONColumns {
    required JSONColumn jcol = 1;
    repeated JSONColumn other_jcols = 2;
    oneof jcol_oneof {
        TypeName jcast = 3;
        TypeName jreinterpret = 4;
    }
}

message FieldAccess {
    oneof nested_oneof {
        int32 array_index = 1;
        Expr array_expr = 2;
        Column array_key = 3;
        uint32 tuple_index = 4;
    }
}

message ExprColumn {
    required ColumnPath path = 1;
    optional JSONColumns subcols = 2;
    optional TypeName dynamic_subtype = 3;
}

message ExprSchemaTableColumn {
    optional Database database = 1;
    optional Table table = 2;
    required ExprColumn col = 3;
}

enum UnaryOperator {
    UNOP_MINUS = 1;
    UNOP_PLUS = 2;
    UNOP_NOT = 3;
}

message UnaryExpr {
    required UnaryOperator unary_op = 1;
    required Expr expr = 2;
}

enum BinaryOperator {
    BINOP_LE = 1;
    BINOP_LEQ = 2;
    BINOP_GR = 3;
    BINOP_GREQ = 4;
    BINOP_EQ = 5;
    BINOP_EQEQ = 6;
    BINOP_NOTEQ = 7;
    BINOP_LEGR = 8;
    BINOP_IS_NOT_DISTINCT_FROM = 9;
    BINOP_LEEQGR = 10;
    BINOP_AND = 11;
    BINOP_OR = 12;
    BINOP_CONCAT = 13;
    BINOP_STAR = 14;
    BINOP_SLASH = 15;
    BINOP_PERCENT = 16;
    BINOP_PLUS = 17;
    BINOP_MINUS = 18;
    BINOP_DIV = 19;
    BINOP_MOD = 20;
}

message BinaryExpr {
    required Expr lhs = 1;
    required BinaryOperator op = 2;
    required Expr rhs = 3;
}

message ParenthesesExpr {
    required ExprColAlias expr = 1;
    repeated ExprColAlias other_exprs = 2;
}

message CastExpr {
    required Expr expr = 1;
    required TypeName type_name = 2;
}

message ExprBetween {
    required bool not = 1;
    required Expr expr1 = 2;
    required Expr expr2 = 3;
    required Expr expr3 = 4;
}

message ExprList {
    required Expr expr = 1;
    repeated Expr extra_exprs = 2;
}

message ExprIn {
    required ExprList expr = 1;
    required bool global = 2;
    required bool not = 3;
    oneof in_oneof {
        Expr single_expr = 4;
        ExprList exprs = 5;
        ExplainQuery sel = 6;
    }
}

message ExprAny {
    required Expr expr = 1;
    required BinaryOperator op = 2;
    required bool anyall = 3;
    required ExplainQuery sel = 4;
}

message ExprNullTests {
    required Expr expr = 1;
    required bool not = 2;
}

message ExprCase {
    optional Expr expr = 1;
    required ExprWhenThen when_then = 2;
    repeated ExprWhenThen extra_when_thens = 3;
    optional Expr else_expr = 4;
}

message ExprWhenThen {
    required Expr when_expr = 1;
    required Expr then_expr = 2;
}

message ExprExists {
    required bool not = 1;
    required ExplainQuery select = 3;
}

message ExprLike {
    required Expr expr1 = 1;
    required bool not = 2;
    enum PossibleKeywords {
        LIKE = 1;
        ILIKE = 2;
        REGEXP = 3;
    }
    required PossibleKeywords keyword = 3;
    required Expr expr2 = 4;
}

message CondExpr {
    required Expr expr1 = 1;
    required Expr expr2 = 2;
    required Expr expr3 = 3;
}

message ArraySequence {
    repeated Expr values = 1;
}

message TupleSequence {
    repeated ExprList values = 1;
}

message LambdaExpr {
    repeated Column args = 1;
    required Expr expr = 2;
}

message SQLFuncArg {
    oneof func_arg_oneof {
        LambdaExpr lambda = 1;
        Expr expr = 2;
    }
}

enum FuncNulls {
    NRESPECT = 1;
    NIGNORE = 2;
}

message SQLFuncName {
    oneof func_arg_oneof {
        SQLFunc catalog_func = 1;
        Function function = 2;
    }
}

message SQLFuncCall {
    enum AggregateCombinator {
        If = 1;
        Array = 2;
        Map = 3;
        ForEach = 4;
        Distinct = 5;
        OrDefault = 6;
        OrNull = 7;
        ArgMin = 8;
        ArgMax = 9;
        /// Not deterministic maybe?
        SimpleState = 10;
        State = 11;
        Merge = 12;
        MergeState = 13;
    }
    required SQLFuncName func = 1;
    repeated AggregateCombinator combinators = 2;
    optional bool distinct = 3;
    repeated Expr params = 4;
    repeated SQLFuncArg args = 5;
    optional FuncNulls fnulls = 6;
}

message FrameSpecSubLeftExpr {
    enum Which {
        CURRENT_ROW = 1;
        UNBOUNDED_PRECEDING = 2;
        PRECEDING = 3;
        FOLLOWING = 4;
    }
    required Which which = 1;
    optional Expr expr = 2;
}

message FrameSpecSubRightExpr {
    enum Which {
        CURRENT_ROW = 1;
        UNBOUNDED_FOLLOWING = 2;
        PRECEDING = 3;
        FOLLOWING = 4;
    }
    required Which which = 1;
    optional Expr expr = 2;
}

message ExprFrameSpec {
    enum RangeRows {
        RANGE = 0;
        ROWS = 1;
    }
    required RangeRows range_rows = 1;
    required FrameSpecSubLeftExpr left_expr = 2;
    optional FrameSpecSubRightExpr right_expr = 3;
}

message ExprOrderingWithFill {
    oneof order_by_oneof {
        Expr from_expr = 1;
        Expr staleness_expr = 2;
    }
    optional Expr to_expr = 3;
    optional Expr step_expr = 4;
}

message ExprOrderingTerm {
    enum NullsOrder {
        FIRST = 1;
        LAST = 2;
    }
    required Expr expr = 1;
    optional AscDesc asc_desc = 2;
    optional NullsOrder nulls_order = 3;
    optional string collation = 4;
    optional ExprOrderingWithFill fill = 5;
}

message InterpolateExpr {
    required Column col = 1;
    required Expr expr = 2;
}

message OrderByList {
    required ExprOrderingTerm ord_term = 1;
    repeated ExprOrderingTerm extra_ord_terms = 2;
    repeated InterpolateExpr interpolate = 3;
}

message OrderByStatement {
    oneof order_by_oneof {
        OrderByList olist = 1;
        bool oall = 2;
    }
}

message WindowDefn {
    repeated Expr partition_exprs = 1;
    optional OrderByStatement order_by = 2;
    optional ExprFrameSpec frame_spec = 3;
}

enum WindowFuncs {
    WINdense_rank = 1;
    WINfirst_value = 2;
    WINlagInFrame = 3;
    WINlast_value = 4;
    WINleadInFrame = 5;
    WINnth_value = 6;
    WINntile = 7;
    WINpercent_rank = 8;
    WINrank = 9;
    WINrow_number = 10;
}

message SQLWindowCall {
    required WindowFuncs func = 1;
    repeated Expr args = 2;
    optional FuncNulls fnulls = 3;
}

message WindowFuncCall {
    oneof window_fn_oneof {
        SQLWindowCall win_func = 1;
        SQLFuncCall agg_func = 2;
    }
    oneof window_over_oneof {
        WindowDefn win_defn = 3;
        Window window = 4;
    }
}

message WindowDef {
    required Window window = 1;
    required WindowDefn win_defn = 2;
}

message IntervalExpr {
    enum Interval {
        NANOSECOND = 1;
        MICROSECOND = 2;
        MILLISECOND = 3;
        SECOND = 4;
        MINUTE = 5;
        HOUR = 6;
        DAY = 7;
        WEEK = 8;
        MONTH = 9;
        QUARTER = 10;
        YEAR = 11;
    }
    required Interval interval = 1;
    required Expr expr = 2;
}

/// Separate this out to inflate the probability of having a literal value
message ComplicatedExpr {
    oneof complicated_expr_oneof {
        ExprSchemaTableColumn expr_stc = 1;
        UnaryExpr unary_expr = 2;
        BinaryExpr binary_expr = 3;
        ParenthesesExpr par_expr = 4;
        CastExpr cast_expr = 5;
        ExprBetween expr_between = 6;
        ExprIn expr_in = 7;
        ExprAny expr_any = 8;
        ExprNullTests expr_null_tests = 9;
        ExprCase expr_case = 10;
        ExprExists expr_exists = 11;
        ExprLike expr_like = 12;
        CondExpr expr_cond = 13;
        ExplainQuery subquery = 14;
        SQLFuncCall func_call = 15;
        WindowFuncCall window_call = 16;
        IntervalExpr interval = 17;
        string columns = 18;
        ArraySequence array = 19;
        TupleSequence tuple = 20;
    }
}

message Expr {
    oneof expr_oneof {
        LiteralValue lit_val = 1;
        ComplicatedExpr comp_expr = 2;
    }
    optional FieldAccess field = 3;
}

message ExprColAlias {
    required Expr expr = 1;
    optional Column col_alias = 2;
}

message ResultColumn {
    oneof result_col_oneof {
        ExprSchemaTableColumn etc = 1;
        ExprColAlias eca = 2;
        Table table_star = 3;
    }
}

message ExprSchemaTable {
    optional Database database = 1;
    required Table table = 2;
}

message ExprColumnList {
    required ExprColumn col = 1;
    repeated ExprColumn extra_cols = 2;
}

enum InFormat {
    IN_Arrow = 1;
    IN_ArrowStream = 2;
    IN_Avro = 3;
    IN_AvroConfluent = 4;
    IN_BSONEachRow = 5;
    IN_CapnProto = 6;
    IN_CSV = 7;
    IN_CSVWithNames = 8;
    IN_CSVWithNamesAndTypes = 9;
    IN_CustomSeparated = 10;
    IN_CustomSeparatedWithNames = 11;
    IN_CustomSeparatedWithNamesAndTypes = 12;
    IN_DWARF = 13;
    IN_Form = 14;
    IN_JSON = 15;
    IN_JSONAsObject = 16;
    IN_JSONAsString = 17;
    IN_JSONColumns = 18;
    IN_JSONColumnsWithMetadata = 19;
    IN_JSONCompact = 20;
    IN_JSONCompactColumns = 21;
    IN_JSONCompactEachRow = 22;
    IN_JSONCompactEachRowWithNames = 23;
    IN_JSONCompactEachRowWithNamesAndTypes = 24;
    IN_JSONCompactStringsEachRow = 25;
    IN_JSONCompactStringsEachRowWithNames = 26;
    IN_JSONCompactStringsEachRowWithNamesAndTypes = 27;
    IN_JSONEachRow = 28;
    IN_JSONObjectEachRow = 29;
    IN_JSONStrings = 30;
    IN_JSONStringsEachRow = 31;
    IN_LineAsString = 32;
    IN_MsgPack = 33;
    IN_MySQLDump = 34;
    IN_Native = 35;
    IN_Npy = 36;
    IN_One = 37;
    IN_ORC = 38;
    IN_Parquet = 39;
    IN_ParquetMetadata = 40;
    IN_Protobuf = 41;
    IN_ProtobufList = 42;
    IN_ProtobufSingle = 43;
    IN_RawBLOB = 44;
    IN_Regexp = 45;
    IN_RowBinary = 46;
    IN_RowBinaryWithDefaults = 47;
    IN_RowBinaryWithNames = 48;
    IN_RowBinaryWithNamesAndTypes = 49;
    IN_TabSeparated = 50;
    IN_TabSeparatedRaw = 51;
    IN_TabSeparatedRawWithNames = 52;
    IN_TabSeparatedRawWithNamesAndTypes = 53;
    IN_TabSeparatedWithNames = 54;
    IN_TabSeparatedWithNamesAndTypes = 55;
    IN_Template = 56;
    IN_TemplateIgnoreSpaces = 57;
    IN_TSKV = 58;
    IN_Values = 59;
}

enum OutFormat {
    OUT_Arrow = 1;
    OUT_ArrowStream = 2;
    OUT_Avro = 3;
    OUT_BSONEachRow = 4;
    OUT_CapnProto = 5;
    OUT_CSV = 6;
    OUT_CSVWithNames = 7;
    OUT_CSVWithNamesAndTypes = 8;
    OUT_CustomSeparated = 9;
    OUT_CustomSeparatedWithNames = 10;
    OUT_CustomSeparatedWithNamesAndTypes = 11;
    OUT_JSON = 12;
    OUT_JSONColumns = 13;
    OUT_JSONColumnsWithMetadata = 14;
    OUT_JSONCompact = 15;
    OUT_JSONCompactColumns = 16;
    OUT_JSONCompactEachRow = 17;
    OUT_JSONCompactEachRowWithNames = 18;
    OUT_JSONCompactEachRowWithNamesAndTypes = 19;
    OUT_JSONCompactStrings = 20;
    OUT_JSONCompactStringsEachRow = 21;
    OUT_JSONCompactStringsEachRowWithNames = 22;
    OUT_JSONCompactStringsEachRowWithNamesAndTypes = 23;
    OUT_JSONEachRow = 24;
    OUT_JSONEachRowWithProgress = 25;
    OUT_JSONObjectEachRow = 26;
    OUT_JSONStrings = 27;
    OUT_JSONStringsEachRow = 28;
    OUT_JSONStringsEachRowWithProgress = 29;
    OUT_LineAsString = 30;
    OUT_Markdown = 31;
    OUT_MsgPack = 32;
    OUT_Native = 33;
    OUT_Npy = 34;
    OUT_Null = 35;
    OUT_ORC = 36;
    OUT_Parquet = 37;
    OUT_Pretty = 38;
    OUT_PrettyCompact = 39;
    OUT_PrettyCompactMonoBlock = 40;
    OUT_PrettyCompactNoEscapes = 41;
    OUT_PrettyCompactNoEscapesMonoBlock = 42;
    OUT_PrettyJSONEachRow = 43;
    OUT_PrettyMonoBlock = 44;
    OUT_PrettyNoEscapes = 45;
    OUT_PrettyNoEscapesMonoBlock = 46;
    OUT_PrettySpace = 47;
    OUT_PrettySpaceMonoBlock = 48;
    OUT_PrettySpaceNoEscapes = 49;
    OUT_PrettySpaceNoEscapesMonoBlock = 50;
    OUT_Prometheus = 51;
    OUT_Protobuf = 52;
    OUT_ProtobufList = 53;
    OUT_ProtobufSingle = 54;
    OUT_RawBLOB = 55;
    OUT_RowBinary = 56;
    OUT_RowBinaryWithNames = 57;
    OUT_RowBinaryWithNamesAndTypes = 58;
    OUT_SQLInsert = 59;
    OUT_TabSeparated = 60;
    OUT_TabSeparatedRaw = 61;
    OUT_TabSeparatedRawWithNames = 62;
    OUT_TabSeparatedRawWithNamesAndTypes = 63;
    OUT_TabSeparatedWithNames = 64;
    OUT_TabSeparatedWithNamesAndTypes = 65;
    OUT_Template = 66;
    OUT_TSKV = 67;
    OUT_Values = 68;
    OUT_Vertical = 69;
    OUT_XML = 70;
}

enum InOutFormat {
    INOUT_Arrow = 1;
    INOUT_ArrowStream = 2;
    INOUT_Avro = 3;
    INOUT_BSONEachRow = 4;
    INOUT_CSV = 5;
    INOUT_CSVWithNames = 6;
    INOUT_CSVWithNamesAndTypes = 7;
    INOUT_CustomSeparated = 8;
    INOUT_CustomSeparatedWithNames = 9;
    INOUT_CustomSeparatedWithNamesAndTypes = 10;
    INOUT_JSON = 11;
    INOUT_JSONColumns = 12;
    INOUT_JSONColumnsWithMetadata = 13;
    INOUT_JSONCompact = 14;
    INOUT_JSONCompactColumns = 15;
    INOUT_JSONCompactEachRow = 16;
    INOUT_JSONCompactEachRowWithNames = 17;
    INOUT_JSONCompactEachRowWithNamesAndTypes = 18;
    INOUT_JSONCompactStringsEachRow = 19;
    INOUT_JSONCompactStringsEachRowWithNames = 20;
    INOUT_JSONCompactStringsEachRowWithNamesAndTypes = 21;
    INOUT_JSONEachRow = 22;
    INOUT_JSONObjectEachRow = 23;
    INOUT_JSONStringsEachRow = 24;
    INOUT_MsgPack = 25;
    INOUT_Native = 26;
    INOUT_Npy = 27;
    INOUT_ORC = 28;
    INOUT_Parquet = 29;
    INOUT_Protobuf = 30;
    INOUT_ProtobufList = 31;
    INOUT_ProtobufSingle = 32;
    INOUT_RawBLOB = 33;
    INOUT_RowBinary = 34;
    INOUT_RowBinaryWithNames = 35;
    INOUT_RowBinaryWithNamesAndTypes = 36;
    INOUT_TabSeparated = 37;
    INOUT_TabSeparatedWithNames = 38;
    INOUT_TabSeparatedWithNamesAndTypes = 39;
    INOUT_TSKV = 40;
    INOUT_Values = 41;
}

message UsingExpr {
    required ExprColumnList col_list = 1;
}

message JoinConstraint {
    oneof join_constraint_oneof {
        Expr on_expr = 1;
        UsingExpr using_expr = 2;
    }
}

enum JoinType {
    J_LEFT = 1;
    J_INNER = 2;
    J_RIGHT = 3;
    J_FULL = 4;
    J_PASTE = 5;
    J_CROSS = 6;
}

enum JoinConst {
    J_ANY = 1;
    J_ALL = 2;
    J_SEMI = 3;
    J_ANTI = 4;
    J_ASOF = 5;
}

message JoinCore {
    optional bool global = 1;
    optional JoinType join_op = 2;
    optional JoinConst join_const = 3;
    required TableOrSubquery tos = 4;
    required JoinConstraint join_constraint = 5;
}

message ArrayJoin {
    optional bool left = 1;
    required ExprColAlias constraint = 2;
    repeated ExprColAlias other_constraints = 3;
}

message JoinClauseCore {
    oneof join_clause_oneof {
        JoinCore core = 1;
        ArrayJoin arr = 2;
    }
}

message JoinClause {
    required TableOrSubquery tos = 1;
    repeated JoinClauseCore clauses = 2;
}

enum FileCompression {
    COMPgz = 1;
    COMPbr = 2;
    COMPxz = 3;
    COMPzst = 4;
    COMPlz4 = 5;
    COMPbz2 = 6;
}

message FileFunc {
    required string path = 1;
    oneof file_func_oneof {
        InFormat informat = 2;
        OutFormat outformat = 3;
    }
    optional string structure = 4;
    optional FileCompression fcomp = 5;
}

message FormatFunc {
    required InFormat format = 1;
    optional string structure = 2;
    required string data = 3;
}

message GenerateSeriesFunc {
    enum GSName {
        generate_series = 1;
        generateSeries = 2;
        numbers = 3;
    }
    required GSName fname = 1;
    required Expr expr1 = 2;
    optional Expr expr2 = 3;
    optional Expr expr3 = 4;
}

message TableOrFunction {
    oneof jtf_oneof {
        ExprSchemaTable est = 1;
        TableFunction tfunc = 2;
        ExplainQuery select = 3;
    }
}

message RemoteFunc {
    required string address = 1;
    required TableOrFunction tof = 2;
    optional string user = 3;
    optional string password = 4;
}

message MySQLFunc {
    required string address = 1;
    required string rdatabase = 2;
    required string rtable = 3;
    required string user = 4;
    required string password = 5;
}

message PostgreSQLFunc {
    required string address = 1;
    required string rdatabase = 2;
    required string rtable = 3;
    required string user = 4;
    required string password = 5;
    optional string rschema = 6;
}

message SQLiteFunc {
    required string rdatabase = 1;
    required string rtable = 2;
}

message S3Func {
    required string resource = 1;
    required string user = 2;
    required string password = 3;
    required InOutFormat format = 4;
    required string structure = 5;
    optional string fcomp = 6;
}

message SQLTableFuncCall {
    required SQLTableFunc func = 1;
    repeated SQLFuncArg args = 2;
}

message MergeFunc {
    optional string mdatabase = 1;
    required string mtable = 2;
}

message ClusterFunc {
    enum CName {
        cluster = 1;
        clusterAllReplicas = 2;
    }
    required CName cname = 1;
    required string ccluster = 2;
    required TableOrFunction tof = 3;
    optional string sharding_key = 4;
}

message MergeTreeIndexFunc {
    required ExprSchemaTable est = 1;
    optional bool with_marks = 2;
}

message GenerateRandomFunc {
    required Expr structure = 1;
    optional uint64 random_seed = 2;
    optional uint64 max_string_length = 3;
    optional uint64 max_array_length = 4;
}

message ValuesStatement {
    required ExprList expr_list = 1;
    repeated ExprList extra_expr_lists = 2;
}

message TableFunction {
    oneof jtf_oneof {
        FileFunc file = 1;
        FormatFunc format = 2;
        GenerateSeriesFunc gseries = 3;
        RemoteFunc remote = 4;
        MySQLFunc mysql = 5;
        PostgreSQLFunc postgresql = 6;
        SQLiteFunc sqite = 7;
        S3Func s3 = 8;
        SQLTableFuncCall func = 9;
        MergeFunc merge = 10;
        ClusterFunc cluster = 11;
        MergeTreeIndexFunc mtindex = 12;
        TableOrFunction loop = 13;
        GenerateRandomFunc grandom = 14;
        ValuesStatement values = 15;
        ExprSchemaTable dictionary = 16;
    }
}

message JoinedTableOrFunction {
    required TableOrFunction tof = 1;
    optional Table table_alias = 2;
    optional bool final = 3;
}

message TableOrSubquery {
    oneof tos_oneof {
        JoinedTableOrFunction joined_table = 1;
        JoinedQuery joined_query = 2;
    }
}

message JoinedQuery {
    /// If empty, use the join clause
    repeated TableOrSubquery tos_list = 1;
    required JoinClause join_clause = 2;
}

message FromStatement {
    required JoinedQuery tos = 1;
}

message ColumnComparison {
    required ExprSchemaTableColumn col = 1;
    required BinaryOperator op = 2;
    required Expr expr = 3;
}

message ExprComparisonHighProbability {
    oneof expr_comp_oneof {
        ColumnComparison cc = 1;
        Expr expr = 2;
    }
}

message WhereStatement {
    required ExprComparisonHighProbability expr = 1;
}

message OptionalExprList {
    repeated Expr exprs = 1;
}

message GroupingSets {
    required OptionalExprList exprs = 1;
    repeated OptionalExprList other_exprs = 2;
}

message GroupByList {
    enum GroupingSetsModifier {
        ROLLUP = 1;
        CUBE = 2;
    }
    oneof group_by_list_oneof {
        ExprList exprs = 1;
        ExprList rollup = 2;
        ExprList cube = 3;
        GroupingSets sets = 4;
    }
    optional GroupingSetsModifier gsm = 5;
    optional bool with_totals = 6;
}

message GroupByStatement {
    oneof group_by_oneof {
        GroupByList glist = 1;
        bool gall = 2;
    }
    optional WhereStatement having_expr = 3;
}

message LimitStatement {
    required Expr limit = 1;
    optional Expr offset = 2;
    optional bool with_ties = 3;
    optional Expr limit_by = 4;
}

message FetchStatement {
    required bool first = 1;
    required Expr row_count = 2;
    required bool rows = 3;
    required bool only = 4;
}

message OffsetStatement {
    required Expr row_count = 1;
    required bool rows = 2;
    optional FetchStatement fetch = 3;
}

enum AllOrDistinct {
    DISTINCT = 1;
    ALL = 2;
}

message SelectStatementCore {
    optional AllOrDistinct s_or_d = 1;
    optional bool from_first = 2;
    repeated ResultColumn result_columns = 3;
    optional FromStatement from = 4;
    optional WhereStatement pre_where = 5;
    optional WhereStatement where = 6;
    optional GroupByStatement groupby = 7;
    optional OrderByStatement orderby = 8;
    repeated WindowDef window_defs = 9;
    optional WhereStatement qualify_expr = 10;
    oneof limit_oneof {
        LimitStatement limit = 11;
        OffsetStatement offset = 12;
    }
}

message SetQuery {
    enum SetOp {
        UNION = 1;
        EXCEPT = 2;
        INTERSECT = 3;
    }
    required ExplainQuery sel1 = 1;
    required SetOp set_op = 2;
    required AllOrDistinct s_or_d = 3;
    required ExplainQuery sel2 = 4;
}

message CTEquery {
    required Table table = 1;
    required Select query = 2;
}

message CTEexpr {
    required Expr expr = 1;
    required Column col_alias = 2;
}

message SingleCTE {
    oneof cte_oneof {
        CTEquery cte_query = 1;
        CTEexpr cte_expr = 2;
    }
}

message CTEs {
    required SingleCTE cte = 1;
    repeated SingleCTE other_ctes = 2;
}

message SetValue {
    required string property = 1;
    required string value = 2;
}

message SettingValues {
    required SetValue set_value = 1;
    repeated SetValue other_values = 2;
}

message Select {
    optional CTEs ctes = 1;
    oneof select_oneof {
        SelectStatementCore select_core = 2;
        SetQuery set_query = 3;
    }
    optional SettingValues setting_values = 4;
}

enum DatabaseEngineValues {
    DAtomic = 1;
    DMemory = 2;
    DReplicated = 3;
    DShared = 4;
    DLazy = 5;
    DOrdinary = 6;
    DBackup = 7;
}

message BackupDisk {
    required string disk = 1;
    required Database database = 2;
}

message DatabaseEngineParam {
    oneof database_engine_param_oneof {
        string svalue = 1;
        Database database = 2;
        BackupDisk disk = 3;
    }
}

message DatabaseEngine {
    required DatabaseEngineValues engine = 1;
    repeated DatabaseEngineParam params = 2;
}

message CreateDatabase {
    optional bool if_not_exists = 1;
    required Database database = 2;
    optional Cluster cluster = 3;
    required DatabaseEngine dengine = 4;
    optional string comment = 5;
}

message CreateFunction {
    required Function function = 1;
    optional Cluster cluster = 2;
    required LambdaExpr lexpr = 3;
}

message DecimalN {
    enum DecimalPrecision {
        D32 = 1;
        D64 = 2;
        D128 = 3;
        D256 = 4;
    }
    required DecimalPrecision precision = 1;
    required uint32 scale = 2;
}

message DecimalSimple {
    optional uint32 precision = 1;
    optional uint32 scale = 2;
}

message Decimal {
    oneof decimal_oneof {
        DecimalN decimaln = 1;
        DecimalSimple decimal_simple = 2;
    }
}

message ColumnPathList {
    required ColumnPath col = 1;
    repeated ColumnPath other_cols = 2;
}

message JSONPathType {
    required ColumnPath col = 1;
    required TopTypeName type = 2;
}

message JSONDefItem {
    oneof JSON_spec_oneof {
        uint32 max_dynamic_paths = 1;
        uint32 max_dynamic_types = 2;
        ColumnPath skip_path = 3;
        JSONPathType path_type = 4;
    }
}

message JSONDef {
    repeated JSONDefItem spec = 1;
}

message EnumDefValue {
    required string enumv = 1;
    required int32 number = 2;
}

message EnumDef {
    /// False for 8 or true for 16
    optional bool bits = 1;
    required EnumDefValue first_value = 2;
    repeated EnumDefValue other_values = 3;
}

message Dynamic {
    optional uint32 ntypes = 1;
}

message BottomTypeName {
    oneof bottom_one_of {
        Integers integers = 1;
        FloatingPoints floats = 2;
        bool standard_string = 3;
        uint32 fixed_string = 4;
        Dates dates = 5;
        DateTimeTp datetimes = 6;
        Decimal decimal = 7;
        bool boolean = 8;
        bool uuid = 9;
        JSONDef jdef = 10;
        Dynamic dynamic = 11;
        EnumDef enum_def = 12;
        bool IPv4 = 13;
        bool IPv6 = 14;
    }
}

message MapTypeDef {
    required TopTypeName key = 1;
    required TopTypeName value = 2;
}

message TypeColumnDef {
    required Column col = 1;
    required TopTypeName type_name = 2;
}

message TupleWithColumnNames {
    repeated TypeColumnDef values = 1;
}

message TupleWithOutColumnNames {
    repeated TopTypeName values = 1;
}

message TupleTypeDef {
    oneof tuple_oneof {
        TupleWithColumnNames with_names = 1;
        TupleWithOutColumnNames no_names = 2;
    }
}

message NestedTypeDef {
    required TypeColumnDef type1 = 1;
    repeated TypeColumnDef others = 2;
}

enum GeoTypes {
    Point = 1;
    Ring = 2;
    LineString = 3;
    MultiLineString = 4;
    Polygon = 5;
    MultiPolygon = 6;
}

message TopTypeName {
    oneof type_oneof {
        BottomTypeName non_nullable = 1;
        BottomTypeName nullable = 2;
        BottomTypeName non_nullable_lcard = 3;
        BottomTypeName nullable_lcard = 4;
        TopTypeName array = 5;
        MapTypeDef map = 6;
        TupleTypeDef tuple = 7;
        NestedTypeDef nested = 8;
        TupleWithOutColumnNames variant = 9;
        GeoTypes geo = 10;
    }
}

message TypeName {
    required TopTypeName type = 1;
}

enum ColumnStat {
    STAT_MinMax = 1;
    STAT_TDigest = 2;
    STAT_Uniq = 3;
    STAT_CountMin = 4;
}

message ColumnStatistics {
    required ColumnStat stat = 1;
    repeated ColumnStat other_stats = 2;
}

enum DModifier {
    DEF_DEFAULT = 1;
    DEF_MATERIALIZED = 2;
    DEF_EPHEMERAL = 3;
    DEF_ALIAS = 4;
}

message DefaultModifier {
    required DModifier dvalue = 1;
    optional Expr expr = 2;
}

enum CompressionCodec {
    COMP_Default = 1;
    COMP_NONE = 2;
    COMP_LZ4 = 3;
    COMP_LZ4HC = 4;
    COMP_ZSTD = 5;
    COMP_ZSTD_QAT = 6;
    COMP_DEFLATE_QPL = 7;
    COMP_Delta = 8;
    COMP_DoubleDelta = 9;
    COMP_GCD = 10;
    COMP_Gorilla = 11;
    COMP_FPC = 12;
    COMP_T64 = 13;
    COMP_AES_128_GCM_SIV = 14;
    COMP_AES_256_GCM_SIV = 15;
}

message CodecParam {
    required CompressionCodec codec = 1;
    repeated uint32 params = 2;
}

message CodecList {
    required CodecParam codec = 1;
    repeated CodecParam other_codecs = 2;
}

message ColumnDef {
    required Column col = 1;
    required TypeName type = 2;
    optional bool nullable = 3;
    optional DefaultModifier defaultv = 4;
    optional string comment = 5;
    optional CodecList codecs = 6;
    optional ColumnStatistics stats = 7;
    optional Expr ttl_expr = 8;
    optional bool is_pkey = 9;
    optional SettingValues setting_values = 10;
}

enum IndexType {
    IDX_set = 1;
    IDX_minmax = 2;
    IDX_hypothesis = 3;
    IDX_bloom_filter = 4;
    IDX_vector_similarity = 5;
    IDX_ngrambf_v1 = 6;
    IDX_tokenbf_v1 = 7;
    IDX_full_text = 8;
    IDX_inverted = 9;
}

message IndexParam {
    oneof param_oneof {
        double dval = 1;
        uint32 ival = 2;
        string sval = 3;
    }
}

message IndexDef {
    required Index idx = 1;
    required Expr expr = 2;
    required IndexType type = 3;
    repeated IndexParam params = 4;
    optional uint32 granularity = 5;
}

message ProjectionDef {
    required Projection proj = 1;
    required Select select = 2;
}

message ConstraintDef {
    enum ConstraintType {
        CHECK = 1;
        ASSUME = 2;
    }
    required Constraint constr = 1;
    required ConstraintType ctype = 2;
    required Expr expr = 3;
}

message TableDefItem {
    oneof createdef_oneof {
        ColumnDef col_def = 1;
        IndexDef idx_def = 2;
        ProjectionDef proj_def = 3;
        ConstraintDef const_def = 4;
    }
}

message TableDef {
    required ColumnDef col_def = 1;
    repeated TableDefItem other_defs = 2;
}

enum AscDesc {
    ASC = 1;
    DESC = 2;
}

message TableKeyExpr {
    required Expr expr = 1;
    optional AscDesc asc_desc = 2;
}

message TableKey {
    repeated TableKeyExpr exprs = 1;
}

enum TableEngineValues {
    MergeTree = 1;
    ReplacingMergeTree = 2;
    SummingMergeTree = 3;
    AggregatingMergeTree = 4;
    CollapsingMergeTree = 5;
    VersionedCollapsingMergeTree = 6;
    File = 7;
    Null = 8;
    Set = 9;
    Join = 10;
    Memory = 11;
    StripeLog = 12;
    Log = 13;
    TinyLog = 14;
    EmbeddedRocksDB = 15;
    Buffer = 16;
    MySQL = 17;
    PostgreSQL = 18;
    SQLite = 19;
    MongoDB = 20;
    Redis = 21;
    S3 = 22;
    S3Queue = 23;
    Hudi = 24;
    DeltaLake = 25;
    IcebergS3 = 26;
    Merge = 27;
    Distributed = 28;
    Dictionary = 29;
    GenerateRandom = 30;
}

enum TableEngineOption {
    TShared = 1;
    TReplicated = 2;
}

message TableEngineParam {
    oneof table_engine_param_oneof {
        ColumnPath cols = 1;
        InFormat in = 2;
        OutFormat out = 3;
        InOutFormat in_out = 4;
        JoinType join_op = 5;
        JoinConst join_const = 6;
        Database database = 7;
        Table table = 8;
        uint32 num = 9;
        string svalue = 10;
        ColumnPathList col_list = 11;
        string regexp = 12;
        ExprSchemaTable est = 13;
    }
}

message TTLDelete {
    optional WhereStatement where = 1;
}

message TTLUpdate {
    oneof ttlupdate_oneof {
        TTLDelete del = 1;
        CodecList codecs = 2;
        Storage storage = 3;
    }
    optional WhereStatement where = 4;
}

message TTLSet {
    required ColumnPath col = 1;
    required Expr expr = 2;
}

message TTLGroupBy {
    required ExprList expr_list = 1;
    required TTLSet ttl_set = 2;
    repeated TTLSet other_ttl_set = 3;
}

message TTLEntry {
    required Expr time_expr = 1;
    oneof ttlentry_oneof {
        TTLUpdate update = 2;
        TTLGroupBy group_by = 3;
    }
}

message TTLExpr {
    required TTLEntry ttl_expr = 1;
    repeated TTLEntry other_ttl = 2;
}

message TableEngine {
    optional TableEngineOption toption = 1;
    optional TableEngineValues engine = 2;
    repeated TableEngineParam params = 3;
    optional TableKey order = 4;
    optional TableKey partition_by = 5;
    optional TableKey primary_key = 6;
    optional TableKey sample_by = 7;
    optional TTLExpr ttl_expr = 8;
    optional SettingValues setting_values = 9;
}

message CreateTableAs {
    optional bool clone = 1;
    required ExprSchemaTable est = 2;
}

enum CreateReplaceOption {
    Create = 1;
    Replace = 2;
    CreateOrReplace = 3;
}

message CreateTable {
    required CreateReplaceOption create_opt = 1;
    optional bool is_temp = 2;
    optional bool if_not_exists = 3;
    required ExprSchemaTable est = 4;
    optional Cluster cluster = 5;
    oneof create_table_oneof {
        TableDef table_def = 6;
        CreateTableAs table_as = 7;
    }
    required TableEngine engine = 8;
    optional TTLExpr ttl_expr = 9;
    optional Select as_select_stmt = 10;
    optional string comment = 11;
}

enum SQLObject {
    DATABASE = 1;
    DICTIONARY = 2;
    FUNCTION = 3;
    TABLE = 4;
    VIEW = 5;
}

message SQLObjectName {
    oneof drop_oneof {
        ExprSchemaTable est = 1;
        Database database = 2;
        Function function = 3;
    }
}

message Drop {
    optional bool is_temp = 1;
    required SQLObject sobject = 2;
    optional bool if_exists = 3;
    optional bool if_empty = 4;
    required SQLObjectName object = 5;
    repeated SQLObjectName other_objects = 6;
    optional Cluster cluster = 7;
    optional bool sync = 8;
    optional SettingValues setting_values = 9;
}

message InsertFromFile {
    required string path = 1;
    optional FileCompression fcomp = 2;
    required InFormat format = 3;
}

message Insert {
    optional CTEs ctes = 1;
    required TableOrFunction tof = 2;
    repeated ColumnPath cols = 3;
    oneof insert_oneof {
        ValuesStatement values = 4;
        Select select = 5;
        InsertFromFile insert_file = 6;
        string query = 7;
    }
    optional SettingValues setting_values = 8;
}

message PartitionExpr {
    oneof partition_oneof {
        string part = 1;
        string partition = 2;
        string partition_id = 3;
        bool all = 4;
        bool tuple = 5;
    }
}

message SinglePartitionExpr {
    required PartitionExpr partition = 1;
}

message LightDelete {
    required ExprSchemaTable est = 1;
    optional SinglePartitionExpr single_partition = 2;
    optional Cluster cluster = 3;
    required WhereStatement where = 4;
    optional SettingValues setting_values = 5;
}

message Truncate {
    oneof truncate_oneof {
        ExprSchemaTable est = 1;
        Database all_tables = 2;
        Database database = 3;
    }
    optional Cluster cluster = 4;
    optional bool sync = 5;
    optional SettingValues setting_values = 6;
}


message SelectIntoFile {
    enum SelectIntoFileStep {
        APPEND = 1;
        TRUNCATE = 2;
    }
    required string path = 1;
    optional bool tstdout = 2;
    optional SelectIntoFileStep step = 3;
    optional FileCompression compression = 4;
    optional uint32 level = 5;
}

message TopSelect {
    required Select sel = 1;
    optional SelectIntoFile intofile = 2;
    optional OutFormat format = 3;
}

message CheckTable {
    required ExprSchemaTable est = 1;
    optional SinglePartitionExpr single_partition = 2;
    optional bool single_result = 3;
    optional SettingValues setting_values = 4;
}

message DescTable {
    oneof desc_oneof {
        ExprSchemaTable est = 1;
        Select sel = 2;
        SQLTableFuncCall stf = 3;
    }
    optional SettingValues setting_values = 4;
}

message DeduplicateExpr {
    oneof deduplicate_oneof {
        ColumnPathList col_list = 1;
        bool ded_star = 2;
        ColumnPathList ded_star_except = 3;
    }
}

message OptimizeTable {
    required ExprSchemaTable est = 1;
    optional Cluster cluster = 2;
    optional SinglePartitionExpr single_partition = 3;
    optional bool final = 4;
    optional DeduplicateExpr dedup = 5;
    optional bool cleanup = 6;
    optional SettingValues setting_values = 7;
}

message ExchangeTables {
    required ExprSchemaTable est1 = 1;
    required ExprSchemaTable est2 = 2;
    optional Cluster cluster = 3;
    optional SettingValues setting_values = 4;
}

message UpdateSet {
    required ColumnPath col = 1;
    required Expr expr = 2;
}

message Update {
    required UpdateSet update = 1;
    repeated UpdateSet other_updates = 2;
    optional SinglePartitionExpr single_partition = 3;
    required WhereStatement where = 4;
}

message HeavyDelete {
    optional SinglePartitionExpr single_partition = 1;
    required WhereStatement del = 2;
}

message AddWhere {
    oneof add_where_oneof {
        ColumnPath col = 1;
        Index idx = 2;
        bool first = 3;
    }
}

message AddColumn {
    required ColumnDef new_col = 1;
    optional AddWhere add_where = 2;
}

message RenameCol {
    required ColumnPath old_name = 1;
    required ColumnPath new_name = 2;
}

message ColInPartition {
    required ColumnPath col = 1;
    optional SinglePartitionExpr single_partition = 2;
}

message CommentColumn {
    required ColumnPath col = 1;
    required string comment = 2;
}

message AddStatistics {
    required ColumnPathList cols = 1;
    required ColumnStatistics stats = 2;
}

message AddIndex {
    required IndexDef new_idx = 1;
    optional AddWhere add_where = 2;
}

message IdxInPartition {
    required Index idx = 1;
    optional SinglePartitionExpr single_partition = 2;
}

message ProjectionInPartition {
    required Projection proj = 1;
    optional SinglePartitionExpr single_partition = 2;
}

message RemoveColumnProperty {
    enum ColumnProperties {
        DEFAULT = 1;
        ALIAS = 2;
        MATERIALIZED = 3;
        CODEC = 4;
        COMMENT = 5;
        TTL = 6;
        SETTINGS = 7;
    }
    required ColumnPath col = 1;
    required ColumnProperties property = 2;
}

message ModifyColumnSetting {
    required ColumnPath col = 1;
    required SettingValues setting_values = 2;
}

message SettingList {
    required string setting = 1;
    repeated string other_settings = 2;
}

message RemoveColumnSetting {
    required ColumnPath col = 1;
    required SettingList setting_values = 2;
}

message RefreshInterval {
    enum RefreshUnit {
        SECOND = 1;
        MINUTE = 2;
        HOUR = 3;
        DAY = 4;
        WEEK = 5;
        MONTH = 6;
        YEAR = 7;
    }
    required uint32 interval = 1;
    required RefreshUnit unit = 2;
}

message RefreshableView {
    enum RefreshPolicy {
        EVERY = 1;
        AFTER = 2;
    }
    required RefreshPolicy policy = 1;
    required RefreshInterval interval = 2;
    optional RefreshInterval offset = 3;
    required RefreshInterval randomize = 4;
    optional bool append = 5;
}

message CreateMatViewTo {
    required ExprSchemaTable est = 1;
    repeated ColumnDef col_list = 2;
}

message CreateView {
    required CreateReplaceOption create_opt = 1;
    optional bool if_not_exists = 2;
    optional bool materialized = 3;
    required ExprSchemaTable est = 4;
    optional Cluster cluster = 5;
    optional RefreshableView refresh = 6;
    optional CreateMatViewTo to = 7;
    optional TableEngine engine = 8;
    optional bool populate = 9;
    optional bool empty = 10;
    required Select select = 11;
    optional string comment = 12;
}

message DictionaryColumn {
    required Column col = 1;
    required TypeName type = 2;
    required Expr default_val = 3;
    optional Expr expression = 4;
    optional bool hierarchical = 5; /// or injective
    optional bool is_object_id = 6;
}

message DictionarySource {
    /// TODO Add other sources
    oneof dictionary_source_oneof {
        ExprSchemaTable est = 1;
        bool null_src = 2;
    }
}

enum DictionaryLayouts {
    CACHE = 1;
    COMPLEX_KEY_CACHE = 2;
    COMPLEX_KEY_DIRECT = 3;
    COMPLEX_KEY_HASHED = 4;
    COMPLEX_KEY_HASHED_ARRAY = 5;
    COMPLEX_KEY_RANGE_HASHED = 6;
    COMPLEX_KEY_SPARSE_HASHED = 7;
    COMPLEX_KEY_SSD_CACHE = 8;
    DIRECT = 9;
    FLAT = 10;
    HASHED = 11;
    HASHED_ARRAY = 12;
    IP_TRIE = 13;
    RANGE_HASHED = 14;
    SPARSE_HASHED = 15;
    SSD_CACHE = 16;
}

message DictionaryLayout {
    required DictionaryLayouts layout = 1;
    optional SettingValues setting_values = 2;
}

message DictionaryLifetime {
    required uint32 min = 1;
    optional uint32 max = 2;
}

message DictionaryRange {
    required Expr min = 1;
    required Expr max = 2;
}

message CreateDictionary {
    required CreateReplaceOption create_opt = 1;
    optional bool if_not_exists = 2;
    required ExprSchemaTable est = 3;
    optional Cluster cluster = 4;
    required DictionaryColumn col = 5;
    repeated DictionaryColumn other_cols = 6;
    required TableKey primary_key = 7;
    required DictionarySource source = 8;
    required DictionaryLayout layout = 9;
    optional DictionaryRange range = 10;
    optional DictionaryLifetime lifetime = 11;
    optional SettingValues setting_values = 12;
    optional string comment = 13;
}

message ApplyDeleteMask {
    optional SinglePartitionExpr single_partition = 1;
}

message AttachPartitionFrom {
    required SinglePartitionExpr single_partition = 1;
    required ExprSchemaTable est = 2;
}

message ClearColumnInPartition {
    required ColumnPath col = 1;
    required SinglePartitionExpr single_partition = 2;
}

message FreezePartition {
    optional SinglePartitionExpr single_partition = 1;
    required uint32 fname = 2;
}

message ClearIndexInPartition {
    required Index idx = 1;
    required SinglePartitionExpr single_partition = 2;
}

message MovePartition {
    required SinglePartitionExpr single_partition = 1;
    required Storage storage = 2;
}

message AlterTableItem {
    oneof alter_oneof {
        /// For tables
        HeavyDelete del = 1;
        Update update = 2;
        TableKey order = 3;
        ColInPartition materialize_column = 4;
        AddColumn add_column = 5;
        ColumnPath drop_column = 6;
        RenameCol rename_column = 7;
        ColInPartition clear_column = 8;
        AddColumn modify_column = 9;
        CommentColumn comment_column = 10;
        ApplyDeleteMask delete_mask = 11;
        AddStatistics add_stats = 12;
        AddStatistics mod_stats = 13;
        ColumnPathList drop_stats = 14;
        ColumnPathList clear_stats = 15;
        ColumnPathList mat_stats = 16;
        AddIndex add_index = 17;
        IdxInPartition materialize_index = 18;
        Index drop_index = 19;
        IdxInPartition clear_index = 20;
        RemoveColumnProperty column_remove_property = 21;
        ModifyColumnSetting column_modify_setting = 22;
        RemoveColumnSetting column_remove_setting = 23;
        SettingValues table_modify_setting = 24;
        SettingList table_remove_setting = 25;
        ProjectionDef add_projection = 26;
        Projection remove_projection = 27;
        ProjectionInPartition materialize_projection = 28;
        ProjectionInPartition clear_projection = 29;
        ConstraintDef add_constraint = 30;
        Constraint remove_constraint = 31;
        SinglePartitionExpr detach_partition = 32;
        SinglePartitionExpr drop_partition = 33;
        SinglePartitionExpr drop_detached_partition = 34;
        SinglePartitionExpr forget_partition = 35;
        SinglePartitionExpr attach_partition = 36;
        AttachPartitionFrom attach_partition_from = 37;
        AttachPartitionFrom replace_partition_from = 38;
        AttachPartitionFrom move_partition_to = 39;
        ClearColumnInPartition clear_column_partition = 40;
        FreezePartition freeze_partition = 41;
        FreezePartition unfreeze_partition = 42;
        ClearIndexInPartition clear_index_partition = 43;
        MovePartition move_partition = 44;
        string comment = 45;
        TTLExpr modify_ttl  = 46;
        bool remove_ttl = 47;
        /// For views
        Select modify_query = 48;
        RefreshableView refresh = 49;
    }
}

message AlterTable {
    optional bool is_temp = 1;
    required ExprSchemaTable est = 2;
    optional Cluster cluster = 3;
    required AlterTableItem alter = 4;
    repeated AlterTableItem other_alters = 5;
    optional SettingValues setting_values = 6;
}

message Attach {
    required SQLObject sobject = 1;
    required SQLObjectName object = 2;
    optional Cluster cluster = 3;
    optional bool as_replicated = 4;
    optional SettingValues setting_values = 5;
}

message Detach {
    required SQLObject sobject = 1;
    required SQLObjectName object = 2;
    optional Cluster cluster = 3;
    optional bool permanently = 4;
    optional bool sync = 5;
    optional SettingValues setting_values = 6;
}

message SyncReplica {
    enum SyncPolicy {
        STRICT = 1;
        LIGHTWEIGHT = 2;
        PULL = 3;
    }
    required ExprSchemaTable est = 1;
    required SyncPolicy policy = 2;
}

message SystemCommand {
    oneof system_cmd_oneof {
        bool reload_embedded_dictionaries = 1;
        bool reload_dictionaries = 2;
        bool reload_models = 3;
        bool reload_functions = 4;
        Function reload_function = 5;
        bool reload_asynchronous_metrics = 6;
        bool drop_dns_cache = 7;
        bool drop_mark_cache = 8;
        bool drop_uncompressed_cache = 9;
        bool drop_compiled_expression_cache = 10;
        bool drop_query_cache = 11;
        /// The bool value is used here
        bool drop_format_schema_cache = 12;
        bool flush_logs = 13;
        bool reload_config = 14;
        bool reload_users = 15;
        ExprSchemaTable stop_merges = 16;
        ExprSchemaTable start_merges = 17;
        ExprSchemaTable stop_ttl_merges = 18;
        ExprSchemaTable start_ttl_merges = 19;
        ExprSchemaTable stop_moves = 20;
        ExprSchemaTable start_moves = 21;
        ExprSchemaTable wait_loading_parts = 22;
        ExprSchemaTable stop_fetches = 23;
        ExprSchemaTable start_fetches = 24;
        ExprSchemaTable stop_replicated_sends = 25;
        ExprSchemaTable start_replicated_sends = 26;
        ExprSchemaTable stop_replication_queues = 27;
        ExprSchemaTable start_replication_queues = 28;
        ExprSchemaTable stop_pulling_replication_log = 29;
        ExprSchemaTable start_pulling_replication_log = 30;
        SyncReplica sync_replica = 31;
        Database sync_replicated_database = 32;
        ExprSchemaTable restart_replica = 33;
        ExprSchemaTable restore_replica = 34;
        bool restart_replicas = 35;
        bool drop_filesystem_cache = 36;
        bool sync_file_cache = 37;
        bool load_pks = 38;
        ExprSchemaTable load_pk = 39;
        bool unload_pks = 40;
        ExprSchemaTable unload_pk = 41;
        bool refresh_views = 42;
        ExprSchemaTable refresh_view = 43;
        bool stop_views = 44;
        ExprSchemaTable stop_view = 45;
        bool start_views = 46;
        ExprSchemaTable start_view = 47;
        ExprSchemaTable cancel_view = 48;
        ExprSchemaTable wait_view = 49;
        ExprSchemaTable prewarm_cache = 50;
        ExprSchemaTable prewarm_primary_index_cache = 51;
        bool drop_connections_cache = 52;
        bool drop_primary_index_cache = 53;
        bool drop_index_mark_cache = 54;
        bool drop_index_uncompressed_cache = 55;
        bool drop_mmap_cache = 56;
        bool drop_page_cache = 57;
        bool drop_schema_cache = 58;
        bool drop_s3_client_cache = 59;
        bool flush_async_insert_queue = 60;
        bool sync_filesystem_cache = 61;
        bool drop_skip_index_cache = 62;
        ExprSchemaTable reload_dictionary = 63;
        ExprSchemaTable flush_distributed = 64;
        ExprSchemaTable stop_distributed_sends = 65;
        ExprSchemaTable start_distributed_sends = 66;
        bool drop_query_condition_cache = 67;
    }
    optional Cluster cluster = 68;
}

message BackupRestoreObject {
    optional bool is_temp = 1;
    required SQLObject sobject = 2;
    required SQLObjectName object = 3;
    optional SQLObjectName alias = 4;
    repeated PartitionExpr partitions = 5;
}

message BackupRestoreElement {
    oneof backup_oneof {
        BackupRestoreObject bobject = 1;
        bool all_temporary = 2;
        bool all = 3;
    }
    repeated ExprSchemaTable except_tables = 4;
}

message BackupRestore {
    enum BackupCommand {
        BACKUP = 1;
        RESTORE = 2;
    }
    required BackupCommand command = 1;
    required BackupRestoreElement backup_element = 2;
    repeated BackupRestoreElement other_elements = 3;
    optional Cluster cluster = 4;
    enum BackupOutput {
        Disk = 1;
        File = 2;
        Memory = 3;
        Null = 4;
        S3 = 5;
    }
    required BackupOutput out = 5;
    repeated string out_params = 6;
    optional OutFormat format = 7;
    optional SettingValues setting_values = 8;
    optional bool async = 9;
    /// Need to know backup number
    required uint32 backup_number = 10;
}

message SQLQueryInner {
    oneof query_inner_oneof {
        TopSelect select = 1;
        CreateTable create_table = 2;
        Drop drop = 3;
        Insert insert = 4;
        LightDelete del = 5;
        Truncate trunc = 6;
        OptimizeTable opt = 7;
        CheckTable check = 8;
        DescTable desc = 9;
        ExchangeTables exchange = 10;
        AlterTable alter_table = 11;
        SettingValues setting_values = 12;
        CreateView create_view = 13;
        Attach attach = 14;
        Detach detach = 15;
        CreateDatabase create_database = 16;
        CreateFunction create_function = 17;
        SystemCommand system_cmd = 18;
        BackupRestore backup_restore = 19;
        CreateDictionary create_dictionary = 20;
    }
}

message ExplainOption {
    enum ExplainOpt {
        graph = 1;
        optimize = 2;
        oneline = 3;
        dump_ast = 4;
        dump_passes = 5;
        dump_tree = 6;
        run_passes = 7;
        passes = 8;
        distributed = 9;
        sorting = 10;
        json = 11;
        description = 12;
        indexes = 13;
        keep_logical_steps = 14;
        actions = 15;
        header = 16;
        compact = 17;
    }
    required ExplainOpt opt = 1;
    required uint32 val = 2;
}

message ExplainQuery {
    enum ExplainValues {
        PLAN = 1;
        PIPELINE = 2;
        QUERY_TREE = 3;
        AST = 4;
        SYNTAX = 5;
        ESTIMATE = 6;
        TABLE_OVERRIDE = 7;
    }
    optional bool is_explain = 1;
    optional ExplainValues expl = 2;
    repeated ExplainOption opts = 3;
    required SQLQueryInner inner_query = 4;
}

message SQLQuery {
    oneof query_oneof {
        ExplainQuery explain = 1;
        bool start_trans = 2;
        bool commit_trans = 3;
        bool rollback_trans = 4;
    }
}
