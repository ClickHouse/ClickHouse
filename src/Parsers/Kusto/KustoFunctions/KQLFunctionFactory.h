#pragma once

#include <Parsers/IParserBase.h>
#include <Parsers/Kusto/KustoFunctions/IParserKQLFunction.h>
#include <unordered_map>
namespace DB
{
    enum class KQLFunctionValue : uint16_t
    {   none,
        timespan,
        datetime,
        ago,
        datetime_add,
        datetime_part,
        datetime_diff,
        dayofmonth,
        dayofweek,
        dayofyear,
        endofday,
        endofweek,
        endofyear,
        format_datetime,
        format_timespan,
        getmonth,
        getyear,
        hoursofday,
        make_timespan,
        make_datetime,
        now,
        startofday,
        startofmonth,
        startofweek,
        startofyear,
        todatetime,
        totimespan,
        unixtime_microseconds_todatetime,
        unixtime_milliseconds_todatetime,
        unixtime_nanoseconds_todatetime,
        unixtime_seconds_todatetime,
        weekofyear,

        base64_encode_tostring,
        base64_encode_fromguid,
        base64_decode_tostring,
        base64_decode_toarray,
        base64_decode_toguid,
        countof,
        extract,
        extract_all,
        extractjson,
        has_any_index,
        indexof,
        isempty,
        isnotempty,
        isnotnull,
        isnull,
        parse_command_line,
        parse_csv,
        parse_json,
        parse_url,
        parse_urlquery,
        parse_version,
        replace_regex,
        reverse,
        split,
        strcat,
        strcat_delim,
        strcmp,
        strlen,
        strrep,
        substring,
        toupper,
        translate,
        trim,
        trim_end,
        trim_start,
        url_decode,
        url_encode,

        array_concat,
        array_iif,
        array_index_of,
        array_length,
        array_reverse,
        array_rotate_left,
        array_rotate_right,
        array_shift_left,
        array_shift_right,
        array_slice,
        array_sort_asc,
        array_sort_desc,
        array_split,
        array_sum,
        bag_keys,
        bag_merge,
        bag_remove_keys,
        jaccard_index,
        pack,
        pack_all,
        pack_array,
        repeat,
        set_difference,
        set_has_element,
        set_intersect,
        set_union,
        treepath,
        zip,

        tobool,
        todouble,
        toint,
        tostring,

        arg_max,
        arg_min,
        avg,
        avgif,
        binary_all_and,
        binary_all_or,
        binary_all_xor,
        buildschema,
        count,
        countif,
        dcount,
        dcountif,
        make_bag,
        make_bag_if,
        make_list,
        make_list_if,
        make_list_with_nulls,
        make_set,
        make_set_if,
        max,
        maxif,
        min,
        minif,
        percentiles,
        percentiles_array,
        percentilesw,
        percentilesw_array,
        stdev,
        stdevif,
        sum,
        sumif,
        take_any,
        take_anyif,
        variance,
        varianceif,

        series_fir,
        series_iir,
        series_fit_line,
        series_fit_line_dynamic,
        series_fit_2lines,
        series_fit_2lines_dynamic,
        series_outliers,
        series_periods_detect,
        series_periods_validate,
        series_stats_dynamic,
        series_stats,
        series_fill_backward,
        series_fill_const,
        series_fill_forward,
        series_fill_linear,

        ipv4_compare,
        ipv4_is_in_range,
        ipv4_is_match,
        ipv4_is_private,
        ipv4_netmask_suffix,
        parse_ipv4,
        parse_ipv4_mask,
        ipv6_compare,
        ipv6_is_match,
        parse_ipv6,
        parse_ipv6_mask,
        format_ipv4,
        format_ipv4_mask,

        binary_and,
        binary_not,
        binary_or,
        binary_shift_left,
        binary_shift_right,
        binary_xor,
        bitset_count_ones,

        bin
    };
    
class KQLFunctionFactory
{
public:
   static std::unique_ptr<IParserKQLFunction> get(String &kql_function);

protected:


    static std::unordered_map <String,KQLFunctionValue> kql_functions;/* =
    {
        {"datetime", KQLFunctionValue::datetime},
        {"ago", KQLFunctionValue::ago},
        {"datetime_add", KQLFunctionValue::datetime_add},
        {"datetime_part", KQLFunctionValue::datetime_part},
        {"datetime_diff", KQLFunctionValue::datetime_diff},
        {"dayofmonth", KQLFunctionValue::dayofmonth},
        {"dayofweek", KQLFunctionValue::dayofweek},
        {"dayofyear", KQLFunctionValue::dayofyear},
        {"endofday", KQLFunctionValue::endofday},
        {"endofweek", KQLFunctionValue::endofweek},
        {"endofyear", KQLFunctionValue::endofyear},
        {"format_datetime", KQLFunctionValue::format_datetime},
        {"format_timespan", KQLFunctionValue::format_timespan},
        {"getmonth", KQLFunctionValue::getmonth},
        {"getyear", KQLFunctionValue::getyear},
        {"hoursofday", KQLFunctionValue::hoursofday},
        {"make_timespan", KQLFunctionValue::make_timespan},
        {"make_datetime", KQLFunctionValue::make_datetime},
        {"now", KQLFunctionValue::now},
        {"startofday", KQLFunctionValue::startofday},
        {"startofmonth", KQLFunctionValue::startofmonth},
        {"startofweek", KQLFunctionValue::startofweek},
        {"startofyear", KQLFunctionValue::startofyear},
        {"todatetime", KQLFunctionValue::todatetime},
        {"totimespan", KQLFunctionValue::totimespan},
        {"unixtime_microseconds_todatetime", KQLFunctionValue::unixtime_microseconds_todatetime},
        {"unixtime_milliseconds_todatetime", KQLFunctionValue::unixtime_milliseconds_todatetime},
        {"unixtime_nanoseconds_todatetime", KQLFunctionValue::unixtime_nanoseconds_todatetime},
        {"unixtime_seconds_todatetime", KQLFunctionValue::unixtime_seconds_todatetime},
        {"weekofyear", KQLFunctionValue::weekofyear},

        {"base64_encode_tostring", KQLFunctionValue::base64_encode_tostring},
        {"base64_encode_fromguid", KQLFunctionValue::base64_encode_fromguid},
        {"base64_decode_tostring", KQLFunctionValue::base64_decode_tostring},
        {"base64_decode_toarray", KQLFunctionValue::base64_decode_toarray},
        {"base64_decode_toguid", KQLFunctionValue::base64_decode_toguid},
        {"countof", KQLFunctionValue::countof},
        {"extract", KQLFunctionValue::extract},
        {"extract_all", KQLFunctionValue::extract_all},
        {"extractjson", KQLFunctionValue::extractjson},
        {"has_any_index", KQLFunctionValue::has_any_index},
        {"indexof", KQLFunctionValue::indexof},
        {"isempty", KQLFunctionValue::isempty},
        {"isnotempty", KQLFunctionValue::isnotempty},
        {"isnotnull", KQLFunctionValue::isnotnull},
        {"isnull", KQLFunctionValue::isnull},
        {"parse_command_line", KQLFunctionValue::parse_command_line},
        {"parse_csv", KQLFunctionValue::parse_csv},
        {"parse_json", KQLFunctionValue::parse_json},
        {"parse_url", KQLFunctionValue::parse_url},
        {"parse_urlquery", KQLFunctionValue::parse_urlquery},
        {"parse_version", KQLFunctionValue::parse_version},
        {"replace_regex", KQLFunctionValue::replace_regex},
        {"reverse", KQLFunctionValue::reverse},
        {"split", KQLFunctionValue::split},
        {"strcat", KQLFunctionValue::strcat},
        {"strcat_delim", KQLFunctionValue::strcat_delim},
        {"strcmp", KQLFunctionValue::strcmp},
        {"strlen", KQLFunctionValue::strlen},
        {"strrep", KQLFunctionValue::strrep},
        {"substring", KQLFunctionValue::substring},
        {"toupper", KQLFunctionValue::toupper},
        {"translate", KQLFunctionValue::translate},
        {"trim", KQLFunctionValue::trim},
        {"trim_end", KQLFunctionValue::trim_end},
        {"trim_start", KQLFunctionValue::trim_start},
        {"url_decode", KQLFunctionValue::url_decode},
        {"url_encode", KQLFunctionValue::url_encode},

        {"array_concat", KQLFunctionValue::array_concat},
        {"array_iif", KQLFunctionValue::array_iif},
        {"array_index_of", KQLFunctionValue::array_index_of},
        {"array_length", KQLFunctionValue::array_length},
        {"array_reverse", KQLFunctionValue::array_reverse},
        {"array_rotate_left", KQLFunctionValue::array_rotate_left},
        {"array_rotate_right", KQLFunctionValue::array_rotate_right},
        {"array_shift_left", KQLFunctionValue::array_shift_left},
        {"array_shift_right", KQLFunctionValue::array_shift_right},
        {"array_slice", KQLFunctionValue::array_slice},
        {"array_sort_asc", KQLFunctionValue::array_sort_asc},
        {"array_sort_desc", KQLFunctionValue::array_sort_desc},
        {"array_split", KQLFunctionValue::array_split},
        {"array_sum", KQLFunctionValue::array_sum},
        {"bag_keys", KQLFunctionValue::bag_keys},
        {"bag_merge", KQLFunctionValue::bag_merge},
        {"bag_remove_keys", KQLFunctionValue::bag_remove_keys},
        {"jaccard_index", KQLFunctionValue::jaccard_index},
        {"pack", KQLFunctionValue::pack},
        {"pack_all", KQLFunctionValue::pack_all},
        {"pack_array", KQLFunctionValue::pack_array},
        {"repeat", KQLFunctionValue::repeat},
        {"set_difference", KQLFunctionValue::set_difference},
        {"set_has_element", KQLFunctionValue::set_has_element},
        {"set_intersect", KQLFunctionValue::set_intersect},
        {"set_union", KQLFunctionValue::set_union},
        {"treepath", KQLFunctionValue::treepath},
        {"zip", KQLFunctionValue::zip},

        {"tobool", KQLFunctionValue::tobool},
        {"toboolean", KQLFunctionValue::tobool},
        {"todouble", KQLFunctionValue::todouble},
        {"toint", KQLFunctionValue::toint},
        {"toreal", KQLFunctionValue::todouble},
        {"tostring", KQLFunctionValue::tostring},
        {"totimespan", KQLFunctionValue::totimespan},

        {"arg_max", KQLFunctionValue::arg_max},
        {"arg_min", KQLFunctionValue::arg_min},
        {"avg", KQLFunctionValue::avg},
        {"avgif", KQLFunctionValue::avgif},
        {"binary_all_and", KQLFunctionValue::binary_all_and},
        {"binary_all_or", KQLFunctionValue::binary_all_or},
        {"binary_all_xor", KQLFunctionValue::binary_all_xor},
        {"buildschema", KQLFunctionValue::buildschema},
        {"count", KQLFunctionValue::count},
        {"countif", KQLFunctionValue::countif},
        {"dcount", KQLFunctionValue::dcount},
        {"dcountif", KQLFunctionValue::dcountif},
        {"make_bag", KQLFunctionValue::make_bag},
        {"make_bag_if", KQLFunctionValue::make_bag_if},
        {"make_list", KQLFunctionValue::make_list},
        {"make_list_if", KQLFunctionValue::make_list_if},
        {"make_list_with_nulls", KQLFunctionValue::make_list_with_nulls},
        {"make_set", KQLFunctionValue::make_set},
        {"make_set_if", KQLFunctionValue::make_set_if},
        {"max", KQLFunctionValue::max},
        {"maxif", KQLFunctionValue::maxif},
        {"min", KQLFunctionValue::min},
        {"minif", KQLFunctionValue::minif},
        {"percentiles", KQLFunctionValue::percentiles},
        {"percentiles_array", KQLFunctionValue::percentiles_array},
        {"percentilesw", KQLFunctionValue::percentilesw},
        {"percentilesw_array", KQLFunctionValue::percentilesw_array},
        {"stdev", KQLFunctionValue::stdev},
        {"stdevif", KQLFunctionValue::stdevif},
        {"sum", KQLFunctionValue::sum},
        {"sumif", KQLFunctionValue::sumif},
        {"take_any", KQLFunctionValue::take_any},
        {"take_anyif", KQLFunctionValue::take_anyif},
        {"variance", KQLFunctionValue::variance},
        {"varianceif", KQLFunctionValue::varianceif},

        {"series_fir", KQLFunctionValue::series_fir},
        {"series_iir", KQLFunctionValue::series_iir},
        {"series_fit_line", KQLFunctionValue::series_fit_line},
        {"series_fit_line_dynamic", KQLFunctionValue::series_fit_line_dynamic},
        {"series_fit_2lines", KQLFunctionValue::series_fit_2lines},
        {"series_fit_2lines_dynamic", KQLFunctionValue::series_fit_2lines_dynamic},
        {"series_outliers", KQLFunctionValue::series_outliers},
        {"series_periods_detect", KQLFunctionValue::series_periods_detect},
        {"series_periods_validate", KQLFunctionValue::series_periods_validate},
        {"series_stats_dynamic", KQLFunctionValue::series_stats_dynamic},
        {"series_stats", KQLFunctionValue::series_stats},
        {"series_fill_backward", KQLFunctionValue::series_fill_backward},
        {"series_fill_const", KQLFunctionValue::series_fill_const},
        {"series_fill_forward", KQLFunctionValue::series_fill_forward},
        {"series_fill_linear", KQLFunctionValue::series_fill_linear},

        {"ipv4_compare", KQLFunctionValue::ipv4_compare},
        {"ipv4_is_in_range", KQLFunctionValue::ipv4_is_in_range},
        {"ipv4_is_match", KQLFunctionValue::ipv4_is_match},
        {"ipv4_is_private", KQLFunctionValue::ipv4_is_private},
        {"ipv4_netmask_suffix", KQLFunctionValue::ipv4_netmask_suffix},
        {"parse_ipv4", KQLFunctionValue::parse_ipv4},
        {"parse_ipv4_mask", KQLFunctionValue::parse_ipv4_mask},
        {"ipv6_compare", KQLFunctionValue::ipv6_compare},
        {"ipv6_is_match", KQLFunctionValue::ipv6_is_match},
        {"parse_ipv6", KQLFunctionValue::parse_ipv6},
        {"parse_ipv6_mask", KQLFunctionValue::parse_ipv6_mask},
        {"format_ipv4", KQLFunctionValue::format_ipv4},
        {"format_ipv4_mask", KQLFunctionValue::format_ipv4_mask},

        {"binary_and", KQLFunctionValue::binary_and},
        {"binary_not", KQLFunctionValue::binary_not},
        {"binary_or", KQLFunctionValue::binary_or},
        {"binary_shift_left", KQLFunctionValue::binary_shift_left},
        {"binary_shift_right", KQLFunctionValue::binary_shift_right},
        {"binary_xor", KQLFunctionValue::binary_xor},
        {"bitset_count_ones", KQLFunctionValue::bitset_count_ones},
        {"bin", KQLFunctionValue::bin}
    };*/

};

}

