#pragma once

#include <Core/Block.h>
#include <Processors/Chunk.h>
#include <Processors/Formats/Impl/Parquet/ParquetColumnReader.h>

#include <arrow/io/interfaces.h>
#include <parquet/file_reader.h>
#include <parquet/properties.h>

#include "ParquetColumnReader.h"

namespace DB
{

class ParquetRecordReader
{
public:
    ParquetRecordReader(
        Block header_,
        std::shared_ptr<::arrow::io::RandomAccessFile> file,
        const parquet::ReaderProperties& properties);

    Chunk readChunk(size_t num_rows);

    // follow the scale generated by spark
    static constexpr UInt8 default_datetime64_scale = 9;

private:
    std::unique_ptr<parquet::ParquetFileReader> file_reader;

    Block header;

    std::shared_ptr<parquet::RowGroupReader> cur_row_group_reader;
    ParquetColReaders column_readers;

    std::vector<int> parquet_col_indice;
    UInt64 left_rows;
    UInt64 cur_row_group_left_rows = 0;
    int next_row_group_idx = 0;

    Poco::Logger * log;

    void loadNextRowGroup();
};

}
