syntax = "proto3";

package clickhouse.grpc;

message NameAndType {
   string name = 1;
   string type = 2;
}

message ExternalTable {
   string name = 1;
   repeated NameAndType columns = 2;
   string data = 3;
   string format = 4;
   map<string, string> settings = 5;
}

message QueryInfo {
   string query = 1;
   string query_id = 2;
   map<string, string> settings = 3;
   string database = 4;
   string input_data = 5;
   string input_data_delimiter = 6;
   string output_format = 7;
   repeated ExternalTable external_tables = 8;
   string user_name = 9;
   string password = 10;
   string quota = 11;
   string session_id = 12;
   bool session_check = 13;
   uint32 session_timeout = 14;
   bool cancel = 15;
   bool next_query_info = 16;
}

enum LogsLevel {
   LOG_NONE = 0;
   LOG_FATAL = 1;
   LOG_CRITICAL = 2;
   LOG_ERROR = 3;
   LOG_WARNING = 4;
   LOG_NOTICE = 5;
   LOG_INFORMATION = 6;
   LOG_DEBUG = 7;
   LOG_TRACE = 8;
}

message LogEntry {
   uint32 time = 1;
   uint32 time_microseconds = 2;
   uint64 thread_id = 3;
   string query_id = 4;
   LogsLevel level = 5;
   string source = 6;
   string text = 7;
}

message Progress {
   uint64 read_rows = 1;
   uint64 read_bytes = 2;
   uint64 total_rows_to_read = 3;
   uint64 written_rows = 4;
   uint64 written_bytes = 5;
}

message Stats {
   uint64 rows = 1;
   uint64 blocks = 2;
   uint64 allocated_bytes = 3;
   bool applied_limit = 4;
   uint64 rows_before_limit = 5;
}

message Exception {
   int32 code = 1;
   string name = 2;
   string display_text = 3;
   string stack_trace = 4;
}

message Result {
   string output = 1;
   string totals = 2;
   string extremes = 3;
   repeated LogEntry logs = 4;
   Progress progress = 5;
   Stats stats = 6;
   Exception exception = 7;
   bool cancelled = 8;
}

service ClickHouse {
   rpc ExecuteQuery(QueryInfo) returns (Result) {}
   rpc ExecuteQueryWithStreamInput(stream QueryInfo) returns (Result) {}
   rpc ExecuteQueryWithStreamOutput(QueryInfo) returns (stream Result) {}
   rpc ExecuteQueryWithStreamIO(stream QueryInfo) returns (stream Result) {}
}
