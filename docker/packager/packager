#!/usr/bin/env python
#-*- coding: utf-8 -*-
import subprocess
import os
import argparse
import logging
import sys

SCRIPT_PATH = os.path.realpath(__file__)

IMAGE_MAP = {
    "deb": "yandex/clickhouse-deb-builder",
    "binary": "yandex/clickhouse-binary-builder",
    "freebsd": os.path.join(os.path.dirname(SCRIPT_PATH), "freebsd"),
}

class Vagrant(object):
    def __init__(self, path_to_vagrant_file):
        self.prefix = "VAGRANT_CWD=" + path_to_vagrant_file

    def __enter__(self):
        subprocess.check_call("{} vagrant up".format(self.prefix), shell=True)
        self.ssh_path = "/tmp/vagrant-ssh"
        subprocess.check_call("{} vagrant ssh-config > {}".format(self.prefix, self.ssh_path), shell=True)
        return self

    def copy_to_image(self, local_path, remote_path):
        cmd = "scp -F {ssh} -r {lpath} default:{rpath}".format(ssh=self.ssh_path, lpath=local_path, rpath=remote_path)
        logging.info("Copying to image %s", cmd)
        subprocess.check_call(
            cmd,
            shell=True
        )

    def copy_from_image(self, remote_path, local_path):
        cmd = "scp -F {ssh} -r default:{rpath} {lpath}".format(ssh=self.ssh_path, rpath=remote_path, lpath=local_path)
        logging.info("Copying from image %s", cmd)
        subprocess.check_call(
            cmd,
            shell=True
        )

    def execute_cmd(self, cmd):
        cmd = '{} vagrant ssh -c "{}"'.format(self.prefix, cmd)
        logging.info("Executin cmd %s", cmd)
        subprocess.check_call(
            cmd,
            shell=True
        )

    def __exit__(self, exc_type, exc_val, exc_tb):
        logging.info("Destroying image")
        subprocess.check_call("{} vagrant destroy --force".format(self.prefix), shell=True)


def check_image_exists_locally(image_name):
    try:
        output = subprocess.check_output("docker images -q {} 2> /dev/null".format(image_name), shell=True)
        return output != ""
    except subprocess.CalledProcessError as ex:
        return False

def pull_image(image_name):
    try:
        subprocess.check_call("docker pull {}".format(image_name), shell=True)
        return True
    except subprocess.CalledProcessError as ex:
        logging.info("Cannot pull image {}".format(image_name))
        return False

def build_image(image_name, filepath):
    subprocess.check_call("docker build --network=host -t {} -f {} .".format(image_name, filepath), shell=True)

def run_docker_image_with_env(image_name, output, env_variables, ch_root):
    env_part = " -e ".join(env_variables)
    if env_part:
        env_part = " -e " + env_part

    if sys.stdout.isatty():
        interactive = "-it"
    else:
        interactive = ""

    cmd = "docker run --network=host --rm --volume={output_path}:/output --volume={ch_root}:/build {env} {interactive} {img_name}".format(
        output_path=output,
        ch_root=ch_root,
        env=env_part,
        img_name=image_name,
        interactive=interactive
    )

    logging.info("Will build ClickHouse pkg with cmd: '{}'".format(cmd))

    subprocess.check_call(cmd, shell=True)

def run_vagrant_box_with_env(image_path, output_dir, ch_root):
    with Vagrant(image_path) as vagrant:
        logging.info("Copying folder to vagrant machine")
        vagrant.copy_to_image(ch_root, "~/ClickHouse")
        logging.info("Running build")
        vagrant.execute_cmd("cd ~/ClickHouse && cmake . && ninja")
        logging.info("Copying binary back")
        vagrant.copy_from_image("~/ClickHouse/dbms/programs/clickhouse", output_dir)

def parse_env_variables(build_type, compiler, sanitizer, package_type, cache, distcc_hosts, unbundled, split_binary, version, author, official):
    result = []
    if package_type == "deb":
        result.append("DEB_CC={}".format(compiler))
        result.append("DEB_CXX={}".format(compiler.replace('gcc', 'g++').replace('clang', 'clang++')))
    elif package_type == "binary":
        result.append("CC={}".format(compiler))
        result.append("CXX={}".format(compiler.replace('gcc', 'g++').replace('clang', 'clang++')))

    if sanitizer:
        result.append("SANITIZER={}".format(sanitizer))
    if build_type:
        result.append("BUILD_TYPE={}".format(build_type))

    if cache:
        result.append("CCACHE_PREFIX={}".format(cache))

    if distcc_hosts:
        hosts_with_params = ["{}/24,lzo".format(host) for host in distcc_hosts] + ["localhost/`nproc`"]
        result.append('DISTCC_HOSTS="{}"'.format(" ".join(hosts_with_params)))
    elif cache == "distcc":
        result.append('DISTCC_HOSTS="{}"'.format("localhost/`nproc`"))

    if unbundled:
        result.append('CMAKE_FLAGS="-DUNBUNDLED=1 -DENABLE_MYSQL=0 -DENABLE_POCO_ODBC=0 -DENABLE_ODBC=0 $CMAKE_FLAGS"')

    if split_binary:
        result.append('CMAKE_FLAGS="-DUSE_STATIC_LIBRARIES=0 -DSPLIT_SHARED_LIBRARIES=1 -DCLICKHOUSE_SPLIT_BINARY=1 $CMAKE_FLAGS"')

    if version:
        result.append("VERSION_STRING='{}'".format(version))

    if author:
        result.append("AUTHOR='{}'".format(author))

    if official:
        result.append('CMAKE_FLAGS="-DYANDEX_OFFICIAL_BUILD=1 $CMAKE_FLAGS"')

    return result

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, format='%(asctime)s %(message)s')
    parser = argparse.ArgumentParser(description="ClickHouse building script via virtualization mechanisms")
    parser.add_argument("--package-type", choices=IMAGE_MAP.keys(), required=True)
    parser.add_argument("--clickhouse-repo-path", default="../../")
    parser.add_argument("--output-dir", required=True)
    parser.add_argument("--build-type", choices=("debug", ""), default="")
    parser.add_argument("--compiler", choices=("clang-6.0", "clang-7", "gcc-7", "clang-8", "gcc-8"), default="gcc-7")
    parser.add_argument("--sanitizer", choices=("address", "thread", "memory", "undefined", ""), default="")
    parser.add_argument("--unbundled", action="store_true")
    parser.add_argument("--split-binary", action="store_true")
    parser.add_argument("--cache", choices=("", "ccache", "distcc"), default="")
    parser.add_argument("--distcc-hosts", nargs="+")
    parser.add_argument("--force-build-image", action="store_true")
    parser.add_argument("--version")
    parser.add_argument("--author", default="clickhouse")
    parser.add_argument("--official", action="store_true")

    args = parser.parse_args()
    if not os.path.isabs(args.output_dir):
        args.output_dir = os.path.abspath(os.path.join(os.getcwd(), args.output_dir))

    image_name = IMAGE_MAP[args.package_type]

    if not os.path.isabs(args.clickhouse_repo_path):
        ch_root = os.path.abspath(os.path.join(os.getcwd(), args.clickhouse_repo_path))
    else:
        ch_root = args.clickhouse_repo_path

    dockerfile = os.path.join(ch_root, "docker/packager", args.package_type, "Dockerfile")
    if args.package_type != "freebsd" and not check_image_exists_locally(image_name) or args.force_build_image:
        if not pull_image(image_name) or args.force_build_image:
            build_image(image_name, dockerfile)
    env_prepared = parse_env_variables(
        args.build_type, args.compiler, args.sanitizer, args.package_type,
        args.cache, args.distcc_hosts, args.unbundled, args.split_binary,
        args.version, args.author, args.official)
    if args.package_type != "freebsd":
        run_docker_image_with_env(image_name, args.output_dir, env_prepared, ch_root)
    else:
        logging.info("Running freebsd build, arguments will be ignored")
        run_vagrant_box_with_env(image_name, args.output_dir, ch_root)
    logging.info("Output placed into {}".format(args.output_dir))
