commit 3b4defadd3a46b389dae7edc52c28a3367ccf2a9
Author: ccat3z <fzhang.chn@outlook.com>
Date:   Wed Jun 14 09:36:08 2023 +0000

    Backport https://github.com/apple/foundationdb/pull/7319 and https://github.com/apple/foundationdb/pull/7335

diff --git a/bindings/c/test/unit/third_party/CMakeLists.txt b/bindings/c/test/unit/third_party/CMakeLists.txt
index 014157553..5f2663074 100644
--- a/bindings/c/test/unit/third_party/CMakeLists.txt
+++ b/bindings/c/test/unit/third_party/CMakeLists.txt
@@ -6,7 +6,7 @@ ExternalProject_Add(
     doctest
     PREFIX ${CMAKE_BINARY_DIR}/doctest
     GIT_REPOSITORY https://github.com/onqtam/doctest.git
-    GIT_TAG 8424be522357e68d8c6178375546bb0cf9d5f6b3 # v2.4.1
+    GIT_TAG 7b9885133108ae301ddd16e2651320f54cafeba7 # v2.4.8
     TIMEOUT 10
     CONFIGURE_COMMAND ""
     BUILD_COMMAND ""
diff --git a/bindings/c/test/unit/unit_tests.cpp b/bindings/c/test/unit/unit_tests.cpp
index e9c029fc4..9252aebbd 100644
--- a/bindings/c/test/unit/unit_tests.cpp
+++ b/bindings/c/test/unit/unit_tests.cpp
@@ -175,13 +175,21 @@ struct GetRangeResult {
 };
 
 struct GetMappedRangeResult {
-	std::vector<std::tuple<std::string, // key
-	                       std::string, // value
-	                       std::string, // begin
-	                       std::string, // end
-	                       std::vector<std::pair<std::string, std::string>> // range results
-	                       >>
-	    mkvs;
+	struct MappedKV {
+		MappedKV(const std::string& key,
+		         const std::string& value,
+		         const std::string& begin,
+		         const std::string& end,
+		         const std::vector<std::pair<std::string, std::string>>& range_results)
+		  : key(key), value(value), begin(begin), end(end), range_results(range_results) {}
+
+		std::string key;
+		std::string value;
+		std::string begin;
+		std::string end;
+		std::vector<std::pair<std::string, std::string>> range_results;
+	};
+	std::vector<MappedKV> mkvs;
 	// True if values remain in the key range requested.
 	bool more;
 	// Set to a non-zero value if an error occurred during the transaction.
@@ -1062,14 +1070,14 @@ TEST_CASE("fdb_transaction_get_mapped_range") {
 
 		int id = beginId;
 		for (int i = 0; i < expectSize; i++, id++) {
-			const auto& [key, value, begin, end, range_results] = result.mkvs[i];
-			CHECK(indexEntryKey(id).compare(key) == 0);
-			CHECK(EMPTY.compare(value) == 0);
-			CHECK(range_results.size() == SPLIT_SIZE);
+			const auto& mkv = result.mkvs[i];
+			CHECK(indexEntryKey(id).compare(mkv.key) == 0);
+			CHECK(EMPTY.compare(mkv.value) == 0);
+			CHECK(mkv.range_results.size() == SPLIT_SIZE);
 			for (int split = 0; split < SPLIT_SIZE; split++) {
-				auto& [k, v] = range_results[split];
-				CHECK(recordKey(id, split).compare(k) == 0);
-				CHECK(recordValue(id, split).compare(v) == 0);
+				auto& kv = mkv.range_results[split];
+				CHECK(recordKey(id, split).compare(kv.first) == 0);
+				CHECK(recordValue(id, split).compare(kv.second) == 0);
 			}
 		}
 		break;
@@ -1174,10 +1182,8 @@ TEST_CASE("fdb_transaction_get_range reverse") {
 			std::string data_key = it->first;
 			std::string data_value = it->second;
 
-			auto [key, value] = *results_it;
-
-			CHECK(data_key.compare(key) == 0);
-			CHECK(data[data_key].compare(value) == 0);
+			CHECK(data_key.compare(results_it->first /*key*/) == 0);
+			CHECK(data[data_key].compare(results_it->second /*value*/) == 0);
 		}
 		break;
 	}
@@ -1211,8 +1217,8 @@ TEST_CASE("fdb_transaction_get_range limit") {
 			CHECK(result.more);
 		}
 
-		for (const auto& [key, value] : result.kvs) {
-			CHECK(data[key].compare(value) == 0);
+		for (const auto& kv : result.kvs) {
+			CHECK(data[kv.first].compare(kv.second) == 0);
 		}
 		break;
 	}
@@ -1243,8 +1249,8 @@ TEST_CASE("fdb_transaction_get_range FDB_STREAMING_MODE_EXACT") {
 		CHECK(result.kvs.size() == 3);
 		CHECK(result.more);
 
-		for (const auto& [key, value] : result.kvs) {
-			CHECK(data[key].compare(value) == 0);
+		for (const auto& kv : result.kvs) {
+			CHECK(data[kv.first].compare(kv.second) == 0);
 		}
 		break;
 	}
