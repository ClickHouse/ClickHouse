set(DELTA_KERNEL_RS_SOURCE_DIR "${ClickHouse_SOURCE_DIR}/contrib/delta-kernel-rs")
set(DELTA_KERNEL_RS_BINARY_DIR "${CMAKE_BINARY_DIR}/contrib/delta-kernel-rs")
set(DELTA_KERNEL_RS_CMAKE_DIR "${ClickHouse_SOURCE_DIR}/contrib/delta-kernel-rs-cmake")

include(ExternalProject)

set(USE_DELTA_KERNEL_RS ${ENABLE_LIBRARIES})

# TODO: Improve this
# MSAN: ld.lld: error: undefined symbol: ring_core_0_17_9__bn_mul_mont_nohw / ld.lld: error: undefined symbol: ring_core_0_17_9__chacha20_poly1305_seal_avx2 ...
if (NOT ENABLE_LIBRARIES OR NOT OS_LINUX OR (NOT ARCH_AMD64 AND NOT ARCH_AARCH64) OR (SANITIZE STREQUAL "memory") OR NO_ARMV81_OR_HIGHER OR NOT ENABLE_RUST)
  message(STATUS "Disabling delta kernel because of incompatible platform or Rust is disabled")
  set(USE_DELTA_KERNEL_RS 0)
endif()

option(ENABLE_DELTA_KERNEL_RS "Enable delta-kernel-rs" ${USE_DELTA_KERNEL_RS})
if (NOT ENABLE_DELTA_KERNEL_RS)
  message(STATUS "Not using delta-kernel-rs")
  return()
endif()

set(DELTA_KERNEL_TARGET_PATH ${DELTA_KERNEL_RS_BINARY_DIR}/target6)

if(ARCH_AMD64)
    if(OS_DARWIN)
        set(PLATFORM_DIRECTORY darwin_x86_64)
    else()
        set(PLATFORM_DIRECTORY linux_x86_64)
    endif()
elseif(ARCH_AARCH64)
    if(OS_DARWIN)
        set(PLATFORM_DIRECTORY darwin_aarch64)
    else()
        set(PLATFORM_DIRECTORY linux_aarch64)
    endif()
elseif(ARCH_PPC64LE)
    set(PLATFORM_DIRECTORY linux_ppc64le)
elseif(ARCH_S390X)
    set(PLATFORM_DIRECTORY linux_s390x)
elseif(ARCH_RISCV64)
    set(PLATFORM_DIRECTORY linux_riscv64)
elseif(ARCH_LOONGARCH64)
    set(PLATFORM_DIRECTORY linux_loongarch64)
endif()

file(COPY ${ClickHouse_SOURCE_DIR}/contrib/openssl-cmake/${PLATFORM_DIRECTORY}/include/ DESTINATION ${DELTA_KERNEL_RS_BINARY_DIR}/${PLATFORM_DIRECTORY})
file(COPY ${ClickHouse_SOURCE_DIR}/contrib/openssl/include/ DESTINATION ${DELTA_KERNEL_RS_BINARY_DIR}/${PLATFORM_DIRECTORY})

if ("${CMAKE_BUILD_TYPE_UC}" STREQUAL "DEBUG")
    SET(SSLNAME "ssld")
    SET(CRYPTONAME "cryptod")
else()
    SET(SSLNAME "ssl")
    SET(CRYPTONAME "crypto")
endif()

if ("${CMAKE_BUILD_TYPE_UC}" STREQUAL "DEBUG")
    set(CMAKE_CONFIGURATION_TYPES "${CMAKE_BUILD_TYPE};release")
else()
    set(CMAKE_CONFIGURATION_TYPES "${CMAKE_BUILD_TYPE};debug")
endif()

if (CMAKE_BUILD_TYPE_UC STREQUAL "DEBUG")
    set(profile "")
else()
    set(profile "release")
endif()

corrosion_import_crate(MANIFEST_PATH "${DELTA_KERNEL_RS_SOURCE_DIR}/ffi/Cargo.toml" NO_STD PROFILE ${profile} CRATE_TYPES staticlib ALL_FEATURES FLAGS --offline)
corrosion_set_env_vars(delta_kernel_ffi "CARGO_TARGET_DIR=${DELTA_KERNEL_TARGET_PATH}" "OPENSSL_LIBS=${SSLNAME}:${CRYPTONAME}" "OPENSSL_STATIC=1" "OPENSSL_LIB_DIR=${CMAKE_BINARY_DIR}/contrib/openssl-cmake/" "OPENSSL_INCLUDE_DIR=${DELTA_KERNEL_RS_BINARY_DIR}/${PLATFORM_DIRECTORY}")

# We set manually the cargo config flags via command line `--config` option
# This is needed to pass the proper compilation flags (CC, CXX, CFLAGS, etc)
# We have to do it this way because the project is built from the source folder and we can't place the `config.toml`
# there, as it would conflict if you have multiple build folders
get_property(
        INTERFACE_DELTA_CARGO_FLAGS
        TARGET delta_kernel_ffi
        PROPERTY INTERFACE_CORROSION_CARGO_FLAGS
)
set_property(
        TARGET delta_kernel_ffi
        PROPERTY INTERFACE_CORROSION_CARGO_FLAGS "${INTERFACE_DELTA_CARGO_FLAGS};--config=${RUST_CONFIG_FILE}"
)
get_property(
        INTERFACE_DELTA_CARGO_FLAGS
        TARGET delta_kernel_ffi
        PROPERTY INTERFACE_CORROSION_CARGO_FLAGS
)
message(STATUS "Delta-kernel cargo flags: ${INTERFACE_DELTA_CARGO_FLAGS}")

target_include_directories(delta_kernel_ffi INTERFACE "${DELTA_KERNEL_TARGET_PATH}/")
target_link_libraries(delta_kernel_ffi INTERFACE OpenSSL::Crypto OpenSSL::SSL)
add_library(ch_contrib::delta_kernel_rs ALIAS delta_kernel_ffi)
