# Generated by Grammarinator 19.3

from itertools import chain
from grammarinator.runtime import *

import ClickHouseUnlexer


class ClickHouseUnparser(Grammarinator):

    def __init__(self, unlexer):
        super(ClickHouseUnparser, self).__init__()
        self.unlexer = unlexer
    @depthcontrol
    def queryList(self):
        current = self.create_node(UnparserRule(name='queryList'))
        current += self.queryStmt()
        if self.unlexer.max_depth >= 7:
            for _ in self.zero_or_more():
                current += self.unlexer.SEMICOLON()
                current += self.queryStmt()

        if self.unlexer.max_depth >= 1:
            for _ in self.zero_or_one():
                current += self.unlexer.SEMICOLON()

        current += self.unlexer.EOF()
        return current
    queryList.min_depth = 7

    @depthcontrol
    def queryStmt(self):
        current = self.create_node(UnparserRule(name='queryStmt'))
        current += self.query()
        if self.unlexer.max_depth >= 2:
            for _ in self.zero_or_one():
                current += self.unlexer.INTO()
                current += self.unlexer.OUTFILE()
                current += self.unlexer.STRING_LITERAL()

        if self.unlexer.max_depth >= 3:
            for _ in self.zero_or_one():
                current += self.unlexer.FORMAT()
                current += self.identifier()

        return current
    queryStmt.min_depth = 6

    @depthcontrol
    def query(self):
        current = self.create_node(UnparserRule(name='query'))
        choice = self.choice([0 if [7, 6, 5][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_70', i), 1) for i, w in enumerate([1, 1, 1])])
        self.unlexer.weights[('alt_70', choice)] = self.unlexer.weights.get(('alt_70', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.distributedStmt()
        elif choice == 1:
            current += self.selectUnionStmt()
        elif choice == 2:
            current += self.setStmt()
        return current
    query.min_depth = 5

    @depthcontrol
    def distributedStmt(self):
        current = self.create_node(UnparserRule(name='distributedStmt'))
        current += self.dropStmt()
        if self.unlexer.max_depth >= 3:
            for _ in self.zero_or_one():
                current += self.unlexer.ON()
                current += self.unlexer.CLUSTER()
                current += self.identifier()

        return current
    distributedStmt.min_depth = 6

    @depthcontrol
    def dropStmt(self):
        current = self.create_node(UnparserRule(name='dropStmt'))
        choice = self.choice([0 if [5, 5][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_75', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_75', choice)] = self.unlexer.weights.get(('alt_75', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current = self.dropStmt_DropDatabaseStmt()
        elif choice == 1:
            current = self.dropStmt_DropTableStmt()
        return current
    dropStmt.min_depth = 5

    @depthcontrol
    def dropStmt_DropDatabaseStmt(self):
        current = self.create_node(UnparserRule(name='dropStmt_DropDatabaseStmt'))
        current += self.unlexer.DROP()
        current += self.unlexer.DATABASE()
        if self.unlexer.max_depth >= 2:
            for _ in self.zero_or_one():
                current += self.unlexer.IF()
                current += self.unlexer.EXISTS()

        current += self.databaseIdentifier()
        return current
    dropStmt_DropDatabaseStmt.min_depth = 4

    @depthcontrol
    def dropStmt_DropTableStmt(self):
        current = self.create_node(UnparserRule(name='dropStmt_DropTableStmt'))
        current += self.unlexer.DROP()
        if self.unlexer.max_depth >= 2:
            for _ in self.zero_or_one():
                current += self.unlexer.TEMPORARY()

        current += self.unlexer.TABLE()
        if self.unlexer.max_depth >= 2:
            for _ in self.zero_or_one():
                current += self.unlexer.IF()
                current += self.unlexer.EXISTS()

        current += self.tableIdentifier()
        return current
    dropStmt_DropTableStmt.min_depth = 4

    @depthcontrol
    def selectUnionStmt(self):
        current = self.create_node(UnparserRule(name='selectUnionStmt'))
        current += self.selectStmt()
        if self.unlexer.max_depth >= 5:
            for _ in self.zero_or_more():
                current += self.unlexer.UNION()
                current += self.unlexer.ALL()
                current += self.selectStmt()

        return current
    selectUnionStmt.min_depth = 5

    @depthcontrol
    def selectStmt(self):
        current = self.create_node(UnparserRule(name='selectStmt'))
        if self.unlexer.max_depth >= 5:
            for _ in self.zero_or_one():
                current += self.withClause()

        current += self.unlexer.SELECT()
        if self.unlexer.max_depth >= 2:
            for _ in self.zero_or_one():
                current += self.unlexer.DISTINCT()

        current += self.columnExprList()
        if self.unlexer.max_depth >= 8:
            for _ in self.zero_or_one():
                current += self.fromClause()

        if self.unlexer.max_depth >= 4:
            for _ in self.zero_or_one():
                current += self.sampleClause()

        if self.unlexer.max_depth >= 5:
            for _ in self.zero_or_one():
                current += self.arrayJoinClause()

        if self.unlexer.max_depth >= 4:
            for _ in self.zero_or_one():
                current += self.prewhereClause()

        if self.unlexer.max_depth >= 4:
            for _ in self.zero_or_one():
                current += self.whereClause()

        if self.unlexer.max_depth >= 5:
            for _ in self.zero_or_one():
                current += self.groupByClause()

        if self.unlexer.max_depth >= 4:
            for _ in self.zero_or_one():
                current += self.havingClause()

        if self.unlexer.max_depth >= 6:
            for _ in self.zero_or_one():
                current += self.orderByClause()

        if self.unlexer.max_depth >= 5:
            for _ in self.zero_or_one():
                current += self.limitByClause()

        if self.unlexer.max_depth >= 4:
            for _ in self.zero_or_one():
                current += self.limitClause()

        if self.unlexer.max_depth >= 6:
            for _ in self.zero_or_one():
                current += self.settingsClause()

        return current
    selectStmt.min_depth = 4

    @depthcontrol
    def withClause(self):
        current = self.create_node(UnparserRule(name='withClause'))
        current += self.unlexer.WITH()
        current += self.columnExprList()
        return current
    withClause.min_depth = 4

    @depthcontrol
    def fromClause(self):
        current = self.create_node(UnparserRule(name='fromClause'))
        current += self.unlexer.FROM()
        current += self.joinExpr()
        if self.unlexer.max_depth >= 2:
            for _ in self.zero_or_one():
                current += self.unlexer.FINAL()

        return current
    fromClause.min_depth = 7

    @depthcontrol
    def sampleClause(self):
        current = self.create_node(UnparserRule(name='sampleClause'))
        current += self.unlexer.SAMPLE()
        current += self.ratioExpr()
        if self.unlexer.max_depth >= 3:
            for _ in self.zero_or_one():
                current += self.unlexer.OFFSET()
                current += self.ratioExpr()

        return current
    sampleClause.min_depth = 3

    @depthcontrol
    def arrayJoinClause(self):
        current = self.create_node(UnparserRule(name='arrayJoinClause'))
        if self.unlexer.max_depth >= 2:
            for _ in self.zero_or_one():
                current += self.unlexer.LEFT()

        current += self.unlexer.ARRAY()
        current += self.unlexer.JOIN()
        current += self.columnExprList()
        return current
    arrayJoinClause.min_depth = 4

    @depthcontrol
    def prewhereClause(self):
        current = self.create_node(UnparserRule(name='prewhereClause'))
        current += self.unlexer.PREWHERE()
        current += self.columnExpr()
        return current
    prewhereClause.min_depth = 3

    @depthcontrol
    def whereClause(self):
        current = self.create_node(UnparserRule(name='whereClause'))
        current += self.unlexer.WHERE()
        current += self.columnExpr()
        return current
    whereClause.min_depth = 3

    @depthcontrol
    def groupByClause(self):
        current = self.create_node(UnparserRule(name='groupByClause'))
        current += self.unlexer.GROUP()
        current += self.unlexer.BY()
        current += self.columnExprList()
        if self.unlexer.max_depth >= 2:
            for _ in self.zero_or_one():
                current += self.unlexer.WITH()
                current += self.unlexer.TOTALS()

        return current
    groupByClause.min_depth = 4

    @depthcontrol
    def havingClause(self):
        current = self.create_node(UnparserRule(name='havingClause'))
        current += self.unlexer.HAVING()
        current += self.columnExpr()
        return current
    havingClause.min_depth = 3

    @depthcontrol
    def orderByClause(self):
        current = self.create_node(UnparserRule(name='orderByClause'))
        current += self.unlexer.ORDER()
        current += self.unlexer.BY()
        current += self.orderExprList()
        return current
    orderByClause.min_depth = 5

    @depthcontrol
    def limitByClause(self):
        current = self.create_node(UnparserRule(name='limitByClause'))
        current += self.unlexer.LIMIT()
        current += self.limitExpr()
        current += self.unlexer.BY()
        current += self.columnExprList()
        return current
    limitByClause.min_depth = 4

    @depthcontrol
    def limitClause(self):
        current = self.create_node(UnparserRule(name='limitClause'))
        current += self.unlexer.LIMIT()
        current += self.limitExpr()
        return current
    limitClause.min_depth = 3

    @depthcontrol
    def settingsClause(self):
        current = self.create_node(UnparserRule(name='settingsClause'))
        current += self.unlexer.SETTINGS()
        current += self.settingExprList()
        return current
    settingsClause.min_depth = 5

    @depthcontrol
    def setStmt(self):
        current = self.create_node(UnparserRule(name='setStmt'))
        current += self.unlexer.SET()
        current += self.settingExpr()
        return current
    setStmt.min_depth = 4

    @depthcontrol
    def joinExpr(self):
        current = self.create_node(UnparserRule(name='joinExpr'))
        choice = self.choice([0 if [6, 8, 8, 8][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_99', i), 1) for i, w in enumerate([1, 1, 1, 1])])
        self.unlexer.weights[('alt_99', choice)] = self.unlexer.weights.get(('alt_99', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current = self.joinExpr_JoinExprTable()
        elif choice == 1:
            current = self.joinExpr_JoinExprParens()
        elif choice == 2:
            current = self.joinExpr_JoinExprOp()
        elif choice == 3:
            current = self.joinExpr_JoinExprCrossOp()
        return current
    joinExpr.min_depth = 6

    @depthcontrol
    def joinExpr_JoinExprTable(self):
        current = self.create_node(UnparserRule(name='joinExpr_JoinExprTable'))
        current += self.tableExpr()
        return current
    joinExpr_JoinExprTable.min_depth = 5

    @depthcontrol
    def joinExpr_JoinExprParens(self):
        current = self.create_node(UnparserRule(name='joinExpr_JoinExprParens'))
        current += self.unlexer.LPAREN()
        current += self.joinExpr()
        current += self.unlexer.RPAREN()
        return current
    joinExpr_JoinExprParens.min_depth = 7

    @depthcontrol
    def joinExpr_JoinExprOp(self):
        current = self.create_node(UnparserRule(name='joinExpr_JoinExprOp'))
        current += self.joinExpr()
        if self.unlexer.max_depth >= 2:
            for _ in self.zero_or_one():
                choice = self.choice([0 if [2, 2][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_105', i), 1) for i, w in enumerate([1, 1])])
                self.unlexer.weights[('alt_105', choice)] = self.unlexer.weights.get(('alt_105', choice), 1) * self.unlexer.cooldown
                if choice == 0:
                    current += self.unlexer.GLOBAL()
                elif choice == 1:
                    current += self.unlexer.LOCAL()

        current += self.joinOp()
        current += self.unlexer.JOIN()
        current += self.joinExpr()
        current += self.joinConstraintClause()
        return current
    joinExpr_JoinExprOp.min_depth = 7

    @depthcontrol
    def joinExpr_JoinExprCrossOp(self):
        current = self.create_node(UnparserRule(name='joinExpr_JoinExprCrossOp'))
        current += self.joinExpr()
        current += self.joinOpCross()
        current += self.joinExpr()
        return current
    joinExpr_JoinExprCrossOp.min_depth = 7

    @depthcontrol
    def joinOp(self):
        current = self.create_node(UnparserRule(name='joinOp'))
        choice = self.choice([0 if [3, 3, 3][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_108', i), 1) for i, w in enumerate([1, 1, 1])])
        self.unlexer.weights[('alt_108', choice)] = self.unlexer.weights.get(('alt_108', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current = self.joinOp_JoinOpInner()
        elif choice == 1:
            current = self.joinOp_JoinOpLeftRight()
        elif choice == 2:
            current = self.joinOp_JoinOpFull()
        return current
    joinOp.min_depth = 3

    @depthcontrol
    def joinOp_JoinOpInner(self):
        current = self.create_node(UnparserRule(name='joinOp_JoinOpInner'))
        choice = self.choice([0 if [2, 2][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_112', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_112', choice)] = self.unlexer.weights.get(('alt_112', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            if self.unlexer.max_depth >= 2:
                for _ in self.zero_or_one():
                    current += self.unlexer.ANY()

            current += self.unlexer.INNER()
        elif choice == 1:
            current += self.unlexer.INNER()
            if self.unlexer.max_depth >= 2:
                for _ in self.zero_or_one():
                    current += self.unlexer.ANY()

        return current
    joinOp_JoinOpInner.min_depth = 2

    @depthcontrol
    def joinOp_JoinOpLeftRight(self):
        current = self.create_node(UnparserRule(name='joinOp_JoinOpLeftRight'))
        choice = self.choice([0 if [2, 2][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_117', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_117', choice)] = self.unlexer.weights.get(('alt_117', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            if self.unlexer.max_depth >= 2:
                for _ in self.zero_or_one():
                    choice = self.choice([0 if [2, 2, 2, 2, 2][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_121', i), 1) for i, w in enumerate([1, 1, 1, 1, 1])])
                    self.unlexer.weights[('alt_121', choice)] = self.unlexer.weights.get(('alt_121', choice), 1) * self.unlexer.cooldown
                    if choice == 0:
                        current += self.unlexer.OUTER()
                    elif choice == 1:
                        current += self.unlexer.SEMI()
                    elif choice == 2:
                        current += self.unlexer.ANTI()
                    elif choice == 3:
                        current += self.unlexer.ANY()
                    elif choice == 4:
                        current += self.unlexer.ASOF()

            choice = self.choice([0 if [2, 2][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_127', i), 1) for i, w in enumerate([1, 1])])
            self.unlexer.weights[('alt_127', choice)] = self.unlexer.weights.get(('alt_127', choice), 1) * self.unlexer.cooldown
            if choice == 0:
                current += self.unlexer.LEFT()
            elif choice == 1:
                current += self.unlexer.RIGHT()
        elif choice == 1:
            choice = self.choice([0 if [2, 2][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_130', i), 1) for i, w in enumerate([1, 1])])
            self.unlexer.weights[('alt_130', choice)] = self.unlexer.weights.get(('alt_130', choice), 1) * self.unlexer.cooldown
            if choice == 0:
                current += self.unlexer.LEFT()
            elif choice == 1:
                current += self.unlexer.RIGHT()
            if self.unlexer.max_depth >= 2:
                for _ in self.zero_or_one():
                    choice = self.choice([0 if [2, 2, 2, 2, 2][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_134', i), 1) for i, w in enumerate([1, 1, 1, 1, 1])])
                    self.unlexer.weights[('alt_134', choice)] = self.unlexer.weights.get(('alt_134', choice), 1) * self.unlexer.cooldown
                    if choice == 0:
                        current += self.unlexer.OUTER()
                    elif choice == 1:
                        current += self.unlexer.SEMI()
                    elif choice == 2:
                        current += self.unlexer.ANTI()
                    elif choice == 3:
                        current += self.unlexer.ANY()
                    elif choice == 4:
                        current += self.unlexer.ASOF()

        return current
    joinOp_JoinOpLeftRight.min_depth = 2

    @depthcontrol
    def joinOp_JoinOpFull(self):
        current = self.create_node(UnparserRule(name='joinOp_JoinOpFull'))
        choice = self.choice([0 if [2, 2][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_140', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_140', choice)] = self.unlexer.weights.get(('alt_140', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            if self.unlexer.max_depth >= 2:
                for _ in self.zero_or_one():
                    choice = self.choice([0 if [2, 2][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_144', i), 1) for i, w in enumerate([1, 1])])
                    self.unlexer.weights[('alt_144', choice)] = self.unlexer.weights.get(('alt_144', choice), 1) * self.unlexer.cooldown
                    if choice == 0:
                        current += self.unlexer.OUTER()
                    elif choice == 1:
                        current += self.unlexer.ANY()

            current += self.unlexer.FULL()
        elif choice == 1:
            current += self.unlexer.FULL()
            if self.unlexer.max_depth >= 2:
                for _ in self.zero_or_one():
                    choice = self.choice([0 if [2, 2][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_148', i), 1) for i, w in enumerate([1, 1])])
                    self.unlexer.weights[('alt_148', choice)] = self.unlexer.weights.get(('alt_148', choice), 1) * self.unlexer.cooldown
                    if choice == 0:
                        current += self.unlexer.OUTER()
                    elif choice == 1:
                        current += self.unlexer.ANY()

        return current
    joinOp_JoinOpFull.min_depth = 2

    @depthcontrol
    def joinOpCross(self):
        current = self.create_node(UnparserRule(name='joinOpCross'))
        choice = self.choice([0 if [2, 1][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_151', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_151', choice)] = self.unlexer.weights.get(('alt_151', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            if self.unlexer.max_depth >= 2:
                for _ in self.zero_or_one():
                    choice = self.choice([0 if [2, 2][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_155', i), 1) for i, w in enumerate([1, 1])])
                    self.unlexer.weights[('alt_155', choice)] = self.unlexer.weights.get(('alt_155', choice), 1) * self.unlexer.cooldown
                    if choice == 0:
                        current += self.unlexer.GLOBAL()
                    elif choice == 1:
                        current += self.unlexer.LOCAL()

            current += self.unlexer.CROSS()
            current += self.unlexer.JOIN()
        elif choice == 1:
            current += self.unlexer.COMMA()
        return current
    joinOpCross.min_depth = 1

    @depthcontrol
    def joinConstraintClause(self):
        current = self.create_node(UnparserRule(name='joinConstraintClause'))
        choice = self.choice([0 if [4, 4, 4][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_158', i), 1) for i, w in enumerate([1, 1, 1])])
        self.unlexer.weights[('alt_158', choice)] = self.unlexer.weights.get(('alt_158', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.unlexer.ON()
            current += self.columnExprList()
        elif choice == 1:
            current += self.unlexer.USING()
            current += self.unlexer.LPAREN()
            current += self.columnExprList()
            current += self.unlexer.RPAREN()
        elif choice == 2:
            current += self.unlexer.USING()
            current += self.columnExprList()
        return current
    joinConstraintClause.min_depth = 4

    @depthcontrol
    def limitExpr(self):
        current = self.create_node(UnparserRule(name='limitExpr'))
        current += self.unlexer.NUMBER_LITERAL()
        if self.unlexer.max_depth >= 2:
            for _ in self.zero_or_one():
                choice = self.choice([0 if [1, 2][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_163', i), 1) for i, w in enumerate([1, 1])])
                self.unlexer.weights[('alt_163', choice)] = self.unlexer.weights.get(('alt_163', choice), 1) * self.unlexer.cooldown
                if choice == 0:
                    current += self.unlexer.COMMA()
                elif choice == 1:
                    current += self.unlexer.OFFSET()
                current += self.unlexer.NUMBER_LITERAL()

        return current
    limitExpr.min_depth = 2

    @depthcontrol
    def orderExprList(self):
        current = self.create_node(UnparserRule(name='orderExprList'))
        current += self.orderExpr()
        if self.unlexer.max_depth >= 4:
            for _ in self.zero_or_more():
                current += self.unlexer.COMMA()
                current += self.orderExpr()

        return current
    orderExprList.min_depth = 4

    @depthcontrol
    def orderExpr(self):
        current = self.create_node(UnparserRule(name='orderExpr'))
        current += self.columnExpr()
        if self.unlexer.max_depth >= 2:
            for _ in self.zero_or_one():
                choice = self.choice([0 if [2, 2][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_168', i), 1) for i, w in enumerate([1, 1])])
                self.unlexer.weights[('alt_168', choice)] = self.unlexer.weights.get(('alt_168', choice), 1) * self.unlexer.cooldown
                if choice == 0:
                    current += self.unlexer.ASCENDING()
                elif choice == 1:
                    current += self.unlexer.DESCENDING()

        if self.unlexer.max_depth >= 2:
            for _ in self.zero_or_one():
                current += self.unlexer.NULLS()
                choice = self.choice([0 if [2, 2][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_172', i), 1) for i, w in enumerate([1, 1])])
                self.unlexer.weights[('alt_172', choice)] = self.unlexer.weights.get(('alt_172', choice), 1) * self.unlexer.cooldown
                if choice == 0:
                    current += self.unlexer.FIRST()
                elif choice == 1:
                    current += self.unlexer.LAST()

        if self.unlexer.max_depth >= 2:
            for _ in self.zero_or_one():
                current += self.unlexer.COLLATE()
                current += self.unlexer.STRING_LITERAL()

        return current
    orderExpr.min_depth = 3

    @depthcontrol
    def ratioExpr(self):
        current = self.create_node(UnparserRule(name='ratioExpr'))
        current += self.unlexer.NUMBER_LITERAL()
        current += self.unlexer.SLASH()
        current += self.unlexer.NUMBER_LITERAL()
        return current
    ratioExpr.min_depth = 2

    @depthcontrol
    def settingExprList(self):
        current = self.create_node(UnparserRule(name='settingExprList'))
        current += self.settingExpr()
        if self.unlexer.max_depth >= 4:
            for _ in self.zero_or_more():
                current += self.unlexer.COMMA()
                current += self.settingExpr()

        return current
    settingExprList.min_depth = 4

    @depthcontrol
    def settingExpr(self):
        current = self.create_node(UnparserRule(name='settingExpr'))
        current += self.identifier()
        current += self.unlexer.EQ_SINGLE()
        current += self.literal()
        return current
    settingExpr.min_depth = 3

    @depthcontrol
    def columnExprList(self):
        current = self.create_node(UnparserRule(name='columnExprList'))
        current += self.columnExpr()
        if self.unlexer.max_depth >= 3:
            for _ in self.zero_or_more():
                current += self.unlexer.COMMA()
                current += self.columnExpr()

        return current
    columnExprList.min_depth = 3

    @depthcontrol
    def columnExpr(self):
        current = self.create_node(UnparserRule(name='columnExpr'))
        choice = self.choice([0 if [4, 2, 5, 2, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_178', i), 1) for i, w in enumerate([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])])
        self.unlexer.weights[('alt_178', choice)] = self.unlexer.weights.get(('alt_178', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current = self.columnExpr_ColumnExprLiteral()
        elif choice == 1:
            current = self.columnExpr_ColumnExprAsterisk()
        elif choice == 2:
            current = self.columnExpr_ColumnExprTuple()
        elif choice == 3:
            current = self.columnExpr_ColumnExprArray()
        elif choice == 4:
            current = self.columnExpr_ColumnExprCase()
        elif choice == 5:
            current = self.columnExpr_ColumnExprExtract()
        elif choice == 6:
            current = self.columnExpr_ColumnExprTrim()
        elif choice == 7:
            current = self.columnExpr_ColumnExprInterval()
        elif choice == 8:
            current = self.columnExpr_ColumnExprIdentifier()
        elif choice == 9:
            current = self.columnExpr_ColumnExprFunction()
        elif choice == 10:
            current = self.columnExpr_ColumnExprArrayAccess()
        elif choice == 11:
            current = self.columnExpr_ColumnExprTupleAccess()
        elif choice == 12:
            current = self.columnExpr_ColumnExprUnaryOp()
        elif choice == 13:
            current = self.columnExpr_ColumnExprIsNull()
        elif choice == 14:
            current = self.columnExpr_ColumnExprBinaryOp()
        elif choice == 15:
            current = self.columnExpr_ColumnExprTernaryOp()
        elif choice == 16:
            current = self.columnExpr_ColumnExprBetween()
        elif choice == 17:
            current = self.columnExpr_ColumnExprAlias()
        return current
    columnExpr.min_depth = 2

    @depthcontrol
    def columnExpr_ColumnExprLiteral(self):
        current = self.create_node(UnparserRule(name='columnExpr_ColumnExprLiteral'))
        current += self.literal()
        return current
    columnExpr_ColumnExprLiteral.min_depth = 3

    @depthcontrol
    def columnExpr_ColumnExprAsterisk(self):
        current = self.create_node(UnparserRule(name='columnExpr_ColumnExprAsterisk'))
        current += self.unlexer.ASTERISK()
        return current
    columnExpr_ColumnExprAsterisk.min_depth = 1

    @depthcontrol
    def columnExpr_ColumnExprTuple(self):
        current = self.create_node(UnparserRule(name='columnExpr_ColumnExprTuple'))
        current += self.unlexer.LPAREN()
        current += self.columnExprList()
        current += self.unlexer.RPAREN()
        return current
    columnExpr_ColumnExprTuple.min_depth = 4

    @depthcontrol
    def columnExpr_ColumnExprArray(self):
        current = self.create_node(UnparserRule(name='columnExpr_ColumnExprArray'))
        current += self.unlexer.LBRACKET()
        if self.unlexer.max_depth >= 4:
            for _ in self.zero_or_one():
                current += self.columnExprList()

        current += self.unlexer.RBRACKET()
        return current
    columnExpr_ColumnExprArray.min_depth = 1

    @depthcontrol
    def columnExpr_ColumnExprCase(self):
        current = self.create_node(UnparserRule(name='columnExpr_ColumnExprCase'))
        current += self.unlexer.CASE()
        if self.unlexer.max_depth >= 3:
            for _ in self.zero_or_one():
                current += self.columnExpr()

        if self.unlexer.max_depth >= 0:
            for _ in self.one_or_more():
                current += self.unlexer.WHEN()
                current += self.columnExpr()
                current += self.unlexer.THEN()
                current += self.columnExpr()

        if self.unlexer.max_depth >= 3:
            for _ in self.zero_or_one():
                current += self.unlexer.ELSE()
                current += self.columnExpr()

        current += self.unlexer.END()
        return current
    columnExpr_ColumnExprCase.min_depth = 3

    @depthcontrol
    def columnExpr_ColumnExprExtract(self):
        current = self.create_node(UnparserRule(name='columnExpr_ColumnExprExtract'))
        current += self.unlexer.EXTRACT()
        current += self.unlexer.LPAREN()
        current += self.unlexer.INTERVAL_TYPE()
        current += self.unlexer.FROM()
        current += self.columnExpr()
        current += self.unlexer.RPAREN()
        return current
    columnExpr_ColumnExprExtract.min_depth = 3

    @depthcontrol
    def columnExpr_ColumnExprTrim(self):
        current = self.create_node(UnparserRule(name='columnExpr_ColumnExprTrim'))
        current += self.unlexer.TRIM()
        current += self.unlexer.LPAREN()
        choice = self.choice([0 if [2, 2, 2][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_200', i), 1) for i, w in enumerate([1, 1, 1])])
        self.unlexer.weights[('alt_200', choice)] = self.unlexer.weights.get(('alt_200', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.unlexer.BOTH()
        elif choice == 1:
            current += self.unlexer.LEADING()
        elif choice == 2:
            current += self.unlexer.TRAILING()
        current += self.unlexer.STRING_LITERAL()
        current += self.unlexer.FROM()
        current += self.columnExpr()
        current += self.unlexer.RPAREN()
        return current
    columnExpr_ColumnExprTrim.min_depth = 3

    @depthcontrol
    def columnExpr_ColumnExprInterval(self):
        current = self.create_node(UnparserRule(name='columnExpr_ColumnExprInterval'))
        current += self.unlexer.INTERVAL()
        current += self.columnExpr()
        current += self.unlexer.INTERVAL_TYPE()
        return current
    columnExpr_ColumnExprInterval.min_depth = 3

    @depthcontrol
    def columnExpr_ColumnExprIdentifier(self):
        current = self.create_node(UnparserRule(name='columnExpr_ColumnExprIdentifier'))
        current += self.columnIdentifier()
        return current
    columnExpr_ColumnExprIdentifier.min_depth = 4

    @depthcontrol
    def columnExpr_ColumnExprFunction(self):
        current = self.create_node(UnparserRule(name='columnExpr_ColumnExprFunction'))
        current += self.identifier()
        if self.unlexer.max_depth >= 1:
            for _ in self.zero_or_one():
                current += self.unlexer.LPAREN()
                if self.unlexer.max_depth >= 4:
                    for _ in self.zero_or_one():
                        current += self.columnParamList()

                current += self.unlexer.RPAREN()

        current += self.unlexer.LPAREN()
        if self.unlexer.max_depth >= 5:
            for _ in self.zero_or_one():
                current += self.columnArgList()

        current += self.unlexer.RPAREN()
        return current
    columnExpr_ColumnExprFunction.min_depth = 3

    @depthcontrol
    def columnExpr_ColumnExprArrayAccess(self):
        current = self.create_node(UnparserRule(name='columnExpr_ColumnExprArrayAccess'))
        current += self.columnExpr()
        current += self.unlexer.LBRACKET()
        current += self.columnExpr()
        current += self.unlexer.RBRACKET()
        return current
    columnExpr_ColumnExprArrayAccess.min_depth = 3

    @depthcontrol
    def columnExpr_ColumnExprTupleAccess(self):
        current = self.create_node(UnparserRule(name='columnExpr_ColumnExprTupleAccess'))
        current += self.columnExpr()
        current += self.unlexer.DOT()
        current += self.unlexer.NUMBER_LITERAL()
        return current
    columnExpr_ColumnExprTupleAccess.min_depth = 3

    @depthcontrol
    def columnExpr_ColumnExprUnaryOp(self):
        current = self.create_node(UnparserRule(name='columnExpr_ColumnExprUnaryOp'))
        current += self.unaryOp()
        current += self.columnExpr()
        return current
    columnExpr_ColumnExprUnaryOp.min_depth = 3

    @depthcontrol
    def columnExpr_ColumnExprIsNull(self):
        current = self.create_node(UnparserRule(name='columnExpr_ColumnExprIsNull'))
        current += self.columnExpr()
        current += self.unlexer.IS()
        if self.unlexer.max_depth >= 2:
            for _ in self.zero_or_one():
                current += self.unlexer.NOT()

        current += self.unlexer.NULL_SQL()
        return current
    columnExpr_ColumnExprIsNull.min_depth = 3

    @depthcontrol
    def columnExpr_ColumnExprBinaryOp(self):
        current = self.create_node(UnparserRule(name='columnExpr_ColumnExprBinaryOp'))
        current += self.columnExpr()
        current += self.binaryOp()
        current += self.columnExpr()
        return current
    columnExpr_ColumnExprBinaryOp.min_depth = 3

    @depthcontrol
    def columnExpr_ColumnExprTernaryOp(self):
        current = self.create_node(UnparserRule(name='columnExpr_ColumnExprTernaryOp'))
        current += self.columnExpr()
        current += self.unlexer.QUERY()
        current += self.columnExpr()
        current += self.unlexer.COLON()
        current += self.columnExpr()
        return current
    columnExpr_ColumnExprTernaryOp.min_depth = 3

    @depthcontrol
    def columnExpr_ColumnExprBetween(self):
        current = self.create_node(UnparserRule(name='columnExpr_ColumnExprBetween'))
        current += self.columnExpr()
        if self.unlexer.max_depth >= 2:
            for _ in self.zero_or_one():
                current += self.unlexer.NOT()

        current += self.unlexer.BETWEEN()
        current += self.columnExpr()
        current += self.unlexer.AND()
        current += self.columnExpr()
        return current
    columnExpr_ColumnExprBetween.min_depth = 3

    @depthcontrol
    def columnExpr_ColumnExprAlias(self):
        current = self.create_node(UnparserRule(name='columnExpr_ColumnExprAlias'))
        current += self.columnExpr()
        current += self.unlexer.AS()
        current += self.identifier()
        return current
    columnExpr_ColumnExprAlias.min_depth = 3

    @depthcontrol
    def columnParamList(self):
        current = self.create_node(UnparserRule(name='columnParamList'))
        current += self.literal()
        if self.unlexer.max_depth >= 3:
            for _ in self.zero_or_more():
                current += self.unlexer.COMMA()
                current += self.literal()

        return current
    columnParamList.min_depth = 3

    @depthcontrol
    def columnArgList(self):
        current = self.create_node(UnparserRule(name='columnArgList'))
        current += self.columnArgExpr()
        if self.unlexer.max_depth >= 4:
            for _ in self.zero_or_more():
                current += self.unlexer.COMMA()
                current += self.columnArgExpr()

        return current
    columnArgList.min_depth = 4

    @depthcontrol
    def columnArgExpr(self):
        current = self.create_node(UnparserRule(name='columnArgExpr'))
        choice = self.choice([0 if [4, 3][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_211', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_211', choice)] = self.unlexer.weights.get(('alt_211', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.columnLambdaExpr()
        elif choice == 1:
            current += self.columnExpr()
        return current
    columnArgExpr.min_depth = 3

    @depthcontrol
    def columnLambdaExpr(self):
        current = self.create_node(UnparserRule(name='columnLambdaExpr'))
        choice = self.choice([0 if [3, 3][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_214', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_214', choice)] = self.unlexer.weights.get(('alt_214', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.unlexer.LPAREN()
            current += self.identifier()
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_more():
                    current += self.unlexer.COMMA()
                    current += self.identifier()

            current += self.unlexer.RPAREN()
        elif choice == 1:
            current += self.identifier()
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_more():
                    current += self.unlexer.COMMA()
                    current += self.identifier()

        current += self.unlexer.ARROW()
        current += self.columnExpr()
        return current
    columnLambdaExpr.min_depth = 3

    @depthcontrol
    def columnIdentifier(self):
        current = self.create_node(UnparserRule(name='columnIdentifier'))
        if self.unlexer.max_depth >= 4:
            for _ in self.zero_or_one():
                current += self.tableIdentifier()
                current += self.unlexer.DOT()

        current += self.identifier()
        return current
    columnIdentifier.min_depth = 3

    @depthcontrol
    def tableExpr(self):
        current = self.create_node(UnparserRule(name='tableExpr'))
        choice = self.choice([0 if [5, 4, 7, 6][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_220', i), 1) for i, w in enumerate([1, 1, 1, 1])])
        self.unlexer.weights[('alt_220', choice)] = self.unlexer.weights.get(('alt_220', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current = self.tableExpr_TableExprIdentifier()
        elif choice == 1:
            current = self.tableExpr_TableExprFunction()
        elif choice == 2:
            current = self.tableExpr_TableExprSubquery()
        elif choice == 3:
            current = self.tableExpr_TableExprAlias()
        return current
    tableExpr.min_depth = 4

    @depthcontrol
    def tableExpr_TableExprIdentifier(self):
        current = self.create_node(UnparserRule(name='tableExpr_TableExprIdentifier'))
        current += self.tableIdentifier()
        return current
    tableExpr_TableExprIdentifier.min_depth = 4

    @depthcontrol
    def tableExpr_TableExprFunction(self):
        current = self.create_node(UnparserRule(name='tableExpr_TableExprFunction'))
        current += self.identifier()
        current += self.unlexer.LPAREN()
        if self.unlexer.max_depth >= 5:
            for _ in self.zero_or_one():
                current += self.tableArgList()

        current += self.unlexer.RPAREN()
        return current
    tableExpr_TableExprFunction.min_depth = 3

    @depthcontrol
    def tableExpr_TableExprSubquery(self):
        current = self.create_node(UnparserRule(name='tableExpr_TableExprSubquery'))
        current += self.unlexer.LPAREN()
        current += self.selectUnionStmt()
        current += self.unlexer.RPAREN()
        return current
    tableExpr_TableExprSubquery.min_depth = 6

    @depthcontrol
    def tableExpr_TableExprAlias(self):
        current = self.create_node(UnparserRule(name='tableExpr_TableExprAlias'))
        current += self.tableExpr()
        current += self.unlexer.AS()
        current += self.identifier()
        return current
    tableExpr_TableExprAlias.min_depth = 5

    @depthcontrol
    def tableIdentifier(self):
        current = self.create_node(UnparserRule(name='tableIdentifier'))
        if self.unlexer.max_depth >= 4:
            for _ in self.zero_or_one():
                current += self.databaseIdentifier()
                current += self.unlexer.DOT()

        current += self.identifier()
        return current
    tableIdentifier.min_depth = 3

    @depthcontrol
    def tableArgList(self):
        current = self.create_node(UnparserRule(name='tableArgList'))
        current += self.tableArgExpr()
        if self.unlexer.max_depth >= 4:
            for _ in self.zero_or_more():
                current += self.unlexer.COMMA()
                current += self.tableArgExpr()

        return current
    tableArgList.min_depth = 4

    @depthcontrol
    def tableArgExpr(self):
        current = self.create_node(UnparserRule(name='tableArgExpr'))
        choice = self.choice([0 if [3, 4][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_228', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_228', choice)] = self.unlexer.weights.get(('alt_228', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.literal()
        elif choice == 1:
            current += self.tableIdentifier()
        return current
    tableArgExpr.min_depth = 3

    @depthcontrol
    def databaseIdentifier(self):
        current = self.create_node(UnparserRule(name='databaseIdentifier'))
        current += self.identifier()
        return current
    databaseIdentifier.min_depth = 3

    @depthcontrol
    def literal(self):
        current = self.create_node(UnparserRule(name='literal'))
        choice = self.choice([0 if [2, 2, 2][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_231', i), 1) for i, w in enumerate([1, 1, 1])])
        self.unlexer.weights[('alt_231', choice)] = self.unlexer.weights.get(('alt_231', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.unlexer.NUMBER_LITERAL()
        elif choice == 1:
            current += self.unlexer.STRING_LITERAL()
        elif choice == 2:
            current += self.unlexer.NULL_SQL()
        return current
    literal.min_depth = 2

    @depthcontrol
    def keyword(self):
        current = self.create_node(UnparserRule(name='keyword'))
        choice = self.choice([0 if [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_235', i), 1) for i, w in enumerate([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])])
        self.unlexer.weights[('alt_235', choice)] = self.unlexer.weights.get(('alt_235', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.unlexer.ALL()
        elif choice == 1:
            current += self.unlexer.AND()
        elif choice == 2:
            current += self.unlexer.ANTI()
        elif choice == 3:
            current += self.unlexer.ANY()
        elif choice == 4:
            current += self.unlexer.ARRAY()
        elif choice == 5:
            current += self.unlexer.AS()
        elif choice == 6:
            current += self.unlexer.ASCENDING()
        elif choice == 7:
            current += self.unlexer.ASOF()
        elif choice == 8:
            current += self.unlexer.BETWEEN()
        elif choice == 9:
            current += self.unlexer.BOTH()
        elif choice == 10:
            current += self.unlexer.BY()
        elif choice == 11:
            current += self.unlexer.CASE()
        elif choice == 12:
            current += self.unlexer.CAST()
        elif choice == 13:
            current += self.unlexer.CLUSTER()
        elif choice == 14:
            current += self.unlexer.COLLATE()
        elif choice == 15:
            current += self.unlexer.CROSS()
        elif choice == 16:
            current += self.unlexer.DAY()
        elif choice == 17:
            current += self.unlexer.DATABASE()
        elif choice == 18:
            current += self.unlexer.DESCENDING()
        elif choice == 19:
            current += self.unlexer.DISTINCT()
        elif choice == 20:
            current += self.unlexer.DROP()
        elif choice == 21:
            current += self.unlexer.ELSE()
        elif choice == 22:
            current += self.unlexer.END()
        elif choice == 23:
            current += self.unlexer.EXISTS()
        elif choice == 24:
            current += self.unlexer.EXTRACT()
        elif choice == 25:
            current += self.unlexer.FINAL()
        elif choice == 26:
            current += self.unlexer.FIRST()
        elif choice == 27:
            current += self.unlexer.FORMAT()
        elif choice == 28:
            current += self.unlexer.FROM()
        elif choice == 29:
            current += self.unlexer.FULL()
        elif choice == 30:
            current += self.unlexer.GLOBAL()
        elif choice == 31:
            current += self.unlexer.GROUP()
        elif choice == 32:
            current += self.unlexer.HAVING()
        elif choice == 33:
            current += self.unlexer.HOUR()
        elif choice == 34:
            current += self.unlexer.IF()
        elif choice == 35:
            current += self.unlexer.IN()
        elif choice == 36:
            current += self.unlexer.INNER()
        elif choice == 37:
            current += self.unlexer.INSERT()
        elif choice == 38:
            current += self.unlexer.INTERVAL()
        elif choice == 39:
            current += self.unlexer.INTO()
        elif choice == 40:
            current += self.unlexer.IS()
        elif choice == 41:
            current += self.unlexer.JOIN()
        elif choice == 42:
            current += self.unlexer.LAST()
        elif choice == 43:
            current += self.unlexer.LEADING()
        elif choice == 44:
            current += self.unlexer.LEFT()
        elif choice == 45:
            current += self.unlexer.LIKE()
        elif choice == 46:
            current += self.unlexer.LIMIT()
        elif choice == 47:
            current += self.unlexer.LOCAL()
        elif choice == 48:
            current += self.unlexer.MINUTE()
        elif choice == 49:
            current += self.unlexer.MONTH()
        elif choice == 50:
            current += self.unlexer.NOT()
        elif choice == 51:
            current += self.unlexer.NULLS()
        elif choice == 52:
            current += self.unlexer.OFFSET()
        elif choice == 53:
            current += self.unlexer.ON()
        elif choice == 54:
            current += self.unlexer.OR()
        elif choice == 55:
            current += self.unlexer.ORDER()
        elif choice == 56:
            current += self.unlexer.OUTER()
        elif choice == 57:
            current += self.unlexer.OUTFILE()
        elif choice == 58:
            current += self.unlexer.PREWHERE()
        elif choice == 59:
            current += self.unlexer.QUARTER()
        elif choice == 60:
            current += self.unlexer.RIGHT()
        elif choice == 61:
            current += self.unlexer.SAMPLE()
        elif choice == 62:
            current += self.unlexer.SECOND()
        elif choice == 63:
            current += self.unlexer.SELECT()
        elif choice == 64:
            current += self.unlexer.SEMI()
        elif choice == 65:
            current += self.unlexer.SET()
        elif choice == 66:
            current += self.unlexer.SETTINGS()
        elif choice == 67:
            current += self.unlexer.TABLE()
        elif choice == 68:
            current += self.unlexer.TEMPORARY()
        elif choice == 69:
            current += self.unlexer.THEN()
        elif choice == 70:
            current += self.unlexer.TOTALS()
        elif choice == 71:
            current += self.unlexer.TRAILING()
        elif choice == 72:
            current += self.unlexer.TRIM()
        elif choice == 73:
            current += self.unlexer.UNION()
        elif choice == 74:
            current += self.unlexer.USING()
        elif choice == 75:
            current += self.unlexer.WEEK()
        elif choice == 76:
            current += self.unlexer.WHEN()
        elif choice == 77:
            current += self.unlexer.WHERE()
        elif choice == 78:
            current += self.unlexer.WITH()
        elif choice == 79:
            current += self.unlexer.YEAR()
        return current
    keyword.min_depth = 2

    @depthcontrol
    def identifier(self):
        current = self.create_node(UnparserRule(name='identifier'))
        choice = self.choice([0 if [2, 3, 3][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_316', i), 1) for i, w in enumerate([1, 1, 1])])
        self.unlexer.weights[('alt_316', choice)] = self.unlexer.weights.get(('alt_316', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.unlexer.IDENTIFIER()
        elif choice == 1:
            current += self.unlexer.INTERVAL_TYPE()
        elif choice == 2:
            current += self.keyword()
        return current
    identifier.min_depth = 2

    @depthcontrol
    def unaryOp(self):
        current = self.create_node(UnparserRule(name='unaryOp'))
        choice = self.choice([0 if [1, 2][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_320', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_320', choice)] = self.unlexer.weights.get(('alt_320', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.unlexer.DASH()
        elif choice == 1:
            current += self.unlexer.NOT()
        return current
    unaryOp.min_depth = 1

    @depthcontrol
    def binaryOp(self):
        current = self.create_node(UnparserRule(name='binaryOp'))
        choice = self.choice([0 if [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_323', i), 1) for i, w in enumerate([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])])
        self.unlexer.weights[('alt_323', choice)] = self.unlexer.weights.get(('alt_323', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.unlexer.CONCAT()
        elif choice == 1:
            current += self.unlexer.ASTERISK()
        elif choice == 2:
            current += self.unlexer.SLASH()
        elif choice == 3:
            current += self.unlexer.PLUS()
        elif choice == 4:
            current += self.unlexer.DASH()
        elif choice == 5:
            current += self.unlexer.PERCENT()
        elif choice == 6:
            current += self.unlexer.EQ_DOUBLE()
        elif choice == 7:
            current += self.unlexer.EQ_SINGLE()
        elif choice == 8:
            current += self.unlexer.NOT_EQ()
        elif choice == 9:
            current += self.unlexer.LE()
        elif choice == 10:
            current += self.unlexer.GE()
        elif choice == 11:
            current += self.unlexer.LT()
        elif choice == 12:
            current += self.unlexer.GT()
        elif choice == 13:
            current += self.unlexer.AND()
        elif choice == 14:
            current += self.unlexer.OR()
        elif choice == 15:
            if self.unlexer.max_depth >= 2:
                for _ in self.zero_or_one():
                    current += self.unlexer.NOT()

            current += self.unlexer.LIKE()
        elif choice == 16:
            if self.unlexer.max_depth >= 2:
                for _ in self.zero_or_one():
                    current += self.unlexer.GLOBAL()

            if self.unlexer.max_depth >= 2:
                for _ in self.zero_or_one():
                    current += self.unlexer.NOT()

            current += self.unlexer.IN()
        return current
    binaryOp.min_depth = 1

    default_rule = queryList

