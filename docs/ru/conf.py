# -*- coding: utf-8 -*-
#
# ClickHouse documentation build configuration file, created by
# sphinx-quickstart on Tue Mar 21 13:05:32 2017.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.
from __future__ import unicode_literals

import collections
import os
import sys

from recommonmark.parser import CommonMarkParser
from recommonmark.transform import AutoStructify

from docutils import nodes, transforms

nodes._non_id_translate.update({
    0x0410: u'A',       # @bayonet: cyrillic A
    0x0411: u'B',       # @bayonet: cyrillic Б
    0x0412: u'V',       # @bayonet: cyrillic В
    0x0413: u'G',       # @bayonet: cyrillic Г
    0x0414: u'D',       # @bayonet: cyrillic Д
    0x0415: u'E',       # @bayonet: cyrillic Е
    0x0416: u'ZH',      # @bayonet: cyrillic Ж
    0x0417: u'Z',       # @bayonet: cyrillic З
    0x0418: u'I',       # @bayonet: cyrillic И
    0x0419: u'I',       # @bayonet: cyrillic Й
    0x041A: u'K',       # @bayonet: cyrillic К
    0x041B: u'L',       # @bayonet: cyrillic Л
    0x041C: u'M',       # @bayonet: cyrillic М
    0x041D: u'N',       # @bayonet: cyrillic Н
    0x041E: u'O',       # @bayonet: cyrillic О
    0x041F: u'P',       # @bayonet: cyrillic П
    0x0420: u'R',       # @bayonet: cyrillic Р
    0x0421: u'C',       # @bayonet: cyrillic С
    0x0422: u'T',       # @bayonet: cyrillic Т
    0x0423: u'U',       # @bayonet: cyrillic У
    0x0424: u'PH',      # @bayonet: cyrillic Ф
    0x0425: u'H',       # @bayonet: cyrillic Х
    0x0426: u'CZ',      # @bayonet: cyrillic Ц
    0x0427: u'CH',      # @bayonet: cyrillic Ч
    0x0428: u'SH',      # @bayonet: cyrillic Ш
    0x0429: u'SH',      # @bayonet: cyrillic Щ
#    0x042A: u'',       # @bayonet: cyrillic Ъ
    0x042B: u'Y',       # @bayonet: cyrillic Ы
#    0x042C: u'',       # @bayonet: cyrillic Ь
    0x042D: u'E',       # @bayonet: cyrillic Э
    0x042E: u'YU',      # @bayonet: cyrillic Ю
    0x042F: u'YA',      # @bayonet: cyrillic Я
    0x0430: u'a',       # @bayonet: cyrillic а
    0x0431: u'b',       # @bayonet: cyrillic б
    0x0432: u'v',       # @bayonet: cyrillic в
    0x0433: u'g',       # @bayonet: cyrillic г
    0x0434: u'd',       # @bayonet: cyrillic д
    0x0435: u'e',       # @bayonet: cyrillic е
    0x0436: u'zh',      # @bayonet: cyrillic ж
    0x0437: u'z',       # @bayonet: cyrillic з
    0x0438: u'i',       # @bayonet: cyrillic и
    0x0439: u'i',       # @bayonet: cyrillic й
    0x043A: u'k',       # @bayonet: cyrillic к
    0x043B: u'l',       # @bayonet: cyrillic л
    0x043C: u'm',       # @bayonet: cyrillic м
    0x043D: u'n',       # @bayonet: cyrillic н
    0x043E: u'o',       # @bayonet: cyrillic о
    0x043F: u'p',       # @bayonet: cyrillic п
    0x0440: u'r',       # @bayonet: cyrillic р
    0x0441: u's',       # @bayonet: cyrillic с
    0x0442: u't',       # @bayonet: cyrillic т
    0x0443: u'u',       # @bayonet: cyrillic у
    0x0444: u'ph',      # @bayonet: cyrillic ф
    0x0445: u'h',       # @bayonet: cyrillic х
    0x0446: u'cz',      # @bayonet: cyrillic ц
    0x0447: u'ch',      # @bayonet: cyrillic ч
    0x0448: u'sh',      # @bayonet: cyrillic ш
    0x0449: u'sh',      # @bayonet: cyrillic щ
#    0x044A: u'',       # @bayonet: cyrillic ъ
    0x044B: u'y',       # @bayonet: cyrillic ы
#    0x044C: u'',       # @bayonet: cyrillic ь
    0x044D: u'e',       # @bayonet: cyrillic э
    0x044E: u'yu',      # @bayonet: cyrillic ю
    0x044F: u'ya',      # @bayonet: cyrillic я
    0x0401: u'YO',      # @bayonet: cyrillic Ё
    0x0451: u'yo'      # @bayonet: cyrillic ё
})


def autostructify_parse_ref(self, ref):
    assert isinstance(ref, nodes.reference)
    title = None
    if len(ref.children) == 0:
        title = ref['name']
    elif isinstance(ref.children[0], nodes.Text):
        title = ref.children[0].astext()
    uri = ref['refuri']
    if uri.find('://') != -1:
        return (title, uri, None)
    uri=uri.replace('.md','.html')
    return (title, uri, None)


AutoStructify.parse_ref = autostructify_parse_ref

source_parsers = {
    '.md': CommonMarkParser,
}

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#sys.path.insert(0, os.path.abspath('.'))

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'alabaster'
]

# Add any paths that contain templates here, relative to this directory.
templates_path = [
    '../_templates',
    os.getenv('SPHINX_TEMPLATES', '')
]

# The suffix of source filenames.
source_suffix = [ '.rst', '.md' ]

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = 'ClickHouse'
copyright = '2016–2017 Yandex LLC'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = ''
# The full version, including alpha/beta/rc tags.
release = ''

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
language = 'ru'

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = []

# The reST default role (used for this markup: `text`) to use for all
# documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []

# If true, keep warnings as "system message" paragraphs in the built documents.
#keep_warnings = False


# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'alabaster'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
font_family = '\'Yandex Sans Display Web\', Arial, sans-serif'
html_theme_options = {
    'logo': 'logo.svg',
    'logo_name': True,
    'github_user': 'yandex',
    'github_repo': 'ClickHouse',
    'github_button': False,
    'font_family': font_family,
    'head_font_family': font_family,
    'caption_font_family': font_family,
    'show_powered_by': False,
    'body_text': '#000',
    'link': '#08f',
    'link_hover': 'red',
    'extra_nav_links': collections.OrderedDict([
        ('Switch to English <img id="svg-flag" src="/docs/ru/_static/en.svg" width="20" height="12" />', '#en'),
        ('Документация на одной странице', '/docs/ru/single/'),
        ('Главная страница сайта', '/'),
        ('Исходный код', 'https://github.com/yandex/ClickHouse'),
        ('Редактировать страницу', '#edit'),
    ])
}

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['../_static']

# Add any extra paths that contain custom files (such as robots.txt or
# .htaccess) here, relative to this directory. These files are copied
# directly to the root of the documentation.
#html_extra_path = []

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
html_sidebars = {
    '**': [
        'about.html',
        'searchbox.html',
        'navigation.html',
        'relations.html',
    ]
}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
html_show_sourcelink = False

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
html_show_sphinx = False

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = 'ClickHouse'


# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
# The paper size ('letterpaper' or 'a4paper').
#'papersize': 'letterpaper',

# The font size ('10pt', '11pt' or '12pt').
#'pointsize': '10pt',

# Additional stuff for the LaTeX preamble.
#'preamble': '',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
  ('index', 'ClickHouse.tex', 'ClickHouse Documentation',
   'Yandex LLC', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', 'clickhouse', 'ClickHouse Documentation',
     ['Yandex LLC'], 1)
]

# If true, show URL addresses after external links.
#man_show_urls = False


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
  ('index', 'ClickHouse', 'ClickHouse Documentation',
   'Yandex LLC', 'ClickHouse', 'One line description of project.',
   'Miscellaneous'),
]

# Documents to append as an appendix to all manuals.
#texinfo_appendices = []

# If false, no module index is generated.
#texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#texinfo_show_urls = 'footnote'

# If true, do not generate a @detailmenu in the "Top" node's menu.
#texinfo_no_detailmenu = False

def add_filters(app):
    import json
    app.builder.templates.environment.filters[str('escapejs')] = lambda x: json.dumps(unicode(x))

def setup(app):
    app.add_javascript('custom.js')
    app.connect(str('builder-inited'), add_filters)
    app.add_config_value('recommonmark_config', {'enable_eval_rst': True}, True)
    app.add_transform(AutoStructify)
    
