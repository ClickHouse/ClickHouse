{
    "docs": [
        {
            "location": "/index.html", 
            "text": "What is ClickHouse?\n\n\nClickHouse is a columnar DBMS for OLAP.\n\n\nIn a \"normal\" row-oriented DBMS, data is stored in this order:\n\n\n5123456789123456789     1       Eurobasket - Greece - Bosnia and Herzegovina - example.com      1       2011-09-01 01:03:02     6274717   1294101174      11409   612345678912345678      0       33      6       http://www.example.com/basketball/team/123/match/456789.html http://www.example.com/basketball/team/123/match/987654.html       0       1366    768     32      10      3183      0       0       13      0\\0     1       1       0       0                       2011142 -1      0               0       01321     613     660     2011-09-01 08:01:17     0       0       0       0       utf-8   1466    0       0       0       5678901234567890123               277789954       0       0       0       0       0\n5234985259563631958     0       Consulting, Tax assessment, Accounting, Law       1       2011-09-01 01:03:02     6320881   2111222333      213     6458937489576391093     0       3       2       http://www.example.ru/         0       800     600       16      10      2       153.1   0       0       10      63      1       1       0       0                       2111678 000       0       588     368     240     2011-09-01 01:03:17     4       0       60310   0       windows-1251    1466    0       000               778899001       0       0       0       0       0\n...\n\n\n\n\n\nIn order words, all the values related to a row are stored next to each other.\nExamples of a row-oriented DBMS are MySQL, Postgres, MS SQL Server, and others.\n\n\nIn a column-oriented DBMS, data is stored like this:\n\n\nWatchID:    5385521489354350662     5385521490329509958     5385521489953706054     5385521490476781638     5385521490583269446     5385521490218868806     5385521491437850694   5385521491090174022      5385521490792669254     5385521490420695110     5385521491532181574     5385521491559694406     5385521491459625030     5385521492275175494   5385521492781318214      5385521492710027334     5385521492955615302     5385521493708759110     5385521494506434630     5385521493104611398\nJavaEnable: 1       0       1       0       0       0       1       0       1       1       1       1       1       1       0       1       0       0       1       1\nTitle:      Yandex  Announcements - Investor Relations - Yandex     Yandex \u2014 Contact us \u2014 Moscow    Yandex \u2014 Mission        Ru      Yandex \u2014 History \u2014 History of Yandex    Yandex Financial Releases - Investor Relations - Yandex Yandex \u2014 Locations      Yandex Board of Directors - Corporate Governance - Yandex       Yandex \u2014 Technologies\nGoodEvent:  1       1       1       1       1       1       1       1       1       1       1       1       1       1       1       1       1       1       1       1\nEventTime:  2016-05-18 05:19:20     2016-05-18 08:10:20     2016-05-18 07:38:00     2016-05-18 01:13:08     2016-05-18 00:04:06     2016-05-18 04:21:30     2016-05-18 00:34:16     2016-05-18 07:35:49     2016-05-18 11:41:59     2016-05-18 01:13:32\n\n\n\n\n\nThese examples only show the order that data is arranged in.\nThe values from different columns are stored separately, and data from the same column is stored together.\n\n\nExamples of column-oriented DBMSs: \nVertica\n, \nParaccel (Actian Matrix) (Amazon Redshift)\n, \nSybase IQ\n, \nExasol\n, \nInfobright\n, \nInfiniDB\n, \nMonetDB (VectorWise) (Actian Vector)\n, \nLucidDB\n, \nSAP HANA\n, \nGoogle Dremel\n, \nGoogle PowerDrill\n, \nDruid\n, \nkdb+\n, and so on.\n\n\nDifferent orders for storing data are better suited to different scenarios.\nThe data access scenario refers to what queries are made, how often, and in what proportion; how much data is read for each type of query \u2013 rows, columns, and bytes; the relationship between reading and updating data; the working size of the data and how locally it is used; whether transactions are used, and how isolated they are; requirements for data replication and logical integrity; requirements for latency and throughput for each type of query, and so on.\n\n\nThe higher the load on the system, the more important it is to customize the system to the scenario, and the more specific this customization becomes. There is no system that is equally well-suited to significantly different scenarios. If a system is adaptable to a wide set of scenarios, under a high load, the system will handle all the scenarios equally poorly, or will work well for just one of the scenarios.\n\n\nWe'll say that the following is true for the OLAP (online analytical processing) scenario:\n\n\n\n\nThe vast majority of requests are for read access.\n\n\nData is updated in fairly large batches (\n 1000 rows), not by single rows; or it is not updated at all.\n\n\nData is added to the DB but is not modified.\n\n\nFor reads, quite a large number of rows are extracted from the DB, but only a small subset of columns.\n\n\nTables are \"wide,\" meaning they contain a large number of columns.\n\n\nQueries are relatively rare (usually hundreds of queries per server or less per second).\n\n\nFor simple queries, latencies around 50 ms are allowed.\n\n\nColumn values are fairly small: numbers and short strings (for example, 60 bytes per URL).\n\n\nRequires high throughput when processing a single query (up to billions of rows per second per server).\n\n\nThere are no transactions.\n\n\nLow requirements for data consistency.\n\n\nThere is one large table per query. All tables are small, except for one.\n\n\nA query result is significantly smaller than the source data. In other words, data is filtered or aggregated. The result fits in a single server's RAM.\n\n\n\n\nIt is easy to see that the OLAP scenario is very different from other popular scenarios (such as OLTP or Key-Value access). So it doesn't make sense to try to use OLTP or a Key-Value DB for processing analytical queries if you want to get decent performance. For example, if you try to use MongoDB or Elliptics for analytics, you will get very poor performance compared to OLAP databases.\n\n\nColumnar-oriented databases are better suited to OLAP scenarios (at least 100 times better in processing speed for most queries), for the following reasons:\n\n\n\n\nFor I/O.\n\n\nFor an analytical query, only a small number of table columns need to be read. In a column-oriented database, you can read just the data you need. For example, if you need 5 columns out of 100, you can expect a 20-fold reduction in I/O.\n\n\nSince data is read in packets, it is easier to compress. Data in columns is also easier to compress. This further reduces the I/O volume.\n\n\nDue to the reduced I/O, more data fits in the system cache.\n\n\n\n\nFor example, the query \"count the number of records for each advertising platform\" requires reading one \"advertising platform ID\" column, which takes up 1 byte uncompressed. If most of the traffic was not from advertising platforms, you can expect at least 10-fold compression of this column. When using a quick compression algorithm, data decompression is possible at a speed of at least several gigabytes of uncompressed data per second. In other words, this query can be processed at a speed of approximately several billion rows per second on a single server. This speed is actually achieved in practice.\n\n\nExample:\n\n\nmilovidov@hostname:~$ clickhouse-client\nClickHouse client version \n0\n.0.52053.\nConnecting to localhost:9000.\nConnected to ClickHouse server version \n0\n.0.52053.\n\n:\n)\n SELECT CounterID, count\n()\n FROM hits GROUP BY CounterID ORDER BY count\n()\n DESC LIMIT \n20\n\n\nSELECT\n    CounterID,\n    count\n()\n\nFROM hits\nGROUP BY CounterID\nORDER BY count\n()\n DESC\nLIMIT \n20\n\n\n\u250c\u2500CounterID\u2500\u252c\u2500\u2500count\n()\n\u2500\u2510\n\u2502    \n114208\n \u2502 \n56057344\n \u2502\n\u2502    \n115080\n \u2502 \n51619590\n \u2502\n\u2502      \n3228\n \u2502 \n44658301\n \u2502\n\u2502     \n38230\n \u2502 \n42045932\n \u2502\n\u2502    \n145263\n \u2502 \n42042158\n \u2502\n\u2502     \n91244\n \u2502 \n38297270\n \u2502\n\u2502    \n154139\n \u2502 \n26647572\n \u2502\n\u2502    \n150748\n \u2502 \n24112755\n \u2502\n\u2502    \n242232\n \u2502 \n21302571\n \u2502\n\u2502    \n338158\n \u2502 \n13507087\n \u2502\n\u2502     \n62180\n \u2502 \n12229491\n \u2502\n\u2502     \n82264\n \u2502 \n12187441\n \u2502\n\u2502    \n232261\n \u2502 \n12148031\n \u2502\n\u2502    \n146272\n \u2502 \n11438516\n \u2502\n\u2502    \n168777\n \u2502 \n11403636\n \u2502\n\u2502   \n4120072\n \u2502 \n11227824\n \u2502\n\u2502  \n10938808\n \u2502 \n10519739\n \u2502\n\u2502     \n74088\n \u2502  \n9047015\n \u2502\n\u2502    \n115079\n \u2502  \n8837972\n \u2502\n\u2502    \n337234\n \u2502  \n8205961\n \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n20\n rows in set. Elapsed: \n0\n.153 sec. Processed \n1\n.00 billion rows, \n4\n.00 GB \n(\n6\n.53 billion rows/s., \n26\n.10 GB/s.\n)\n\n\n:\n)\n\n\n\n\n\n\n\n\nFor CPU.\n\n\n\n\nSince executing a query requires processing a large number of rows, it helps to dispatch all operations for entire vectors instead of for separate rows, or to implement the query engine so that there is almost no dispatching cost. If you don't do this, with any half-decent disk subsystem, the query interpreter inevitably stalls the CPU.\nIt makes sense to both store data in columns and process it, when possible, by columns.\n\n\nThere are two ways to do this:\n\n\n\n\n\n\nA vector engine. All operations are written for vectors, instead of for separate values. This means you don't need to call operations very often, and dispatching costs are negligible. Operation code contains an optimized internal cycle.\n\n\n\n\n\n\nCode generation. The code generated for the query has all the indirect calls in it.\n\n\n\n\n\n\nThis is not done in \"normal\" databases, because it doesn't make sense when running simple queries. However, there are exceptions. For example, MemSQL uses code generation to reduce latency when processing SQL queries. (For comparison, analytical DBMSs require optimization of throughput, not latency.)\n\n\nNote that for CPU efficiency, the query language must be declarative (SQL or MDX), or at least a vector (J, K). The query should only contain implicit loops, allowing for optimization.\n\n\nIntroduction\n\n\nDistinctive features of ClickHouse\n\n\nTrue column-oriented DBMS\n\n\nIn a true column-oriented DBMS, there isn't any \"garbage\" stored with the values. Among other things, this means that constant-length values must be supported, to avoid storing their length \"number\" next to the values. As an example, a billion UInt8-type values should actually consume around 1 GB uncompressed, or this will strongly affect the CPU use. It is very important to store data compactly (without any \"garbage\") even when uncompressed, since the speed of decompression (CPU usage) depends mainly on the volume of uncompressed data.\n\n\nThis is worth noting because there are systems that can store values of separate columns separately, but that can't effectively process analytical queries due to their optimization for other scenarios. Examples are HBase, BigTable, Cassandra, and HyperTable. In these systems, you will get throughput around a hundred thousand rows per second, but not hundreds of millions of rows per second.\n\n\nAlso note that ClickHouse is a DBMS, not a single database. ClickHouse allows creating tables and databases in runtime, loading data, and running queries without reconfiguring and restarting the server.\n\n\nData compression\n\n\nSome column-oriented DBMSs (InfiniDB CE and MonetDB) do not use data compression. However, data compression really improves performance.\n\n\nDisk storage of data\n\n\nMany column-oriented DBMSs (such as SAP HANA and Google PowerDrill) can only work in RAM. But even on thousands of servers, the RAM is too small for storing all the pageviews and sessions in Yandex.Metrica.\n\n\nParallel processing on multiple cores\n\n\nLarge queries are parallelized in a natural way.\n\n\nDistributed processing on multiple servers\n\n\nAlmost none of the columnar DBMSs listed above have support for distributed processing.\nIn ClickHouse, data can reside on different shards. Each shard can be a group of replicas that are used for fault tolerance. The query is processed on all the shards in parallel. This is transparent for the user.\n\n\nSQL support\n\n\nIf you are familiar with standard SQL, we can't really talk about SQL support.\nAll the functions have different names.\nHowever, this is a declarative query language based on SQL that can't be differentiated from SQL in many instances.\nJOINs are supported. Subqueries are supported in FROM, IN, and JOIN clauses, as well as scalar subqueries.\nDependent subqueries are not supported.\n\n\nVector engine\n\n\nData is not only stored by columns, but is processed by vectors (parts of columns). This allows us to achieve high CPU performance.\n\n\nReal-time data updates\n\n\nClickHouse supports primary key tables. In order to quickly perform queries on the range of the primary key, the data is sorted incrementally using the merge tree. Due to this, data can continually be added to the table. There is no locking when adding data.\n\n\nIndexes\n\n\nHaving a primary key makes it possible to extract data for specific clients (for instance, Yandex.Metrica tracking tags) for a specific time range, with low latency less than several dozen milliseconds.\n\n\nSuitable for online queries\n\n\nThis lets us use the system as the back-end for a web interface. Low latency means queries can be processed without delay, while the Yandex.Metrica interface page is loading. In other words, in online mode.\n\n\nSupport for approximated calculations\n\n\n\n\nThe system contains aggregate functions for approximated calculation of the number of various values, medians, and quantiles.\n\n\nSupports running a query based on a part (sample) of data and getting an approximated result. In this case, proportionally less data is retrieved from the disk.\n\n\nSupports running an aggregation for a limited number of random keys, instead of for all keys. Under certain conditions for key distribution in the data, this provides a reasonably accurate result while using fewer resources.\n\n\n\n\nData replication and support for data integrity on replicas\n\n\nUses asynchronous multimaster replication. After being written to any available replica, data is distributed to all the remaining replicas. The system maintains identical data on different replicas. Data is restored automatically after a failure, or using a \"button\" for complex cases.\nFor more information, see the section \nData replication\n.\n\n\nClickHouse features that can be considered disadvantages\n\n\n\n\nNo transactions.\n\n\nFor aggregation, query results must fit in the RAM on a single server. However, the volume of source data for a query may be indefinitely large.\n\n\nLack of full-fledged UPDATE/DELETE implementation.\n\n\n\n\nYandex.Metrica use case\n\n\nClickHouse currently powers \nYandex.Metrica\n, \nthe second largest web analytics platform in the world\n. With more than 13 trillion records in the database and more than 20 billion events daily, ClickHouse allows you generating custom reports on the fly directly from non-aggregated data.\n\n\nWe need to get custom reports based on hits and sessions, with custom segments set by the user. Data for the reports is updated in real-time. Queries must be run immediately (in online mode). We must be able to build reports for any time period. Complex aggregates must be calculated, such as the number of unique visitors.\nAt this time (April 2014), Yandex.Metrica receives approximately 12 billion events (pageviews and mouse clicks) daily. All these events must be stored in order to build custom reports. A single query may require scanning hundreds of millions of rows over a few seconds, or millions of rows in no more than a few hundred milliseconds.\n\n\nUsage in Yandex.Metrica and other Yandex services\n\n\nClickHouse is used for multiple purposes in Yandex.Metrica.\nIts main task is to build reports in online mode using non-aggregated data. It uses a cluster of 374 servers, which store over 20.3 trillion rows in the database. The volume of compressed data, without counting duplication and replication, is about 2 PB. The volume of uncompressed data (in TSV format) would be approximately 17 PB.\n\n\nClickHouse is also used for:\n\n\n\n\nStoring data for Session Replay from Yandex.Metrica.\n\n\nProcessing intermediate data.\n\n\nBuilding global reports with Analytics.\n\n\nRunning queries for debugging the Yandex.Metrica engine.\n\n\nAnalyzing logs from the API and the user interface.\n\n\n\n\nClickHouse has at least a dozen installations in other Yandex services: in search verticals, Market, Direct, business analytics, mobile development, AdFox, personal services, and others.\n\n\nAggregated and non-aggregated data\n\n\nThere is a popular opinion that in order to effectively calculate statistics, you must aggregate data, since this reduces the volume of data.\n\n\nBut data aggregation is a very limited solution, for the following reasons:\n\n\n\n\nYou must have a pre-defined list of reports the user will need.\n\n\nThe user can't make custom reports.\n\n\nWhen aggregating a large quantity of keys, the volume of data is not reduced, and aggregation is useless.\n\n\nFor a large number of reports, there are too many aggregation variations (combinatorial explosion).\n\n\nWhen aggregating keys with high cardinality (such as URLs), the volume of data is not reduced by much (less than twofold).\n\n\nFor this reason, the volume of data with aggregation might grow instead of shrink.\n\n\nUsers do not view all the reports we generate for them. A large portion of calculations are useless.\n\n\nThe logical integrity of data may be violated for various aggregations.\n\n\n\n\nIf we do not aggregate anything and work with non-aggregated data, this might actually reduce the volume of calculations.\n\n\nHowever, with aggregation, a significant part of the work is taken offline and completed relatively calmly. In contrast, online calculations require calculating as fast as possible, since the user is waiting for the result.\n\n\nYandex.Metrica has a specialized system for aggregating data called Metrage, which is used for the majority of reports.\nStarting in 2009, Yandex.Metrica also used a specialized OLAP database for non-aggregated data called OLAPServer, which was previously used for the report builder.\nOLAPServer worked well for non-aggregated data, but it had many restrictions that did not allow it to be used for all reports as desired. These included the lack of support for data types (only numbers), and the inability to incrementally update data in real-time (it could only be done by rewriting data daily). OLAPServer is not a DBMS, but a specialized DB.\n\n\nTo remove the limitations of OLAPServer and solve the problem of working with non-aggregated data for all reports, we developed the ClickHouse DBMS.\n\n\nQuestions you were afraid to ask\n\n\nWhy not use something like MapReduce?\n\n\nWe can refer to systems like map-reduce as distributed computing systems in which the reduce operation is based on distributed sorting. In this sense, they include Hadoop, and YT (YT is developed at Yandex for internal use).\n\n\nThese systems aren't appropriate for online queries due to their high latency. In other words, they can't be used as the back-end for a web interface.\nThese types of systems aren't useful for real-time data updates.\nDistributed sorting isn't the best way to perform reduce operations if the result of the operation and all the intermediate results (if there are any) are located in the RAM of a single server, which is usually the case for online queries. In such a case, a hash table is the optimal way to perform reduce operations. A common approach to optimizing map-reduce tasks is pre-aggregation (partial reduce) using a hash table in RAM. The user performs this optimization manually.\nDistributed sorting is one of the main causes of reduced performance when running simple map-reduce tasks.\n\n\nSystems like map-reduce allow executing any code on the cluster. But a declarative query language is better suited to OLAP in order to run experiments quickly. For example, Hadoop has Hive and Pig. Also consider Cloudera Impala, Shark (outdated) for Spark, and Spark SQL, Presto, and Apache Drill. Performance when running such tasks is highly sub-optimal compared to specialized systems, but relatively high latency makes it unrealistic to use these systems as the backend for a web interface.\n\n\nYT allows storing groups of columns separately. But YT can't be considered a true column-based system because it doesn't have fixed-length data types (for efficiently storing numbers without extra \"garbage\"), and also due to its lack of a vector engine. Tasks are performed  in YT using custom code in streaming mode, so they cannot be optimized enough (up to hundreds of millions of rows per second per server). \"Dynamic table sorting\" is under development in YT using MergeTree, strict value typing, and a query language similar to SQL. Dynamically sorted tables are not appropriate for OLAP tasks because the data is stored by row. The YT query language is still under development, so we can't yet rely on this functionality. YT developers are considering using dynamically sorted tables in OLTP and Key-Value scenarios.\n\n\nPerformance\n\n\nAccording to internal testing results, ClickHouse shows the best performance for comparable operating scenarios among systems of its class that were available for testing. This includes the highest throughput for long queries, and the lowest latency on short queries. Testing results are shown on a separate page.\n\n\nThroughput for a single large query\n\n\nThroughput can be measured in rows per second or in megabytes per second. If the data is placed in the page cache, a query that is not too complex is processed on modern hardware at a speed of approximately 2-10 GB/s of uncompressed data on a single server (for the simplest cases, the speed may reach 30 GB/s). If data is not placed in the page cache, the speed depends on the disk subsystem and the data compression rate. For example, if the disk subsystem allows reading data at 400 MB/s, and the data compression rate is 3, the speed will be around 1.2 GB/s. To get the speed in rows per second, divide the speed in bytes per second by the total size of the columns used in the query. For example, if 10 bytes of columns are extracted, the speed will be around 100-200 million rows per second.\n\n\nThe processing speed increases almost linearly for distributed processing, but only if the number of rows resulting from aggregation or sorting is not too large.\n\n\nLatency when processing short queries\n\n\nIf a query uses a primary key and does not select too many rows to process (hundreds of thousands), and does not use too many columns, we can expect less than 50 milliseconds of latency (single digits of milliseconds in the best case) if data is placed in the page cache. Otherwise, latency is calculated from the number of seeks. If you use rotating drives, for a system that is not overloaded, the latency is calculated by this formula: seek time (10 ms) * number of columns queried * number of data parts.\n\n\nThroughput when processing a large quantity of short queries\n\n\nUnder the same conditions, ClickHouse can handle several hundred queries per second on a single server (up to several thousand in the best case). Since this scenario is not typical for analytical DBMSs, we recommend expecting a maximum of 100 queries per second.\n\n\nPerformance when inserting data\n\n\nWe recommend inserting data in packets of at least 1000 rows, or no more than a single request per second. When inserting to a MergeTree table from a tab-separated dump, the insertion speed will be from 50 to 200 MB/s. If the inserted rows are around 1 Kb in size, the speed will be from 50,000 to 200,000 rows per second. If the rows are small, the performance will be higher in rows per second (on Banner System data -\n 500,000 rows per second; on Graphite data -\n 1,000,000 rows per second). To improve performance, you can make multiple INSERT queries in parallel, and performance will increase linearly.\n\n\nGetting started\n\n\nSystem requirements\n\n\nThis is not a cross-platform system. It requires Linux Ubuntu Precise (12.04) or newer, with x86_64 architecture and support for the SSE 4.2 instruction set.\nTo check for SSE 4.2:\n\n\ngrep -q sse4_2 /proc/cpuinfo \n \necho\n \nSSE 4.2 supported\n \n||\n \necho\n \nSSE 4.2 not supported\n\n\n\n\n\n\nWe recommend using Ubuntu Trusty, Ubuntu Xenial, or Ubuntu Precise.\nThe terminal must use UTF-8 encoding (the default in Ubuntu).\n\n\nInstallation\n\n\nFor testing and development, the system can be installed on a single server or on a desktop computer.\n\n\nInstalling from packages for Debian/Ubuntu\n\n\nIn \n/etc/apt/sources.list\n (or in a separate \n/etc/apt/sources.list.d/clickhouse.list\n file), add the repository:\n\n\ndeb http://repo.yandex.ru/clickhouse/deb/stable/ main/\n\n\n\n\n\nIf you want to use the most recent test version, replace 'stable' with 'testing'.\n\n\nThen run:\n\n\nsudo apt-key adv --keyserver keyserver.ubuntu.com --recv E0C56BD4    \n# optional\n\nsudo apt-get update\nsudo apt-get install clickhouse-client clickhouse-server\n\n\n\n\n\nYou can also download and install packages manually from here: \nhttps://repo.yandex.ru/clickhouse/deb/stable/main/\n.\n\n\nClickHouse contains access restriction settings. They are located in the 'users.xml' file (next to 'config.xml').\nBy default, access is allowed from anywhere for the 'default' user, without a password. See 'user/default/networks'.\nFor more information, see the section \"Configuration files\".\n\n\nInstalling from sources\n\n\nTo compile, follow the instructions: build.md\n\n\nYou can compile packages and install them.\nYou can also use programs without installing packages.\n\n\nClient: dbms/src/Client/\nServer: dbms/src/Server/\n\n\n\n\n\nFor the server, create a catalog with data, such as:\n\n\n/opt/clickhouse/data/default/\n/opt/clickhouse/metadata/default/\n\n\n\n\n\n(Configurable in the server config.)\nRun 'chown' for the desired user.\n\n\nNote the path to logs in the server config (src/dbms/src/Server/config.xml).\n\n\nOther installation methods\n\n\nDocker image: \nhttps://hub.docker.com/r/yandex/clickhouse-server/\n\n\nRPM packages for CentOS or RHEL: \nhttps://github.com/Altinity/clickhouse-rpm-install\n\n\nGentoo overlay: \nhttps://github.com/kmeaw/clickhouse-overlay\n\n\nLaunch\n\n\nTo start the server (as a daemon), run:\n\n\nsudo service clickhouse-server start\n\n\n\n\n\nSee the logs in the \n/var/log/clickhouse-server/ directory.\n\n\nIf the server doesn't start, check the configurations in the file \n/etc/clickhouse-server/config.xml.\n\n\nYou can also launch the server from the console:\n\n\nclickhouse-server --config-file\n=\n/etc/clickhouse-server/config.xml\n\n\n\n\n\nIn this case, the log will be printed to the console, which is convenient during development.\nIf the configuration file is in the current directory, you don't need to specify the '--config-file' parameter. By default, it uses './config.xml'.\n\n\nYou can use the command-line client to connect to the server:\n\n\nclickhouse-client\n\n\n\n\n\nThe default parameters indicate connecting with localhost:9000 on behalf of the user 'default' without a password.\nThe client can be used for connecting to a remote server. Example:\n\n\nclickhouse-client --host\n=\nexample.com\n\n\n\n\n\nFor more information, see the section \"Command-line client\".\n\n\nChecking the system:\n\n\nmilovidov@hostname:~/work/metrica/src/dbms/src/Client$ ./clickhouse-client\nClickHouse client version \n0\n.0.18749.\nConnecting to localhost:9000.\nConnected to ClickHouse server version \n0\n.0.18749.\n\n:\n)\n SELECT \n1\n\n\nSELECT \n1\n\n\n\u250c\u25001\u2500\u2510\n\u2502 \n1\n \u2502\n\u2514\u2500\u2500\u2500\u2518\n\n\n1\n rows in set. Elapsed: \n0\n.003 sec.\n\n:\n)\n\n\n\n\n\n\nCongratulations, the system works!\n\n\nTo continue experimenting, you can try to download from the test data sets.\n\n\n\n\nOnTime\n\n\nThis performance test was created by Vadim Tkachenko. See:\n\n\n\n\nhttps://www.percona.com/blog/2009/10/02/analyzing-air-traffic-performance-with-infobright-and-monetdb/\n\n\nhttps://www.percona.com/blog/2009/10/26/air-traffic-queries-in-luciddb/\n\n\nhttps://www.percona.com/blog/2009/11/02/air-traffic-queries-in-infinidb-early-alpha/\n\n\nhttps://www.percona.com/blog/2014/04/21/using-apache-hadoop-and-impala-together-with-mysql-for-data-analysis/\n\n\nhttps://www.percona.com/blog/2016/01/07/apache-spark-with-air-ontime-performance-data/\n\n\nhttp://nickmakos.blogspot.ru/2012/08/analyzing-air-traffic-performance-with.html\n\n\n\n\nDownloading data:\n\n\nfor\n s in \n`\nseq \n1987\n \n2017\n`\n\n\ndo\n\n\nfor\n m in \n`\nseq \n1\n \n12\n`\n\n\ndo\n\nwget http://transtats.bts.gov/PREZIP/On_Time_On_Time_Performance_\n${\ns\n}\n_\n${\nm\n}\n.zip\n\ndone\n\n\ndone\n\n\n\n\n\n\n(from \nhttps://github.com/Percona-Lab/ontime-airline-performance/blob/master/download.sh\n )\n\n\nCreating a table:\n\n\nCREATE\n \nTABLE\n \n`\nontime\n`\n \n(\n\n  \n`\nYear\n`\n \nUInt16\n,\n\n  \n`\nQuarter\n`\n \nUInt8\n,\n\n  \n`\nMonth\n`\n \nUInt8\n,\n\n  \n`\nDayofMonth\n`\n \nUInt8\n,\n\n  \n`\nDayOfWeek\n`\n \nUInt8\n,\n\n  \n`\nFlightDate\n`\n \nDate\n,\n\n  \n`\nUniqueCarrier\n`\n \nFixedString\n(\n7\n),\n\n  \n`\nAirlineID\n`\n \nInt32\n,\n\n  \n`\nCarrier\n`\n \nFixedString\n(\n2\n),\n\n  \n`\nTailNum\n`\n \nString\n,\n\n  \n`\nFlightNum\n`\n \nString\n,\n\n  \n`\nOriginAirportID\n`\n \nInt32\n,\n\n  \n`\nOriginAirportSeqID\n`\n \nInt32\n,\n\n  \n`\nOriginCityMarketID\n`\n \nInt32\n,\n\n  \n`\nOrigin\n`\n \nFixedString\n(\n5\n),\n\n  \n`\nOriginCityName\n`\n \nString\n,\n\n  \n`\nOriginState\n`\n \nFixedString\n(\n2\n),\n\n  \n`\nOriginStateFips\n`\n \nString\n,\n\n  \n`\nOriginStateName\n`\n \nString\n,\n\n  \n`\nOriginWac\n`\n \nInt32\n,\n\n  \n`\nDestAirportID\n`\n \nInt32\n,\n\n  \n`\nDestAirportSeqID\n`\n \nInt32\n,\n\n  \n`\nDestCityMarketID\n`\n \nInt32\n,\n\n  \n`\nDest\n`\n \nFixedString\n(\n5\n),\n\n  \n`\nDestCityName\n`\n \nString\n,\n\n  \n`\nDestState\n`\n \nFixedString\n(\n2\n),\n\n  \n`\nDestStateFips\n`\n \nString\n,\n\n  \n`\nDestStateName\n`\n \nString\n,\n\n  \n`\nDestWac\n`\n \nInt32\n,\n\n  \n`\nCRSDepTime\n`\n \nInt32\n,\n\n  \n`\nDepTime\n`\n \nInt32\n,\n\n  \n`\nDepDelay\n`\n \nInt32\n,\n\n  \n`\nDepDelayMinutes\n`\n \nInt32\n,\n\n  \n`\nDepDel15\n`\n \nInt32\n,\n\n  \n`\nDepartureDelayGroups\n`\n \nString\n,\n\n  \n`\nDepTimeBlk\n`\n \nString\n,\n\n  \n`\nTaxiOut\n`\n \nInt32\n,\n\n  \n`\nWheelsOff\n`\n \nInt32\n,\n\n  \n`\nWheelsOn\n`\n \nInt32\n,\n\n  \n`\nTaxiIn\n`\n \nInt32\n,\n\n  \n`\nCRSArrTime\n`\n \nInt32\n,\n\n  \n`\nArrTime\n`\n \nInt32\n,\n\n  \n`\nArrDelay\n`\n \nInt32\n,\n\n  \n`\nArrDelayMinutes\n`\n \nInt32\n,\n\n  \n`\nArrDel15\n`\n \nInt32\n,\n\n  \n`\nArrivalDelayGroups\n`\n \nInt32\n,\n\n  \n`\nArrTimeBlk\n`\n \nString\n,\n\n  \n`\nCancelled\n`\n \nUInt8\n,\n\n  \n`\nCancellationCode\n`\n \nFixedString\n(\n1\n),\n\n  \n`\nDiverted\n`\n \nUInt8\n,\n\n  \n`\nCRSElapsedTime\n`\n \nInt32\n,\n\n  \n`\nActualElapsedTime\n`\n \nInt32\n,\n\n  \n`\nAirTime\n`\n \nInt32\n,\n\n  \n`\nFlights\n`\n \nInt32\n,\n\n  \n`\nDistance\n`\n \nInt32\n,\n\n  \n`\nDistanceGroup\n`\n \nUInt8\n,\n\n  \n`\nCarrierDelay\n`\n \nInt32\n,\n\n  \n`\nWeatherDelay\n`\n \nInt32\n,\n\n  \n`\nNASDelay\n`\n \nInt32\n,\n\n  \n`\nSecurityDelay\n`\n \nInt32\n,\n\n  \n`\nLateAircraftDelay\n`\n \nInt32\n,\n\n  \n`\nFirstDepTime\n`\n \nString\n,\n\n  \n`\nTotalAddGTime\n`\n \nString\n,\n\n  \n`\nLongestAddGTime\n`\n \nString\n,\n\n  \n`\nDivAirportLandings\n`\n \nString\n,\n\n  \n`\nDivReachedDest\n`\n \nString\n,\n\n  \n`\nDivActualElapsedTime\n`\n \nString\n,\n\n  \n`\nDivArrDelay\n`\n \nString\n,\n\n  \n`\nDivDistance\n`\n \nString\n,\n\n  \n`\nDiv1Airport\n`\n \nString\n,\n\n  \n`\nDiv1AirportID\n`\n \nInt32\n,\n\n  \n`\nDiv1AirportSeqID\n`\n \nInt32\n,\n\n  \n`\nDiv1WheelsOn\n`\n \nString\n,\n\n  \n`\nDiv1TotalGTime\n`\n \nString\n,\n\n  \n`\nDiv1LongestGTime\n`\n \nString\n,\n\n  \n`\nDiv1WheelsOff\n`\n \nString\n,\n\n  \n`\nDiv1TailNum\n`\n \nString\n,\n\n  \n`\nDiv2Airport\n`\n \nString\n,\n\n  \n`\nDiv2AirportID\n`\n \nInt32\n,\n\n  \n`\nDiv2AirportSeqID\n`\n \nInt32\n,\n\n  \n`\nDiv2WheelsOn\n`\n \nString\n,\n\n  \n`\nDiv2TotalGTime\n`\n \nString\n,\n\n  \n`\nDiv2LongestGTime\n`\n \nString\n,\n\n  \n`\nDiv2WheelsOff\n`\n \nString\n,\n\n  \n`\nDiv2TailNum\n`\n \nString\n,\n\n  \n`\nDiv3Airport\n`\n \nString\n,\n\n  \n`\nDiv3AirportID\n`\n \nInt32\n,\n\n  \n`\nDiv3AirportSeqID\n`\n \nInt32\n,\n\n  \n`\nDiv3WheelsOn\n`\n \nString\n,\n\n  \n`\nDiv3TotalGTime\n`\n \nString\n,\n\n  \n`\nDiv3LongestGTime\n`\n \nString\n,\n\n  \n`\nDiv3WheelsOff\n`\n \nString\n,\n\n  \n`\nDiv3TailNum\n`\n \nString\n,\n\n  \n`\nDiv4Airport\n`\n \nString\n,\n\n  \n`\nDiv4AirportID\n`\n \nInt32\n,\n\n  \n`\nDiv4AirportSeqID\n`\n \nInt32\n,\n\n  \n`\nDiv4WheelsOn\n`\n \nString\n,\n\n  \n`\nDiv4TotalGTime\n`\n \nString\n,\n\n  \n`\nDiv4LongestGTime\n`\n \nString\n,\n\n  \n`\nDiv4WheelsOff\n`\n \nString\n,\n\n  \n`\nDiv4TailNum\n`\n \nString\n,\n\n  \n`\nDiv5Airport\n`\n \nString\n,\n\n  \n`\nDiv5AirportID\n`\n \nInt32\n,\n\n  \n`\nDiv5AirportSeqID\n`\n \nInt32\n,\n\n  \n`\nDiv5WheelsOn\n`\n \nString\n,\n\n  \n`\nDiv5TotalGTime\n`\n \nString\n,\n\n  \n`\nDiv5LongestGTime\n`\n \nString\n,\n\n  \n`\nDiv5WheelsOff\n`\n \nString\n,\n\n  \n`\nDiv5TailNum\n`\n \nString\n\n\n)\n \nENGINE\n \n=\n \nMergeTree\n(\nFlightDate\n,\n \n(\nYear\n,\n \nFlightDate\n),\n \n8192\n)\n\n\n\n\n\n\nLoading data:\n\n\nfor\n i in *.zip\n;\n \ndo\n \necho\n \n$i\n;\n unzip -cq \n$i\n \n*.csv\n \n|\n sed \ns/\\.00//g\n \n|\n clickhouse-client --host\n=\nexample-perftest01j --query\n=\nINSERT INTO ontime FORMAT CSVWithNames\n;\n \ndone\n\n\n\n\n\n\nQueries:\n\n\nQ0.\n\n\nselect\n \navg\n(\nc1\n)\n \nfrom\n \n(\nselect\n \nYear\n,\n \nMonth\n,\n \ncount\n(\n*\n)\n \nas\n \nc1\n \nfrom\n \nontime\n \ngroup\n \nby\n \nYear\n,\n \nMonth\n);\n\n\n\n\n\n\nQ1. The number of flights per day from the year 2000 to 2008\n\n\nSELECT\n \nDayOfWeek\n,\n \ncount\n(\n*\n)\n \nAS\n \nc\n \nFROM\n \nontime\n \nWHERE\n \nYear\n \n=\n \n2000\n \nAND\n \nYear\n \n=\n \n2008\n \nGROUP\n \nBY\n \nDayOfWeek\n \nORDER\n \nBY\n \nc\n \nDESC\n;\n\n\n\n\n\n\nQ2. The number of flights delayed by more than 10 minutes, grouped by the day of the week, for 2000-2008\n\n\nSELECT\n \nDayOfWeek\n,\n \ncount\n(\n*\n)\n \nAS\n \nc\n \nFROM\n \nontime\n \nWHERE\n \nDepDelay\n10\n \nAND\n \nYear\n \n=\n \n2000\n \nAND\n \nYear\n \n=\n \n2008\n \nGROUP\n \nBY\n \nDayOfWeek\n \nORDER\n \nBY\n \nc\n \nDESC\n\n\n\n\n\n\nQ3. The number of delays by airport for 2000-2008\n\n\nSELECT\n \nOrigin\n,\n \ncount\n(\n*\n)\n \nAS\n \nc\n \nFROM\n \nontime\n \nWHERE\n \nDepDelay\n10\n \nAND\n \nYear\n \n=\n \n2000\n \nAND\n \nYear\n \n=\n \n2008\n \nGROUP\n \nBY\n \nOrigin\n \nORDER\n \nBY\n \nc\n \nDESC\n \nLIMIT\n \n10\n\n\n\n\n\n\nQ4. The number of delays by carrier for 2007\n\n\nSELECT\n \nCarrier\n,\n \ncount\n(\n*\n)\n \nFROM\n \nontime\n \nWHERE\n \nDepDelay\n10\n  \nAND\n \nYear\n \n=\n \n2007\n \nGROUP\n \nBY\n \nCarrier\n \nORDER\n \nBY\n \ncount\n(\n*\n)\n \nDESC\n\n\n\n\n\n\nQ5. The percentage of delays by carrier for 2007\n\n\nSELECT\n \nCarrier\n,\n \nc\n,\n \nc2\n,\n \nc\n*\n1000\n/\nc2\n \nas\n \nc3\n\n\nFROM\n\n\n(\n\n    \nSELECT\n\n        \nCarrier\n,\n\n        \ncount\n(\n*\n)\n \nAS\n \nc\n\n    \nFROM\n \nontime\n\n    \nWHERE\n \nDepDelay\n10\n\n        \nAND\n \nYear\n=\n2007\n\n    \nGROUP\n \nBY\n \nCarrier\n\n\n)\n\n\nANY\n \nINNER\n \nJOIN\n\n\n(\n\n    \nSELECT\n\n        \nCarrier\n,\n\n        \ncount\n(\n*\n)\n \nAS\n \nc2\n\n    \nFROM\n \nontime\n\n    \nWHERE\n \nYear\n=\n2007\n\n    \nGROUP\n \nBY\n \nCarrier\n\n\n)\n \nUSING\n \nCarrier\n\n\nORDER\n \nBY\n \nc3\n \nDESC\n;\n\n\n\n\n\n\nBetter version of the same query:\n\n\nSELECT\n \nCarrier\n,\n \navg\n(\nDepDelay\n \n \n10\n)\n \n*\n \n1000\n \nAS\n \nc3\n \nFROM\n \nontime\n \nWHERE\n \nYear\n \n=\n \n2007\n \nGROUP\n \nBY\n \nCarrier\n \nORDER\n \nBY\n \nCarrier\n\n\n\n\n\n\nQ6. The previous request for a broader range of years, 2000-2008\n\n\nSELECT\n \nCarrier\n,\n \nc\n,\n \nc2\n,\n \nc\n*\n1000\n/\nc2\n \nas\n \nc3\n\n\nFROM\n\n\n(\n\n    \nSELECT\n\n        \nCarrier\n,\n\n        \ncount\n(\n*\n)\n \nAS\n \nc\n\n    \nFROM\n \nontime\n\n    \nWHERE\n \nDepDelay\n10\n\n        \nAND\n \nYear\n \n=\n \n2000\n \nAND\n \nYear\n \n=\n \n2008\n\n    \nGROUP\n \nBY\n \nCarrier\n\n\n)\n\n\nANY\n \nINNER\n \nJOIN\n\n\n(\n\n    \nSELECT\n\n        \nCarrier\n,\n\n        \ncount\n(\n*\n)\n \nAS\n \nc2\n\n    \nFROM\n \nontime\n\n    \nWHERE\n \nYear\n \n=\n \n2000\n \nAND\n \nYear\n \n=\n \n2008\n\n    \nGROUP\n \nBY\n \nCarrier\n\n\n)\n \nUSING\n \nCarrier\n\n\nORDER\n \nBY\n \nc3\n \nDESC\n;\n\n\n\n\n\n\nBetter version of the same query:\n\n\nSELECT\n \nCarrier\n,\n \navg\n(\nDepDelay\n \n \n10\n)\n \n*\n \n1000\n \nAS\n \nc3\n \nFROM\n \nontime\n \nWHERE\n \nYear\n \n=\n \n2000\n \nAND\n \nYear\n \n=\n \n2008\n \nGROUP\n \nBY\n \nCarrier\n \nORDER\n \nBY\n \nCarrier\n\n\n\n\n\n\nQ7. Percentage of flights delayed for more than 10 minutes, by year\n\n\nSELECT\n \nYear\n,\n \nc1\n/\nc2\n\n\nFROM\n\n\n(\n\n    \nselect\n\n        \nYear\n,\n\n        \ncount\n(\n*\n)\n*\n1000\n \nas\n \nc1\n\n    \nfrom\n \nontime\n\n    \nWHERE\n \nDepDelay\n10\n\n    \nGROUP\n \nBY\n \nYear\n\n\n)\n\n\nANY\n \nINNER\n \nJOIN\n\n\n(\n\n    \nselect\n\n        \nYear\n,\n\n        \ncount\n(\n*\n)\n \nas\n \nc2\n\n    \nfrom\n \nontime\n\n    \nGROUP\n \nBY\n \nYear\n\n\n)\n \nUSING\n \n(\nYear\n)\n\n\nORDER\n \nBY\n \nYear\n\n\n\n\n\n\nBetter version of the same query:\n\n\nSELECT\n \nYear\n,\n \navg\n(\nDepDelay\n \n \n10\n)\n \nFROM\n \nontime\n \nGROUP\n \nBY\n \nYear\n \nORDER\n \nBY\n \nYear\n\n\n\n\n\n\nQ8. The most popular destinations by the number of directly connected cities for various year ranges\n\n\nSELECT\n \nDestCityName\n,\n \nuniqExact\n(\nOriginCityName\n)\n \nAS\n \nu\n \nFROM\n \nontime\n \nWHERE\n \nYear\n \n=\n \n2000\n \nand\n \nYear\n \n=\n \n2010\n \nGROUP\n \nBY\n \nDestCityName\n \nORDER\n \nBY\n \nu\n \nDESC\n \nLIMIT\n \n10\n;\n\n\n\n\n\n\nQ9.\n\n\nselect\n \nYear\n,\n \ncount\n(\n*\n)\n \nas\n \nc1\n \nfrom\n \nontime\n \ngroup\n \nby\n \nYear\n;\n\n\n\n\n\n\nQ10.\n\n\nselect\n\n   \nmin\n(\nYear\n),\n \nmax\n(\nYear\n),\n \nCarrier\n,\n \ncount\n(\n*\n)\n \nas\n \ncnt\n,\n\n   \nsum\n(\nArrDelayMinutes\n30\n)\n \nas\n \nflights_delayed\n,\n\n   \nround\n(\nsum\n(\nArrDelayMinutes\n30\n)\n/\ncount\n(\n*\n),\n2\n)\n \nas\n \nrate\n\n\nFROM\n \nontime\n\n\nWHERE\n\n   \nDayOfWeek\n \nnot\n \nin\n \n(\n6\n,\n7\n)\n \nand\n \nOriginState\n \nnot\n \nin\n \n(\nAK\n,\n \nHI\n,\n \nPR\n,\n \nVI\n)\n\n   \nand\n \nDestState\n \nnot\n \nin\n \n(\nAK\n,\n \nHI\n,\n \nPR\n,\n \nVI\n)\n\n   \nand\n \nFlightDate\n \n \n2010-01-01\n\n\nGROUP\n \nby\n \nCarrier\n\n\nHAVING\n \ncnt\n \n \n100000\n \nand\n \nmax\n(\nYear\n)\n \n \n1990\n\n\nORDER\n \nby\n \nrate\n \nDESC\n\n\nLIMIT\n \n1000\n;\n\n\n\n\n\n\nBonus:\n\n\nSELECT\n \navg\n(\ncnt\n)\n \nFROM\n \n(\nSELECT\n \nYear\n,\nMonth\n,\ncount\n(\n*\n)\n \nAS\n \ncnt\n \nFROM\n \nontime\n \nWHERE\n \nDepDel15\n=\n1\n \nGROUP\n \nBY\n \nYear\n,\nMonth\n)\n\n\n\nselect\n \navg\n(\nc1\n)\n \nfrom\n \n(\nselect\n \nYear\n,\nMonth\n,\ncount\n(\n*\n)\n \nas\n \nc1\n \nfrom\n \nontime\n \ngroup\n \nby\n \nYear\n,\nMonth\n)\n\n\n\nSELECT\n \nDestCityName\n,\n \nuniqExact\n(\nOriginCityName\n)\n \nAS\n \nu\n \nFROM\n \nontime\n \nGROUP\n \nBY\n \nDestCityName\n \nORDER\n \nBY\n \nu\n \nDESC\n \nLIMIT\n \n10\n;\n\n\n\nSELECT\n \nOriginCityName\n,\n \nDestCityName\n,\n \ncount\n()\n \nAS\n \nc\n \nFROM\n \nontime\n \nGROUP\n \nBY\n \nOriginCityName\n,\n \nDestCityName\n \nORDER\n \nBY\n \nc\n \nDESC\n \nLIMIT\n \n10\n;\n\n\n\nSELECT\n \nOriginCityName\n,\n \ncount\n()\n \nAS\n \nc\n \nFROM\n \nontime\n \nGROUP\n \nBY\n \nOriginCityName\n \nORDER\n \nBY\n \nc\n \nDESC\n \nLIMIT\n \n10\n;\n\n\n\n\n\n\nNew York Taxi data\n\n\nHow to import the raw data\n\n\nSee \nhttps://github.com/toddwschneider/nyc-taxi-data\n and \nhttp://tech.marksblogg.com/billion-nyc-taxi-rides-redshift.html\n for the description of the dataset and instructions for downloading.\n\n\nDownloading will result in about 227 GB of uncompressed data in CSV files. The download takes about an hour over a 1 Gbit connection (parallel downloading from s3.amazonaws.com recovers at least half of a 1 Gbit channel).\nSome of the files might not download fully. Check the file sizes and re-download any that seem doubtful.\n\n\nSome of the files might contain invalid rows. You can fix them as follows:\n\n\nsed -E \n/(.*,){18,}/d\n data/yellow_tripdata_2010-02.csv \n data/yellow_tripdata_2010-02.csv_\nsed -E \n/(.*,){18,}/d\n data/yellow_tripdata_2010-03.csv \n data/yellow_tripdata_2010-03.csv_\nmv data/yellow_tripdata_2010-02.csv_ data/yellow_tripdata_2010-02.csv\nmv data/yellow_tripdata_2010-03.csv_ data/yellow_tripdata_2010-03.csv\n\n\n\n\n\nThen the data must be pre-processed in PostgreSQL. This will create selections of points in the polygons (to match points on the map with the boroughs of New York City) and combine all the data into a single denormalized flat table by using a JOIN. To do this, you will need to install PostgreSQL with PostGIS support.\n\n\nBe careful when running \ninitialize_database.sh\n and manually re-check that all the tables were created correctly.\n\n\nIt takes about 20-30 minutes to process each month's worth of data in PostgreSQL, for a total of about 48 hours.\n\n\nYou can check the number of downloaded rows as follows:\n\n\ntime psql nyc-taxi-data -c \nSELECT count(*) FROM trips;\n\n###    count\n 1298979494\n(1 row)\n\nreal    7m9.164s\n\n\n\n\n\n(This is slightly more than 1.1 billion rows reported by Mark Litwintschik in a series of blog posts.)\n\n\nThe data in PostgreSQL uses 370 GB of space.\n\n\nExporting the data from PostgreSQL:\n\n\nCOPY\n\n\n(\n\n    \nSELECT\n \ntrips\n.\nid\n,\n\n           \ntrips\n.\nvendor_id\n,\n\n           \ntrips\n.\npickup_datetime\n,\n\n           \ntrips\n.\ndropoff_datetime\n,\n\n           \ntrips\n.\nstore_and_fwd_flag\n,\n\n           \ntrips\n.\nrate_code_id\n,\n\n           \ntrips\n.\npickup_longitude\n,\n\n           \ntrips\n.\npickup_latitude\n,\n\n           \ntrips\n.\ndropoff_longitude\n,\n\n           \ntrips\n.\ndropoff_latitude\n,\n\n           \ntrips\n.\npassenger_count\n,\n\n           \ntrips\n.\ntrip_distance\n,\n\n           \ntrips\n.\nfare_amount\n,\n\n           \ntrips\n.\nextra\n,\n\n           \ntrips\n.\nmta_tax\n,\n\n           \ntrips\n.\ntip_amount\n,\n\n           \ntrips\n.\ntolls_amount\n,\n\n           \ntrips\n.\nehail_fee\n,\n\n           \ntrips\n.\nimprovement_surcharge\n,\n\n           \ntrips\n.\ntotal_amount\n,\n\n           \ntrips\n.\npayment_type\n,\n\n           \ntrips\n.\ntrip_type\n,\n\n           \ntrips\n.\npickup\n,\n\n           \ntrips\n.\ndropoff\n,\n\n\n           \ncab_types\n.\ntype\n \ncab_type\n,\n\n\n           \nweather\n.\nprecipitation_tenths_of_mm\n \nrain\n,\n\n           \nweather\n.\nsnow_depth_mm\n,\n\n           \nweather\n.\nsnowfall_mm\n,\n\n           \nweather\n.\nmax_temperature_tenths_degrees_celsius\n \nmax_temp\n,\n\n           \nweather\n.\nmin_temperature_tenths_degrees_celsius\n \nmin_temp\n,\n\n           \nweather\n.\naverage_wind_speed_tenths_of_meters_per_second\n \nwind\n,\n\n\n           \npick_up\n.\ngid\n \npickup_nyct2010_gid\n,\n\n           \npick_up\n.\nctlabel\n \npickup_ctlabel\n,\n\n           \npick_up\n.\nborocode\n \npickup_borocode\n,\n\n           \npick_up\n.\nboroname\n \npickup_boroname\n,\n\n           \npick_up\n.\nct2010\n \npickup_ct2010\n,\n\n           \npick_up\n.\nboroct2010\n \npickup_boroct2010\n,\n\n           \npick_up\n.\ncdeligibil\n \npickup_cdeligibil\n,\n\n           \npick_up\n.\nntacode\n \npickup_ntacode\n,\n\n           \npick_up\n.\nntaname\n \npickup_ntaname\n,\n\n           \npick_up\n.\npuma\n \npickup_puma\n,\n\n\n           \ndrop_off\n.\ngid\n \ndropoff_nyct2010_gid\n,\n\n           \ndrop_off\n.\nctlabel\n \ndropoff_ctlabel\n,\n\n           \ndrop_off\n.\nborocode\n \ndropoff_borocode\n,\n\n           \ndrop_off\n.\nboroname\n \ndropoff_boroname\n,\n\n           \ndrop_off\n.\nct2010\n \ndropoff_ct2010\n,\n\n           \ndrop_off\n.\nboroct2010\n \ndropoff_boroct2010\n,\n\n           \ndrop_off\n.\ncdeligibil\n \ndropoff_cdeligibil\n,\n\n           \ndrop_off\n.\nntacode\n \ndropoff_ntacode\n,\n\n           \ndrop_off\n.\nntaname\n \ndropoff_ntaname\n,\n\n           \ndrop_off\n.\npuma\n \ndropoff_puma\n\n    \nFROM\n \ntrips\n\n    \nLEFT\n \nJOIN\n \ncab_types\n\n        \nON\n \ntrips\n.\ncab_type_id\n \n=\n \ncab_types\n.\nid\n\n    \nLEFT\n \nJOIN\n \ncentral_park_weather_observations_raw\n \nweather\n\n        \nON\n \nweather\n.\ndate\n \n=\n \ntrips\n.\npickup_datetime\n::\ndate\n\n    \nLEFT\n \nJOIN\n \nnyct2010\n \npick_up\n\n        \nON\n \npick_up\n.\ngid\n \n=\n \ntrips\n.\npickup_nyct2010_gid\n\n    \nLEFT\n \nJOIN\n \nnyct2010\n \ndrop_off\n\n        \nON\n \ndrop_off\n.\ngid\n \n=\n \ntrips\n.\ndropoff_nyct2010_gid\n\n\n)\n \nTO\n \n/opt/milovidov/nyc-taxi-data/trips.tsv\n;\n\n\n\n\n\n\nThe data snapshot is created at a speed of about 50 MB per second. While creating the snapshot, PostgreSQL reads from the disk at a speed of about 28 MB per second.\nThis takes about 5 hours. The resulting TSV file is 590612904969 bytes.\n\n\nCreate a temporary table in ClickHouse:\n\n\nCREATE\n \nTABLE\n \ntrips\n\n\n(\n\n\ntrip_id\n                 \nUInt32\n,\n\n\nvendor_id\n               \nString\n,\n\n\npickup_datetime\n         \nDateTime\n,\n\n\ndropoff_datetime\n        \nNullable\n(\nDateTime\n),\n\n\nstore_and_fwd_flag\n      \nNullable\n(\nFixedString\n(\n1\n)),\n\n\nrate_code_id\n            \nNullable\n(\nUInt8\n),\n\n\npickup_longitude\n        \nNullable\n(\nFloat64\n),\n\n\npickup_latitude\n         \nNullable\n(\nFloat64\n),\n\n\ndropoff_longitude\n       \nNullable\n(\nFloat64\n),\n\n\ndropoff_latitude\n        \nNullable\n(\nFloat64\n),\n\n\npassenger_count\n         \nNullable\n(\nUInt8\n),\n\n\ntrip_distance\n           \nNullable\n(\nFloat64\n),\n\n\nfare_amount\n             \nNullable\n(\nFloat32\n),\n\n\nextra\n                   \nNullable\n(\nFloat32\n),\n\n\nmta_tax\n                 \nNullable\n(\nFloat32\n),\n\n\ntip_amount\n              \nNullable\n(\nFloat32\n),\n\n\ntolls_amount\n            \nNullable\n(\nFloat32\n),\n\n\nehail_fee\n               \nNullable\n(\nFloat32\n),\n\n\nimprovement_surcharge\n   \nNullable\n(\nFloat32\n),\n\n\ntotal_amount\n            \nNullable\n(\nFloat32\n),\n\n\npayment_type\n            \nNullable\n(\nString\n),\n\n\ntrip_type\n               \nNullable\n(\nUInt8\n),\n\n\npickup\n                  \nNullable\n(\nString\n),\n\n\ndropoff\n                 \nNullable\n(\nString\n),\n\n\ncab_type\n                \nNullable\n(\nString\n),\n\n\nprecipitation\n           \nNullable\n(\nUInt8\n),\n\n\nsnow_depth\n              \nNullable\n(\nUInt8\n),\n\n\nsnowfall\n                \nNullable\n(\nUInt8\n),\n\n\nmax_temperature\n         \nNullable\n(\nUInt8\n),\n\n\nmin_temperature\n         \nNullable\n(\nUInt8\n),\n\n\naverage_wind_speed\n      \nNullable\n(\nUInt8\n),\n\n\npickup_nyct2010_gid\n     \nNullable\n(\nUInt8\n),\n\n\npickup_ctlabel\n          \nNullable\n(\nString\n),\n\n\npickup_borocode\n         \nNullable\n(\nUInt8\n),\n\n\npickup_boroname\n         \nNullable\n(\nString\n),\n\n\npickup_ct2010\n           \nNullable\n(\nString\n),\n\n\npickup_boroct2010\n       \nNullable\n(\nString\n),\n\n\npickup_cdeligibil\n       \nNullable\n(\nFixedString\n(\n1\n)),\n\n\npickup_ntacode\n          \nNullable\n(\nString\n),\n\n\npickup_ntaname\n          \nNullable\n(\nString\n),\n\n\npickup_puma\n             \nNullable\n(\nString\n),\n\n\ndropoff_nyct2010_gid\n    \nNullable\n(\nUInt8\n),\n\n\ndropoff_ctlabel\n         \nNullable\n(\nString\n),\n\n\ndropoff_borocode\n        \nNullable\n(\nUInt8\n),\n\n\ndropoff_boroname\n        \nNullable\n(\nString\n),\n\n\ndropoff_ct2010\n          \nNullable\n(\nString\n),\n\n\ndropoff_boroct2010\n      \nNullable\n(\nString\n),\n\n\ndropoff_cdeligibil\n      \nNullable\n(\nString\n),\n\n\ndropoff_ntacode\n         \nNullable\n(\nString\n),\n\n\ndropoff_ntaname\n         \nNullable\n(\nString\n),\n\n\ndropoff_puma\n            \nNullable\n(\nString\n)\n\n\n)\n \nENGINE\n \n=\n \nLog\n;\n\n\n\n\n\n\nIt is needed for converting fields to more correct data types and, if possible, to eliminate NULLs.\n\n\ntime clickhouse-client --query=\nINSERT INTO trips FORMAT TabSeparated\n \n trips.tsv\n\nreal    75m56.214s\n\n\n\n\n\nData is read at a speed of 112-140 Mb/second.\nLoading data into a Log type table in one stream took 76 minutes.\nThe data in this table uses 142 GB.\n\n\n(Importing data directly from Postgres is also possible using \nCOPY ... TO PROGRAM\n.)\n\n\nUnfortunately, all the fields associated with the weather (precipitation...average_wind_speed) were filled with NULL. Because of this, we will remove them from the final data set.\n\n\nTo start, we'll create a table on a single server. Later we will make the table distributed.\n\n\nCreate and populate a summary table:\n\n\nCREATE TABLE trips_mergetree\nENGINE = MergeTree(pickup_date, pickup_datetime, 8192)\nAS SELECT\n\ntrip_id,\nCAST(vendor_id AS Enum8(\n1\n = 1, \n2\n = 2, \nCMT\n = 3, \nVTS\n = 4, \nDDS\n = 5, \nB02512\n = 10, \nB02598\n = 11, \nB02617\n = 12, \nB02682\n = 13, \nB02764\n = 14)) AS vendor_id,\ntoDate(pickup_datetime) AS pickup_date,\nifNull(pickup_datetime, toDateTime(0)) AS pickup_datetime,\ntoDate(dropoff_datetime) AS dropoff_date,\nifNull(dropoff_datetime, toDateTime(0)) AS dropoff_datetime,\nassumeNotNull(store_and_fwd_flag) IN (\nY\n, \n1\n, \n2\n) AS store_and_fwd_flag,\nassumeNotNull(rate_code_id) AS rate_code_id,\nassumeNotNull(pickup_longitude) AS pickup_longitude,\nassumeNotNull(pickup_latitude) AS pickup_latitude,\nassumeNotNull(dropoff_longitude) AS dropoff_longitude,\nassumeNotNull(dropoff_latitude) AS dropoff_latitude,\nassumeNotNull(passenger_count) AS passenger_count,\nassumeNotNull(trip_distance) AS trip_distance,\nassumeNotNull(fare_amount) AS fare_amount,\nassumeNotNull(extra) AS extra,\nassumeNotNull(mta_tax) AS mta_tax,\nassumeNotNull(tip_amount) AS tip_amount,\nassumeNotNull(tolls_amount) AS tolls_amount,\nassumeNotNull(ehail_fee) AS ehail_fee,\nassumeNotNull(improvement_surcharge) AS improvement_surcharge,\nassumeNotNull(total_amount) AS total_amount,\nCAST((assumeNotNull(payment_type) AS pt) IN (\nCSH\n, \nCASH\n, \nCash\n, \nCAS\n, \nCas\n, \n1\n) ? \nCSH\n : (pt IN (\nCRD\n, \nCredit\n, \nCre\n, \nCRE\n, \nCREDIT\n, \n2\n) ? \nCRE\n : (pt IN (\nNOC\n, \nNo Charge\n, \nNo\n, \n3\n) ? \nNOC\n : (pt IN (\nDIS\n, \nDispute\n, \nDis\n, \n4\n) ? \nDIS\n : \nUNK\n))) AS Enum8(\nCSH\n = 1, \nCRE\n = 2, \nUNK\n = 0, \nNOC\n = 3, \nDIS\n = 4)) AS payment_type_,\nassumeNotNull(trip_type) AS trip_type,\nifNull(toFixedString(unhex(pickup), 25), toFixedString(\n, 25)) AS pickup,\nifNull(toFixedString(unhex(dropoff), 25), toFixedString(\n, 25)) AS dropoff,\nCAST(assumeNotNull(cab_type) AS Enum8(\nyellow\n = 1, \ngreen\n = 2, \nuber\n = 3)) AS cab_type,\n\nassumeNotNull(pickup_nyct2010_gid) AS pickup_nyct2010_gid,\ntoFloat32(ifNull(pickup_ctlabel, \n0\n)) AS pickup_ctlabel,\nassumeNotNull(pickup_borocode) AS pickup_borocode,\nCAST(assumeNotNull(pickup_boroname) AS Enum8(\nManhattan\n = 1, \nQueens\n = 4, \nBrooklyn\n = 3, \n = 0, \nBronx\n = 2, \nStaten Island\n = 5)) AS pickup_boroname,\ntoFixedString(ifNull(pickup_ct2010, \n000000\n), 6) AS pickup_ct2010,\ntoFixedString(ifNull(pickup_boroct2010, \n0000000\n), 7) AS pickup_boroct2010,\nCAST(assumeNotNull(ifNull(pickup_cdeligibil, \n \n)) AS Enum8(\n \n = 0, \nE\n = 1, \nI\n = 2)) AS pickup_cdeligibil,\ntoFixedString(ifNull(pickup_ntacode, \n0000\n), 4) AS pickup_ntacode,\n\nCAST(assumeNotNull(pickup_ntaname) AS Enum16(\n = 0, \nAirport\n = 1, \nAllerton-Pelham Gardens\n = 2, \nAnnadale-Huguenot-Prince\\\ns Bay-Eltingville\n = 3, \nArden Heights\n = 4, \nAstoria\n = 5, \nAuburndale\n = 6, \nBaisley Park\n = 7, \nBath Beach\n = 8, \nBattery Park City-Lower Manhattan\n = 9, \nBay Ridge\n = 10, \nBayside-Bayside Hills\n = 11, \nBedford\n = 12, \nBedford Park-Fordham North\n = 13, \nBellerose\n = 14, \nBelmont\n = 15, \nBensonhurst East\n = 16, \nBensonhurst West\n = 17, \nBorough Park\n = 18, \nBreezy Point-Belle Harbor-Rockaway Park-Broad Channel\n = 19, \nBriarwood-Jamaica Hills\n = 20, \nBrighton Beach\n = 21, \nBronxdale\n = 22, \nBrooklyn Heights-Cobble Hill\n = 23, \nBrownsville\n = 24, \nBushwick North\n = 25, \nBushwick South\n = 26, \nCambria Heights\n = 27, \nCanarsie\n = 28, \nCarroll Gardens-Columbia Street-Red Hook\n = 29, \nCentral Harlem North-Polo Grounds\n = 30, \nCentral Harlem South\n = 31, \nCharleston-Richmond Valley-Tottenville\n = 32, \nChinatown\n = 33, \nClaremont-Bathgate\n = 34, \nClinton\n = 35, \nClinton Hill\n = 36, \nCo-op City\n = 37, \nCollege Point\n = 38, \nCorona\n = 39, \nCrotona Park East\n = 40, \nCrown Heights North\n = 41, \nCrown Heights South\n = 42, \nCypress Hills-City Line\n = 43, \nDUMBO-Vinegar Hill-Downtown Brooklyn-Boerum Hill\n = 44, \nDouglas Manor-Douglaston-Little Neck\n = 45, \nDyker Heights\n = 46, \nEast Concourse-Concourse Village\n = 47, \nEast Elmhurst\n = 48, \nEast Flatbush-Farragut\n = 49, \nEast Flushing\n = 50, \nEast Harlem North\n = 51, \nEast Harlem South\n = 52, \nEast New York\n = 53, \nEast New York (Pennsylvania Ave)\n = 54, \nEast Tremont\n = 55, \nEast Village\n = 56, \nEast Williamsburg\n = 57, \nEastchester-Edenwald-Baychester\n = 58, \nElmhurst\n = 59, \nElmhurst-Maspeth\n = 60, \nErasmus\n = 61, \nFar Rockaway-Bayswater\n = 62, \nFlatbush\n = 63, \nFlatlands\n = 64, \nFlushing\n = 65, \nFordham South\n = 66, \nForest Hills\n = 67, \nFort Greene\n = 68, \nFresh Meadows-Utopia\n = 69, \nFt. Totten-Bay Terrace-Clearview\n = 70, \nGeorgetown-Marine Park-Bergen Beach-Mill Basin\n = 71, \nGlen Oaks-Floral Park-New Hyde Park\n = 72, \nGlendale\n = 73, \nGramercy\n = 74, \nGrasmere-Arrochar-Ft. Wadsworth\n = 75, \nGravesend\n = 76, \nGreat Kills\n = 77, \nGreenpoint\n = 78, \nGrymes Hill-Clifton-Fox Hills\n = 79, \nHamilton Heights\n = 80, \nHammels-Arverne-Edgemere\n = 81, \nHighbridge\n = 82, \nHollis\n = 83, \nHomecrest\n = 84, \nHudson Yards-Chelsea-Flatiron-Union Square\n = 85, \nHunters Point-Sunnyside-West Maspeth\n = 86, \nHunts Point\n = 87, \nJackson Heights\n = 88, \nJamaica\n = 89, \nJamaica Estates-Holliswood\n = 90, \nKensington-Ocean Parkway\n = 91, \nKew Gardens\n = 92, \nKew Gardens Hills\n = 93, \nKingsbridge Heights\n = 94, \nLaurelton\n = 95, \nLenox Hill-Roosevelt Island\n = 96, \nLincoln Square\n = 97, \nLindenwood-Howard Beach\n = 98, \nLongwood\n = 99, \nLower East Side\n = 100, \nMadison\n = 101, \nManhattanville\n = 102, \nMarble Hill-Inwood\n = 103, \nMariner\\\ns Harbor-Arlington-Port Ivory-Graniteville\n = 104, \nMaspeth\n = 105, \nMelrose South-Mott Haven North\n = 106, \nMiddle Village\n = 107, \nMidtown-Midtown South\n = 108, \nMidwood\n = 109, \nMorningside Heights\n = 110, \nMorrisania-Melrose\n = 111, \nMott Haven-Port Morris\n = 112, \nMount Hope\n = 113, \nMurray Hill\n = 114, \nMurray Hill-Kips Bay\n = 115, \nNew Brighton-Silver Lake\n = 116, \nNew Dorp-Midland Beach\n = 117, \nNew Springville-Bloomfield-Travis\n = 118, \nNorth Corona\n = 119, \nNorth Riverdale-Fieldston-Riverdale\n = 120, \nNorth Side-South Side\n = 121, \nNorwood\n = 122, \nOakland Gardens\n = 123, \nOakwood-Oakwood Beach\n = 124, \nOcean Hill\n = 125, \nOcean Parkway South\n = 126, \nOld Astoria\n = 127, \nOld Town-Dongan Hills-South Beach\n = 128, \nOzone Park\n = 129, \nPark Slope-Gowanus\n = 130, \nParkchester\n = 131, \nPelham Bay-Country Club-City Island\n = 132, \nPelham Parkway\n = 133, \nPomonok-Flushing Heights-Hillcrest\n = 134, \nPort Richmond\n = 135, \nProspect Heights\n = 136, \nProspect Lefferts Gardens-Wingate\n = 137, \nQueens Village\n = 138, \nQueensboro Hill\n = 139, \nQueensbridge-Ravenswood-Long Island City\n = 140, \nRego Park\n = 141, \nRichmond Hill\n = 142, \nRidgewood\n = 143, \nRikers Island\n = 144, \nRosedale\n = 145, \nRossville-Woodrow\n = 146, \nRugby-Remsen Village\n = 147, \nSchuylerville-Throgs Neck-Edgewater Park\n = 148, \nSeagate-Coney Island\n = 149, \nSheepshead Bay-Gerritsen Beach-Manhattan Beach\n = 150, \nSoHo-TriBeCa-Civic Center-Little Italy\n = 151, \nSoundview-Bruckner\n = 152, \nSoundview-Castle Hill-Clason Point-Harding Park\n = 153, \nSouth Jamaica\n = 154, \nSouth Ozone Park\n = 155, \nSpringfield Gardens North\n = 156, \nSpringfield Gardens South-Brookville\n = 157, \nSpuyten Duyvil-Kingsbridge\n = 158, \nSt. Albans\n = 159, \nStapleton-Rosebank\n = 160, \nStarrett City\n = 161, \nSteinway\n = 162, \nStuyvesant Heights\n = 163, \nStuyvesant Town-Cooper Village\n = 164, \nSunset Park East\n = 165, \nSunset Park West\n = 166, \nTodt Hill-Emerson Hill-Heartland Village-Lighthouse Hill\n = 167, \nTurtle Bay-East Midtown\n = 168, \nUniversity Heights-Morris Heights\n = 169, \nUpper East Side-Carnegie Hill\n = 170, \nUpper West Side\n = 171, \nVan Cortlandt Village\n = 172, \nVan Nest-Morris Park-Westchester Square\n = 173, \nWashington Heights North\n = 174, \nWashington Heights South\n = 175, \nWest Brighton\n = 176, \nWest Concourse\n = 177, \nWest Farms-Bronx River\n = 178, \nWest New Brighton-New Brighton-St. George\n = 179, \nWest Village\n = 180, \nWestchester-Unionport\n = 181, \nWesterleigh\n = 182, \nWhitestone\n = 183, \nWilliamsbridge-Olinville\n = 184, \nWilliamsburg\n = 185, \nWindsor Terrace\n = 186, \nWoodhaven\n = 187, \nWoodlawn-Wakefield\n = 188, \nWoodside\n = 189, \nYorkville\n = 190, \npark-cemetery-etc-Bronx\n = 191, \npark-cemetery-etc-Brooklyn\n = 192, \npark-cemetery-etc-Manhattan\n = 193, \npark-cemetery-etc-Queens\n = 194, \npark-cemetery-etc-Staten Island\n = 195)) AS pickup_ntaname,\n\ntoUInt16(ifNull(pickup_puma, \n0\n)) AS pickup_puma,\n\nassumeNotNull(dropoff_nyct2010_gid) AS dropoff_nyct2010_gid,\ntoFloat32(ifNull(dropoff_ctlabel, \n0\n)) AS dropoff_ctlabel,\nassumeNotNull(dropoff_borocode) AS dropoff_borocode,\nCAST(assumeNotNull(dropoff_boroname) AS Enum8(\nManhattan\n = 1, \nQueens\n = 4, \nBrooklyn\n = 3, \n = 0, \nBronx\n = 2, \nStaten Island\n = 5)) AS dropoff_boroname,\ntoFixedString(ifNull(dropoff_ct2010, \n000000\n), 6) AS dropoff_ct2010,\ntoFixedString(ifNull(dropoff_boroct2010, \n0000000\n), 7) AS dropoff_boroct2010,\nCAST(assumeNotNull(ifNull(dropoff_cdeligibil, \n \n)) AS Enum8(\n \n = 0, \nE\n = 1, \nI\n = 2)) AS dropoff_cdeligibil,\ntoFixedString(ifNull(dropoff_ntacode, \n0000\n), 4) AS dropoff_ntacode,\n\nCAST(assumeNotNull(dropoff_ntaname) AS Enum16(\n = 0, \nAirport\n = 1, \nAllerton-Pelham Gardens\n = 2, \nAnnadale-Huguenot-Prince\\\ns Bay-Eltingville\n = 3, \nArden Heights\n = 4, \nAstoria\n = 5, \nAuburndale\n = 6, \nBaisley Park\n = 7, \nBath Beach\n = 8, \nBattery Park City-Lower Manhattan\n = 9, \nBay Ridge\n = 10, \nBayside-Bayside Hills\n = 11, \nBedford\n = 12, \nBedford Park-Fordham North\n = 13, \nBellerose\n = 14, \nBelmont\n = 15, \nBensonhurst East\n = 16, \nBensonhurst West\n = 17, \nBorough Park\n = 18, \nBreezy Point-Belle Harbor-Rockaway Park-Broad Channel\n = 19, \nBriarwood-Jamaica Hills\n = 20, \nBrighton Beach\n = 21, \nBronxdale\n = 22, \nBrooklyn Heights-Cobble Hill\n = 23, \nBrownsville\n = 24, \nBushwick North\n = 25, \nBushwick South\n = 26, \nCambria Heights\n = 27, \nCanarsie\n = 28, \nCarroll Gardens-Columbia Street-Red Hook\n = 29, \nCentral Harlem North-Polo Grounds\n = 30, \nCentral Harlem South\n = 31, \nCharleston-Richmond Valley-Tottenville\n = 32, \nChinatown\n = 33, \nClaremont-Bathgate\n = 34, \nClinton\n = 35, \nClinton Hill\n = 36, \nCo-op City\n = 37, \nCollege Point\n = 38, \nCorona\n = 39, \nCrotona Park East\n = 40, \nCrown Heights North\n = 41, \nCrown Heights South\n = 42, \nCypress Hills-City Line\n = 43, \nDUMBO-Vinegar Hill-Downtown Brooklyn-Boerum Hill\n = 44, \nDouglas Manor-Douglaston-Little Neck\n = 45, \nDyker Heights\n = 46, \nEast Concourse-Concourse Village\n = 47, \nEast Elmhurst\n = 48, \nEast Flatbush-Farragut\n = 49, \nEast Flushing\n = 50, \nEast Harlem North\n = 51, \nEast Harlem South\n = 52, \nEast New York\n = 53, \nEast New York (Pennsylvania Ave)\n = 54, \nEast Tremont\n = 55, \nEast Village\n = 56, \nEast Williamsburg\n = 57, \nEastchester-Edenwald-Baychester\n = 58, \nElmhurst\n = 59, \nElmhurst-Maspeth\n = 60, \nErasmus\n = 61, \nFar Rockaway-Bayswater\n = 62, \nFlatbush\n = 63, \nFlatlands\n = 64, \nFlushing\n = 65, \nFordham South\n = 66, \nForest Hills\n = 67, \nFort Greene\n = 68, \nFresh Meadows-Utopia\n = 69, \nFt. Totten-Bay Terrace-Clearview\n = 70, \nGeorgetown-Marine Park-Bergen Beach-Mill Basin\n = 71, \nGlen Oaks-Floral Park-New Hyde Park\n = 72, \nGlendale\n = 73, \nGramercy\n = 74, \nGrasmere-Arrochar-Ft. Wadsworth\n = 75, \nGravesend\n = 76, \nGreat Kills\n = 77, \nGreenpoint\n = 78, \nGrymes Hill-Clifton-Fox Hills\n = 79, \nHamilton Heights\n = 80, \nHammels-Arverne-Edgemere\n = 81, \nHighbridge\n = 82, \nHollis\n = 83, \nHomecrest\n = 84, \nHudson Yards-Chelsea-Flatiron-Union Square\n = 85, \nHunters Point-Sunnyside-West Maspeth\n = 86, \nHunts Point\n = 87, \nJackson Heights\n = 88, \nJamaica\n = 89, \nJamaica Estates-Holliswood\n = 90, \nKensington-Ocean Parkway\n = 91, \nKew Gardens\n = 92, \nKew Gardens Hills\n = 93, \nKingsbridge Heights\n = 94, \nLaurelton\n = 95, \nLenox Hill-Roosevelt Island\n = 96, \nLincoln Square\n = 97, \nLindenwood-Howard Beach\n = 98, \nLongwood\n = 99, \nLower East Side\n = 100, \nMadison\n = 101, \nManhattanville\n = 102, \nMarble Hill-Inwood\n = 103, \nMariner\\\ns Harbor-Arlington-Port Ivory-Graniteville\n = 104, \nMaspeth\n = 105, \nMelrose South-Mott Haven North\n = 106, \nMiddle Village\n = 107, \nMidtown-Midtown South\n = 108, \nMidwood\n = 109, \nMorningside Heights\n = 110, \nMorrisania-Melrose\n = 111, \nMott Haven-Port Morris\n = 112, \nMount Hope\n = 113, \nMurray Hill\n = 114, \nMurray Hill-Kips Bay\n = 115, \nNew Brighton-Silver Lake\n = 116, \nNew Dorp-Midland Beach\n = 117, \nNew Springville-Bloomfield-Travis\n = 118, \nNorth Corona\n = 119, \nNorth Riverdale-Fieldston-Riverdale\n = 120, \nNorth Side-South Side\n = 121, \nNorwood\n = 122, \nOakland Gardens\n = 123, \nOakwood-Oakwood Beach\n = 124, \nOcean Hill\n = 125, \nOcean Parkway South\n = 126, \nOld Astoria\n = 127, \nOld Town-Dongan Hills-South Beach\n = 128, \nOzone Park\n = 129, \nPark Slope-Gowanus\n = 130, \nParkchester\n = 131, \nPelham Bay-Country Club-City Island\n = 132, \nPelham Parkway\n = 133, \nPomonok-Flushing Heights-Hillcrest\n = 134, \nPort Richmond\n = 135, \nProspect Heights\n = 136, \nProspect Lefferts Gardens-Wingate\n = 137, \nQueens Village\n = 138, \nQueensboro Hill\n = 139, \nQueensbridge-Ravenswood-Long Island City\n = 140, \nRego Park\n = 141, \nRichmond Hill\n = 142, \nRidgewood\n = 143, \nRikers Island\n = 144, \nRosedale\n = 145, \nRossville-Woodrow\n = 146, \nRugby-Remsen Village\n = 147, \nSchuylerville-Throgs Neck-Edgewater Park\n = 148, \nSeagate-Coney Island\n = 149, \nSheepshead Bay-Gerritsen Beach-Manhattan Beach\n = 150, \nSoHo-TriBeCa-Civic Center-Little Italy\n = 151, \nSoundview-Bruckner\n = 152, \nSoundview-Castle Hill-Clason Point-Harding Park\n = 153, \nSouth Jamaica\n = 154, \nSouth Ozone Park\n = 155, \nSpringfield Gardens North\n = 156, \nSpringfield Gardens South-Brookville\n = 157, \nSpuyten Duyvil-Kingsbridge\n = 158, \nSt. Albans\n = 159, \nStapleton-Rosebank\n = 160, \nStarrett City\n = 161, \nSteinway\n = 162, \nStuyvesant Heights\n = 163, \nStuyvesant Town-Cooper Village\n = 164, \nSunset Park East\n = 165, \nSunset Park West\n = 166, \nTodt Hill-Emerson Hill-Heartland Village-Lighthouse Hill\n = 167, \nTurtle Bay-East Midtown\n = 168, \nUniversity Heights-Morris Heights\n = 169, \nUpper East Side-Carnegie Hill\n = 170, \nUpper West Side\n = 171, \nVan Cortlandt Village\n = 172, \nVan Nest-Morris Park-Westchester Square\n = 173, \nWashington Heights North\n = 174, \nWashington Heights South\n = 175, \nWest Brighton\n = 176, \nWest Concourse\n = 177, \nWest Farms-Bronx River\n = 178, \nWest New Brighton-New Brighton-St. George\n = 179, \nWest Village\n = 180, \nWestchester-Unionport\n = 181, \nWesterleigh\n = 182, \nWhitestone\n = 183, \nWilliamsbridge-Olinville\n = 184, \nWilliamsburg\n = 185, \nWindsor Terrace\n = 186, \nWoodhaven\n = 187, \nWoodlawn-Wakefield\n = 188, \nWoodside\n = 189, \nYorkville\n = 190, \npark-cemetery-etc-Bronx\n = 191, \npark-cemetery-etc-Brooklyn\n = 192, \npark-cemetery-etc-Manhattan\n = 193, \npark-cemetery-etc-Queens\n = 194, \npark-cemetery-etc-Staten Island\n = 195)) AS dropoff_ntaname,\n\ntoUInt16(ifNull(dropoff_puma, \n0\n)) AS dropoff_puma\n\nFROM trips\n\n\n\n\n\nThis takes 3030 seconds at a speed of about 428,000 rows per second.\nTo load it faster, you can create the table with the \nLog\n engine instead of \nMergeTree\n. In this case, the download works faster than 200 seconds.\n\n\nThe table uses 126 GB of disk space.\n\n\n:) SELECT formatReadableSize(sum(bytes)) FROM system.parts WHERE table = \ntrips_mergetree\n AND active\n\nSELECT formatReadableSize(sum(bytes))\nFROM system.parts\nWHERE (table = \ntrips_mergetree\n) AND active\n\n\u250c\u2500formatReadableSize(sum(bytes))\u2500\u2510\n\u2502 126.18 GiB                     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n\n\nAmong other things, you can run the OPTIMIZE query on MergeTree. But it's not required, since everything will be fine without it.\n\n\nResults on single server\n\n\nQ1:\n\n\nSELECT\n \ncab_type\n,\n \ncount\n(\n*\n)\n \nFROM\n \ntrips_mergetree\n \nGROUP\n \nBY\n \ncab_type\n\n\n\n\n\n\n0.490 seconds.\n\n\nQ2:\n\n\nSELECT\n \npassenger_count\n,\n \navg\n(\ntotal_amount\n)\n \nFROM\n \ntrips_mergetree\n \nGROUP\n \nBY\n \npassenger_count\n\n\n\n\n\n\n1.224 seconds.\n\n\nQ3:\n\n\nSELECT\n \npassenger_count\n,\n \ntoYear\n(\npickup_date\n)\n \nAS\n \nyear\n,\n \ncount\n(\n*\n)\n \nFROM\n \ntrips_mergetree\n \nGROUP\n \nBY\n \npassenger_count\n,\n \nyear\n\n\n\n\n\n\n2.104 seconds.\n\n\nQ4:\n\n\nSELECT\n \npassenger_count\n,\n \ntoYear\n(\npickup_date\n)\n \nAS\n \nyear\n,\n \nround\n(\ntrip_distance\n)\n \nAS\n \ndistance\n,\n \ncount\n(\n*\n)\n\n\nFROM\n \ntrips_mergetree\n\n\nGROUP\n \nBY\n \npassenger_count\n,\n \nyear\n,\n \ndistance\n\n\nORDER\n \nBY\n \nyear\n,\n \ncount\n(\n*\n)\n \nDESC\n\n\n\n\n\n\n3.593 seconds.\n\n\nThe following server was used:\n\n\nTwo Intel(R) Xeon(R) CPU E5-2650 v2 @ 2.60GHz, 16 physical kernels total,\n128 GiB RAM,\n8x6 TB HD on hardware RAID-5\n\n\nExecution time is the best of three runsBut starting from the second run, queries read data from the file system cache. No further caching occurs: the data is read out and processed in each run.\n\n\nCreating a table on three servers:\n\n\nOn each server:\n\n\nCREATE TABLE default.trips_mergetree_third ( trip_id UInt32,  vendor_id Enum8(\n1\n = 1, \n2\n = 2, \nCMT\n = 3, \nVTS\n = 4, \nDDS\n = 5, \nB02512\n = 10, \nB02598\n = 11, \nB02617\n = 12, \nB02682\n = 13, \nB02764\n = 14),  pickup_date Date,  pickup_datetime DateTime,  dropoff_date Date,  dropoff_datetime DateTime,  store_and_fwd_flag UInt8,  rate_code_id UInt8,  pickup_longitude Float64,  pickup_latitude Float64,  dropoff_longitude Float64,  dropoff_latitude Float64,  passenger_count UInt8,  trip_distance Float64,  fare_amount Float32,  extra Float32,  mta_tax Float32,  tip_amount Float32,  tolls_amount Float32,  ehail_fee Float32,  improvement_surcharge Float32,  total_amount Float32,  payment_type_ Enum8(\nUNK\n = 0, \nCSH\n = 1, \nCRE\n = 2, \nNOC\n = 3, \nDIS\n = 4),  trip_type UInt8,  pickup FixedString(25),  dropoff FixedString(25),  cab_type Enum8(\nyellow\n = 1, \ngreen\n = 2, \nuber\n = 3),  pickup_nyct2010_gid UInt8,  pickup_ctlabel Float32,  pickup_borocode UInt8,  pickup_boroname Enum8(\n = 0, \nManhattan\n = 1, \nBronx\n = 2, \nBrooklyn\n = 3, \nQueens\n = 4, \nStaten Island\n = 5),  pickup_ct2010 FixedString(6),  pickup_boroct2010 FixedString(7),  pickup_cdeligibil Enum8(\n \n = 0, \nE\n = 1, \nI\n = 2),  pickup_ntacode FixedString(4),  pickup_ntaname Enum16(\n = 0, \nAirport\n = 1, \nAllerton-Pelham Gardens\n = 2, \nAnnadale-Huguenot-Prince\\\ns Bay-Eltingville\n = 3, \nArden Heights\n = 4, \nAstoria\n = 5, \nAuburndale\n = 6, \nBaisley Park\n = 7, \nBath Beach\n = 8, \nBattery Park City-Lower Manhattan\n = 9, \nBay Ridge\n = 10, \nBayside-Bayside Hills\n = 11, \nBedford\n = 12, \nBedford Park-Fordham North\n = 13, \nBellerose\n = 14, \nBelmont\n = 15, \nBensonhurst East\n = 16, \nBensonhurst West\n = 17, \nBorough Park\n = 18, \nBreezy Point-Belle Harbor-Rockaway Park-Broad Channel\n = 19, \nBriarwood-Jamaica Hills\n = 20, \nBrighton Beach\n = 21, \nBronxdale\n = 22, \nBrooklyn Heights-Cobble Hill\n = 23, \nBrownsville\n = 24, \nBushwick North\n = 25, \nBushwick South\n = 26, \nCambria Heights\n = 27, \nCanarsie\n = 28, \nCarroll Gardens-Columbia Street-Red Hook\n = 29, \nCentral Harlem North-Polo Grounds\n = 30, \nCentral Harlem South\n = 31, \nCharleston-Richmond Valley-Tottenville\n = 32, \nChinatown\n = 33, \nClaremont-Bathgate\n = 34, \nClinton\n = 35, \nClinton Hill\n = 36, \nCo-op City\n = 37, \nCollege Point\n = 38, \nCorona\n = 39, \nCrotona Park East\n = 40, \nCrown Heights North\n = 41, \nCrown Heights South\n = 42, \nCypress Hills-City Line\n = 43, \nDUMBO-Vinegar Hill-Downtown Brooklyn-Boerum Hill\n = 44, \nDouglas Manor-Douglaston-Little Neck\n = 45, \nDyker Heights\n = 46, \nEast Concourse-Concourse Village\n = 47, \nEast Elmhurst\n = 48, \nEast Flatbush-Farragut\n = 49, \nEast Flushing\n = 50, \nEast Harlem North\n = 51, \nEast Harlem South\n = 52, \nEast New York\n = 53, \nEast New York (Pennsylvania Ave)\n = 54, \nEast Tremont\n = 55, \nEast Village\n = 56, \nEast Williamsburg\n = 57, \nEastchester-Edenwald-Baychester\n = 58, \nElmhurst\n = 59, \nElmhurst-Maspeth\n = 60, \nErasmus\n = 61, \nFar Rockaway-Bayswater\n = 62, \nFlatbush\n = 63, \nFlatlands\n = 64, \nFlushing\n = 65, \nFordham South\n = 66, \nForest Hills\n = 67, \nFort Greene\n = 68, \nFresh Meadows-Utopia\n = 69, \nFt. Totten-Bay Terrace-Clearview\n = 70, \nGeorgetown-Marine Park-Bergen Beach-Mill Basin\n = 71, \nGlen Oaks-Floral Park-New Hyde Park\n = 72, \nGlendale\n = 73, \nGramercy\n = 74, \nGrasmere-Arrochar-Ft. Wadsworth\n = 75, \nGravesend\n = 76, \nGreat Kills\n = 77, \nGreenpoint\n = 78, \nGrymes Hill-Clifton-Fox Hills\n = 79, \nHamilton Heights\n = 80, \nHammels-Arverne-Edgemere\n = 81, \nHighbridge\n = 82, \nHollis\n = 83, \nHomecrest\n = 84, \nHudson Yards-Chelsea-Flatiron-Union Square\n = 85, \nHunters Point-Sunnyside-West Maspeth\n = 86, \nHunts Point\n = 87, \nJackson Heights\n = 88, \nJamaica\n = 89, \nJamaica Estates-Holliswood\n = 90, \nKensington-Ocean Parkway\n = 91, \nKew Gardens\n = 92, \nKew Gardens Hills\n = 93, \nKingsbridge Heights\n = 94, \nLaurelton\n = 95, \nLenox Hill-Roosevelt Island\n = 96, \nLincoln Square\n = 97, \nLindenwood-Howard Beach\n = 98, \nLongwood\n = 99, \nLower East Side\n = 100, \nMadison\n = 101, \nManhattanville\n = 102, \nMarble Hill-Inwood\n = 103, \nMariner\\\ns Harbor-Arlington-Port Ivory-Graniteville\n = 104, \nMaspeth\n = 105, \nMelrose South-Mott Haven North\n = 106, \nMiddle Village\n = 107, \nMidtown-Midtown South\n = 108, \nMidwood\n = 109, \nMorningside Heights\n = 110, \nMorrisania-Melrose\n = 111, \nMott Haven-Port Morris\n = 112, \nMount Hope\n = 113, \nMurray Hill\n = 114, \nMurray Hill-Kips Bay\n = 115, \nNew Brighton-Silver Lake\n = 116, \nNew Dorp-Midland Beach\n = 117, \nNew Springville-Bloomfield-Travis\n = 118, \nNorth Corona\n = 119, \nNorth Riverdale-Fieldston-Riverdale\n = 120, \nNorth Side-South Side\n = 121, \nNorwood\n = 122, \nOakland Gardens\n = 123, \nOakwood-Oakwood Beach\n = 124, \nOcean Hill\n = 125, \nOcean Parkway South\n = 126, \nOld Astoria\n = 127, \nOld Town-Dongan Hills-South Beach\n = 128, \nOzone Park\n = 129, \nPark Slope-Gowanus\n = 130, \nParkchester\n = 131, \nPelham Bay-Country Club-City Island\n = 132, \nPelham Parkway\n = 133, \nPomonok-Flushing Heights-Hillcrest\n = 134, \nPort Richmond\n = 135, \nProspect Heights\n = 136, \nProspect Lefferts Gardens-Wingate\n = 137, \nQueens Village\n = 138, \nQueensboro Hill\n = 139, \nQueensbridge-Ravenswood-Long Island City\n = 140, \nRego Park\n = 141, \nRichmond Hill\n = 142, \nRidgewood\n = 143, \nRikers Island\n = 144, \nRosedale\n = 145, \nRossville-Woodrow\n = 146, \nRugby-Remsen Village\n = 147, \nSchuylerville-Throgs Neck-Edgewater Park\n = 148, \nSeagate-Coney Island\n = 149, \nSheepshead Bay-Gerritsen Beach-Manhattan Beach\n = 150, \nSoHo-TriBeCa-Civic Center-Little Italy\n = 151, \nSoundview-Bruckner\n = 152, \nSoundview-Castle Hill-Clason Point-Harding Park\n = 153, \nSouth Jamaica\n = 154, \nSouth Ozone Park\n = 155, \nSpringfield Gardens North\n = 156, \nSpringfield Gardens South-Brookville\n = 157, \nSpuyten Duyvil-Kingsbridge\n = 158, \nSt. Albans\n = 159, \nStapleton-Rosebank\n = 160, \nStarrett City\n = 161, \nSteinway\n = 162, \nStuyvesant Heights\n = 163, \nStuyvesant Town-Cooper Village\n = 164, \nSunset Park East\n = 165, \nSunset Park West\n = 166, \nTodt Hill-Emerson Hill-Heartland Village-Lighthouse Hill\n = 167, \nTurtle Bay-East Midtown\n = 168, \nUniversity Heights-Morris Heights\n = 169, \nUpper East Side-Carnegie Hill\n = 170, \nUpper West Side\n = 171, \nVan Cortlandt Village\n = 172, \nVan Nest-Morris Park-Westchester Square\n = 173, \nWashington Heights North\n = 174, \nWashington Heights South\n = 175, \nWest Brighton\n = 176, \nWest Concourse\n = 177, \nWest Farms-Bronx River\n = 178, \nWest New Brighton-New Brighton-St. George\n = 179, \nWest Village\n = 180, \nWestchester-Unionport\n = 181, \nWesterleigh\n = 182, \nWhitestone\n = 183, \nWilliamsbridge-Olinville\n = 184, \nWilliamsburg\n = 185, \nWindsor Terrace\n = 186, \nWoodhaven\n = 187, \nWoodlawn-Wakefield\n = 188, \nWoodside\n = 189, \nYorkville\n = 190, \npark-cemetery-etc-Bronx\n = 191, \npark-cemetery-etc-Brooklyn\n = 192, \npark-cemetery-etc-Manhattan\n = 193, \npark-cemetery-etc-Queens\n = 194, \npark-cemetery-etc-Staten Island\n = 195),  pickup_puma UInt16,  dropoff_nyct2010_gid UInt8,  dropoff_ctlabel Float32,  dropoff_borocode UInt8,  dropoff_boroname Enum8(\n = 0, \nManhattan\n = 1, \nBronx\n = 2, \nBrooklyn\n = 3, \nQueens\n = 4, \nStaten Island\n = 5),  dropoff_ct2010 FixedString(6),  dropoff_boroct2010 FixedString(7),  dropoff_cdeligibil Enum8(\n \n = 0, \nE\n = 1, \nI\n = 2),  dropoff_ntacode FixedString(4),  dropoff_ntaname Enum16(\n = 0, \nAirport\n = 1, \nAllerton-Pelham Gardens\n = 2, \nAnnadale-Huguenot-Prince\\\ns Bay-Eltingville\n = 3, \nArden Heights\n = 4, \nAstoria\n = 5, \nAuburndale\n = 6, \nBaisley Park\n = 7, \nBath Beach\n = 8, \nBattery Park City-Lower Manhattan\n = 9, \nBay Ridge\n = 10, \nBayside-Bayside Hills\n = 11, \nBedford\n = 12, \nBedford Park-Fordham North\n = 13, \nBellerose\n = 14, \nBelmont\n = 15, \nBensonhurst East\n = 16, \nBensonhurst West\n = 17, \nBorough Park\n = 18, \nBreezy Point-Belle Harbor-Rockaway Park-Broad Channel\n = 19, \nBriarwood-Jamaica Hills\n = 20, \nBrighton Beach\n = 21, \nBronxdale\n = 22, \nBrooklyn Heights-Cobble Hill\n = 23, \nBrownsville\n = 24, \nBushwick North\n = 25, \nBushwick South\n = 26, \nCambria Heights\n = 27, \nCanarsie\n = 28, \nCarroll Gardens-Columbia Street-Red Hook\n = 29, \nCentral Harlem North-Polo Grounds\n = 30, \nCentral Harlem South\n = 31, \nCharleston-Richmond Valley-Tottenville\n = 32, \nChinatown\n = 33, \nClaremont-Bathgate\n = 34, \nClinton\n = 35, \nClinton Hill\n = 36, \nCo-op City\n = 37, \nCollege Point\n = 38, \nCorona\n = 39, \nCrotona Park East\n = 40, \nCrown Heights North\n = 41, \nCrown Heights South\n = 42, \nCypress Hills-City Line\n = 43, \nDUMBO-Vinegar Hill-Downtown Brooklyn-Boerum Hill\n = 44, \nDouglas Manor-Douglaston-Little Neck\n = 45, \nDyker Heights\n = 46, \nEast Concourse-Concourse Village\n = 47, \nEast Elmhurst\n = 48, \nEast Flatbush-Farragut\n = 49, \nEast Flushing\n = 50, \nEast Harlem North\n = 51, \nEast Harlem South\n = 52, \nEast New York\n = 53, \nEast New York (Pennsylvania Ave)\n = 54, \nEast Tremont\n = 55, \nEast Village\n = 56, \nEast Williamsburg\n = 57, \nEastchester-Edenwald-Baychester\n = 58, \nElmhurst\n = 59, \nElmhurst-Maspeth\n = 60, \nErasmus\n = 61, \nFar Rockaway-Bayswater\n = 62, \nFlatbush\n = 63, \nFlatlands\n = 64, \nFlushing\n = 65, \nFordham South\n = 66, \nForest Hills\n = 67, \nFort Greene\n = 68, \nFresh Meadows-Utopia\n = 69, \nFt. Totten-Bay Terrace-Clearview\n = 70, \nGeorgetown-Marine Park-Bergen Beach-Mill Basin\n = 71, \nGlen Oaks-Floral Park-New Hyde Park\n = 72, \nGlendale\n = 73, \nGramercy\n = 74, \nGrasmere-Arrochar-Ft. Wadsworth\n = 75, \nGravesend\n = 76, \nGreat Kills\n = 77, \nGreenpoint\n = 78, \nGrymes Hill-Clifton-Fox Hills\n = 79, \nHamilton Heights\n = 80, \nHammels-Arverne-Edgemere\n = 81, \nHighbridge\n = 82, \nHollis\n = 83, \nHomecrest\n = 84, \nHudson Yards-Chelsea-Flatiron-Union Square\n = 85, \nHunters Point-Sunnyside-West Maspeth\n = 86, \nHunts Point\n = 87, \nJackson Heights\n = 88, \nJamaica\n = 89, \nJamaica Estates-Holliswood\n = 90, \nKensington-Ocean Parkway\n = 91, \nKew Gardens\n = 92, \nKew Gardens Hills\n = 93, \nKingsbridge Heights\n = 94, \nLaurelton\n = 95, \nLenox Hill-Roosevelt Island\n = 96, \nLincoln Square\n = 97, \nLindenwood-Howard Beach\n = 98, \nLongwood\n = 99, \nLower East Side\n = 100, \nMadison\n = 101, \nManhattanville\n = 102, \nMarble Hill-Inwood\n = 103, \nMariner\\\ns Harbor-Arlington-Port Ivory-Graniteville\n = 104, \nMaspeth\n = 105, \nMelrose South-Mott Haven North\n = 106, \nMiddle Village\n = 107, \nMidtown-Midtown South\n = 108, \nMidwood\n = 109, \nMorningside Heights\n = 110, \nMorrisania-Melrose\n = 111, \nMott Haven-Port Morris\n = 112, \nMount Hope\n = 113, \nMurray Hill\n = 114, \nMurray Hill-Kips Bay\n = 115, \nNew Brighton-Silver Lake\n = 116, \nNew Dorp-Midland Beach\n = 117, \nNew Springville-Bloomfield-Travis\n = 118, \nNorth Corona\n = 119, \nNorth Riverdale-Fieldston-Riverdale\n = 120, \nNorth Side-South Side\n = 121, \nNorwood\n = 122, \nOakland Gardens\n = 123, \nOakwood-Oakwood Beach\n = 124, \nOcean Hill\n = 125, \nOcean Parkway South\n = 126, \nOld Astoria\n = 127, \nOld Town-Dongan Hills-South Beach\n = 128, \nOzone Park\n = 129, \nPark Slope-Gowanus\n = 130, \nParkchester\n = 131, \nPelham Bay-Country Club-City Island\n = 132, \nPelham Parkway\n = 133, \nPomonok-Flushing Heights-Hillcrest\n = 134, \nPort Richmond\n = 135, \nProspect Heights\n = 136, \nProspect Lefferts Gardens-Wingate\n = 137, \nQueens Village\n = 138, \nQueensboro Hill\n = 139, \nQueensbridge-Ravenswood-Long Island City\n = 140, \nRego Park\n = 141, \nRichmond Hill\n = 142, \nRidgewood\n = 143, \nRikers Island\n = 144, \nRosedale\n = 145, \nRossville-Woodrow\n = 146, \nRugby-Remsen Village\n = 147, \nSchuylerville-Throgs Neck-Edgewater Park\n = 148, \nSeagate-Coney Island\n = 149, \nSheepshead Bay-Gerritsen Beach-Manhattan Beach\n = 150, \nSoHo-TriBeCa-Civic Center-Little Italy\n = 151, \nSoundview-Bruckner\n = 152, \nSoundview-Castle Hill-Clason Point-Harding Park\n = 153, \nSouth Jamaica\n = 154, \nSouth Ozone Park\n = 155, \nSpringfield Gardens North\n = 156, \nSpringfield Gardens South-Brookville\n = 157, \nSpuyten Duyvil-Kingsbridge\n = 158, \nSt. Albans\n = 159, \nStapleton-Rosebank\n = 160, \nStarrett City\n = 161, \nSteinway\n = 162, \nStuyvesant Heights\n = 163, \nStuyvesant Town-Cooper Village\n = 164, \nSunset Park East\n = 165, \nSunset Park West\n = 166, \nTodt Hill-Emerson Hill-Heartland Village-Lighthouse Hill\n = 167, \nTurtle Bay-East Midtown\n = 168, \nUniversity Heights-Morris Heights\n = 169, \nUpper East Side-Carnegie Hill\n = 170, \nUpper West Side\n = 171, \nVan Cortlandt Village\n = 172, \nVan Nest-Morris Park-Westchester Square\n = 173, \nWashington Heights North\n = 174, \nWashington Heights South\n = 175, \nWest Brighton\n = 176, \nWest Concourse\n = 177, \nWest Farms-Bronx River\n = 178, \nWest New Brighton-New Brighton-St. George\n = 179, \nWest Village\n = 180, \nWestchester-Unionport\n = 181, \nWesterleigh\n = 182, \nWhitestone\n = 183, \nWilliamsbridge-Olinville\n = 184, \nWilliamsburg\n = 185, \nWindsor Terrace\n = 186, \nWoodhaven\n = 187, \nWoodlawn-Wakefield\n = 188, \nWoodside\n = 189, \nYorkville\n = 190, \npark-cemetery-etc-Bronx\n = 191, \npark-cemetery-etc-Brooklyn\n = 192, \npark-cemetery-etc-Manhattan\n = 193, \npark-cemetery-etc-Queens\n = 194, \npark-cemetery-etc-Staten Island\n = 195),  dropoff_puma UInt16) ENGINE = MergeTree(pickup_date, pickup_datetime, 8192)\n\n\n\n\n\nOn the source server:\n\n\nCREATE\n \nTABLE\n \ntrips_mergetree_x3\n \nAS\n \ntrips_mergetree_third\n \nENGINE\n \n=\n \nDistributed\n(\nperftest\n,\n \ndefault\n,\n \ntrips_mergetree_third\n,\n \nrand\n())\n\n\n\n\n\n\nThe following query redistributes data:\n\n\nINSERT\n \nINTO\n \ntrips_mergetree_x3\n \nSELECT\n \n*\n \nFROM\n \ntrips_mergetree\n\n\n\n\n\n\nThis takes 2454 seconds.\n\n\nOn three servers:\n\n\nQ1: 0.212 seconds.\nQ2: 0.438 seconds.\nQ3: 0.733 seconds.\nQ4: 1.241 seconds.\n\n\nNo surprises here, since the queries are scaled linearly.\n\n\nWe also have results from a cluster of 140 servers:\n\n\nQ1: 0.028 sec.\nQ2: 0.043 sec.\nQ3: 0.051 sec.\nQ4: 0.072 sec.\n\n\nIn this case, the query processing time is determined above all by network latency.\nWe ran queries using a client located in a Yandex datacenter in Finland on a cluster in Russia, which added about 20 ms of latency.\n\n\nSummary\n\n\nnodes   Q1     Q2     Q3     Q4\n  1  0.490  1.224  2.104  3.593\n  3  0.212  0.438  0.733  1.241\n140  0.028  0.043  0.051  0.072\n\n\n\n\n\nAMPLab Big Data Benchmark\n\n\nSee \nhttps://amplab.cs.berkeley.edu/benchmark/\n\n\nSign up for a free account at \nhttps://aws.amazon.com\n. You will need a credit card, email and phone number.Get a new access key at \nhttps://console.aws.amazon.com/iam/home?nc2=h_m_sc#security_credential\n\n\nRun the following in the console:\n\n\nsudo apt-get install s3cmd\nmkdir tiny\n;\n \ncd\n tiny\n;\n\ns3cmd sync s3://big-data-benchmark/pavlo/text-deflate/tiny/ .\n\ncd\n ..\nmkdir 1node\n;\n \ncd\n 1node\n;\n\ns3cmd sync s3://big-data-benchmark/pavlo/text-deflate/1node/ .\n\ncd\n ..\nmkdir 5nodes\n;\n \ncd\n 5nodes\n;\n\ns3cmd sync s3://big-data-benchmark/pavlo/text-deflate/5nodes/ .\n\ncd\n ..\n\n\n\n\n\nRun the following ClickHouse queries:\n\n\nCREATE\n \nTABLE\n \nrankings_tiny\n\n\n(\n\n    \npageURL\n \nString\n,\n\n    \npageRank\n \nUInt32\n,\n\n    \navgDuration\n \nUInt32\n\n\n)\n \nENGINE\n \n=\n \nLog\n;\n\n\n\nCREATE\n \nTABLE\n \nuservisits_tiny\n\n\n(\n\n    \nsourceIP\n \nString\n,\n\n    \ndestinationURL\n \nString\n,\n\n    \nvisitDate\n \nDate\n,\n\n    \nadRevenue\n \nFloat32\n,\n\n    \nUserAgent\n \nString\n,\n\n    \ncCode\n \nFixedString\n(\n3\n),\n\n    \nlCode\n \nFixedString\n(\n6\n),\n\n    \nsearchWord\n \nString\n,\n\n    \nduration\n \nUInt32\n\n\n)\n \nENGINE\n \n=\n \nMergeTree\n(\nvisitDate\n,\n \nvisitDate\n,\n \n8192\n);\n\n\n\nCREATE\n \nTABLE\n \nrankings_1node\n\n\n(\n\n    \npageURL\n \nString\n,\n\n    \npageRank\n \nUInt32\n,\n\n    \navgDuration\n \nUInt32\n\n\n)\n \nENGINE\n \n=\n \nLog\n;\n\n\n\nCREATE\n \nTABLE\n \nuservisits_1node\n\n\n(\n\n    \nsourceIP\n \nString\n,\n\n    \ndestinationURL\n \nString\n,\n\n    \nvisitDate\n \nDate\n,\n\n    \nadRevenue\n \nFloat32\n,\n\n    \nUserAgent\n \nString\n,\n\n    \ncCode\n \nFixedString\n(\n3\n),\n\n    \nlCode\n \nFixedString\n(\n6\n),\n\n    \nsearchWord\n \nString\n,\n\n    \nduration\n \nUInt32\n\n\n)\n \nENGINE\n \n=\n \nMergeTree\n(\nvisitDate\n,\n \nvisitDate\n,\n \n8192\n);\n\n\n\nCREATE\n \nTABLE\n \nrankings_5nodes_on_single\n\n\n(\n\n    \npageURL\n \nString\n,\n\n    \npageRank\n \nUInt32\n,\n\n    \navgDuration\n \nUInt32\n\n\n)\n \nENGINE\n \n=\n \nLog\n;\n\n\n\nCREATE\n \nTABLE\n \nuservisits_5nodes_on_single\n\n\n(\n\n    \nsourceIP\n \nString\n,\n\n    \ndestinationURL\n \nString\n,\n\n    \nvisitDate\n \nDate\n,\n\n    \nadRevenue\n \nFloat32\n,\n\n    \nUserAgent\n \nString\n,\n\n    \ncCode\n \nFixedString\n(\n3\n),\n\n    \nlCode\n \nFixedString\n(\n6\n),\n\n    \nsearchWord\n \nString\n,\n\n    \nduration\n \nUInt32\n\n\n)\n \nENGINE\n \n=\n \nMergeTree\n(\nvisitDate\n,\n \nvisitDate\n,\n \n8192\n);\n\n\n\n\n\n\nGo back to the console:\n\n\nfor\n i in tiny/rankings/*.deflate\n;\n \ndo\n \necho\n \n$i\n;\n zlib-flate -uncompress \n \n$i\n \n|\n clickhouse-client --host\n=\nexample-perftest01j --query\n=\nINSERT INTO rankings_tiny FORMAT CSV\n;\n \ndone\n\n\nfor\n i in tiny/uservisits/*.deflate\n;\n \ndo\n \necho\n \n$i\n;\n zlib-flate -uncompress \n \n$i\n \n|\n clickhouse-client --host\n=\nexample-perftest01j --query\n=\nINSERT INTO uservisits_tiny FORMAT CSV\n;\n \ndone\n\n\nfor\n i in 1node/rankings/*.deflate\n;\n \ndo\n \necho\n \n$i\n;\n zlib-flate -uncompress \n \n$i\n \n|\n clickhouse-client --host\n=\nexample-perftest01j --query\n=\nINSERT INTO rankings_1node FORMAT CSV\n;\n \ndone\n\n\nfor\n i in 1node/uservisits/*.deflate\n;\n \ndo\n \necho\n \n$i\n;\n zlib-flate -uncompress \n \n$i\n \n|\n clickhouse-client --host\n=\nexample-perftest01j --query\n=\nINSERT INTO uservisits_1node FORMAT CSV\n;\n \ndone\n\n\nfor\n i in 5nodes/rankings/*.deflate\n;\n \ndo\n \necho\n \n$i\n;\n zlib-flate -uncompress \n \n$i\n \n|\n clickhouse-client --host\n=\nexample-perftest01j --query\n=\nINSERT INTO rankings_5nodes_on_single FORMAT CSV\n;\n \ndone\n\n\nfor\n i in 5nodes/uservisits/*.deflate\n;\n \ndo\n \necho\n \n$i\n;\n zlib-flate -uncompress \n \n$i\n \n|\n clickhouse-client --host\n=\nexample-perftest01j --query\n=\nINSERT INTO uservisits_5nodes_on_single FORMAT CSV\n;\n \ndone\n\n\n\n\n\n\nQueries for obtaining data samples:\n\n\nSELECT\n \npageURL\n,\n \npageRank\n \nFROM\n \nrankings_1node\n \nWHERE\n \npageRank\n \n \n1000\n\n\n\nSELECT\n \nsubstring\n(\nsourceIP\n,\n \n1\n,\n \n8\n),\n \nsum\n(\nadRevenue\n)\n \nFROM\n \nuservisits_1node\n \nGROUP\n \nBY\n \nsubstring\n(\nsourceIP\n,\n \n1\n,\n \n8\n)\n\n\n\nSELECT\n\n    \nsourceIP\n,\n\n    \nsum\n(\nadRevenue\n)\n \nAS\n \ntotalRevenue\n,\n\n    \navg\n(\npageRank\n)\n \nAS\n \npageRank\n\n\nFROM\n \nrankings_1node\n \nALL\n \nINNER\n \nJOIN\n\n\n(\n\n    \nSELECT\n\n        \nsourceIP\n,\n\n        \ndestinationURL\n \nAS\n \npageURL\n,\n\n        \nadRevenue\n\n    \nFROM\n \nuservisits_1node\n\n    \nWHERE\n \n(\nvisitDate\n \n \n1980-01-01\n)\n \nAND\n \n(\nvisitDate\n \n \n1980-04-01\n)\n\n\n)\n \nUSING\n \npageURL\n\n\nGROUP\n \nBY\n \nsourceIP\n\n\nORDER\n \nBY\n \ntotalRevenue\n \nDESC\n\n\nLIMIT\n \n1\n\n\n\n\n\n\nWikiStat\n\n\nSee: \nhttp://dumps.wikimedia.org/other/pagecounts-raw/\n\n\nCreating a table:\n\n\nCREATE\n \nTABLE\n \nwikistat\n\n\n(\n\n    \ndate\n \nDate\n,\n\n    \ntime\n \nDateTime\n,\n\n    \nproject\n \nString\n,\n\n    \nsubproject\n \nString\n,\n\n    \npath\n \nString\n,\n\n    \nhits\n \nUInt64\n,\n\n    \nsize\n \nUInt64\n\n\n)\n \nENGINE\n \n=\n \nMergeTree\n(\ndate\n,\n \n(\npath\n,\n \ntime\n),\n \n8192\n);\n\n\n\n\n\n\nLoading data:\n\n\nfor\n i in \n{\n2007\n..2016\n}\n;\n \ndo\n \nfor\n j in \n{\n01\n..12\n}\n;\n \ndo\n \necho\n \n$i\n-\n$j\n \n2\n;\n curl -sSL \nhttp://dumps.wikimedia.org/other/pagecounts-raw/\n$i\n/\n$i\n-\n$j\n/\n \n|\n grep -oE \npagecounts-[0-9]+-[0-9]+\\.gz\n;\n \ndone\n;\n \ndone\n \n|\n sort \n|\n uniq \n|\n tee links.txt\ncat links.txt \n|\n \nwhile\n \nread\n link\n;\n \ndo\n wget http://dumps.wikimedia.org/other/pagecounts-raw/\n$(\necho\n \n$link\n \n|\n sed -r \ns/pagecounts-([0-9]{4})([0-9]{2})[0-9]{2}-[0-9]+\\.gz/\\1/\n)\n/\n$(\necho\n \n$link\n \n|\n sed -r \ns/pagecounts-([0-9]{4})([0-9]{2})[0-9]{2}-[0-9]+\\.gz/\\1-\\2/\n)\n/\n$link\n;\n \ndone\n\nls -1 /opt/wikistat/ \n|\n grep gz \n|\n \nwhile\n \nread\n i\n;\n \ndo\n \necho\n \n$i\n;\n gzip -cd /opt/wikistat/\n$i\n \n|\n ./wikistat-loader --time\n=\n$(\necho\n -n \n$i\n \n|\n sed -r \ns/pagecounts-([0-9]{4})([0-9]{2})([0-9]{2})-([0-9]{2})([0-9]{2})([0-9]{2})\\.gz/\\1-\\2-\\3 \\4-00-00/\n)\n \n|\n clickhouse-client --query\n=\nINSERT INTO wikistat FORMAT TabSeparated\n;\n \ndone\n\n\n\n\n\n\nTerabyte of click logs from Criteo\n\n\nDownload the data from \nhttp://labs.criteo.com/downloads/download-terabyte-click-logs/\n\n\nCreate a table to import the log to:\n\n\nCREATE\n \nTABLE\n \ncriteo_log\n \n(\ndate\n \nDate\n,\n \nclicked\n \nUInt8\n,\n \nint1\n \nInt32\n,\n \nint2\n \nInt32\n,\n \nint3\n \nInt32\n,\n \nint4\n \nInt32\n,\n \nint5\n \nInt32\n,\n \nint6\n \nInt32\n,\n \nint7\n \nInt32\n,\n \nint8\n \nInt32\n,\n \nint9\n \nInt32\n,\n \nint10\n \nInt32\n,\n \nint11\n \nInt32\n,\n \nint12\n \nInt32\n,\n \nint13\n \nInt32\n,\n \ncat1\n \nString\n,\n \ncat2\n \nString\n,\n \ncat3\n \nString\n,\n \ncat4\n \nString\n,\n \ncat5\n \nString\n,\n \ncat6\n \nString\n,\n \ncat7\n \nString\n,\n \ncat8\n \nString\n,\n \ncat9\n \nString\n,\n \ncat10\n \nString\n,\n \ncat11\n \nString\n,\n \ncat12\n \nString\n,\n \ncat13\n \nString\n,\n \ncat14\n \nString\n,\n \ncat15\n \nString\n,\n \ncat16\n \nString\n,\n \ncat17\n \nString\n,\n \ncat18\n \nString\n,\n \ncat19\n \nString\n,\n \ncat20\n \nString\n,\n \ncat21\n \nString\n,\n \ncat22\n \nString\n,\n \ncat23\n \nString\n,\n \ncat24\n \nString\n,\n \ncat25\n \nString\n,\n \ncat26\n \nString\n)\n \nENGINE\n \n=\n \nLog\n\n\n\n\n\n\nDownload the data:\n\n\nfor\n i in \n{\n00\n..23\n}\n;\n \ndo\n \necho\n \n$i\n;\n zcat datasets/criteo/day_\n${\ni\n#0\n}\n.gz \n|\n sed -r \ns/^/2000-01-\n${\ni\n/00/24\n}\n\\t/\n \n|\n clickhouse-client --host\n=\nexample-perftest01j --query\n=\nINSERT INTO criteo_log FORMAT TabSeparated\n;\n \ndone\n\n\n\n\n\n\nCreate a table for the converted data:\n\n\nCREATE\n \nTABLE\n \ncriteo\n\n\n(\n\n    \ndate\n \nDate\n,\n\n    \nclicked\n \nUInt8\n,\n\n    \nint1\n \nInt32\n,\n\n    \nint2\n \nInt32\n,\n\n    \nint3\n \nInt32\n,\n\n    \nint4\n \nInt32\n,\n\n    \nint5\n \nInt32\n,\n\n    \nint6\n \nInt32\n,\n\n    \nint7\n \nInt32\n,\n\n    \nint8\n \nInt32\n,\n\n    \nint9\n \nInt32\n,\n\n    \nint10\n \nInt32\n,\n\n    \nint11\n \nInt32\n,\n\n    \nint12\n \nInt32\n,\n\n    \nint13\n \nInt32\n,\n\n    \nicat1\n \nUInt32\n,\n\n    \nicat2\n \nUInt32\n,\n\n    \nicat3\n \nUInt32\n,\n\n    \nicat4\n \nUInt32\n,\n\n    \nicat5\n \nUInt32\n,\n\n    \nicat6\n \nUInt32\n,\n\n    \nicat7\n \nUInt32\n,\n\n    \nicat8\n \nUInt32\n,\n\n    \nicat9\n \nUInt32\n,\n\n    \nicat10\n \nUInt32\n,\n\n    \nicat11\n \nUInt32\n,\n\n    \nicat12\n \nUInt32\n,\n\n    \nicat13\n \nUInt32\n,\n\n    \nicat14\n \nUInt32\n,\n\n    \nicat15\n \nUInt32\n,\n\n    \nicat16\n \nUInt32\n,\n\n    \nicat17\n \nUInt32\n,\n\n    \nicat18\n \nUInt32\n,\n\n    \nicat19\n \nUInt32\n,\n\n    \nicat20\n \nUInt32\n,\n\n    \nicat21\n \nUInt32\n,\n\n    \nicat22\n \nUInt32\n,\n\n    \nicat23\n \nUInt32\n,\n\n    \nicat24\n \nUInt32\n,\n\n    \nicat25\n \nUInt32\n,\n\n    \nicat26\n \nUInt32\n\n\n)\n \nENGINE\n \n=\n \nMergeTree\n(\ndate\n,\n \nintHash32\n(\nicat1\n),\n \n(\ndate\n,\n \nintHash32\n(\nicat1\n)),\n \n8192\n)\n\n\n\n\n\n\nTransform data from the raw log and put it in the second table:\n\n\nINSERT\n \nINTO\n \ncriteo\n \nSELECT\n \ndate\n,\n \nclicked\n,\n \nint1\n,\n \nint2\n,\n \nint3\n,\n \nint4\n,\n \nint5\n,\n \nint6\n,\n \nint7\n,\n \nint8\n,\n \nint9\n,\n \nint10\n,\n \nint11\n,\n \nint12\n,\n \nint13\n,\n \nreinterpretAsUInt32\n(\nunhex\n(\ncat1\n))\n \nAS\n \nicat1\n,\n \nreinterpretAsUInt32\n(\nunhex\n(\ncat2\n))\n \nAS\n \nicat2\n,\n \nreinterpretAsUInt32\n(\nunhex\n(\ncat3\n))\n \nAS\n \nicat3\n,\n \nreinterpretAsUInt32\n(\nunhex\n(\ncat4\n))\n \nAS\n \nicat4\n,\n \nreinterpretAsUInt32\n(\nunhex\n(\ncat5\n))\n \nAS\n \nicat5\n,\n \nreinterpretAsUInt32\n(\nunhex\n(\ncat6\n))\n \nAS\n \nicat6\n,\n \nreinterpretAsUInt32\n(\nunhex\n(\ncat7\n))\n \nAS\n \nicat7\n,\n \nreinterpretAsUInt32\n(\nunhex\n(\ncat8\n))\n \nAS\n \nicat8\n,\n \nreinterpretAsUInt32\n(\nunhex\n(\ncat9\n))\n \nAS\n \nicat9\n,\n \nreinterpretAsUInt32\n(\nunhex\n(\ncat10\n))\n \nAS\n \nicat10\n,\n \nreinterpretAsUInt32\n(\nunhex\n(\ncat11\n))\n \nAS\n \nicat11\n,\n \nreinterpretAsUInt32\n(\nunhex\n(\ncat12\n))\n \nAS\n \nicat12\n,\n \nreinterpretAsUInt32\n(\nunhex\n(\ncat13\n))\n \nAS\n \nicat13\n,\n \nreinterpretAsUInt32\n(\nunhex\n(\ncat14\n))\n \nAS\n \nicat14\n,\n \nreinterpretAsUInt32\n(\nunhex\n(\ncat15\n))\n \nAS\n \nicat15\n,\n \nreinterpretAsUInt32\n(\nunhex\n(\ncat16\n))\n \nAS\n \nicat16\n,\n \nreinterpretAsUInt32\n(\nunhex\n(\ncat17\n))\n \nAS\n \nicat17\n,\n \nreinterpretAsUInt32\n(\nunhex\n(\ncat18\n))\n \nAS\n \nicat18\n,\n \nreinterpretAsUInt32\n(\nunhex\n(\ncat19\n))\n \nAS\n \nicat19\n,\n \nreinterpretAsUInt32\n(\nunhex\n(\ncat20\n))\n \nAS\n \nicat20\n,\n \nreinterpretAsUInt32\n(\nunhex\n(\ncat21\n))\n \nAS\n \nicat21\n,\n \nreinterpretAsUInt32\n(\nunhex\n(\ncat22\n))\n \nAS\n \nicat22\n,\n \nreinterpretAsUInt32\n(\nunhex\n(\ncat23\n))\n \nAS\n \nicat23\n,\n \nreinterpretAsUInt32\n(\nunhex\n(\ncat24\n))\n \nAS\n \nicat24\n,\n \nreinterpretAsUInt32\n(\nunhex\n(\ncat25\n))\n \nAS\n \nicat25\n,\n \nreinterpretAsUInt32\n(\nunhex\n(\ncat26\n))\n \nAS\n \nicat26\n \nFROM\n \ncriteo_log\n;\n\n\n\nDROP\n \nTABLE\n \ncriteo_log\n;\n\n\n\n\n\n\nStar Schema Benchmark\n\n\nCompiling dbgen: \nhttps://github.com/vadimtk/ssb-dbgen\n\n\ngit clone git@github.com:vadimtk/ssb-dbgen.git\n\ncd\n ssb-dbgen\nmake\n\n\n\n\n\nThere will be some warnings during the process, but this is normal.\n\n\nPlace \ndbgen\n  and \ndists.dss\n  in any location with 800 GB of free disk space.\n\n\nGenerating data:\n\n\n./dbgen -s \n1000\n -T c\n./dbgen -s \n1000\n -T l\n\n\n\n\n\nCreating tables in ClickHouse:\n\n\nCREATE\n \nTABLE\n \nlineorder\n \n(\n\n        \nLO_ORDERKEY\n             \nUInt32\n,\n\n        \nLO_LINENUMBER\n           \nUInt8\n,\n\n        \nLO_CUSTKEY\n              \nUInt32\n,\n\n        \nLO_PARTKEY\n              \nUInt32\n,\n\n        \nLO_SUPPKEY\n              \nUInt32\n,\n\n        \nLO_ORDERDATE\n            \nDate\n,\n\n        \nLO_ORDERPRIORITY\n        \nString\n,\n\n        \nLO_SHIPPRIORITY\n         \nUInt8\n,\n\n        \nLO_QUANTITY\n             \nUInt8\n,\n\n        \nLO_EXTENDEDPRICE\n        \nUInt32\n,\n\n        \nLO_ORDTOTALPRICE\n        \nUInt32\n,\n\n        \nLO_DISCOUNT\n             \nUInt8\n,\n\n        \nLO_REVENUE\n              \nUInt32\n,\n\n        \nLO_SUPPLYCOST\n           \nUInt32\n,\n\n        \nLO_TAX\n                  \nUInt8\n,\n\n        \nLO_COMMITDATE\n           \nDate\n,\n\n        \nLO_SHIPMODE\n             \nString\n\n\n)\nEngine\n=\nMergeTree\n(\nLO_ORDERDATE\n,(\nLO_ORDERKEY\n,\nLO_LINENUMBER\n,\nLO_ORDERDATE\n),\n8192\n);\n\n\n\nCREATE\n \nTABLE\n \ncustomer\n \n(\n\n        \nC_CUSTKEY\n       \nUInt32\n,\n\n        \nC_NAME\n          \nString\n,\n\n        \nC_ADDRESS\n       \nString\n,\n\n        \nC_CITY\n          \nString\n,\n\n        \nC_NATION\n        \nString\n,\n\n        \nC_REGION\n        \nString\n,\n\n        \nC_PHONE\n         \nString\n,\n\n        \nC_MKTSEGMENT\n    \nString\n,\n\n        \nC_FAKEDATE\n      \nDate\n\n\n)\nEngine\n=\nMergeTree\n(\nC_FAKEDATE\n,(\nC_CUSTKEY\n,\nC_FAKEDATE\n),\n8192\n);\n\n\n\nCREATE\n \nTABLE\n \npart\n \n(\n\n        \nP_PARTKEY\n       \nUInt32\n,\n\n        \nP_NAME\n          \nString\n,\n\n        \nP_MFGR\n          \nString\n,\n\n        \nP_CATEGORY\n      \nString\n,\n\n        \nP_BRAND\n         \nString\n,\n\n        \nP_COLOR\n         \nString\n,\n\n        \nP_TYPE\n          \nString\n,\n\n        \nP_SIZE\n          \nUInt8\n,\n\n        \nP_CONTAINER\n     \nString\n,\n\n        \nP_FAKEDATE\n      \nDate\n\n\n)\nEngine\n=\nMergeTree\n(\nP_FAKEDATE\n,(\nP_PARTKEY\n,\nP_FAKEDATE\n),\n8192\n);\n\n\n\nCREATE\n \nTABLE\n \nlineorderd\n \nAS\n \nlineorder\n \nENGINE\n \n=\n \nDistributed\n(\nperftest_3shards_1replicas\n,\n \ndefault\n,\n \nlineorder\n,\n \nrand\n());\n\n\nCREATE\n \nTABLE\n \ncustomerd\n \nAS\n \ncustomer\n \nENGINE\n \n=\n \nDistributed\n(\nperftest_3shards_1replicas\n,\n \ndefault\n,\n \ncustomer\n,\n \nrand\n());\n\n\nCREATE\n \nTABLE\n \npartd\n \nAS\n \npart\n \nENGINE\n \n=\n \nDistributed\n(\nperftest_3shards_1replicas\n,\n \ndefault\n,\n \npart\n,\n \nrand\n());\n\n\n\n\n\n\nFor testing on a single server, just use MergeTree tables.\nFor distributed testing, you need to configure the \nperftest_3shards_1replicas\n  cluster in the config file.\nNext, create MergeTree tables on each server and a Distributed above them.\n\n\nDownloading data (change 'customer' to 'customerd' in the distributed version):\n\n\ncat customer.tbl \n|\n sed \ns/$/2000-01-01/\n \n|\n clickhouse-client --query \nINSERT INTO customer FORMAT CSV\n\ncat lineorder.tbl \n|\n clickhouse-client --query \nINSERT INTO lineorder FORMAT CSV\n\n\n\n\n\n\n\n\nInterfaces\n\n\nTo explore the system's capabilities, download data to tables, or make manual queries, use the clickhouse-client program.\n\n\nCommand-line client\n\n\nTo work from the command line, you can use \nclickhouse-client\n:\n\n\n$ clickhouse-client\nClickHouse client version \n0\n.0.26176.\nConnecting to localhost:9000.\nConnected to ClickHouse server version \n0\n.0.26176.\n\n:\n)\n\n\n\n\n\n\nThe client supports command-line options and configuration files. For more information, see \"\nConfiguring\n\".\n\n\nUsage\n\n\nThe client can be used in interactive and non-interactive (batch) mode.\nTo use batch mode, specify the 'query' parameter, or send data to 'stdin' (it verifies that 'stdin' is not a terminal), or both.\nSimilar to the HTTP interface, when using the 'query' parameter and sending data to 'stdin', the request is a concatenation of the 'query' parameter, a line feed, and the data in 'stdin'. This is convenient for large INSERT queries.\n\n\nExample of using the client to insert data:\n\n\necho\n -ne \n1, \nsome text\n, \n2016-08-14 00:00:00\n\\n2, \nsome more text\n, \n2016-08-14 00:00:01\n \n|\n clickhouse-client --database\n=\ntest\n --query\n=\nINSERT INTO test FORMAT CSV\n;\n\n\ncat \n_EOF | clickhouse-client --database=test --query=\nINSERT INTO test FORMAT CSV\n;\n\n\n3, \nsome text\n, \n2016-08-14 00:00:00\n\n\n4, \nsome more text\n, \n2016-08-14 00:00:01\n\n\n_EOF\n\n\ncat file.csv \n|\n clickhouse-client --database\n=\ntest\n --query\n=\nINSERT INTO test FORMAT CSV\n;\n\n\n\n\n\n\nIn batch mode, the default data format is TabSeparated. You can set the format in the FORMAT clause of the query.\n\n\nBy default, you can only process a single query in batch mode. To make multiple queries from a \"script,\" use the --multiquery parameter. This works for all queries except INSERT. Query results are output consecutively without additional separators.\nSimilarly, to process a large number of queries, you can run 'clickhouse-client' for each query. Note that it may take tens of milliseconds to launch the 'clickhouse-client' program.\n\n\nIn interactive mode, you get a command line where you can enter queries.\n\n\nIf 'multiline' is not specified (the default):To run the query, press Enter. The semicolon is not necessary at the end of the query. To enter a multiline query, enter a backslash \n\\\n before the line feed. After you press Enter, you will be asked to enter the next line of the query.\n\n\nIf multiline is specified:To run a query, end it with a semicolon and press Enter. If the semicolon was omitted at the end of the entered line, you will be asked to enter the next line of the query.\n\n\nOnly a single query is run, so everything after the semicolon is ignored.\n\n\nYou can specify \n\\G\n instead of or after the semicolon. This indicates Vertical format. In this format, each value is printed on a separate line, which is convenient for wide tables. This unusual feature was added for compatibility with the MySQL CLI.\n\n\nThe command line is based on 'readline' (and 'history' or 'libedit', or without a library, depending on the build). In other words, it uses the familiar keyboard shortcuts and keeps a history.\nThe history is written to \n~/.clickhouse-client-history\n.\n\n\nBy default, the format used is PrettyCompact. You can change the format in the FORMAT clause of the query, or by specifying \n\\G\n at the end of the query, using the \n--format\n or \n--vertical\n argument in the command line, or using the client configuration file.\n\n\nTo exit the client, press Ctrl+D (or Ctrl+C), or enter one of the following instead of a query:\"exit\", \"quit\", \"logout\", \"\u0443\u0447\u0448\u0435\", \"\u0439\u0433\u0448\u0435\", \"\u0434\u0449\u043f\u0449\u0433\u0435\", \"exit;\", \"quit;\", \"logout;\", \"\u0443\u0447\u0448\u0435\u0436\", \"\u0439\u0433\u0448\u0435\u0436\", \"\u0434\u0449\u043f\u0449\u0433\u0435\u0436\", \"q\", \"\u0439\", \"q\", \"Q\", \":q\", \"\u0439\", \"\u0419\", \"\u0416\u0439\"\n\n\nWhen processing a query, the client shows:\n\n\n\n\nProgress, which is updated no more than 10 times per second (by default). For quick queries, the progress might not have time to be displayed.\n\n\nThe formatted query after parsing, for debugging.\n\n\nThe result in the specified format.\n\n\nThe number of lines in the result, the time passed, and the average speed of query processing.\n\n\n\n\nYou can cancel a long query by pressing Ctrl+C. However, you will still need to wait a little for the server to abort the request. It is not possible to cancel a query at certain stages. If you don't wait and press Ctrl+C a second time, the client will exit.\n\n\nThe command-line client allows passing external data (external temporary tables) for querying. For more information, see the section \"External data for query processing\".\n\n\n\n\nConfiguring\n\n\nYou can pass parameters to \nclickhouse-client\n (all parameters have a default value) using:\n\n\n\n\nFrom the Command Line\n\n\n\n\nCommand-line options override the default values and settings in configuration files.\n\n\n\n\nConfiguration files.\n\n\n\n\nSettings in the configuration files override the default values.\n\n\nCommand line options\n\n\n\n\n--host, -h\n -\u2013 The server name, 'localhost' by default.  You can use either the name or the IPv4 or IPv6 address.\n\n\n--port\n \u2013 The port to connect to. Default value: 9000. Note that the HTTP interface and the native interface use different ports.\n\n\n--user, -u\n \u2013 The username. Default value: default.\n\n\n--password\n \u2013 The password. Default value: empty string.\n\n\n--query, -q\n \u2013 The query to process when using non-interactive mode.\n\n\n--database, -d\n \u2013 Select the current default database. Default value: the current database from the server settings ('default' by default).\n\n\n--multiline, -m\n \u2013 If specified, allow multiline queries (do not send the query on Enter).\n\n\n--multiquery, -n\n \u2013 If specified, allow processing multiple queries separated by commas. Only works in non-interactive mode.\n\n\n--format, -f\n \u2013 Use the specified default format to output the result.\n\n\n--vertical, -E\n \u2013 If specified, use the Vertical format by default to output the result. This is the same as '--format=Vertical'. In this format, each value is printed on a separate line, which is helpful when displaying wide tables.\n\n\n--time, -t\n \u2013 If specified, print the query execution time to 'stderr' in non-interactive mode.\n\n\n--stacktrace\n \u2013 If specified, also print the stack trace if an exception occurs.\n\n\n-config-file\n \u2013 The name of the configuration file.\n\n\n\n\nConfiguration files\n\n\nclickhouse-client\n  uses the first existing file of the following:\n\n\n\n\nDefined in the \n-config-file\n parameter.\n\n\n./clickhouse-client.xml\n\n\n\\~/.clickhouse-client/config.xml\n\n\n/etc/clickhouse-client/config.xml\n\n\n\n\nExample of a config file:\n\n\nconfig\n\n    \nuser\nusername\n/user\n\n    \npassword\npassword\n/password\n\n\n/config\n\n\n\n\n\n\nHTTP interface\n\n\nThe HTTP interface lets you use ClickHouse on any platform from any programming language. We use it for working from Java and Perl, as well as shell scripts. In other departments, the HTTP interface is used from Perl, Python, and Go. The HTTP interface is more limited than the native interface, but it has better compatibility.\n\n\nBy default, clickhouse-server listens for HTTP on port 8123 (this can be changed in the config).\nIf you make a GET / request without parameters, it returns the string \"Ok\" (with a line feed at the end). You can use this in health-check scripts.\n\n\n$ curl \nhttp://localhost:8123/\n\nOk.\n\n\n\n\n\nSend the request as a URL 'query' parameter, or as a POST. Or send the beginning of the query in the 'query' parameter, and the rest in the POST (we'll explain later why this is necessary). The size of the URL is limited to 16 KB, so keep this in mind when sending large queries.\n\n\nIf successful, you receive the 200 response code and the result in the response body.\nIf an error occurs, you receive the 500 response code and an error description text in the response body.\n\n\nWhen using the GET method, 'readonly' is set. In other words, for queries that modify data, you can only use the POST method. You can send the query itself either in the POST body, or in the URL parameter.\n\n\nExamples:\n\n\n$ curl \nhttp://localhost:8123/?query=SELECT%201\n\n\n1\n\n\n$ wget -O- -q \nhttp://localhost:8123/?query=SELECT 1\n\n\n1\n\n\n$ GET \nhttp://localhost:8123/?query=SELECT 1\n\n\n1\n\n\n$ \necho\n -ne \nGET /?query=SELECT%201 HTTP/1.0\\r\\n\\r\\n\n \n|\n nc localhost \n8123\n\nHTTP/1.0 \n200\n OK\nConnection: Close\nDate: Fri, \n16\n Nov \n2012\n \n19\n:21:50 GMT\n\n\n1\n\n\n\n\n\n\nAs you can see, curl is somewhat inconvenient in that spaces must be URL escaped.Although wget escapes everything itself, we don't recommend using it because it doesn't work well over HTTP 1.1 when using keep-alive and Transfer-Encoding: chunked.\n\n\n$ \necho\n \nSELECT 1\n \n|\n curl \nhttp://localhost:8123/\n --data-binary @-\n\n1\n\n\n$ \necho\n \nSELECT 1\n \n|\n curl \nhttp://localhost:8123/?query=\n --data-binary @-\n\n1\n\n\n$ \necho\n \n1\n \n|\n curl \nhttp://localhost:8123/?query=SELECT\n --data-binary @-\n\n1\n\n\n\n\n\n\nIf part of the query is sent in the parameter, and part in the POST, a line feed is inserted between these two data parts.\nExample (this won't work):\n\n\n$ \necho\n \nECT 1\n \n|\n curl \nhttp://localhost:8123/?query=SEL\n --data-binary @-\nCode: \n59\n, e.displayText\n()\n \n=\n DB::Exception: Syntax error: failed at position \n0\n: SEL\nECT \n1\n\n, expected One of: SHOW TABLES, SHOW DATABASES, SELECT, INSERT, CREATE, ATTACH, RENAME, DROP, DETACH, USE, SET, OPTIMIZE., e.what\n()\n \n=\n DB::Exception\n\n\n\n\n\nBy default, data is returned in TabSeparated format (for more information, see the \"Formats\" section).\nYou use the FORMAT clause of the query to request any other format.\n\n\n$ \necho\n \nSELECT 1 FORMAT Pretty\n \n|\n curl \nhttp://localhost:8123/?\n --data-binary @-\n\u250f\u2501\u2501\u2501\u2513\n\u2503 \n1\n \u2503\n\u2521\u2501\u2501\u2501\u2529\n\u2502 \n1\n \u2502\n\u2514\u2500\u2500\u2500\u2518\n\n\n\n\n\nThe POST method of transmitting data is necessary for INSERT queries. In this case, you can write the beginning of the query in the URL parameter, and use POST to pass the data to insert. The data to insert could be, for example, a tab-separated dump from MySQL. In this way, the INSERT query replaces LOAD DATA LOCAL INFILE from MySQL.\n\n\nExamples: Creating a table:\n\n\necho\n \nCREATE TABLE t (a UInt8) ENGINE = Memory\n \n|\n POST \nhttp://localhost:8123/\n\n\n\n\n\n\nUsing the familiar INSERT query for data insertion:\n\n\necho\n \nINSERT INTO t VALUES (1),(2),(3)\n \n|\n POST \nhttp://localhost:8123/\n\n\n\n\n\n\nData can be sent separately from the query:\n\n\necho\n \n(4),(5),(6)\n \n|\n POST \nhttp://localhost:8123/?query=INSERT INTO t VALUES\n\n\n\n\n\n\nYou can specify any data format. The 'Values' format is the same as what is used when writing INSERT INTO t VALUES:\n\n\necho\n \n(7),(8),(9)\n \n|\n POST \nhttp://localhost:8123/?query=INSERT INTO t FORMAT Values\n\n\n\n\n\n\nTo insert data from a tab-separated dump, specify the corresponding format:\n\n\necho\n -ne \n10\\n11\\n12\\n\n \n|\n POST \nhttp://localhost:8123/?query=INSERT INTO t FORMAT TabSeparated\n\n\n\n\n\n\nReading the table contents. Data is output in random order due to parallel query processing:\n\n\n$ GET \nhttp://localhost:8123/?query=SELECT a FROM t\n\n\n7\n\n\n8\n\n\n9\n\n\n10\n\n\n11\n\n\n12\n\n\n1\n\n\n2\n\n\n3\n\n\n4\n\n\n5\n\n\n6\n\n\n\n\n\n\nDeleting the table.\n\n\nPOST \nhttp://localhost:8123/?query=DROP TABLE t\n\n\n\n\n\n\nFor successful requests that don't return a data table, an empty response body is returned.\n\n\nYou can use the internal ClickHouse compression format when transmitting data. The compressed data has a non-standard format, and you will need to use the special clickhouse-compressor program to work with it (it is installed with the clickhouse-client package).\n\n\nIf you specified 'compress=1' in the URL, the server will compress the data it sends you.\nIf you specified 'decompress=1' in the URL, the server will decompress the same data that you pass in the POST method.\n\n\nIt is also possible to use the standard gzip-based HTTP compression. To send a POST request compressed using gzip, append the request header \nContent-Encoding: gzip\n.\nIn order for ClickHouse to compress the response using gzip, you must append \nAccept-Encoding: gzip\n to the request headers, and enable the ClickHouse setting \nenable_http_compression\n.\n\n\nYou can use this to reduce network traffic when transmitting a large amount of data, or for creating dumps that are immediately compressed.\n\n\nYou can use the 'database' URL parameter to specify the default database.\n\n\n$ \necho\n \nSELECT number FROM numbers LIMIT 10\n \n|\n curl \nhttp://localhost:8123/?database=system\n --data-binary @-\n\n0\n\n\n1\n\n\n2\n\n\n3\n\n\n4\n\n\n5\n\n\n6\n\n\n7\n\n\n8\n\n\n9\n\n\n\n\n\n\nBy default, the database that is registered in the server settings is used as the default database. By default, this is the database called 'default'. Alternatively, you can always specify the database using a dot before the table name.\n\n\nThe username and password can be indicated in one of two ways:\n\n\n\n\nUsing HTTP Basic Authentication. Example:\n\n\n\n\necho\n \nSELECT 1\n \n|\n curl \nhttp://user:password@localhost:8123/\n -d @-\n\n\n\n\n\n\n\nIn the 'user' and 'password' URL parameters. Example:\n\n\n\n\necho\n \nSELECT 1\n \n|\n curl \nhttp://localhost:8123/?user=user\npassword=password\n -d @-\n\n\n\n\n\nIf the user name is not indicated, the username 'default' is used. If the password is not indicated, an empty password is used.\nYou can also use the URL parameters to specify any settings for processing a single query, or entire profiles of settings. Example:\nhttp://localhost:8123/?profile=web\nmax_rows_to_read=1000000000\nquery=SELECT+1\n\n\nFor more information, see the section \"Settings\".\n\n\n$ \necho\n \nSELECT number FROM system.numbers LIMIT 10\n \n|\n curl \nhttp://localhost:8123/?\n --data-binary @-\n\n0\n\n\n1\n\n\n2\n\n\n3\n\n\n4\n\n\n5\n\n\n6\n\n\n7\n\n\n8\n\n\n9\n\n\n\n\n\n\nFor information about other parameters, see the section \"SET\".\n\n\nSimilarly, you can use ClickHouse sessions in the HTTP protocol. To do this, you need to add the \nsession_id\n GET parameter to the request. You can use any string as the session ID. By default, the session is terminated after 60 seconds of inactivity. To change this timeout, modify the \ndefault_session_timeout\n setting in the server configuration, or add the \nsession_timeout\n GET parameter to the request. To check the session status, use the \nsession_check=1\n parameter. Only one query at a time can be executed within a single session.\n\n\nYou have the option to receive information about the progress of query execution in X-ClickHouse-Progress headers. To do this, enable the setting send_progress_in_http_headers.\n\n\nRunning requests don't stop automatically if the HTTP connection is lost. Parsing and data formatting are performed on the server side, and using the network might be ineffective.\nThe optional 'query_id' parameter can be passed as the query ID (any string). For more information, see the section \"Settings, replace_running_query\".\n\n\nThe optional 'quota_key' parameter can be passed as the quota key (any string). For more information, see the section \"Quotas\".\n\n\nThe HTTP interface allows passing external data (external temporary tables) for querying. For more information, see the section \"External data for query processing\".\n\n\nResponse buffering\n\n\nYou can enable response buffering on the server side. The \nbuffer_size\n and \nwait_end_of_query\n URL parameters are provided for this purpose.\n\n\nbuffer_size\n determines the number of bytes in the result to buffer in the server memory. If the result body is larger than this threshold, the buffer is written to the HTTP channel, and the remaining data is sent directly to the HTTP channel.\n\n\nTo ensure that the entire response is buffered, set \nwait_end_of_query=1\n. In this case, the data that is not stored in memory will be buffered in a temporary server file.\n\n\nExample:\n\n\ncurl -sS \nhttp://localhost:8123/?max_result_bytes=4000000\nbuffer_size=3000000\nwait_end_of_query=1\n -d \nSELECT toUInt8(number) FROM system.numbers LIMIT 9000000 FORMAT RowBinary\n\n\n\n\n\n\nUse buffering to avoid situations where a query processing error occurred after the response code and HTTP headers were sent to the client. In this situation, an error message is written at the end of the response body, and on the client side, the error can only be detected at the parsing stage.\n\n\nJDBC driver\n\n\nThere is an official JDBC driver for ClickHouse. See \nhere\n .\n\n\nNative interface (TCP)\n\n\nThe native interface is used in the \"clickhouse-client\" command-line client for interaction between servers with distributed query processing, and also in C++ programs. We will only cover the command-line client.\n\n\nLibraries from third-party developers\n\n\nThere are libraries for working with ClickHouse for:\n\n\n\n\nPython\n\n\ninfi.clickhouse_orm\n\n\nsqlalchemy-clickhouse\n\n\nclickhouse-driver\n\n\nclickhouse-client\n\n\n\n\n\n\nPHP\n\n\nclickhouse-php-client\n\n\nPhpClickHouseClient\n\n\nphpClickHouse\n\n\nclickhouse-client\n\n\n\n\n\n\nGo\n\n\nclickhouse\n\n\ngo-clickhouse\n\n\nmailrugo-clickhouse\n\n\ngolang-clickhouse\n\n\n\n\n\n\nNodeJs\n\n\nclickhouse (NodeJs)\n\n\nnode-clickhouse\n\n\n\n\n\n\nPerl\n\n\nperl-DBD-ClickHouse\n\n\nHTTP-ClickHouse\n\n\nAnyEvent-ClickHouse\n\n\n\n\n\n\nRuby\n\n\nclickhouse (Ruby)\n\n\n\n\n\n\nR\n\n\nclickhouse-r\n\n\nRClickhouse\n\n\n\n\n\n\n.NET\n\n\nClickHouse-Net\n\n\n\n\n\n\nC++\n\n\nclickhouse-cpp\n\n\n\n\n\n\nElixir\n\n\nclickhousex\n\n\nclickhouse_ecto\n\n\n\n\n\n\nJava\n\n\nclickhouse-client-java\n\n\n\n\n\n\n\n\nWe have not tested these libraries. They are listed in random order.\n\n\nVisual interfaces from third-party developers\n\n\nTabix\n\n\nWeb interface for ClickHouse in the \nTabix\n project.\n\n\nFeatures:\n\n\n\n\nWorks with ClickHouse directly from the browser, without the need to install additional software.\n\n\nQuery editor with syntax highlighting.\n\n\nAuto-completion of commands.\n\n\nTools for graphical analysis of query execution.\n\n\nColor scheme options.\n\n\n\n\nTabix documentation\n.\n\n\nHouseOps\n\n\nHouseOps\n is a unique Desktop ClickHouse Ops UI / IDE for OSX, Linux and Windows.\n\n\nFeatures:\n\n\n\n\nQuery builder;\n\n\nDatabase manangement (soon);\n\n\nUsers manangement (soon);\n\n\nReal-Time Data Analytics (soon);\n\n\nCluster/Infra monitoring (soon);\n\n\nCluster manangement (soon);\n\n\nKafka and Replicated tables monitoring (soon);\n\n\nAnd a lot of others features (soon) for you take a beautiful implementation of ClickHouse.\n\n\n\n\nQuery language\n\n\nQueries\n\n\nCREATE DATABASE\n\n\nCreating db_name databases\n\n\nCREATE\n \nDATABASE\n \n[\nIF\n \nNOT\n \nEXISTS\n]\n \ndb_name\n\n\n\n\n\n\nA database\n is just a directory for tables.\nIf \nIF NOT EXISTS\n is included, the query won't return an error if the database already exists.\n\n\n\n\nCREATE TABLE\n\n\nThe \nCREATE TABLE\n query can have several forms.\n\n\nCREATE\n \n[\nTEMPORARY\n]\n \nTABLE\n \n[\nIF\n \nNOT\n \nEXISTS\n]\n \n[\ndb\n.]\nname\n \n[\nON\n \nCLUSTER\n \ncluster\n]\n\n\n(\n\n    \nname1\n \n[\ntype1\n]\n \n[\nDEFAULT\n|\nMATERIALIZED\n|\nALIAS\n \nexpr1\n],\n\n    \nname2\n \n[\ntype2\n]\n \n[\nDEFAULT\n|\nMATERIALIZED\n|\nALIAS\n \nexpr2\n],\n\n    \n...\n\n\n)\n \nENGINE\n \n=\n \nengine\n\n\n\n\n\n\nCreates a table named 'name' in the 'db' database or the current database if 'db' is not set, with the structure specified in brackets and the 'engine' engine.\nThe structure of the table is a list of column descriptions. If indexes are supported by the engine, they are indicated as parameters for the table engine.\n\n\nA column description is \nname type\n in the simplest case. Example: \nRegionID UInt32\n.\nExpressions can also be defined for default values (see below).\n\n\nCREATE\n \n[\nTEMPORARY\n]\n \nTABLE\n \n[\nIF\n \nNOT\n \nEXISTS\n]\n \n[\ndb\n.]\nname\n \nAS\n \n[\ndb2\n.]\nname2\n \n[\nENGINE\n \n=\n \nengine\n]\n\n\n\n\n\n\nCreates a table with the same structure as another table. You can specify a different engine for the table. If the engine is not specified, the same engine will be used as for the \ndb2.name2\n table.\n\n\nCREATE\n \n[\nTEMPORARY\n]\n \nTABLE\n \n[\nIF\n \nNOT\n \nEXISTS\n]\n \n[\ndb\n.]\nname\n \nENGINE\n \n=\n \nengine\n \nAS\n \nSELECT\n \n...\n\n\n\n\n\n\nCreates a table with a structure like the result of the \nSELECT\n query, with the 'engine' engine, and fills it with data from SELECT.\n\n\nIn all cases, if \nIF NOT EXISTS\n is specified, the query won't return an error if the table already exists. In this case, the query won't do anything.\n\n\nDefault values\n\n\nThe column description can specify an expression for a default value, in one of the following ways:\nDEFAULT expr\n, \nMATERIALIZED expr\n, \nALIAS expr\n.\nExample: \nURLDomain String DEFAULT domain(URL)\n.\n\n\nIf an expression for the default value is not defined, the default values will be set to zeros for numbers, empty strings for strings, empty arrays for arrays, and \n0000-00-00\n for dates or \n0000-00-00 00:00:00\n for dates with time. NULLs are not supported.\n\n\nIf the default expression is defined, the column type is optional. If there isn't an explicitly defined type, the default expression type is used. Example: \nEventDate DEFAULT toDate(EventTime)\n \u2013 the 'Date' type will be used for the 'EventDate' column.\n\n\nIf the data type and default expression are defined explicitly, this expression will be cast to the specified type using type casting functions. Example: \nHits UInt32 DEFAULT 0\n means the same thing as \nHits UInt32 DEFAULT toUInt32(0)\n.\n\n\nDefault expressions may be defined as an arbitrary expression from table constants and columns. When creating and changing the table structure, it checks that expressions don't contain loops. For INSERT, it checks that expressions are resolvable \u2013 that all columns they can be calculated from have been passed.\n\n\nDEFAULT expr\n\n\nNormal default value. If the INSERT query doesn't specify the corresponding column, it will be filled in by computing the corresponding expression.\n\n\nMATERIALIZED expr\n\n\nMaterialized expression. Such a column can't be specified for INSERT, because it is always calculated.\nFor an INSERT without a list of columns, these columns are not considered.\nIn addition, this column is not substituted when using an asterisk in a SELECT query. This is to preserve the invariant that the dump obtained using \nSELECT *\n can be inserted back into the table using INSERT without specifying the list of columns.\n\n\nALIAS expr\n\n\nSynonym. Such a column isn't stored in the table at all.\nIts values can't be inserted in a table, and it is not substituted when using an asterisk in a SELECT query.\nIt can be used in SELECTs if the alias is expanded during query parsing.\n\n\nWhen using the ALTER query to add new columns, old data for these columns is not written. Instead, when reading old data that does not have values for the new columns, expressions are computed on the fly by default. However, if running the expressions requires different columns that are not indicated in the query, these columns will additionally be read, but only for the blocks of data that need it.\n\n\nIf you add a new column to a table but later change its default expression, the values used for old data will change (for data where values were not stored on the disk). Note that when running background merges, data for columns that are missing in one of the merging parts is written to the merged part.\n\n\nIt is not possible to set default values for elements in nested data structures.\n\n\nTemporary tables\n\n\nIn all cases, if \nTEMPORARY\n is specified, a temporary table will be created. Temporary tables have the following characteristics:\n\n\n\n\nTemporary tables disappear when the session ends, including if the connection is lost.\n\n\nA temporary table is created with the Memory engine. The other table engines are not supported.\n\n\nThe DB can't be specified for a temporary table. It is created outside of databases.\n\n\nIf a temporary table has the same name as another one and a query specifies the table name without specifying the DB, the temporary table will be used.\n\n\nFor distributed query processing, temporary tables used in a query are passed to remote servers.\n\n\n\n\nIn most cases, temporary tables are not created manually, but when using external data for a query, or for distributed \n(GLOBAL) IN\n. For more information, see the appropriate sections\n\n\nDistributed DDL queries (ON CLUSTER clause)\n\n\nThe \nCREATE\n, \nDROP\n, \nALTER\n, and \nRENAME\n queries support distributed execution on a cluster.\nFor example, the following query creates the \nall_hits\n \nDistributed\n table on each host in \ncluster\n:\n\n\nCREATE\n \nTABLE\n \nIF\n \nNOT\n \nEXISTS\n \nall_hits\n \nON\n \nCLUSTER\n \ncluster\n \n(\np\n \nDate\n,\n \ni\n \nInt32\n)\n \nENGINE\n \n=\n \nDistributed\n(\ncluster\n,\n \ndefault\n,\n \nhits\n)\n\n\n\n\n\n\nIn order to run these queries correctly, each host must have the same cluster definition (to simplify syncing configs, you can use substitutions from ZooKeeper). They must also connect to the ZooKeeper servers.\nThe local version of the query will eventually be implemented on each host in the cluster, even if some hosts are currently not available. The order for executing queries within a single host is guaranteed.\n\nALTER\n queries are not yet supported for replicated tables.\n\n\nCREATE VIEW\n\n\nCREATE\n \n[\nMATERIALIZED\n]\n \nVIEW\n \n[\nIF\n \nNOT\n \nEXISTS\n]\n \n[\ndb\n.]\nname\n \n[\nTO\n[\ndb\n.]\nname\n]\n \n[\nENGINE\n \n=\n \nengine\n]\n \n[\nPOPULATE\n]\n \nAS\n \nSELECT\n \n...\n\n\n\n\n\n\nCreates a view. There are two types of views: normal and MATERIALIZED.\n\n\nWhen creating a materialized view, you must specify ENGINE \u2013 the table engine for storing data.\n\n\nA materialized view works as follows: when inserting data to the table specified in SELECT, part of the inserted data is converted by this SELECT query, and the result is inserted in the view.\n\n\nNormal views don't store any data, but just perform a read from another table. In other words, a normal view is nothing more than a saved query. When reading from a view, this saved query is used as a subquery in the FROM clause.\n\n\nAs an example, assume you've created a view:\n\n\nCREATE\n \nVIEW\n \nview\n \nAS\n \nSELECT\n \n...\n\n\n\n\n\n\nand written a query:\n\n\nSELECT\n \na\n,\n \nb\n,\n \nc\n \nFROM\n \nview\n\n\n\n\n\n\nThis query is fully equivalent to using the subquery:\n\n\nSELECT\n \na\n,\n \nb\n,\n \nc\n \nFROM\n \n(\nSELECT\n \n...)\n\n\n\n\n\n\nMaterialized views store data transformed by the corresponding SELECT query.\n\n\nWhen creating a materialized view, you must specify ENGINE \u2013 the table engine for storing data.\n\n\nA materialized view is arranged as follows: when inserting data to the table specified in SELECT, part of the inserted data is converted by this SELECT query, and the result is inserted in the view.\n\n\nIf you specify POPULATE, the existing table data is inserted in the view when creating it, as if making a \nCREATE TABLE ... AS SELECT ...\n . Otherwise, the query contains only the data inserted in the table after creating the view. We don't recommend using POPULATE, since data inserted in the table during the view creation will not be inserted in it.\n\n\nA \nSELECT\n query can contain \nDISTINCT\n, \nGROUP BY\n, \nORDER BY\n, \nLIMIT\n... Note that the corresponding conversions are performed independently on each block of inserted data. For example, if \nGROUP BY\n is set, data is aggregated during insertion, but only within a single packet of inserted data. The data won't be further aggregated. The exception is when using an ENGINE that independently performs data aggregation, such as \nSummingMergeTree\n.\n\n\nThe execution of \nALTER\n queries on materialized views has not been fully developed, so they might be inconvenient. If the materialized view uses the construction \nTO [db.]name\n, you can \nDETACH\n the view, run \nALTER\n for the target table, and then \nATTACH\n the previously detached (\nDETACH\n) view.\n\n\nViews look the same as normal tables. For example, they are listed in the result of the \nSHOW TABLES\n query.\n\n\nThere isn't a separate query for deleting views. To delete a view, use \nDROP TABLE\n.\n\n\nATTACH\n\n\nThis query is exactly the same as \nCREATE\n, but\n\n\n\n\ninstead of the word \nCREATE\n it uses the word \nATTACH\n.\n\n\nThe query doesn't create data on the disk, but assumes that data is already in the appropriate places, and just adds information about the table to the server.\nAfter executing an ATTACH query, the server will know about the existence of the table.\n\n\n\n\nIf the table was previously detached (\nDETACH\n), meaning that its structure is known, you can use shorthand without defining the structure.\n\n\nATTACH\n \nTABLE\n \n[\nIF\n \nNOT\n \nEXISTS\n]\n \n[\ndb\n.]\nname\n\n\n\n\n\n\nThis query is used when starting the server. The server stores table metadata as files with \nATTACH\n queries, which it simply runs at launch (with the exception of system tables, which are explicitly created on the server).\n\n\nDROP\n\n\nThis query has two types: \nDROP DATABASE\n  and \nDROP TABLE\n.\n\n\nDROP\n \nDATABASE\n \n[\nIF\n \nEXISTS\n]\n \ndb\n \n[\nON\n \nCLUSTER\n \ncluster\n]\n\n\n\n\n\n\nDeletes all tables inside the 'db' database, then deletes the 'db' database itself.\nIf \nIF EXISTS\n is specified, it doesn't return an error if the database doesn't exist.\n\n\nDROP\n \n[\nTEMPORARY\n]\n \nTABLE\n \n[\nIF\n \nEXISTS\n]\n \n[\ndb\n.]\nname\n \n[\nON\n \nCLUSTER\n \ncluster\n]\n\n\n\n\n\n\nDeletes the table.\nIf \nIF EXISTS\n is specified, it doesn't return an error if the table doesn't exist or the database doesn't exist.\n\n\nDETACH\n\n\nDeletes information about the 'name' table from the server. The server stops knowing about the table's existence.\n\n\nDETACH\n \nTABLE\n \n[\nIF\n \nEXISTS\n]\n \n[\ndb\n.]\nname\n\n\n\n\n\n\nThis does not delete the table's data or metadata. On the next server launch, the server will read the metadata and find out about the table again.\nSimilarly, a \"detached\" table can be re-attached using the \nATTACH\n query (with the exception of system tables, which do not have metadata stored for them).\n\n\nThere is no \nDETACH DATABASE\n query.\n\n\nRENAME\n\n\nRenames one or more tables.\n\n\nRENAME\n \nTABLE\n \n[\ndb11\n.]\nname11\n \nTO\n \n[\ndb12\n.]\nname12\n,\n \n[\ndb21\n.]\nname21\n \nTO\n \n[\ndb22\n.]\nname22\n,\n \n...\n \n[\nON\n \nCLUSTER\n \ncluster\n]\n\n\n\n\n\n\nAll tables are renamed under global locking. Renaming tables is a light operation. If you indicated another database after TO, the table will be moved to this database. However, the directories with databases must reside in the same file system (otherwise, an error is returned).\n\n\n\n\nALTER\n\n\nThe \nALTER\n query is only supported for \n*MergeTree\n tables, as well as \nMerge\nand\nDistributed\n. The query has several variations.\n\n\nColumn manipulations\n\n\nChanging the table structure.\n\n\nALTER\n \nTABLE\n \n[\ndb\n].\nname\n \n[\nON\n \nCLUSTER\n \ncluster\n]\n \nADD\n|\nDROP\n|\nMODIFY\n \nCOLUMN\n \n...\n\n\n\n\n\n\nIn the query, specify a list of one or more comma-separated actions.\nEach action is an operation on a column.\n\n\nThe following actions are supported:\n\n\nADD\n \nCOLUMN\n \nname\n \n[\ntype\n]\n \n[\ndefault_expr\n]\n \n[\nAFTER\n \nname_after\n]\n\n\n\n\n\n\nAdds a new column to the table with the specified name, type, and \ndefault_expr\n (see the section \"Default expressions\"). If you specify \nAFTER name_after\n (the name of another column), the column is added after the specified one in the list of table columns. Otherwise, the column is added to the end of the table. Note that there is no way to add a column to the beginning of a table. For a chain of actions, 'name_after' can be the name of a column that is added in one of the previous actions.\n\n\nAdding a column just changes the table structure, without performing any actions with data. The data doesn't appear on the disk after ALTER. If the data is missing for a column when reading from the table, it is filled in with default values (by performing the default expression if there is one, or using zeros or empty strings). If the data is missing for a column when reading from the table, it is filled in with default values (by performing the default expression if there is one, or using zeros or empty strings). The column appears on the disk after merging data parts (see MergeTree).\n\n\nThis approach allows us to complete the ALTER query instantly, without increasing the volume of old data.\n\n\nDROP\n \nCOLUMN\n \nname\n\n\n\n\n\n\nDeletes the column with the name 'name'.\nDeletes data from the file system. Since this deletes entire files, the query is completed almost instantly.\n\n\nMODIFY\n \nCOLUMN\n \nname\n \n[\ntype\n]\n \n[\ndefault_expr\n]\n\n\n\n\n\n\nChanges the 'name' column's type to 'type' and/or the default expression to 'default_expr'. When changing the type, values are converted as if the 'toType' function were applied to them.\n\n\nIf only the default expression is changed, the query doesn't do anything complex, and is completed almost instantly.\n\n\nChanging the column type is the only complex action \u2013 it changes the contents of files with data. For large tables, this may take a long time.\n\n\nThere are several processing stages:\n\n\n\n\nPreparing temporary (new) files with modified data.\n\n\nRenaming old files.\n\n\nRenaming the temporary (new) files to the old names.\n\n\nDeleting the old files.\n\n\n\n\nOnly the first stage takes time. If there is a failure at this stage, the data is not changed.\nIf there is a failure during one of the successive stages, data can be restored manually. The exception is if the old files were deleted from the file system but the data for the new files did not get written to the disk and was lost.\n\n\nThere is no support for changing the column type in arrays and nested data structures.\n\n\nThe \nALTER\n query lets you create and delete separate elements (columns) in nested data structures, but not whole nested data structures. To add a nested data structure, you can add columns with a name like \nname.nested_name\n and the type \nArray(T)\n. A nested data structure is equivalent to multiple array columns with a name that has the same prefix before the dot.\n\n\nThere is no support for deleting columns in the primary key or the sampling key (columns that are in the \nENGINE\n expression). Changing the type for columns that are included in the primary key is only possible if this change does not cause the data to be modified (for example, it is allowed to add values to an Enum or change a type with \nDateTime\n  to \nUInt32\n).\n\n\nIf the \nALTER\n query is not sufficient for making the table changes you need, you can create a new table, copy the data to it using the \nINSERT SELECT\n query, then switch the tables using the \nRENAME\n query and delete the old table.\n\n\nThe \nALTER\n query blocks all reads and writes for the table. In other words, if a long \nSELECT\n is running at the time of the \nALTER\n query, the \nALTER\n query will wait for it to complete. At the same time, all new queries to the same table will wait while this \nALTER\n is running.\n\n\nFor tables that don't store data themselves (such as \nMerge\n and \nDistributed\n), \nALTER\n just changes the table structure, and does not change the structure of subordinate tables. For example, when running ALTER for a \nDistributed\n table, you will also need to run \nALTER\n for the tables on all remote servers.\n\n\nThe \nALTER\n query for changing columns is replicated. The instructions are saved in ZooKeeper, then each replica applies them. All \nALTER\n queries are run in the same order. The query waits for the appropriate actions to be completed on the other replicas. However, a query to change columns in a replicated table can be interrupted, and all actions will be performed asynchronously.\n\n\nManipulations with partitions and parts\n\n\nIt only works for tables in the \nMergeTree\n family. The following operations are available:\n\n\n\n\nDETACH PARTITION\n \u2013 Move a partition to the 'detached' directory and forget it.\n\n\nDROP PARTITION\n \u2013 Delete a partition.\n\n\nATTACH PART|PARTITION\n \u2013 Add a new part or partition from the \ndetached\n directory to the table.\n\n\nFREEZE PARTITION\n \u2013 Create a backup of a partition.\n\n\nFETCH PARTITION\n \u2013 Download a partition from another server.\n\n\n\n\nEach type of query is covered separately below.\n\n\nA partition in a table is data for a single calendar month. This is determined by the values of the date key specified in the table engine parameters. Each month's data is stored separately in order to simplify manipulations with this data.\n\n\nA \"part\" in the table is part of the data from a single partition, sorted by the primary key.\n\n\nYou can use the \nsystem.parts\n table to view the set of table parts and partitions:\n\n\nSELECT\n \n*\n \nFROM\n \nsystem\n.\nparts\n \nWHERE\n \nactive\n\n\n\n\n\n\nactive\n \u2013 Only count active parts. Inactive parts are, for example, source parts remaining after merging to a larger part \u2013 these parts are deleted approximately 10 minutes after merging.\n\n\nAnother way to view a set of parts and partitions is to go into the directory with table data.\nData directory: \n/var/lib/clickhouse/data/database/table/\n,where \n/var/lib/clickhouse/\n is the path to the ClickHouse data, 'database' is the database name, and 'table' is the table name. Example:\n\n\n$ ls -l /var/lib/clickhouse/data/test/visits/\ntotal \n48\n\ndrwxrwxrwx \n2\n clickhouse clickhouse \n20480\n May  \n5\n \n02\n:58 20140317_20140323_2_2_0\ndrwxrwxrwx \n2\n clickhouse clickhouse \n20480\n May  \n5\n \n02\n:58 20140317_20140323_4_4_0\ndrwxrwxrwx \n2\n clickhouse clickhouse  \n4096\n May  \n5\n \n02\n:55 detached\n-rw-rw-rw- \n1\n clickhouse clickhouse     \n2\n May  \n5\n \n02\n:58 increment.txt\n\n\n\n\n\nHere, \n20140317_20140323_2_2_0\n and \n20140317_20140323_4_4_0\n are the directories of data parts.\n\n\nLet's break down the name of the first part: \n20140317_20140323_2_2_0\n.\n\n\n\n\n20140317\n is the minimum date of the data in the chunk.\n\n\n20140323\n is the maximum date of the data in the chunk.\n\n\n2\n is the minimum number of the data block.\n\n\n2\n is the maximum number of the data block.\n\n\n0\n is the chunk level (the depth of the merge tree it is formed from).\n\n\n\n\nEach piece relates to a single partition and contains data for just one month.\n\n201403\n is the name of the partition. A partition is a set of parts for a single month.\n\n\nOn an operating server, you can't manually change the set of parts or their data on the file system, since the server won't know about it.\nFor non-replicated tables, you can do this when the server is stopped, but we don't recommended it.\nFor replicated tables, the set of parts can't be changed in any case.\n\n\nThe \ndetached\n directory contains parts that are not used by the server - detached from the table using the \nALTER ... DETACH\n query. Parts that are damaged are also moved to this directory, instead of deleting them. You can add, delete, or modify the data in the 'detached' directory at any time \u2013 the server won't know about this until you make the \nALTER TABLE ... ATTACH\n query.\n\n\nALTER\n \nTABLE\n \n[\ndb\n.]\ntable\n \nDETACH\n \nPARTITION\n \nname\n\n\n\n\n\n\nMove all data for partitions named 'name' to the 'detached' directory and forget about them.\nThe partition name is specified in YYYYMM format. It can be indicated in single quotes or without them.\n\n\nAfter the query is executed, you can do whatever you want with the data in the 'detached' directory \u2014 delete it from the file system, or just leave it.\n\n\nThe query is replicated \u2013 data will be moved to the 'detached' directory and forgotten on all replicas. The query can only be sent to a leader replica. To find out if a replica is a leader, perform SELECT to the 'system.replicas' system table. Alternatively, it is easier to make a query on all replicas, and all except one will throw an exception.\n\n\nALTER\n \nTABLE\n \n[\ndb\n.]\ntable\n \nDROP\n \nPARTITION\n \nname\n\n\n\n\n\n\nThe same as the \nDETACH\n operation. Deletes data from the table. Data parts will be tagged as inactive and will be completely deleted in approximately 10 minutes. The query is replicated \u2013 data will be deleted on all replicas.\n\n\nALTER\n \nTABLE\n \n[\ndb\n.]\ntable\n \nATTACH\n \nPARTITION\n|\nPART\n \nname\n\n\n\n\n\n\nAdds data to the table from the 'detached' directory.\n\n\nIt is possible to add data for an entire partition or a separate part. For a part, specify the full name of the part in single quotes.\n\n\nThe query is replicated. Each replica checks whether there is data in the 'detached' directory. If there is data, it checks the integrity, verifies that it matches the data on the server that initiated the query, and then adds it if everything is correct. If not, it downloads data from the query requestor replica, or from another replica where the data has already been added.\n\n\nSo you can put data in the 'detached' directory on one replica, and use the ALTER ... ATTACH query to add it to the table on all replicas.\n\n\nALTER\n \nTABLE\n \n[\ndb\n.]\ntable\n \nFREEZE\n \nPARTITION\n \nname\n\n\n\n\n\n\nCreates a local backup of one or multiple partitions. The name can be the full name of the partition (for example, 201403), or its prefix (for example, 2014): then the backup will be created for all the corresponding partitions.\n\n\nThe query does the following: for a data snapshot at the time of execution, it creates hardlinks to table data in the directory \n/var/lib/clickhouse/shadow/N/...\n\n\n/var/lib/clickhouse/\n is the working ClickHouse directory from the config.\n\nN\n is the incremental number of the backup.\n\n\nThe same structure of directories is created inside the backup as inside \n/var/lib/clickhouse/\n.\nIt also performs 'chmod' for all files, forbidding writes to them.\n\n\nThe backup is created almost instantly (but first it waits for current queries to the corresponding table to finish running). At first, the backup doesn't take any space on the disk. As the system works, the backup can take disk space, as data is modified. If the backup is made for old enough data, it won't take space on the disk.\n\n\nAfter creating the backup, data from \n/var/lib/clickhouse/shadow/\n can be copied to the remote server and then deleted on the local server.\nThe entire backup process is performed without stopping the server.\n\n\nThe \nALTER ... FREEZE PARTITION\n query is not replicated. A local backup is only created on the local server.\n\n\nAs an alternative, you can manually copy data from the \n/var/lib/clickhouse/data/database/table\n directory.\nBut if you do this while the server is running, race conditions are possible when copying directories with files being added or changed, and the backup may be inconsistent. You can do this if the server isn't running \u2013 then the resulting data will be the same as after the \nALTER TABLE t FREEZE PARTITION\n query.\n\n\nALTER TABLE ... FREEZE PARTITION\n only copies data, not table metadata. To make a backup of table metadata, copy the file  \n/var/lib/clickhouse/metadata/database/table.sql\n\n\nTo restore from a backup:\n\n\n\n\n\n\nUse the CREATE query to create the table if it doesn't exist. The query can be taken from an .sql file (replace \nATTACH\n in it with \nCREATE\n).\n\n\nCopy the data from the data/database/table/ directory inside the backup to the \n/var/lib/clickhouse/data/database/table/detached/ directory.\n\n\nRun \nALTER TABLE ... ATTACH PARTITION YYYYMM\n queries, where \nYYYYMM\n is the month, for every month.\n\n\n\n\n\n\nIn this way, data from the backup will be added to the table.\nRestoring from a backup doesn't require stopping the server.\n\n\nBackups and replication\n\n\nReplication provides protection from device failures. If all data disappeared on one of your replicas, follow the instructions in the \"Restoration after failure\" section to restore it.\n\n\nFor protection from device failures, you must use replication. For more information about replication, see the section \"Data replication\".\n\n\nBackups protect against human error (accidentally deleting data, deleting the wrong data or in the wrong cluster, or corrupting data).\nFor high-volume databases, it can be difficult to copy backups to remote servers. In such cases, to protect from human error, you can keep a backup on the same server (it will reside in \n/var/lib/clickhouse/shadow/\n).\n\n\nALTER\n \nTABLE\n \n[\ndb\n.]\ntable\n \nFETCH\n \nPARTITION\n \nname\n \nFROM\n \npath-in-zookeeper\n\n\n\n\n\n\nThis query only works for replicatable tables.\n\n\nIt downloads the specified partition from the shard that has its \nZooKeeper path\n specified in the \nFROM\n clause, then puts it in the \ndetached\n directory for the specified table.\n\n\nAlthough the query is called \nALTER TABLE\n, it does not change the table structure, and does not immediately change the data available in the table.\n\n\nData is placed in the \ndetached\n directory. You can use the \nALTER TABLE ... ATTACH\n query to attach the data.\n\n\nThe \nFROM\n  clause specifies the path in \nZooKeeper\n. For example, \n/clickhouse/tables/01-01/visits\n.\nBefore downloading, the system checks that the partition exists and the table structure matches. The most appropriate replica is selected automatically from the healthy replicas.\n\n\nThe \nALTER ... FETCH PARTITION\n query is not replicated. The partition will be downloaded to the 'detached' directory only on the local server. Note that if after this you use the \nALTER TABLE ... ATTACH\n query to add data to the table, the data will be added on all replicas (on one of the replicas it will be added from the 'detached' directory, and on the rest it will be loaded from neighboring replicas).\n\n\nSynchronicity of ALTER queries\n\n\nFor non-replicatable tables, all \nALTER\n queries are performed synchronously. For replicatable tables, the query just adds instructions for the appropriate actions to \nZooKeeper\n, and the actions themselves are performed as soon as possible. However, the query can wait for these actions to be completed on all the replicas.\n\n\nFor \nALTER ... ATTACH|DETACH|DROP\n queries, you can use the \nreplication_alter_partitions_sync\n setting to set up waiting.\nPossible values: \n0\n \u2013 do not wait; \n1\n \u2013 only wait for own execution (default); \n2\n \u2013 wait for all.\n\n\n\n\nSHOW DATABASES\n\n\nSHOW\n \nDATABASES\n \n[\nINTO\n \nOUTFILE\n \nfilename\n]\n \n[\nFORMAT\n \nformat\n]\n\n\n\n\n\n\nPrints a list of all databases.\nThis query is identical to \nSELECT name FROM system.databases [INTO OUTFILE filename] [FORMAT format]\n.\n\n\nSee also the section \"Formats\".\n\n\nSHOW TABLES\n\n\nSHOW\n \n[\nTEMPORARY\n]\n \nTABLES\n \n[\nFROM\n \ndb\n]\n \n[\nLIKE\n \npattern\n]\n \n[\nINTO\n \nOUTFILE\n \nfilename\n]\n \n[\nFORMAT\n \nformat\n]\n\n\n\n\n\n\nDisplays a list of tables\n\n\n\n\ntables from the current database, or from the 'db' database if \"FROM db\" is specified.\n\n\nall tables, or tables whose name matches the pattern, if \"LIKE 'pattern'\" is specified.\n\n\n\n\nThis query is identical to: \nSELECT name FROM system.tables WHERE database = 'db' [AND name LIKE 'pattern'] [INTO OUTFILE filename] [FORMAT format]\n.\n\n\nSee also the section \"LIKE operator\".\n\n\nSHOW PROCESSLIST\n\n\nSHOW\n \nPROCESSLIST\n \n[\nINTO\n \nOUTFILE\n \nfilename\n]\n \n[\nFORMAT\n \nformat\n]\n\n\n\n\n\n\nOutputs a list of queries currently being processed, other than \nSHOW PROCESSLIST\n queries.\n\n\nPrints a table containing the columns:\n\n\nuser\n \u2013 The user who made the query. Keep in mind that for distributed processing, queries are sent to remote servers under the 'default' user. SHOW PROCESSLIST shows the username for a specific query, not for a query that this query initiated.\n\n\naddress\n \u2013 The name of the host that the query was sent from. For distributed processing, on remote servers, this is the name of the query requestor host. To track where a distributed query was originally made from, look at SHOW PROCESSLIST on the query requestor server.\n\n\nelapsed\n \u2013 The execution time, in seconds. Queries are output in order of decreasing execution time.\n\n\nrows_read\n, \nbytes_read\n \u2013 How many rows and bytes of uncompressed data were read when processing the query. For distributed processing, data is totaled from all the remote servers. This is the data used for restrictions and quotas.\n\n\nmemory_usage\n \u2013 Current RAM usage in bytes. See the setting 'max_memory_usage'.\n\n\nquery\n \u2013 The query itself. In INSERT queries, the data for insertion is not output.\n\n\nquery_id\n \u2013 The query identifier. Non-empty only if it was explicitly defined by the user. For distributed processing, the query ID is not passed to remote servers.\n\n\nThis query is identical to: \nSELECT * FROM system.processes [INTO OUTFILE filename] [FORMAT format]\n.\n\n\nTip (execute in the console):\n\n\nwatch -n1 \nclickhouse-client --query=\nSHOW PROCESSLIST\n\n\n\n\n\n\nSHOW CREATE TABLE\n\n\nSHOW\n \nCREATE\n \n[\nTEMPORARY\n]\n \nTABLE\n \n[\ndb\n.]\ntable\n \n[\nINTO\n \nOUTFILE\n \nfilename\n]\n \n[\nFORMAT\n \nformat\n]\n\n\n\n\n\n\nReturns a single \nString\n-type 'statement' column, which contains a single value \u2013 the \nCREATE\n query used for creating the specified table.\n\n\nDESCRIBE TABLE\n\n\nDESC\n|\nDESCRIBE\n \nTABLE\n \n[\ndb\n.]\ntable\n \n[\nINTO\n \nOUTFILE\n \nfilename\n]\n \n[\nFORMAT\n \nformat\n]\n\n\n\n\n\n\nReturns two \nString\n-type columns: \nname\n and \ntype\n, which indicate the names and types of columns in the specified table.\n\n\nNested data structures are output in \"expanded\" format. Each column is shown separately, with the name after a dot.\n\n\nEXISTS\n\n\nEXISTS\n \n[\nTEMPORARY\n]\n \nTABLE\n \n[\ndb\n.]\nname\n \n[\nINTO\n \nOUTFILE\n \nfilename\n]\n \n[\nFORMAT\n \nformat\n]\n\n\n\n\n\n\nReturns a single \nUInt8\n-type column, which contains the single value \n0\n if the table or database doesn't exist, or \n1\n if the table exists in the specified database.\n\n\nUSE\n\n\nUSE\n \ndb\n\n\n\n\n\n\nLets you set the current database for the session.\nThe current database is used for searching for tables if the database is not explicitly defined in the query with a dot before the table name.\nThis query can't be made when using the HTTP protocol, since there is no concept of a session.\n\n\nSET\n\n\nSET\n \nparam\n \n=\n \nvalue\n\n\n\n\n\n\nAllows you to set \nparam\n to \nvalue\n. You can also make all the settings from the specified settings profile in a single query. To do this, specify 'profile' as the setting name. For more information, see the section \"Settings\".\nThe setting is made for the session, or for the server (globally) if \nGLOBAL\n is specified.\nWhen making a global setting, the setting is not applied to sessions already running, including the current session. It will only be used for new sessions.\n\n\nWhen the server is restarted, global settings made using \nSET\n are lost.\nTo make settings that persist after a server restart, you can only use the server's config file.\n\n\nOPTIMIZE\n\n\nOPTIMIZE\n \nTABLE\n \n[\ndb\n.]\nname\n \n[\nPARTITION\n \npartition\n]\n \n[\nFINAL\n]\n\n\n\n\n\n\nAsks the table engine to do something for optimization.\nSupported only by \n*MergeTree\n engines, in which this query initializes a non-scheduled merge of data parts.\nIf you specify a \nPARTITION\n, only the specified partition will be optimized.\nIf you specify \nFINAL\n, optimization will be performed even when all the data is already in one part.\n\n\n\n\nINSERT\n\n\nAdding data.\n\n\nBasic query format:\n\n\nINSERT\n \nINTO\n \n[\ndb\n.]\ntable\n \n[(\nc1\n,\n \nc2\n,\n \nc3\n)]\n \nVALUES\n \n(\nv11\n,\n \nv12\n,\n \nv13\n),\n \n(\nv21\n,\n \nv22\n,\n \nv23\n),\n \n...\n\n\n\n\n\n\nThe query can specify a list of columns to insert \n[(c1, c2, c3)]\n. In this case, the rest of the columns are filled with:\n\n\n\n\nThe values calculated from the \nDEFAULT\n  expressions specified in the table definition.\n\n\nZeros and empty strings, if \nDEFAULT\n expressions are not defined.\n\n\n\n\nIf \nstrict_insert_defaults=1\n, columns that do not have \nDEFAULT\n defined must be listed in the query.\n\n\nData can be passed to the INSERT in any \nformat\n supported by ClickHouse. The format must be specified explicitly in the query:\n\n\nINSERT\n \nINTO\n \n[\ndb\n.]\ntable\n \n[(\nc1\n,\n \nc2\n,\n \nc3\n)]\n \nFORMAT\n \nformat_name\n \ndata_set\n\n\n\n\n\n\nFor example, the following query format is identical to the basic version of INSERT ... VALUES:\n\n\nINSERT\n \nINTO\n \n[\ndb\n.]\ntable\n \n[(\nc1\n,\n \nc2\n,\n \nc3\n)]\n \nFORMAT\n \nValues\n \n(\nv11\n,\n \nv12\n,\n \nv13\n),\n \n(\nv21\n,\n \nv22\n,\n \nv23\n),\n \n...\n\n\n\n\n\n\nClickHouse removes all spaces and one line feed (if there is one) before the data. When forming a query, we recommend putting the data on a new line after the query operators (this is important if the data begins with spaces).\n\n\nExample:\n\n\nINSERT\n \nINTO\n \nt\n \nFORMAT\n \nTabSeparated\n\n\n11\n  \nHello\n,\n \nworld\n!\n\n\n22\n  \nQwerty\n\n\n\n\n\n\nYou can insert data separately from the query by using the command-line client or the HTTP interface. For more information, see the section \"\nInterfaces\n\".\n\n\nInserting the results of \nSELECT\n\n\nINSERT\n \nINTO\n \n[\ndb\n.]\ntable\n \n[(\nc1\n,\n \nc2\n,\n \nc3\n)]\n \nSELECT\n \n...\n\n\n\n\n\n\nColumns are mapped according to their position in the SELECT clause. However, their names in the SELECT expression and the table for INSERT may differ. If necessary, type casting is performed.\n\n\nNone of the data formats except Values allow setting values to expressions such as \nnow()\n, \n1 + 2\n,  and so on. The Values format allows limited use of expressions, but this is not recommended, because in this case inefficient code is used for their execution.\n\n\nOther queries for modifying data parts are not supported: \nUPDATE\n, \nDELETE\n, \nREPLACE\n, \nMERGE\n, \nUPSERT\n, \nINSERT UPDATE\n.\nHowever, you can delete old data using \nALTER TABLE ... DROP PARTITION\n.\n\n\nPerformance considerations\n\n\nINSERT\n sorts the input data by primary key and splits them into partitions by month. If you insert data for mixed months, it can significantly reduce the performance of the \nINSERT\n query. To avoid this:\n\n\n\n\nAdd data in fairly large batches, such as 100,000 rows at a time.\n\n\nGroup data by month before uploading it to ClickHouse.\n\n\n\n\nPerformance will not decrease if:\n\n\n\n\nData is added in real time.\n\n\nYou upload data that is usually sorted by time.\n\n\n\n\nSELECT\n\n\nData sampling.\n\n\nSELECT\n \n[\nDISTINCT\n]\n \nexpr_list\n\n    \n[\nFROM\n \n[\ndb\n.]\ntable\n \n|\n \n(\nsubquery\n)\n \n|\n \ntable_function\n]\n \n[\nFINAL\n]\n\n    \n[\nSAMPLE\n \nsample_coeff\n]\n\n    \n[\nARRAY\n \nJOIN\n \n...]\n\n    \n[\nGLOBAL\n]\n \nANY\n|\nALL\n \nINNER\n|\nLEFT\n \nJOIN\n \n(\nsubquery\n)\n|\ntable\n \nUSING\n \ncolumns_list\n\n    \n[\nPREWHERE\n \nexpr\n]\n\n    \n[\nWHERE\n \nexpr\n]\n\n    \n[\nGROUP\n \nBY\n \nexpr_list\n]\n \n[\nWITH\n \nTOTALS\n]\n\n    \n[\nHAVING\n \nexpr\n]\n\n    \n[\nORDER\n \nBY\n \nexpr_list\n]\n\n    \n[\nLIMIT\n \n[\nn\n,\n \n]\nm\n]\n\n    \n[\nUNION\n \nALL\n \n...]\n\n    \n[\nINTO\n \nOUTFILE\n \nfilename\n]\n\n    \n[\nFORMAT\n \nformat\n]\n\n    \n[\nLIMIT\n \nn\n \nBY\n \ncolumns\n]\n\n\n\n\n\n\nAll the clauses are optional, except for the required list of expressions immediately after SELECT.\nThe clauses below are described in almost the same order as in the query execution conveyor.\n\n\nIf the query omits the \nDISTINCT\n, \nGROUP BY\n and \nORDER BY\n clauses and the \nIN\n and \nJOIN\n subqueries, the query will be completely stream processed, using O(1) amount of RAM.\nOtherwise, the query might consume a lot of RAM if the appropriate restrictions are not specified: \nmax_memory_usage\n, \nmax_rows_to_group_by\n, \nmax_rows_to_sort\n, \nmax_rows_in_distinct\n, \nmax_bytes_in_distinct\n, \nmax_rows_in_set\n, \nmax_bytes_in_set\n, \nmax_rows_in_join\n, \nmax_bytes_in_join\n, \nmax_bytes_before_external_sort\n, \nmax_bytes_before_external_group_by\n. For more information, see the section \"Settings\". It is possible to use external sorting (saving temporary tables to a disk) and external aggregation. \nThe system does not have \"merge join\"\n.\n\n\nFROM clause\n\n\nIf the FROM clause is omitted, data will be read from the \nsystem.one\n table.\nThe 'system.one' table contains exactly one row (this table fulfills the same purpose as the DUAL table found in other DBMSs).\n\n\nThe FROM clause specifies the table to read data from, or a subquery, or a table function; ARRAY JOIN and the regular JOIN may also be included (see below).\n\n\nInstead of a table, the SELECT subquery may be specified in brackets.\nIn this case, the subquery processing pipeline will be built into the processing pipeline of an external query.\nIn contrast to standard SQL, a synonym does not need to be specified after a subquery. For compatibility, it is possible to write 'AS name' after a subquery, but the specified name isn't used anywhere.\n\n\nA table function may be specified instead of a table. For more information, see the section \"Table functions\".\n\n\nTo execute a query, all the columns listed in the query are extracted from the appropriate table. Any columns not needed for the external query are thrown out of the subqueries.\nIf a query does not list any columns (for example, SELECT count() FROM t), some column is extracted from the table anyway (the smallest one is preferred), in order to calculate the number of rows.\n\n\nThe FINAL modifier can be used only for a SELECT from a CollapsingMergeTree table. When you specify FINAL, data is selected fully \"collapsed\". Keep in mind that using FINAL leads to a selection that includes columns related to the primary key, in addition to the columns specified in the SELECT. Additionally, the query will be executed in a single stream, and data will be merged during query execution. This means that when using FINAL, the query is processed more slowly. In most cases, you should avoid using FINAL. For more information, see the section \"CollapsingMergeTree engine\".\n\n\nSAMPLE clause\n\n\nThe SAMPLE clause allows for approximated query processing. Approximated query processing is only supported by MergeTree* type tables, and only if the sampling expression was specified during table creation (see the section \"MergeTree engine\").\n\n\nSAMPLE\n has the \nformat SAMPLE k\n, where \nk\n is a decimal number from 0 to 1, or \nSAMPLE n\n, where 'n' is a sufficiently large integer.\n\n\nIn the first case, the query will be executed on 'k' percent of data. For example, \nSAMPLE 0.1\n runs the query on 10% of data.\nIn the second case, the query will be executed on a sample of no more than 'n' rows. For example, \nSAMPLE 10000000\n runs the query on a maximum of 10,000,000 rows.\n\n\nExample:\n\n\nSELECT\n\n    \nTitle\n,\n\n    \ncount\n()\n \n*\n \n10\n \nAS\n \nPageViews\n\n\nFROM\n \nhits_distributed\n\n\nSAMPLE\n \n0\n.\n1\n\n\nWHERE\n\n    \nCounterID\n \n=\n \n34\n\n    \nAND\n \ntoDate\n(\nEventDate\n)\n \n=\n \ntoDate\n(\n2013-01-29\n)\n\n    \nAND\n \ntoDate\n(\nEventDate\n)\n \n=\n \ntoDate\n(\n2013-02-04\n)\n\n    \nAND\n \nNOT\n \nDontCountHits\n\n    \nAND\n \nNOT\n \nRefresh\n\n    \nAND\n \nTitle\n \n!=\n \n\n\nGROUP\n \nBY\n \nTitle\n\n\nORDER\n \nBY\n \nPageViews\n \nDESC\n \nLIMIT\n \n1000\n\n\n\n\n\n\nIn this example, the query is executed on a sample from 0.1 (10%) of data. Values of aggregate functions are not corrected automatically, so to get an approximate result, the value 'count()' is manually multiplied by 10.\n\n\nWhen using something like \nSAMPLE 10000000\n, there isn't any information about which relative percent of data was processed or what the aggregate functions should be multiplied by, so this method of writing is not always appropriate to the situation.\n\n\nA sample with a relative coefficient is \"consistent\": if we look at all possible data that could be in the table, a sample (when using a single sampling expression specified during table creation) with the same coefficient always selects the same subset of possible data. In other words, a sample from different tables on different servers at different times is made the same way.\n\n\nFor example, a sample of user IDs takes rows with the same subset of all the possible user IDs from different tables. This allows using the sample in subqueries in the IN clause, as well as for manually correlating results of different queries with samples.\n\n\nARRAY JOIN clause\n\n\nAllows executing JOIN with an array or nested data structure. The intent is similar to the 'arrayJoin' function, but its functionality is broader.\n\n\nARRAY JOIN\n is essentially \nINNER JOIN\n with an array. Example:\n\n\n:) CREATE TABLE arrays_test (s String, arr Array(UInt8)) ENGINE = Memory\n\nCREATE TABLE arrays_test\n(\n    s String,\n    arr Array(UInt8)\n) ENGINE = Memory\n\nOk.\n\n0 rows in set. Elapsed: 0.001 sec.\n\n:) INSERT INTO arrays_test VALUES (\nHello\n, [1,2]), (\nWorld\n, [3,4,5]), (\nGoodbye\n, [])\n\nINSERT INTO arrays_test VALUES\n\nOk.\n\n3 rows in set. Elapsed: 0.001 sec.\n\n:) SELECT * FROM arrays_test\n\nSELECT *\nFROM arrays_test\n\n\u250c\u2500s\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500arr\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Hello   \u2502 [1,2]   \u2502\n\u2502 World   \u2502 [3,4,5] \u2502\n\u2502 Goodbye \u2502 []      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n3 rows in set. Elapsed: 0.001 sec.\n\n:) SELECT s, arr FROM arrays_test ARRAY JOIN arr\n\nSELECT s, arr\nFROM arrays_test\nARRAY JOIN arr\n\n\u250c\u2500s\u2500\u2500\u2500\u2500\u2500\u252c\u2500arr\u2500\u2510\n\u2502 Hello \u2502   1 \u2502\n\u2502 Hello \u2502   2 \u2502\n\u2502 World \u2502   3 \u2502\n\u2502 World \u2502   4 \u2502\n\u2502 World \u2502   5 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n\n5 rows in set. Elapsed: 0.001 sec.\n\n\n\n\n\nAn alias can be specified for an array in the ARRAY JOIN clause. In this case, an array item can be accessed by this alias, but the array itself by the original name. Example:\n\n\n:) SELECT s, arr, a FROM arrays_test ARRAY JOIN arr AS a\n\nSELECT s, arr, a\nFROM arrays_test\nARRAY JOIN arr AS a\n\n\u250c\u2500s\u2500\u2500\u2500\u2500\u2500\u252c\u2500arr\u2500\u2500\u2500\u2500\u2500\u252c\u2500a\u2500\u2510\n\u2502 Hello \u2502 [1,2]   \u2502 1 \u2502\n\u2502 Hello \u2502 [1,2]   \u2502 2 \u2502\n\u2502 World \u2502 [3,4,5] \u2502 3 \u2502\n\u2502 World \u2502 [3,4,5] \u2502 4 \u2502\n\u2502 World \u2502 [3,4,5] \u2502 5 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\n\n5 rows in set. Elapsed: 0.001 sec.\n\n\n\n\n\nMultiple arrays of the same size can be comma-separated in the ARRAY JOIN clause. In this case, JOIN is performed with them simultaneously (the direct sum, not the direct product). Example:\n\n\n:) SELECT s, arr, a, num, mapped FROM arrays_test ARRAY JOIN arr AS a, arrayEnumerate(arr) AS num, arrayMap(x -\n x + 1, arr) AS mapped\n\nSELECT s, arr, a, num, mapped\nFROM arrays_test\nARRAY JOIN arr AS a, arrayEnumerate(arr) AS num, arrayMap(lambda(tuple(x), plus(x, 1)), arr) AS mapped\n\n\u250c\u2500s\u2500\u2500\u2500\u2500\u2500\u252c\u2500arr\u2500\u2500\u2500\u2500\u2500\u252c\u2500a\u2500\u252c\u2500num\u2500\u252c\u2500mapped\u2500\u2510\n\u2502 Hello \u2502 [1,2]   \u2502 1 \u2502   1 \u2502      2 \u2502\n\u2502 Hello \u2502 [1,2]   \u2502 2 \u2502   2 \u2502      3 \u2502\n\u2502 World \u2502 [3,4,5] \u2502 3 \u2502   1 \u2502      4 \u2502\n\u2502 World \u2502 [3,4,5] \u2502 4 \u2502   2 \u2502      5 \u2502\n\u2502 World \u2502 [3,4,5] \u2502 5 \u2502   3 \u2502      6 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n5 rows in set. Elapsed: 0.002 sec.\n\n:) SELECT s, arr, a, num, arrayEnumerate(arr) FROM arrays_test ARRAY JOIN arr AS a, arrayEnumerate(arr) AS num\n\nSELECT s, arr, a, num, arrayEnumerate(arr)\nFROM arrays_test\nARRAY JOIN arr AS a, arrayEnumerate(arr) AS num\n\n\u250c\u2500s\u2500\u2500\u2500\u2500\u2500\u252c\u2500arr\u2500\u2500\u2500\u2500\u2500\u252c\u2500a\u2500\u252c\u2500num\u2500\u252c\u2500arrayEnumerate(arr)\u2500\u2510\n\u2502 Hello \u2502 [1,2]   \u2502 1 \u2502   1 \u2502 [1,2]               \u2502\n\u2502 Hello \u2502 [1,2]   \u2502 2 \u2502   2 \u2502 [1,2]               \u2502\n\u2502 World \u2502 [3,4,5] \u2502 3 \u2502   1 \u2502 [1,2,3]             \u2502\n\u2502 World \u2502 [3,4,5] \u2502 4 \u2502   2 \u2502 [1,2,3]             \u2502\n\u2502 World \u2502 [3,4,5] \u2502 5 \u2502   3 \u2502 [1,2,3]             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n5 rows in set. Elapsed: 0.002 sec.\n\n\n\n\n\nARRAY JOIN also works with nested data structures. Example:\n\n\n:) CREATE TABLE nested_test (s String, nest Nested(x UInt8, y UInt32)) ENGINE = Memory\n\nCREATE TABLE nested_test\n(\n    s String,\n    nest Nested(\n    x UInt8,\n    y UInt32)\n) ENGINE = Memory\n\nOk.\n\n0 rows in set. Elapsed: 0.006 sec.\n\n:) INSERT INTO nested_test VALUES (\nHello\n, [1,2], [10,20]), (\nWorld\n, [3,4,5], [30,40,50]), (\nGoodbye\n, [], [])\n\nINSERT INTO nested_test VALUES\n\nOk.\n\n3 rows in set. Elapsed: 0.001 sec.\n\n:) SELECT * FROM nested_test\n\nSELECT *\nFROM nested_test\n\n\u250c\u2500s\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500nest.x\u2500\u2500\u252c\u2500nest.y\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Hello   \u2502 [1,2]   \u2502 [10,20]    \u2502\n\u2502 World   \u2502 [3,4,5] \u2502 [30,40,50] \u2502\n\u2502 Goodbye \u2502 []      \u2502 []         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n3 rows in set. Elapsed: 0.001 sec.\n\n:) SELECT s, nest.x, nest.y FROM nested_test ARRAY JOIN nest\n\nSELECT s, `nest.x`, `nest.y`\nFROM nested_test\nARRAY JOIN nest\n\n\u250c\u2500s\u2500\u2500\u2500\u2500\u2500\u252c\u2500nest.x\u2500\u252c\u2500nest.y\u2500\u2510\n\u2502 Hello \u2502      1 \u2502     10 \u2502\n\u2502 Hello \u2502      2 \u2502     20 \u2502\n\u2502 World \u2502      3 \u2502     30 \u2502\n\u2502 World \u2502      4 \u2502     40 \u2502\n\u2502 World \u2502      5 \u2502     50 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n5 rows in set. Elapsed: 0.001 sec.\n\n\n\n\n\nWhen specifying names of nested data structures in ARRAY JOIN, the meaning is the same as ARRAY JOIN with all the array elements that it consists of. Example:\n\n\n:) SELECT s, nest.x, nest.y FROM nested_test ARRAY JOIN nest.x, nest.y\n\nSELECT s, `nest.x`, `nest.y`\nFROM nested_test\nARRAY JOIN `nest.x`, `nest.y`\n\n\u250c\u2500s\u2500\u2500\u2500\u2500\u2500\u252c\u2500nest.x\u2500\u252c\u2500nest.y\u2500\u2510\n\u2502 Hello \u2502      1 \u2502     10 \u2502\n\u2502 Hello \u2502      2 \u2502     20 \u2502\n\u2502 World \u2502      3 \u2502     30 \u2502\n\u2502 World \u2502      4 \u2502     40 \u2502\n\u2502 World \u2502      5 \u2502     50 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n5 rows in set. Elapsed: 0.001 sec.\n\n\n\n\n\nThis variation also makes sense:\n\n\n:) SELECT s, nest.x, nest.y FROM nested_test ARRAY JOIN nest.x\n\nSELECT s, `nest.x`, `nest.y`\nFROM nested_test\nARRAY JOIN `nest.x`\n\n\u250c\u2500s\u2500\u2500\u2500\u2500\u2500\u252c\u2500nest.x\u2500\u252c\u2500nest.y\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Hello \u2502      1 \u2502 [10,20]    \u2502\n\u2502 Hello \u2502      2 \u2502 [10,20]    \u2502\n\u2502 World \u2502      3 \u2502 [30,40,50] \u2502\n\u2502 World \u2502      4 \u2502 [30,40,50] \u2502\n\u2502 World \u2502      5 \u2502 [30,40,50] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n5 rows in set. Elapsed: 0.001 sec.\n\n\n\n\n\nAn alias may be used for a nested data structure, in order to select either the JOIN result or the source array. Example:\n\n\n:) SELECT s, n.x, n.y, nest.x, nest.y FROM nested_test ARRAY JOIN nest AS n\n\nSELECT s, `n.x`, `n.y`, `nest.x`, `nest.y`\nFROM nested_test\nARRAY JOIN nest AS n\n\n\u250c\u2500s\u2500\u2500\u2500\u2500\u2500\u252c\u2500n.x\u2500\u252c\u2500n.y\u2500\u252c\u2500nest.x\u2500\u2500\u252c\u2500nest.y\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Hello \u2502   1 \u2502  10 \u2502 [1,2]   \u2502 [10,20]    \u2502\n\u2502 Hello \u2502   2 \u2502  20 \u2502 [1,2]   \u2502 [10,20]    \u2502\n\u2502 World \u2502   3 \u2502  30 \u2502 [3,4,5] \u2502 [30,40,50] \u2502\n\u2502 World \u2502   4 \u2502  40 \u2502 [3,4,5] \u2502 [30,40,50] \u2502\n\u2502 World \u2502   5 \u2502  50 \u2502 [3,4,5] \u2502 [30,40,50] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n5 rows in set. Elapsed: 0.001 sec.\n\n\n\n\n\nExample of using the arrayEnumerate function:\n\n\n:) SELECT s, n.x, n.y, nest.x, nest.y, num FROM nested_test ARRAY JOIN nest AS n, arrayEnumerate(nest.x) AS num\n\nSELECT s, `n.x`, `n.y`, `nest.x`, `nest.y`, num\nFROM nested_test\nARRAY JOIN nest AS n, arrayEnumerate(`nest.x`) AS num\n\n\u250c\u2500s\u2500\u2500\u2500\u2500\u2500\u252c\u2500n.x\u2500\u252c\u2500n.y\u2500\u252c\u2500nest.x\u2500\u2500\u252c\u2500nest.y\u2500\u2500\u2500\u2500\u2500\u252c\u2500num\u2500\u2510\n\u2502 Hello \u2502   1 \u2502  10 \u2502 [1,2]   \u2502 [10,20]    \u2502   1 \u2502\n\u2502 Hello \u2502   2 \u2502  20 \u2502 [1,2]   \u2502 [10,20]    \u2502   2 \u2502\n\u2502 World \u2502   3 \u2502  30 \u2502 [3,4,5] \u2502 [30,40,50] \u2502   1 \u2502\n\u2502 World \u2502   4 \u2502  40 \u2502 [3,4,5] \u2502 [30,40,50] \u2502   2 \u2502\n\u2502 World \u2502   5 \u2502  50 \u2502 [3,4,5] \u2502 [30,40,50] \u2502   3 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n\n5 rows in set. Elapsed: 0.002 sec.\n\n\n\n\n\nThe query can only specify a single ARRAY JOIN clause.\n\n\nThe corresponding conversion can be performed before the WHERE/PREWHERE clause (if its result is needed in this clause), or after completing WHERE/PREWHERE (to reduce the volume of calculations).\n\n\nJOIN clause\n\n\nThe normal JOIN, which is not related to ARRAY JOIN described above.\n\n\n[\nGLOBAL\n]\n \nANY\n|\nALL\n \nINNER\n|\nLEFT\n \n[\nOUTER\n]\n \nJOIN\n \n(\nsubquery\n)\n|\ntable\n \nUSING\n \ncolumns_list\n\n\n\n\n\n\nPerforms joins with data from the subquery. At the beginning of query processing, the subquery specified after JOIN is run, and its result is saved in memory. Then it is read from the \"left\" table specified in the FROM clause, and while it is being read, for each of the read rows from the \"left\" table, rows are selected from the subquery results table (the \"right\" table) that meet the condition for matching the values of the columns specified in USING.\n\n\nThe table name can be specified instead of a subquery. This is equivalent to the \nSELECT * FROM table\n subquery, except in a special case when the table has the Join engine \u2013 an array prepared for joining.\n\n\nAll columns that are not needed for the JOIN are deleted from the subquery.\n\n\nThere are several types of JOINs:\n\n\nINNER\n or \nLEFT\n type:If INNER is specified, the result will contain only those rows that have a matching row in the right table.\nIf LEFT is specified, any rows in the left table that don't have matching rows in the right table will be assigned the default value - zeros or empty rows. LEFT OUTER may be written instead of LEFT; the word OUTER does not affect anything.\n\n\nANY\n or \nALL\n stringency:If \nANY\n is specified and the right table has several matching rows, only the first one found is joined.\nIf \nALL\n is specified and the right table has several matching rows, the data will be multiplied by the number of these rows.\n\n\nUsing ALL corresponds to the normal JOIN semantic from standard SQL.\nUsing ANY is optimal. If the right table has only one matching row, the results of ANY and ALL are the same. You must specify either ANY or ALL (neither of them is selected by default).\n\n\nGLOBAL\n distribution:\n\n\nWhen using a normal JOIN, the query is sent to remote servers. Subqueries are run on each of them in order to make the right table, and the join is performed with this table. In other words, the right table is formed on each server separately.\n\n\nWhen using \nGLOBAL ... JOIN\n, first the requestor server runs a subquery to calculate the right table. This temporary table is passed to each remote server, and queries are run on them using the temporary data that was transmitted.\n\n\nBe careful when using GLOBAL JOINs. For more information, see the section \"Distributed subqueries\".\n\n\nAny combination of JOINs is possible. For example, \nGLOBAL ANY LEFT OUTER JOIN\n.\n\n\nWhen running a JOIN, there is no optimization of the order of execution in relation to other stages of the query. The join (a search in the right table) is run before filtering in WHERE and before aggregation. In order to explicitly set the processing order, we recommend running a JOIN subquery with a subquery.\n\n\nExample:\n\n\nSELECT\n\n    \nCounterID\n,\n\n    \nhits\n,\n\n    \nvisits\n\n\nFROM\n\n\n(\n\n    \nSELECT\n\n        \nCounterID\n,\n\n        \ncount\n()\n \nAS\n \nhits\n\n    \nFROM\n \ntest\n.\nhits\n\n    \nGROUP\n \nBY\n \nCounterID\n\n\n)\n \nANY\n \nLEFT\n \nJOIN\n\n\n(\n\n    \nSELECT\n\n        \nCounterID\n,\n\n        \nsum\n(\nSign\n)\n \nAS\n \nvisits\n\n    \nFROM\n \ntest\n.\nvisits\n\n    \nGROUP\n \nBY\n \nCounterID\n\n\n)\n \nUSING\n \nCounterID\n\n\nORDER\n \nBY\n \nhits\n \nDESC\n\n\nLIMIT\n \n10\n\n\n\n\n\n\n\u250c\u2500CounterID\u2500\u252c\u2500\u2500\u2500hits\u2500\u252c\u2500visits\u2500\u2510\n\u2502   1143050 \u2502 523264 \u2502  13665 \u2502\n\u2502    731962 \u2502 475698 \u2502 102716 \u2502\n\u2502    722545 \u2502 337212 \u2502 108187 \u2502\n\u2502    722889 \u2502 252197 \u2502  10547 \u2502\n\u2502   2237260 \u2502 196036 \u2502   9522 \u2502\n\u2502  23057320 \u2502 147211 \u2502   7689 \u2502\n\u2502    722818 \u2502  90109 \u2502  17847 \u2502\n\u2502     48221 \u2502  85379 \u2502   4652 \u2502\n\u2502  19762435 \u2502  77807 \u2502   7026 \u2502\n\u2502    722884 \u2502  77492 \u2502  11056 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n\n\nSubqueries don't allow you to set names or use them for referencing a column from a specific subquery.\nThe columns specified in USING must have the same names in both subqueries, and the other columns must be named differently. You can use aliases to change the names of columns in subqueries (the example uses the aliases 'hits' and 'visits').\n\n\nThe USING clause specifies one or more columns to join, which establishes the equality of these columns. The list of columns is set without brackets. More complex join conditions are not supported.\n\n\nThe right table (the subquery result) resides in RAM. If there isn't enough memory, you can't run a JOIN.\n\n\nOnly one JOIN can be specified in a query (on a single level). To run multiple JOINs, you can put them in subqueries.\n\n\nEach time a query is run with the same JOIN, the subquery is run again \u2013 the result is not cached. To avoid this, use the special 'Join' table engine, which is a prepared array for joining that is always in RAM. For more information, see the section \"Table engines, Join\".\n\n\nIn some cases, it is more efficient to use IN instead of JOIN.\nAmong the various types of JOINs, the most efficient is ANY LEFT JOIN, then ANY INNER JOIN. The least efficient are ALL LEFT JOIN and ALL INNER JOIN.\n\n\nIf you need a JOIN for joining with dimension tables (these are relatively small tables that contain dimension properties, such as names for advertising campaigns), a JOIN might not be very convenient due to the bulky syntax and the fact that the right table is re-accessed for every query. For such cases, there is an \"external dictionaries\" feature that you should use instead of JOIN. For more information, see the section \"External dictionaries\".\n\n\nWHERE clause\n\n\nIf there is a WHERE clause, it must contain an expression with the UInt8 type. This is usually an expression with comparison and logical operators.\nThis expression will be used for filtering data before all other transformations.\n\n\nIf indexes are supported by the database table engine, the expression is evaluated on the ability to use indexes.\n\n\nPREWHERE clause\n\n\nThis clause has the same meaning as the WHERE clause. The difference is in which data is read from the table.\nWhen using PREWHERE, first only the columns necessary for executing PREWHERE are read. Then the other columns are read that are needed for running the query, but only those blocks where the PREWHERE expression is true.\n\n\nIt makes sense to use PREWHERE if there are filtration conditions that are not suitable for indexes that are used by a minority of the columns in the query, but that provide strong data filtration. This reduces the volume of data to read.\n\n\nFor example, it is useful to write PREWHERE for queries that extract a large number of columns, but that only have filtration for a few columns.\n\n\nPREWHERE is only supported by tables from the \n*MergeTree\n family.\n\n\nA query may simultaneously specify PREWHERE and WHERE. In this case, PREWHERE precedes WHERE.\n\n\nKeep in mind that it does not make much sense for PREWHERE to only specify those columns that have an index, because when using an index, only the data blocks that match the index are read.\n\n\nIf the 'optimize_move_to_prewhere' setting is set to 1 and PREWHERE is omitted, the system uses heuristics to automatically move parts of expressions from WHERE to PREWHERE.\n\n\nGROUP BY clause\n\n\nThis is one of the most important parts of a column-oriented DBMS.\n\n\nIf there is a GROUP BY clause, it must contain a list of expressions. Each expression will be referred to here as a \"key\".\nAll the expressions in the SELECT, HAVING, and ORDER BY clauses must be calculated from keys or from aggregate functions. In other words, each column selected from the table must be used either in keys or inside aggregate functions.\n\n\nIf a query contains only table columns inside aggregate functions, the GROUP BY clause can be omitted, and aggregation by an empty set of keys is assumed.\n\n\nExample:\n\n\nSELECT\n\n    \ncount\n(),\n\n    \nmedian\n(\nFetchTiming\n \n \n60\n \n?\n \n60\n \n:\n \nFetchTiming\n),\n\n    \ncount\n()\n \n-\n \nsum\n(\nRefresh\n)\n\n\nFROM\n \nhits\n\n\n\n\n\n\nHowever, in contrast to standard SQL, if the table doesn't have any rows (either there aren't any at all, or there aren't any after using WHERE to filter), an empty result is returned, and not the result from one of the rows containing the initial values of aggregate functions.\n\n\nAs opposed to MySQL (and conforming to standard SQL), you can't get some value of some column that is not in a key or aggregate function (except constant expressions). To work around this, you can use the 'any' aggregate function (get the first encountered value) or 'min/max'.\n\n\nExample:\n\n\nSELECT\n\n    \ndomainWithoutWWW\n(\nURL\n)\n \nAS\n \ndomain\n,\n\n    \ncount\n(),\n\n    \nany\n(\nTitle\n)\n \nAS\n \ntitle\n \n-- getting the first occurred page header for each domain.\n\n\nFROM\n \nhits\n\n\nGROUP\n \nBY\n \ndomain\n\n\n\n\n\n\nFor every different key value encountered, GROUP BY calculates a set of aggregate function values.\n\n\nGROUP BY is not supported for array columns.\n\n\nA constant can't be specified as arguments for aggregate functions. Example: sum(1). Instead of this, you can get rid of the constant. Example: \ncount()\n.\n\n\nWITH TOTALS modifier\n\n\nIf the WITH TOTALS modifier is specified, another row will be calculated. This row will have key columns containing default values (zeros or empty lines), and columns of aggregate functions with the values calculated across all the rows (the \"total\" values).\n\n\nThis extra row is output in JSON*, TabSeparated*, and Pretty* formats, separately from the other rows. In the other formats, this row is not output.\n\n\nIn JSON* formats, this row is output as a separate 'totals' field. In TabSeparated* formats, the row comes after the main result, preceded by an empty row (after the other data). In Pretty* formats, the row is output as a separate table after the main result.\n\n\nWITH TOTALS\n can be run in different ways when HAVING is present. The behavior depends on the 'totals_mode' setting.\nBy default, \ntotals_mode = 'before_having'\n. In this case, 'totals' is calculated across all rows, including the ones that don't pass through HAVING and 'max_rows_to_group_by'.\n\n\nThe other alternatives include only the rows that pass through HAVING in 'totals', and behave differently with the setting \nmax_rows_to_group_by\n and \ngroup_by_overflow_mode = 'any'\n.\n\n\nafter_having_exclusive\n \u2013 Don't include rows that didn't pass through \nmax_rows_to_group_by\n. In other words, 'totals' will have less than or the same number of rows as it would if \nmax_rows_to_group_by\n were omitted.\n\n\nafter_having_inclusive\n \u2013 Include all the rows that didn't pass through 'max_rows_to_group_by' in 'totals'. In other words, 'totals' will have more than or the same number of rows as it would if \nmax_rows_to_group_by\n were omitted.\n\n\nafter_having_auto\n \u2013 Count the number of rows that passed through HAVING. If it is more than a certain amount (by default, 50%), include all the rows that didn't pass through 'max_rows_to_group_by' in 'totals'. Otherwise, do not include them.\n\n\ntotals_auto_threshold\n \u2013 By default, 0.5. The coefficient for \nafter_having_auto\n.\n\n\nIf \nmax_rows_to_group_by\n and \ngroup_by_overflow_mode = 'any'\n are not used, all variations of \nafter_having\n are the same, and you can use any of them (for example, \nafter_having_auto\n).\n\n\nYou can use WITH TOTALS in subqueries, including subqueries in the JOIN clause (in this case, the respective total values are combined).\n\n\nGROUP BY in external memory\n\n\nYou can enable dumping temporary data to the disk to restrict memory usage during GROUP BY.\nThe \nmax_bytes_before_external_group_by\n setting determines the threshold RAM consumption for dumping GROUP BY temporary data to the file system. If set to 0 (the default), it is disabled.\n\n\nWhen using \nmax_bytes_before_external_group_by\n, we recommend that you set max_memory_usage about twice as high. This is necessary because there are two stages to aggregation: reading the date and forming intermediate data (1) and merging the intermediate data (2). Dumping data to the file system can only occur during stage 1. If the temporary data wasn't dumped, then stage 2 might require up to the same amount of memory as in stage 1.\n\n\nFor example, if \nmax_memory_usage\n was set to 10000000000 and you want to use external aggregation, it makes sense to set \nmax_bytes_before_external_group_by\n to 10000000000, and max_memory_usage to 20000000000. When external aggregation is triggered (if there was at least one dump of temporary data), maximum consumption of RAM is only slightly more than \nmax_bytes_before_external_group_by\n.\n\n\nWith distributed query processing, external aggregation is performed on remote servers. In order for the requestor server to use only a small amount of RAM, set \ndistributed_aggregation_memory_efficient\n  to 1.\n\n\nWhen merging data flushed to the disk, as well as when merging results from remote servers when the \ndistributed_aggregation_memory_efficient\n setting is enabled, consumes up to 1/256 * the number of threads from the total amount of RAM.\n\n\nWhen external aggregation is enabled, if there was less than \nmax_bytes_before_external_group_by\n  of data (i.e. data was not flushed), the query runs just as fast as without external aggregation. If any temporary data was flushed, the run time will be several times longer (approximately three times).\n\n\nIf you have an ORDER BY with a small LIMIT after GROUP BY, then the ORDER BY CLAUSE will not use significant amounts of RAM.\nBut if the ORDER BY doesn't have LIMIT, don't forget to enable external sorting (\nmax_bytes_before_external_sort\n).\n\n\nLIMIT N BY clause\n\n\nLIMIT N BY COLUMNS selects the top N rows for each group of COLUMNS. LIMIT N BY is not related to LIMIT; they can both be used in the same query. The key for LIMIT N BY can contain any number of columns or expressions.\n\n\nExample:\n\n\nSELECT\n\n    \ndomainWithoutWWW\n(\nURL\n)\n \nAS\n \ndomain\n,\n\n    \ndomainWithoutWWW\n(\nREFERRER_URL\n)\n \nAS\n \nreferrer\n,\n\n    \ndevice_type\n,\n\n    \ncount\n()\n \ncnt\n\n\nFROM\n \nhits\n\n\nGROUP\n \nBY\n \ndomain\n,\n \nreferrer\n,\n \ndevice_type\n\n\nORDER\n \nBY\n \ncnt\n \nDESC\n\n\nLIMIT\n \n5\n \nBY\n \ndomain\n,\n \ndevice_type\n\n\nLIMIT\n \n100\n\n\n\n\n\n\nThe query will select the top 5 referrers for each \ndomain, device_type\n pair, but not more than 100 rows (\nLIMIT n BY + LIMIT\n).\n\n\nHAVING clause\n\n\nAllows filtering the result received after GROUP BY, similar to the WHERE clause.\nWHERE and HAVING differ in that WHERE is performed before aggregation (GROUP BY), while HAVING is performed after it.\nIf aggregation is not performed, HAVING can't be used.\n\n\n\n\nORDER BY clause\n\n\nThe ORDER BY clause contains a list of expressions, which can each be assigned DESC or ASC (the sorting direction). If the direction is not specified, ASC is assumed. ASC is sorted in ascending order, and DESC in descending order. The sorting direction applies to a single expression, not to the entire list. Example: \nORDER BY Visits DESC, SearchPhrase\n\n\nFor sorting by String values, you can specify collation (comparison). Example: \nORDER BY SearchPhrase COLLATE 'tr'\n - for sorting by keyword in ascending order, using the Turkish alphabet, case insensitive, assuming that strings are UTF-8 encoded. COLLATE can be specified or not for each expression in ORDER BY independently. If ASC or DESC is specified, COLLATE is specified after it. When using COLLATE, sorting is always case-insensitive.\n\n\nWe only recommend using COLLATE for final sorting of a small number of rows, since sorting with COLLATE is less efficient than normal sorting by bytes.\n\n\nRows that have identical values for the list of sorting expressions are output in an arbitrary order, which can also be nondeterministic (different each time).\nIf the ORDER BY clause is omitted, the order of the rows is also undefined, and may be nondeterministic as well.\n\n\nWhen floating point numbers are sorted, NaNs are separate from the other values. Regardless of the sorting order, NaNs come at the end. In other words, for ascending sorting they are placed as if they are larger than all the other numbers, while for descending sorting they are placed as if they are smaller than the rest.\n\n\nLess RAM is used if a small enough LIMIT is specified in addition to ORDER BY. Otherwise, the amount of memory spent is proportional to the volume of data for sorting. For distributed query processing, if GROUP BY is omitted, sorting is partially done on remote servers, and the results are merged on the requestor server. This means that for distributed sorting, the volume of data to sort can be greater than the amount of memory on a single server.\n\n\nIf there is not enough RAM, it is possible to perform sorting in external memory (creating temporary files on a disk). Use the setting \nmax_bytes_before_external_sort\n for this purpose. If it is set to 0 (the default), external sorting is disabled. If it is enabled, when the volume of data to sort reaches the specified number of bytes, the collected data is sorted and dumped into a temporary file. After all data is read, all the sorted files are merged and the results are output. Files are written to the /var/lib/clickhouse/tmp/ directory in the config (by default, but you can use the 'tmp_path' parameter to change this setting).\n\n\nRunning a query may use more memory than 'max_bytes_before_external_sort'. For this reason, this setting must have a value significantly smaller than 'max_memory_usage'. As an example, if your server has 128 GB of RAM and you need to run a single query, set 'max_memory_usage' to 100 GB, and 'max_bytes_before_external_sort' to 80 GB.\n\n\nExternal sorting works much less effectively than sorting in RAM.\n\n\nSELECT clause\n\n\nThe expressions specified in the SELECT clause are analyzed after the calculations for all the clauses listed above are completed.\nMore specifically, expressions are analyzed that are above the aggregate functions, if there are any aggregate functions.\nThe aggregate functions and everything below them are calculated during aggregation (GROUP BY).\nThese expressions work as if they are applied to separate rows in the result.\n\n\nDISTINCT clause\n\n\nIf DISTINCT is specified, only a single row will remain out of all the sets of fully matching rows in the result.\nThe result will be the same as if GROUP BY were specified across all the fields specified in SELECT without aggregate functions. But there are several differences from GROUP BY:\n\n\n\n\nDISTINCT can be applied together with GROUP BY.\n\n\nWhen ORDER BY is omitted and LIMIT is defined, the query stops running immediately after the required number of different rows has been read.\n\n\nData blocks are output as they are processed, without waiting for the entire query to finish running.\n\n\n\n\nDISTINCT is not supported if SELECT has at least one array column.\n\n\nLIMIT clause\n\n\nLIMIT m allows you to select the first 'm' rows from the result.\nLIMIT n, m allows you to select the first 'm' rows from the result after skipping the first 'n' rows.\n\n\n'n' and 'm' must be non-negative integers.\n\n\nIf there isn't an ORDER BY clause that explicitly sorts results, the result may be arbitrary and nondeterministic.\n\n\nUNION ALL clause\n\n\nYou can use UNION ALL to combine any number of queries. Example:\n\n\nSELECT\n \nCounterID\n,\n \n1\n \nAS\n \ntable\n,\n \ntoInt64\n(\ncount\n())\n \nAS\n \nc\n\n    \nFROM\n \ntest\n.\nhits\n\n    \nGROUP\n \nBY\n \nCounterID\n\n\n\nUNION\n \nALL\n\n\n\nSELECT\n \nCounterID\n,\n \n2\n \nAS\n \ntable\n,\n \nsum\n(\nSign\n)\n \nAS\n \nc\n\n    \nFROM\n \ntest\n.\nvisits\n\n    \nGROUP\n \nBY\n \nCounterID\n\n    \nHAVING\n \nc\n \n \n0\n\n\n\n\n\n\nOnly UNION ALL is supported. The regular UNION (UNION DISTINCT) is not supported. If you need UNION DISTINCT, you can write SELECT DISTINCT from a subquery containing UNION ALL.\n\n\nQueries that are parts of UNION ALL can be run simultaneously, and their results can be mixed together.\n\n\nThe structure of results (the number and type of columns) must match for the queries. But the column names can differ. In this case, the column names for the final result will be taken from the first query.\n\n\nQueries that are parts of UNION ALL can't be enclosed in brackets. ORDER BY and LIMIT are applied to separate queries, not to the final result. If you need to apply a conversion to the final result, you can put all the queries with UNION ALL in a subquery in the FROM clause.\n\n\nINTO OUTFILE clause\n\n\nAdd the \nINTO OUTFILE filename\n clause (where filename is a string literal) to redirect query output to the specified file.\nIn contrast to MySQL, the file is created on the client side. The query will fail if a file with the same filename already exists.\nThis functionality is available in the command-line client and clickhouse-local (a query sent via HTTP interface will fail).\n\n\nThe default output format is TabSeparated (the same as in the command-line client batch mode).\n\n\nFORMAT clause\n\n\nSpecify 'FORMAT format' to get data in any specified format.\nYou can use this for convenience, or for creating dumps.\nFor more information, see the section \"Formats\".\nIf the FORMAT clause is omitted, the default format is used, which depends on both the settings and the interface used for accessing the DB. For the HTTP interface and the command-line client in batch mode, the default format is TabSeparated. For the command-line client in interactive mode, the default format is PrettyCompact (it has attractive and compact tables).\n\n\nWhen using the command-line client, data is passed to the client in an internal efficient format. The client independently interprets the FORMAT clause of the query and formats the data itself (thus relieving the network and the server from the load).\n\n\nIN operators\n\n\nThe \nIN\n, \nNOT IN\n, \nGLOBAL IN\n, and \nGLOBAL NOT IN\n operators are covered separately, since their functionality is quite rich.\n\n\nThe left side of the operator is either a single column or a tuple.\n\n\nExamples:\n\n\nSELECT\n \nUserID\n \nIN\n \n(\n123\n,\n \n456\n)\n \nFROM\n \n...\n\n\nSELECT\n \n(\nCounterID\n,\n \nUserID\n)\n \nIN\n \n((\n34\n,\n \n123\n),\n \n(\n101500\n,\n \n456\n))\n \nFROM\n \n...\n\n\n\n\n\n\nIf the left side is a single column that is in the index, and the right side is a set of constants, the system uses the index for processing the query.\n\n\nDon't list too many values explicitly (i.e. millions). If a data set is large, put it in a temporary table (for example, see the section \"External data for query processing\"), then use a subquery.\n\n\nThe right side of the operator can be a set of constant expressions, a set of tuples with constant expressions (shown in the examples above), or the name of a database table or SELECT subquery in brackets.\n\n\nIf the right side of the operator is the name of a table (for example, \nUserID IN users\n), this is equivalent to the subquery \nUserID IN (SELECT * FROM users)\n. Use this when working with external data that is sent along with the query. For example, the query can be sent together with a set of user IDs loaded to the 'users' temporary table, which should be filtered.\n\n\nIf the right side of the operator is a table name that has the Set engine (a prepared data set that is always in RAM), the data set will not be created over again for each query.\n\n\nThe subquery may specify more than one column for filtering tuples.\nExample:\n\n\nSELECT\n \n(\nCounterID\n,\n \nUserID\n)\n \nIN\n \n(\nSELECT\n \nCounterID\n,\n \nUserID\n \nFROM\n \n...)\n \nFROM\n \n...\n\n\n\n\n\n\nThe columns to the left and right of the IN operator should have the same type.\n\n\nThe IN operator and subquery may occur in any part of the query, including in aggregate functions and lambda functions.\nExample:\n\n\nSELECT\n\n    \nEventDate\n,\n\n    \navg\n(\nUserID\n \nIN\n\n    \n(\n\n        \nSELECT\n \nUserID\n\n        \nFROM\n \ntest\n.\nhits\n\n        \nWHERE\n \nEventDate\n \n=\n \ntoDate\n(\n2014-03-17\n)\n\n    \n))\n \nAS\n \nratio\n\n\nFROM\n \ntest\n.\nhits\n\n\nGROUP\n \nBY\n \nEventDate\n\n\nORDER\n \nBY\n \nEventDate\n \nASC\n\n\n\n\n\n\n\u250c\u2500\u2500EventDate\u2500\u252c\u2500\u2500\u2500\u2500ratio\u2500\u2510\n\u2502 2014-03-17 \u2502        1 \u2502\n\u2502 2014-03-18 \u2502 0.807696 \u2502\n\u2502 2014-03-19 \u2502 0.755406 \u2502\n\u2502 2014-03-20 \u2502 0.723218 \u2502\n\u2502 2014-03-21 \u2502 0.697021 \u2502\n\u2502 2014-03-22 \u2502 0.647851 \u2502\n\u2502 2014-03-23 \u2502 0.648416 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n\n\nFor each day after March 17th, count the percentage of pageviews made by users who visited the site on March 17th.\nA subquery in the IN clause is always run just one time on a single server. There are no dependent subqueries.\n\n\n\n\nDistributed subqueries\n\n\nThere are two options for IN-s with subqueries (similar to JOINs): normal \nIN\n  / \nOIN\n  and \nIN GLOBAL\n  / \nGLOBAL JOIN\n. They differ in how they are run for distributed query processing.\n\n\n\n\nRemember that the algorithms described below may work differently depending on the [settings](#settings-distributed_product_mode) `distributed_product_mode` setting.\n\n\n\n\n\nWhen using the regular IN, the query is sent to remote servers, and each of them runs the subqueries in the \nIN\n or \nJOIN\n clause.\n\n\nWhen using \nGLOBAL IN\n  / \nGLOBAL JOINs\n, first all the subqueries are run for \nGLOBAL IN\n  / \nGLOBAL JOINs\n, and the results are collected in temporary tables. Then the temporary tables are sent to each remote server, where the queries are run using this temporary data.\n\n\nFor a non-distributed query, use the regular \nIN\n / \nJOIN\n.\n\n\nBe careful when using subqueries in the  \nIN\n / \nJOIN\n clauses for distributed query processing.\n\n\nLet's look at some examples. Assume that each server in the cluster has a normal \nlocal_table\n. Each server also has a \ndistributed_table\n table with the \nDistributed\n type, which looks at all the servers in the cluster.\n\n\nFor a query to the \ndistributed_table\n, the query will be sent to all the remote servers and run on them using the \nlocal_table\n.\n\n\nFor example, the query\n\n\nSELECT\n \nuniq\n(\nUserID\n)\n \nFROM\n \ndistributed_table\n\n\n\n\n\n\nwill be sent to all remote servers as\n\n\nSELECT\n \nuniq\n(\nUserID\n)\n \nFROM\n \nlocal_table\n\n\n\n\n\n\nand run on each of them in parallel, until it reaches the stage where intermediate results can be combined. Then the intermediate results will be returned to the requestor server and merged on it, and the final result will be sent to the client.\n\n\nNow let's examine a query with IN:\n\n\nSELECT\n \nuniq\n(\nUserID\n)\n \nFROM\n \ndistributed_table\n \nWHERE\n \nCounterID\n \n=\n \n101500\n \nAND\n \nUserID\n \nIN\n \n(\nSELECT\n \nUserID\n \nFROM\n \nlocal_table\n \nWHERE\n \nCounterID\n \n=\n \n34\n)\n\n\n\n\n\n\n\n\nCalculation of the intersection of audiences of two sites.\n\n\n\n\nThis query will be sent to all remote servers as\n\n\nSELECT\n \nuniq\n(\nUserID\n)\n \nFROM\n \nlocal_table\n \nWHERE\n \nCounterID\n \n=\n \n101500\n \nAND\n \nUserID\n \nIN\n \n(\nSELECT\n \nUserID\n \nFROM\n \nlocal_table\n \nWHERE\n \nCounterID\n \n=\n \n34\n)\n\n\n\n\n\n\nIn other words, the data set in the IN clause will be collected on each server independently, only across the data that is stored locally on each of the servers.\n\n\nThis will work correctly and optimally if you are prepared for this case and have spread data across the cluster servers such that the data for a single UserID resides entirely on a single server. In this case, all the necessary data will be available locally on each server. Otherwise, the result will be inaccurate. We refer to this variation of the query as \"local IN\".\n\n\nTo correct how the query works when data is spread randomly across the cluster servers, you could specify \ndistributed_table\n inside a subquery. The query would look like this:\n\n\nSELECT\n \nuniq\n(\nUserID\n)\n \nFROM\n \ndistributed_table\n \nWHERE\n \nCounterID\n \n=\n \n101500\n \nAND\n \nUserID\n \nIN\n \n(\nSELECT\n \nUserID\n \nFROM\n \ndistributed_table\n \nWHERE\n \nCounterID\n \n=\n \n34\n)\n\n\n\n\n\n\nThis query will be sent to all remote servers as\n\n\nSELECT\n \nuniq\n(\nUserID\n)\n \nFROM\n \nlocal_table\n \nWHERE\n \nCounterID\n \n=\n \n101500\n \nAND\n \nUserID\n \nIN\n \n(\nSELECT\n \nUserID\n \nFROM\n \ndistributed_table\n \nWHERE\n \nCounterID\n \n=\n \n34\n)\n\n\n\n\n\n\nThe subquery will begin running on each remote server. Since the subquery uses a distributed table, the subquery that is on each remote server will be resent to every remote server as\n\n\nSELECT\n \nUserID\n \nFROM\n \nlocal_table\n \nWHERE\n \nCounterID\n \n=\n \n34\n\n\n\n\n\n\nFor example, if you have a cluster of 100 servers, executing the entire query will require 10,000 elementary requests, which is generally considered unacceptable.\n\n\nIn such cases, you should always use GLOBAL IN instead of IN. Let's look at how it works for the query\n\n\nSELECT\n \nuniq\n(\nUserID\n)\n \nFROM\n \ndistributed_table\n \nWHERE\n \nCounterID\n \n=\n \n101500\n \nAND\n \nUserID\n \nGLOBAL\n \nIN\n \n(\nSELECT\n \nUserID\n \nFROM\n \ndistributed_table\n \nWHERE\n \nCounterID\n \n=\n \n34\n)\n\n\n\n\n\n\nThe requestor server will run the subquery\n\n\nSELECT\n \nUserID\n \nFROM\n \ndistributed_table\n \nWHERE\n \nCounterID\n \n=\n \n34\n\n\n\n\n\n\nand the result will be put in a temporary table in RAM. Then the request will be sent to each remote server as\n\n\nSELECT\n \nuniq\n(\nUserID\n)\n \nFROM\n \nlocal_table\n \nWHERE\n \nCounterID\n \n=\n \n101500\n \nAND\n \nUserID\n \nGLOBAL\n \nIN\n \n_data1\n\n\n\n\n\n\nand the temporary table \n_data1\n will be sent to every remote server with the query (the name of the temporary table is implementation-defined).\n\n\nThis is more optimal than using the normal IN. However, keep the following points in mind:\n\n\n\n\nWhen creating a temporary table, data is not made unique. To reduce the volume of data transmitted over the network, specify DISTINCT in the subquery. (You don't need to do this for a normal IN.)\n\n\nThe temporary table will be sent to all the remote servers. Transmission does not account for network topology. For example, if 10 remote servers reside in a datacenter that is very remote in relation to the requestor server, the data will be sent 10 times over the channel to the remote datacenter. Try to avoid large data sets when using GLOBAL IN.\n\n\nWhen transmitting data to remote servers, restrictions on network bandwidth are not configurable. You might overload the network.\n\n\nTry to distribute data across servers so that you don't need to use GLOBAL IN on a regular basis.\n\n\nIf you need to use GLOBAL IN often, plan the location of the ClickHouse cluster so that a single group of replicas resides in no more than one data center with a fast network between them, so that a query can be processed entirely within a single data center.\n\n\n\n\nIt also makes sense to specify a local table in the \nGLOBAL IN\n clause, in case this local table is only available on the requestor server and you want to use data from it on remote servers.\n\n\nExtreme values\n\n\nIn addition to results, you can also get minimum and maximum values for the results columns. To do this, set the \nextremes\n setting to 1. Minimums and maximums are calculated for numeric types, dates, and dates with times. For other columns, the default values are output.\n\n\nAn extra two rows are calculated \u2013 the minimums and maximums, respectively. These extra two rows are output in JSON*, TabSeparated*, and Pretty* formats, separate from the other rows. They are not output for other formats.\n\n\nIn JSON* formats, the extreme values are output in a separate 'extremes' field. In TabSeparated* formats, the row comes after the main result, and after 'totals' if present. It is preceded by an empty row (after the other data). In Pretty* formats, the row is output as a separate table after the main result, and after 'totals' if present.\n\n\nExtreme values are calculated for rows that have passed through LIMIT. However, when using 'LIMIT offset, size', the rows before 'offset' are included in 'extremes'. In stream requests, the result may also include a small number of rows that passed through LIMIT.\n\n\nNotes\n\n\nThe \nGROUP BY\n and \nORDER BY\n clauses do not support positional arguments. This contradicts MySQL, but conforms to standard SQL.\nFor example, \nGROUP BY 1, 2\n will be interpreted as grouping by constants (i.e. aggregation of all rows into one).\n\n\nYou can use synonyms (\nAS\n aliases) in any part of a query.\n\n\nYou can put an asterisk in any part of a query instead of an expression. When the query is analyzed, the asterisk is expanded to a list of all table columns (excluding the \nMATERIALIZED\n and \nALIAS\n columns). There are only a few cases when using an asterisk is justified:\n\n\n\n\nWhen creating a table dump.\n\n\nFor tables containing just a few columns, such as system tables.\n\n\nFor getting information about what columns are in a table. In this case, set \nLIMIT 1\n. But it is better to use the \nDESC TABLE\n query.\n\n\nWhen there is strong filtration on a small number of columns using \nPREWHERE\n.\n\n\nIn subqueries (since columns that aren't needed for the external query are excluded from subqueries).\n\n\n\n\nIn all other cases, we don't recommend using the asterisk, since it only gives you the drawbacks of a columnar DBMS instead of the advantages. In other words using the asterisk is not recommended.\n\n\nKILL QUERY\n\n\nKILL\n \nQUERY\n\n  \nWHERE\n \nwhere\n \nexpression\n \nto\n \nSELECT\n \nFROM\n \nsystem\n.\nprocesses\n \nquery\n\n  \n[\nSYNC\n|\nASYNC\n|\nTEST\n]\n\n  \n[\nFORMAT\n \nformat\n]\n\n\n\n\n\n\nAttempts to forcibly terminate the currently running queries.\nThe queries to terminate are selected from the system.processes table using the criteria defined in the \nWHERE\n clause of the \nKILL\n query.\n\n\nExamples:\n\n\n-- Forcibly terminates all queries with the specified query_id:\n\n\nKILL\n \nQUERY\n \nWHERE\n \nquery_id\n=\n2-857d-4a57-9ee0-327da5d60a90\n\n\n\n-- Synchronously terminates all queries run by \nusername\n:\n\n\nKILL\n \nQUERY\n \nWHERE\n \nuser\n=\nusername\n \nSYNC\n\n\n\n\n\n\nRead-only users can only stop their own queries.\n\n\nBy default, the asynchronous version of queries is used (\nASYNC\n), which doesn't wait for confirmation that queries have stopped.\n\n\nThe synchronous version (\nSYNC\n) waits for all queries to stop and displays information about each process as it stops.\nThe response contains the \nkill_status\n column, which can take the following values:\n\n\n\n\n'finished' \u2013 The query was terminated successfully.\n\n\n'waiting' \u2013 Waiting for the query to end after sending it a signal to terminate.\n\n\nThe other values \u200b\u200bexplain why the query can't be stopped.\n\n\n\n\nA test query (\nTEST\n) only checks the user's rights and displays a list of queries to stop.\n\n\nSyntax\n\n\nThere are two types of parsers in the system: the full SQL parser (a recursive descent parser), and the data format parser (a fast stream parser).\nIn all cases except the INSERT query, only the full SQL parser is used.\nThe INSERT query uses both parsers:\n\n\nINSERT\n \nINTO\n \nt\n \nVALUES\n \n(\n1\n,\n \nHello, world\n),\n \n(\n2\n,\n \nabc\n),\n \n(\n3\n,\n \ndef\n)\n\n\n\n\n\n\nThe \nINSERT INTO t VALUES\n fragment is parsed by the full parser, and the data \n(1, 'Hello, world'), (2, 'abc'), (3, 'def')\n is parsed by the fast stream parser.\nData can have any format. When a query is received, the server calculates no more than \nmax_query_size\n bytes of the request in RAM (by default, 1 MB), and the rest is stream parsed.\nThis means the system doesn't have problems with large INSERT queries, like MySQL does.\n\n\nWhen using the Values format in an INSERT query, it may seem that data is parsed the same as expressions in a SELECT query, but this is not true. The Values format is much more limited.\n\n\nNext we will cover the full parser. For more information about format parsers, see the section \"Formats\".\n\n\nSpaces\n\n\nThere may be any number of space symbols between syntactical constructions (including the beginning and end of a query). Space symbols include the space, tab, line feed, CR, and form feed.\n\n\nComments\n\n\nSQL-style and C-style comments are supported.\nSQL-style comments: from \n--\n to the end of the line. The space after \n--\n can be omitted.\nComments in C-style: from \n/*\n  to \n*/\n. These comments can be multiline. Spaces are not required here, either.\n\n\nKeywords\n\n\nKeywords (such as \nSELECT\n) are not case-sensitive. Everything else (column names, functions, and so on), in contrast to standard SQL, is case-sensitive. Keywords are not reserved (they are just parsed as keywords in the corresponding context).\n\n\nIdentifiers\n\n\nIdentifiers (column names, functions, and data types) can be quoted or non-quoted.\nNon-quoted identifiers start with a Latin letter or underscore, and continue with a Latin letter, underscore, or number. In other words, they must match the regex \n^[a-zA-Z_][0-9a-zA-Z_]*$\n. Examples: \nx, _1, X_y__Z123_.\n\n\nQuoted identifiers are placed in reversed quotation marks \n`id`\n (the same as in MySQL), and can indicate any set of bytes (non-empty). In addition, symbols (for example, the reverse quotation mark) inside this type of identifier can be backslash-escaped. Escaping rules are the same as for string literals (see below).\nWe recommend using identifiers that do not need to be quoted.\n\n\nLiterals\n\n\nThere are numeric literals, string literals, and compound literals.\n\n\nNumeric literals\n\n\nA numeric literal tries to be parsed:\n\n\n\n\nFirst as a 64-bit signed number, using the 'strtoull' function.\n\n\nIf unsuccessful, as a 64-bit unsigned number, using the 'strtoll' function.\n\n\nIf unsuccessful, as a floating-point number using the 'strtod' function.\n\n\nOtherwise, an error is returned.\n\n\n\n\nThe corresponding value will have the smallest type that the value fits in.\nFor example, 1 is parsed as UInt8, but 256 is parsed as UInt16. For more information, see \"Data types\".\n\n\nExamples: \n1\n, \n18446744073709551615\n, \n0xDEADBEEF\n, \n01\n, \n0.1\n, \n1e100\n, \n-1e-100\n, \ninf\n, \nnan\n.\n\n\nString literals\n\n\nOnly string literals in single quotes are supported. The enclosed characters can be backslash-escaped. The following escape sequences have a corresponding special value: \n\\b\n, \n\\f\n, \n\\r\n, \n\\n\n, \n\\t\n, \n\\0\n, \n\\a\n, \n\\v\n, \n\\xHH\n. In all other cases, escape sequences in the format \n\\c\n, where \"c\" is any character, are converted to \"c\". This means that you can use the sequences \n\\'\nand\n\\\\\n. The value will have the String type.\n\n\nThe minimum set of characters that you need to escape in string literals: \n'\n and \n\\\n.\n\n\nCompound literals\n\n\nConstructions are supported for arrays: \n[1, 2, 3]\n and tuples: \n(1, 'Hello, world!', 2)\n..\nActually, these are not literals, but expressions with the array creation operator and the tuple creation operator, respectively.\nFor more information, see the section \"Operators2\".\nAn array must consist of at least one item, and a tuple must have at least two items.\nTuples have a special purpose for use in the IN clause of a SELECT query. Tuples can be obtained as the result of a query, but they can't be saved to a database (with the exception of Memory-type tables).\n\n\nFunctions\n\n\nFunctions are written like an identifier with a list of arguments (possibly empty) in brackets. In contrast to standard SQL, the brackets are required, even for an empty arguments list. Example: \nnow()\n.\nThere are regular and aggregate functions (see the section \"Aggregate functions\"). Some aggregate functions can contain two lists of arguments in brackets. Example: \nquantile (0.9) (x)\n. These aggregate functions are called \"parametric\" functions, and the arguments in the first list are called \"parameters\". The syntax of aggregate functions without parameters is the same as for regular functions.\n\n\nOperators\n\n\nOperators are converted to their corresponding functions during query parsing, taking their priority and associativity into account.\nFor example, the expression \n1 + 2 * 3 + 4\n is transformed to \nplus(plus(1, multiply(2, 3)), 4)\n.\nFor more information, see the section \"Operators\" below.\n\n\nData types and database table engines\n\n\nData types and table engines in the \nCREATE\n query are written the same way as identifiers or functions. In other words, they may or may not contain an arguments list in brackets. For more information, see the sections \"Data types,\" \"Table engines,\" and \"CREATE\".\n\n\nSynonyms\n\n\nIn the SELECT query, expressions can specify synonyms using the AS keyword. Any expression is placed to the left of AS. The identifier name for the synonym is placed to the right of AS. As opposed to standard SQL, synonyms are not only declared on the top level of expressions:\n\n\nSELECT\n \n(\n1\n \nAS\n \nn\n)\n \n+\n \n2\n,\n \nn\n\n\n\n\n\n\nIn contrast to standard SQL, synonyms can be used in all parts of a query, not just \nSELECT\n.\n\n\nAsterisk\n\n\nIn a \nSELECT\n query, an asterisk can replace the expression. For more information, see the section \"SELECT\".\n\n\nExpressions\n\n\nAn expression is a function, identifier, literal, application of an operator, expression in brackets, subquery, or asterisk. It can also contain a synonym.\nA list of expressions is one or more expressions separated by commas.\nFunctions and operators, in turn, can have expressions as arguments.\n\n\nTable engines\n\n\nThe table engine (type of table) determines:\n\n\n\n\nHow and where data is stored: where to write it to, and where to read it from.\n\n\nWhich queries are supported, and how.\n\n\nConcurrent data access.\n\n\nUse of indexes, if present.\n\n\nWhether multithreaded request execution is possible.\n\n\nData replication.\n\n\n\n\nWhen reading data, the engine is only required to extract the necessary set of columns. However, in some cases, the query may be partially processed inside the table engine.\n\n\nNote that for most serious tasks, you should use engines from the \nMergeTree\n family.\n\n\nTinyLog\n\n\nThe simplest table engine, which stores data on a disk.\nEach column is stored in a separate compressed file.\nWhen writing, data is appended to the end of files.\n\n\nConcurrent data access is not restricted in any way:\n\n\n\n\nIf you are simultaneously reading from a table and writing to it in a different query, the read operation will complete with an error.\n\n\nIf you are writing to a table in multiple queries simultaneously, the data will be broken.\n\n\n\n\nThe typical way to use this table is write-once: first just write the data one time, then read it as many times as needed.\nQueries are executed in a single stream. In other words, this engine is intended for relatively small tables (recommended up to 1,000,000 rows).\nIt makes sense to use this table engine if you have many small tables, since it is simpler than the Log engine (fewer files need to be opened).\nThe situation when you have a large number of small tables guarantees poor productivity, but may already be used when working with another DBMS, and you may find it easier to switch to using TinyLog types of tables.\n\nIndexes are not supported.\n\n\nIn Yandex.Metrica, TinyLog tables are used for intermediary data that is processed in small batches.\n\n\nLog\n\n\nLog differs from TinyLog in that a small file of \"marks\" resides with the column files. These marks are written on every data block and contain offsets that indicate where to start reading the file in order to skip the specified number of rows. This makes it possible to read table data in multiple threads.\nFor concurrent data access, the read operations can be performed simultaneously, while write operations block reads and each other.\nThe Log engine does not support indexes. Similarly, if writing to a table failed, the table is broken, and reading from it returns an error. The Log engine is appropriate for temporary data, write-once tables, and for testing or demonstration purposes.\n\n\nMemory\n\n\nThe Memory engine stores data in RAM, in uncompressed form. Data is stored in exactly the same form as it is received when read. In other words, reading from this table is completely free.\nConcurrent data access is synchronized. Locks are short: read and write operations don't block each other.\nIndexes are not supported. Reading is parallelized.\nMaximal productivity (over 10 GB/sec) is reached on simple queries, because there is no reading from the disk, decompressing, or deserializing data. (We should note that in many cases, the productivity of the MergeTree engine is almost as high.)\nWhen restarting a server, data disappears from the table and the table becomes empty.\nNormally, using this table engine is not justified. However, it can be used for tests, and for tasks where maximum speed is required on a relatively small number of rows (up to approximately 100,000,000).\n\n\nThe Memory engine is used by the system for temporary tables with external query data (see the section \"External data for processing a query\"), and for implementing GLOBAL IN (see the section \"IN operators\").\n\n\n\n\nMergeTree\n\n\nThe MergeTree engine supports an index by primary key and by date, and provides the possibility to update data in real time.\nThis is the most advanced table engine in ClickHouse. Don't confuse it with the Merge engine.\n\n\nThe engine accepts parameters: the name of a Date type column containing the date, a sampling expression (optional), a tuple that defines the table's primary key, and the index granularity.\n\n\nExample without sampling support.\n\n\nMergeTree(EventDate, (CounterID, EventDate), 8192)\n\n\n\n\n\nExample with sampling support.\n\n\nMergeTree(EventDate, intHash32(UserID), (CounterID, EventDate, intHash32(UserID)), 8192)\n\n\n\n\n\nA MergeTree table must have a separate column containing the date. Here, it is the EventDate column. The date column must have the 'Date' type (not 'DateTime').\n\n\nThe primary key may be a tuple from any expressions (usually this is just a tuple of columns), or a single expression.\n\n\nThe sampling expression (optional) can be any expression. It must also be present in the primary key. The example uses a hash of user IDs to pseudo-randomly disperse data in the table for each CounterID and EventDate. In other words, when using the SAMPLE clause in a query, you get an evenly pseudo-random sample of data for a subset of users.\n\n\nThe table is implemented as a set of parts. Each part is sorted by the primary key. In addition, each part has the minimum and maximum date assigned. When inserting in the table, a new sorted part is created. The merge process is periodically initiated in the background. When merging, several parts are selected (usually the smallest ones) and then merged into one large sorted part.\n\n\nIn other words, incremental sorting occurs when inserting to the table. Merging is implemented so that the table always consists of a small number of sorted parts, and the merge itself doesn't do too much work.\n\n\nDuring insertion, data belonging to different months is separated into different parts. The parts that correspond to different months are never combined. The purpose of this is to provide local data modification (for ease in backups).\n\n\nParts are combined up to a certain size threshold, so there aren't any merges that are too long.\n\n\nFor each part, an index file is also written. The index file contains the primary key value for every 'index_granularity' row in the table. In other words, this is an abbreviated index of sorted data.\n\n\nFor columns, \"marks\" are also written to each 'index_granularity' row so that data can be read in a specific range.\n\n\nWhen reading from a table, the SELECT query is analyzed for whether indexes can be used.\nAn index can be used if the WHERE or PREWHERE clause has an expression (as one of the conjunction elements, or entirely) that represents an equality or inequality comparison operation, or if it has IN or LIKE with a fixed prefix on columns or expressions that are in the primary key or partitioning key, or on certain partially repetitive functions of these columns, or logical relationships of these expressions.\n\n\nThus, it is possible to quickly run queries on one or many ranges of the primary key. In this example, queries will be fast when run for a specific tracking tag; for a specific tag and date range; for a specific tag and date; for multiple tags with a date range, and so on.\n\n\nSELECT\n \ncount\n()\n \nFROM\n \ntable\n \nWHERE\n \nEventDate\n \n=\n \ntoDate\n(\nnow\n())\n \nAND\n \nCounterID\n \n=\n \n34\n\n\nSELECT\n \ncount\n()\n \nFROM\n \ntable\n \nWHERE\n \nEventDate\n \n=\n \ntoDate\n(\nnow\n())\n \nAND\n \n(\nCounterID\n \n=\n \n34\n \nOR\n \nCounterID\n \n=\n \n42\n)\n\n\nSELECT\n \ncount\n()\n \nFROM\n \ntable\n \nWHERE\n \n((\nEventDate\n \n=\n \ntoDate\n(\n2014-01-01\n)\n \nAND\n \nEventDate\n \n=\n \ntoDate\n(\n2014-01-31\n))\n \nOR\n \nEventDate\n \n=\n \ntoDate\n(\n2014-05-01\n))\n \nAND\n \nCounterID\n \nIN\n \n(\n101500\n,\n \n731962\n,\n \n160656\n)\n \nAND\n \n(\nCounterID\n \n=\n \n101500\n \nOR\n \nEventDate\n \n!=\n \ntoDate\n(\n2014-05-01\n))\n\n\n\n\n\n\nAll of these cases will use the index by date and by primary key. The index is used even for complex expressions. Reading from the table is organized so that using the index can't be slower than a full scan.\n\n\nIn this example, the index can't be used.\n\n\nSELECT\n \ncount\n()\n \nFROM\n \ntable\n \nWHERE\n \nCounterID\n \n=\n \n34\n \nOR\n \nURL\n \nLIKE\n \n%upyachka%\n\n\n\n\n\n\nTo check whether ClickHouse can use the index when executing the query, use the settings  \nforce_index_by_date\nand\nforce_primary_key\n.\n\n\nThe index by date only allows reading those parts that contain dates from the desired range. However, a data part may contain data for many dates (up to an entire month), while within a single part the data is ordered by the primary key, which might not contain the date as the first column. Because of this, using a query with only a date condition that does not specify the primary key prefix will cause more data to be read than for a single date.\n\n\nFor concurrent table access, we use multi-versioning. In other words, when a table is simultaneously read and updated, data is read from a set of parts that is current at the time of the query. There are no lengthy locks. Inserts do not get in the way of read operations.\n\n\nReading from a table is automatically parallelized.\n\n\nThe \nOPTIMIZE\n query is supported, which calls an extra merge step.\n\n\nYou can use a single large table and continually add data to it in small chunks \u2013 this is what MergeTree is intended for.\n\n\nData replication is possible for all types of tables in the MergeTree family (see the section \"Data replication\").\n\n\n\n\nCustom partitioning key\n\n\nStarting with version 1.1.54310, you can create tables in the MergeTree family with any partitioning expression (not only partitioning by month).\n\n\nThe partition key can be an expression from the table columns, or a tuple of such expressions (similar to the primary key). The partition key can be omitted. When creating a table, specify the partition key in the ENGINE description with the new syntax:\n\n\nENGINE [=] Name(...) [PARTITION BY expr] [ORDER BY expr] [SAMPLE BY expr] [SETTINGS name=value, ...]\n\n\n\n\n\nFor MergeTree tables, the partition expression is specified after \nPARTITION BY\n, the primary key after \nORDER BY\n, the sampling key after \nSAMPLE BY\n, and \nSETTINGS\n can specify \nindex_granularity\n (optional; the default value is 8192), as well as other settings from \nMergeTreeSettings.h\n. The other engine parameters are specified in parentheses after the engine name, as previously. Example:\n\n\nENGINE\n \n=\n \nReplicatedCollapsingMergeTree\n(\n/clickhouse/tables/name\n,\n \nreplica1\n,\n \nSign\n)\n\n    \nPARTITION\n \nBY\n \n(\ntoMonday\n(\nStartDate\n),\n \nEventType\n)\n\n    \nORDER\n \nBY\n \n(\nCounterID\n,\n \nStartDate\n,\n \nintHash32\n(\nUserID\n))\n\n    \nSAMPLE\n \nBY\n \nintHash32\n(\nUserID\n)\n\n\n\n\n\n\nThe traditional partitioning by month is expressed as \ntoYYYYMM(date_column)\n.\n\n\nYou can't convert an old-style table to a table with custom partitions (only via INSERT SELECT).\n\n\nAfter this table is created, merge will only work for data parts that have the same value for the partitioning expression. Note: This means that you shouldn't make overly granular partitions (more than about a thousand partitions), or SELECT will perform poorly.\n\n\nTo specify a partition in ALTER PARTITION commands, specify the value of the partition expression (or a tuple). Constants and constant expressions are supported. Example:\n\n\nALTER\n \nTABLE\n \ntable\n \nDROP\n \nPARTITION\n \n(\ntoMonday\n(\ntoday\n()),\n \n1\n)\n\n\n\n\n\n\nDeletes the partition for the current week with event type 1. The same is true for the OPTIMIZE query. To specify the only partition in a non-partitioned table, specify \nPARTITION tuple()\n.\n\n\nNote: For old-style tables, the partition can be specified either as a number \n201710\n or a string \n'201710'\n. The syntax for the new style of tables is stricter with types (similar to the parser for the VALUES input format). In addition, ALTER TABLE FREEZE PARTITION uses exact match for new-style tables (not prefix match).\n\n\nIn the \nsystem.parts\n table, the \npartition\n column specifies the value of the partition expression to use in ALTER queries (if quotas are removed). The \nname\n column should specify the name of the data part that has a new format.\n\n\nWas: \n20140317_20140323_2_2_0\n (minimum date - maximum date - minimum block number - maximum block number - level).\n\n\nNow: \n201403_2_2_0\n  (partition ID -  minimum block number - maximum block number - level).\n\n\nThe partition ID is its string identifier (human-readable, if possible) that is used for the names of data parts in the file system and in ZooKeeper. You can specify it in ALTER queries in place of the partition key. Example: Partition key \ntoYYYYMM(EventDate)\n; ALTER can specify either \nPARTITION 201710\n or \nPARTITION ID '201710'\n.\n\n\nFor more examples, see the tests \n00502_custom_partitioning_local\n and \n00502_custom_partitioning_replicated_zookeeper\n.\n\n\nReplacingMergeTree\n\n\nThis engine table differs from \nMergeTree\n in that it removes duplicate entries with the same primary key value.\n\n\nThe last optional parameter for the table engine is the version column. When merging, it reduces all rows with the same primary key value to just one row. If the version column is specified, it leaves the row with the highest version; otherwise, it leaves the last row.\n\n\nThe version column must have a type from the \nUInt\n family, \nDate\n, or \nDateTime\n.\n\n\nReplacingMergeTree\n(\nEventDate\n,\n \n(\nOrderID\n,\n \nEventDate\n,\n \nBannerID\n,\n \n...),\n \n8192\n,\n \nver\n)\n\n\n\n\n\n\nNote that data is only deduplicated during merges. Merging occurs in the background at an unknown time, so you can't plan for it. Some of the data may remain unprocessed. Although you can run an unscheduled merge using the OPTIMIZE query, don't count on using it, because the OPTIMIZE query will read and write a large amount of data.\n\n\nThus, \nReplacingMergeTree\n is suitable for clearing out duplicate data  in the background in order to save space, but it doesn't guarantee the absence of duplicates.\n\n\nThis engine is not used in Yandex.Metrica, but it has been applied in other Yandex projects.\n\n\nSummingMergeTree\n\n\nThis engine differs from \nMergeTree\n in that it totals data while merging.\n\n\nSummingMergeTree\n(\nEventDate\n,\n \n(\nOrderID\n,\n \nEventDate\n,\n \nBannerID\n,\n \n...),\n \n8192\n)\n\n\n\n\n\n\nThe columns to total are implicit. When merging, all rows with the same primary key value (in the example, OrderId, EventDate, BannerID, ...) have their values totaled in numeric columns that are not part of the primary key.\n\n\nSummingMergeTree\n(\nEventDate\n,\n \n(\nOrderID\n,\n \nEventDate\n,\n \nBannerID\n,\n \n...),\n \n8192\n,\n \n(\nShows\n,\n \nClicks\n,\n \nCost\n,\n \n...))\n\n\n\n\n\n\nThe columns to total are set explicitly (the last parameter \u2013 Shows, Clicks, Cost, ...). When merging, all rows with the same primary key value have their values totaled in the specified columns. The specified columns also must be numeric and must not be part of the primary key.\n\n\nIf the values were null in all of these columns, the row is deleted. (The exception is cases when the data part would not have any rows left in it.)\n\n\nFor the other rows that are not part of the primary key, the first value that occurs is selected when merging.\n\n\nSummation is not performed for a read operation. If it is necessary, write the appropriate GROUP BY.\n\n\nIn addition, a table can have nested data structures that are processed in a special way.\nIf the name of a nested table ends in 'Map' and it contains at least two columns that meet the following criteria:\n\n\n\n\nThe first table is numeric ((U)IntN, Date, DateTime), which we'll refer to as the 'key'.\n\n\nThe other columns are arithmetic ((U)IntN, Float32/64), which we'll refer to as '(values...)'. Then this nested table is interpreted as a mapping of key =\n (values...), and when merging its rows, the elements of two data sets are merged by 'key' with a summation of the corresponding (values...).\n\n\n\n\nExamples:\n\n\n[(1, 100)] + [(2, 150)] -\n [(1, 100), (2, 150)]\n[(1, 100)] + [(1, 150)] -\n [(1, 250)]\n[(1, 100)] + [(1, 150), (2, 150)] -\n [(1, 250), (2, 150)]\n[(1, 100), (2, 150)] + [(1, -100)] -\n [(2, 150)]\n\n\n\n\n\nFor aggregation of Map, use the function sumMap(key, value).\n\n\nFor nested data structures, you don't need to specify the columns as a list of columns for totaling.\n\n\nThis table engine is not particularly useful. Remember that when saving just pre-aggregated data, you lose some of the system's advantages.\n\n\nAggregatingMergeTree\n\n\nThis engine differs from \nMergeTree\n in that the merge combines the states of aggregate functions stored in the table for rows with the same primary key value.\n\n\nFor this to work, it uses the \nAggregateFunction\n data type, as well as \n-State\n and \n-Merge\n modifiers for aggregate functions. Let's examine it more closely.\n\n\nThere is an \nAggregateFunction\n data type. It is a parametric data type. As parameters, the name of the aggregate function is passed, then the types of its arguments.\n\n\nExamples:\n\n\nCREATE\n \nTABLE\n \nt\n\n\n(\n\n    \ncolumn1\n \nAggregateFunction\n(\nuniq\n,\n \nUInt64\n),\n\n    \ncolumn2\n \nAggregateFunction\n(\nanyIf\n,\n \nString\n,\n \nUInt8\n),\n\n    \ncolumn3\n \nAggregateFunction\n(\nquantiles\n(\n0\n.\n5\n,\n \n0\n.\n9\n),\n \nUInt64\n)\n\n\n)\n \nENGINE\n \n=\n \n...\n\n\n\n\n\n\nThis type of column stores the state of an aggregate function.\n\n\nTo get this type of value, use aggregate functions with the \nState\n suffix.\n\n\nExample:\n\nuniqState(UserID), quantilesState(0.5, 0.9)(SendTiming)\n\n\nIn contrast to the corresponding \nuniq\n and \nquantiles\n functions, these functions return the state, rather than the prepared value. In other words, they return an \nAggregateFunction\n type value.\n\n\nAn \nAggregateFunction\n type value can't be output in Pretty formats. In other formats, these types of values are output as implementation-specific binary data. The \nAggregateFunction\n type values are not intended for output or saving in a dump.\n\n\nThe only useful thing you can do with \nAggregateFunction\n type values is combine the states and get a result, which essentially means to finish aggregation. Aggregate functions with the 'Merge' suffix are used for this purpose.\nExample: \nuniqMerge(UserIDState), where UserIDState has the AggregateFunction\n type.\n\n\nIn other words, an aggregate function with the 'Merge' suffix takes a set of states, combines them, and returns the result.\nAs an example, these two queries return the same result:\n\n\nSELECT\n \nuniq\n(\nUserID\n)\n \nFROM\n \ntable\n\n\n\nSELECT\n \nuniqMerge\n(\nstate\n)\n \nFROM\n \n(\nSELECT\n \nuniqState\n(\nUserID\n)\n \nAS\n \nstate\n \nFROM\n \ntable\n \nGROUP\n \nBY\n \nRegionID\n)\n\n\n\n\n\n\nThere is an \nAggregatingMergeTree\n engine. Its job during a merge is to combine the states of aggregate functions from different table rows with the same primary key value.\n\n\nYou can't use a normal INSERT to insert a row in a table containing \nAggregateFunction\n columns, because you can't explicitly define the \nAggregateFunction\n value. Instead, use \nINSERT SELECT\n with \n-State\n aggregate functions for inserting data.\n\n\nWith SELECT from an \nAggregatingMergeTree\n table, use GROUP BY and aggregate functions with the '-Merge' modifier in order to complete data aggregation.\n\n\nYou can use \nAggregatingMergeTree\n tables for incremental data aggregation, including for aggregated materialized views.\n\n\nExample:\n\n\nCreate an \nAggregatingMergeTree\n materialized view that watches the \ntest.visits\n table:\n\n\nCREATE\n \nMATERIALIZED\n \nVIEW\n \ntest\n.\nbasic\n\n\nENGINE\n \n=\n \nAggregatingMergeTree\n(\nStartDate\n,\n \n(\nCounterID\n,\n \nStartDate\n),\n \n8192\n)\n\n\nAS\n \nSELECT\n\n    \nCounterID\n,\n\n    \nStartDate\n,\n\n    \nsumState\n(\nSign\n)\n    \nAS\n \nVisits\n,\n\n    \nuniqState\n(\nUserID\n)\n \nAS\n \nUsers\n\n\nFROM\n \ntest\n.\nvisits\n\n\nGROUP\n \nBY\n \nCounterID\n,\n \nStartDate\n;\n\n\n\n\n\n\nInsert data in the \ntest.visits\n table. Data will also be inserted in the view, where it will be aggregated:\n\n\nINSERT\n \nINTO\n \ntest\n.\nvisits\n \n...\n\n\n\n\n\n\nPerform \nSELECT\n from the view using \nGROUP BY\n in order to complete data aggregation:\n\n\nSELECT\n\n    \nStartDate\n,\n\n    \nsumMerge\n(\nVisits\n)\n \nAS\n \nVisits\n,\n\n    \nuniqMerge\n(\nUsers\n)\n \nAS\n \nUsers\n\n\nFROM\n \ntest\n.\nbasic\n\n\nGROUP\n \nBY\n \nStartDate\n\n\nORDER\n \nBY\n \nStartDate\n;\n\n\n\n\n\n\nYou can create a materialized view like this and assign a normal view to it that finishes data aggregation.\n\n\nNote that in most cases, using \nAggregatingMergeTree\n is not justified, since queries can be run efficiently enough on non-aggregated data.\n\n\nCollapsingMergeTree\n\n\nThis engine is used specifically for Yandex.Metrica.\n\n\nIt differs from \nMergeTree\n in that it allows automatic deletion, or \"collapsing\" certain pairs of rows when merging.\n\n\nYandex.Metrica has normal logs (such as hit logs) and change logs. Change logs are used for incrementally calculating statistics on data that is constantly changing. Examples are the log of session changes, or logs of changes to user histories. Sessions are constantly changing in Yandex.Metrica. For example, the number of hits per session increases. We refer to changes in any object as a pair (?old values, ?new values). Old values may be missing if the object was created. New values may be missing if the object was deleted. If the object was changed, but existed previously and was not deleted, both values are present. In the change log, one or two entries are made for each change. Each entry contains all the attributes that the object has, plus a special attribute for differentiating between the old and new values. When objects change, only the new entries are added to the change log, and the existing ones are not touched.\n\n\nThe change log makes it possible to incrementally calculate almost any statistics. To do this, we need to consider \"new\" rows with a plus sign, and \"old\" rows with a minus sign. In other words, incremental calculation is possible for all statistics whose algebraic structure contains an operation for taking the inverse of an element. This is true of most statistics. We can also calculate \"idempotent\" statistics, such as the number of unique visitors, since the unique visitors are not deleted when making changes to sessions.\n\n\nThis is the main concept that allows Yandex.Metrica to work in real time.\n\n\nCollapsingMergeTree accepts an additional parameter - the name of an Int8-type column that contains the row's \"sign\". Example:\n\n\nCollapsingMergeTree\n(\nEventDate\n,\n \n(\nCounterID\n,\n \nEventDate\n,\n \nintHash32\n(\nUniqID\n),\n \nVisitID\n),\n \n8192\n,\n \nSign\n)\n\n\n\n\n\n\nHere, \nSign\n is a column containing -1 for \"old\" values and 1 for \"new\" values.\n\n\nWhen merging, each group of consecutive identical primary key values (columns for sorting data) is reduced to no more than one row with the column value 'sign_column = -1' (the \"negative row\") and no more than one row with the column value 'sign_column = 1' (the \"positive row\"). In other words, entries from the change log are collapsed.\n\n\nIf the number of positive and negative rows matches, the first negative row and the last positive row are written.\nIf there is one more positive row than negative rows, only the last positive row is written.\nIf there is one more negative row than positive rows, only the first negative row is written.\nOtherwise, there will be a logical error and none of the rows will be written. (A logical error can occur if the same section of the log was accidentally inserted more than once. The error is just recorded in the server log, and the merge continues.)\n\n\nThus, collapsing should not change the results of calculating statistics.\nChanges are gradually collapsed so that in the end only the last value of almost every object is left.\nCompared to MergeTree, the CollapsingMergeTree engine allows a multifold reduction of data volume.\n\n\nThere are several ways to get completely \"collapsed\" data from a \nCollapsingMergeTree\n table:\n\n\n\n\nWrite a query with GROUP BY and aggregate functions that accounts for the sign. For example, to calculate quantity, write 'sum(Sign)' instead of 'count()'. To calculate the sum of something, write 'sum(Sign * x)' instead of 'sum(x)', and so on, and also add 'HAVING sum(Sign) \n 0'. Not all amounts can be calculated this way. For example, the aggregate functions 'min' and 'max' can't be rewritten.\n\n\nIf you must extract data without aggregation (for example, to check whether rows are present whose newest values match certain conditions), you can use the FINAL modifier for the FROM clause. This approach is significantly less efficient.\n\n\n\n\n\n\nGraphiteMergeTree\n\n\nThis engine is designed for rollup (thinning and aggregating/averaging) \nGraphite\n data. It may be helpful to developers who want to use ClickHouse as a data store for Graphite.\n\n\nGraphite stores full data in ClickHouse, and data can be retrieved in the following ways:\n\n\n\n\nWithout thinning.\n\n\n\n\nUses the \nMergeTree\n engine.\n\n\n\n\nWith thinning.\n\n\n\n\nUsing the \nGraphiteMergeTree\n engine.\n\n\nThe engine inherits properties from MergeTree. The settings for thinning data are defined by the \ngraphite_rollup\n parameter in the server configuration.\n\n\nUsing the engine\n\n\nThe Graphite data table must contain the following fields at minimum:\n\n\n\n\nPath\n \u2013 The metric name (Graphite sensor).\n\n\nTime\n \u2013 The time for measuring the metric.\n\n\nValue\n \u2013 The value of the metric at the time set in Time.\n\n\nVersion\n \u2013 Determines which value of the metric with the same Path and Time will remain in the database.\n\n\n\n\nRollup pattern:\n\n\npattern\n    regexp\n    function\n    age -\n precision\n    ...\npattern\n    ...\ndefault\n    function\n       age -\n precision\n    ...\n\n\n\n\n\nWhen processing a record, ClickHouse will check the rules in the \npattern\nclause. If the metric name matches the \nregexp\n, the rules from \npattern\n are applied; otherwise, the rules from \ndefault\n are used.\n\n\nFields in the pattern.\n\n\n\n\nage\n \u2013 The minimum age of the data in seconds.\n\n\nfunction\n \u2013 The name of the aggregating function to apply to data whose age falls within the range \n[age, age + precision]\n.\n\n\nprecision\n\u2013 How precisely to define the age of the data in seconds.\n\n\nregexp\n\u2013 A pattern for the metric name.\n\n\n\n\nExample of settings:\n\n\ngraphite_rollup\n\n    \npattern\n\n        \nregexp\nclick_cost\n/regexp\n\n        \nfunction\nany\n/function\n\n        \nretention\n\n            \nage\n0\n/age\n\n            \nprecision\n5\n/precision\n\n        \n/retention\n\n        \nretention\n\n            \nage\n86400\n/age\n\n            \nprecision\n60\n/precision\n\n        \n/retention\n\n    \n/pattern\n\n    \ndefault\n\n        \nfunction\nmax\n/function\n\n        \nretention\n\n            \nage\n0\n/age\n\n            \nprecision\n60\n/precision\n\n        \n/retention\n\n        \nretention\n\n            \nage\n3600\n/age\n\n            \nprecision\n300\n/precision\n\n        \n/retention\n\n        \nretention\n\n            \nage\n86400\n/age\n\n            \nprecision\n3600\n/precision\n\n        \n/retention\n\n    \n/default\n\n\n/graphite_rollup\n\n\n\n\n\n\n\n\nData replication\n\n\nReplication is only supported for tables in the MergeTree family:\n\n\n\n\nReplicatedMergeTree\n\n\nReplicatedSummingMergeTree\n\n\nReplicatedReplacingMergeTree\n\n\nReplicatedAggregatingMergeTree\n\n\nReplicatedCollapsingMergeTree\n\n\nReplicatedGraphiteMergeTree\n\n\n\n\nReplication works at the level of an individual table, not the entire server. A server can store both replicated and non-replicated tables at the same time.\n\n\nReplication does not depend on sharding. Each shard has its own independent replication.\n\n\nCompressed data is replicated for \nINSERT\n and \nALTER\n queries (see the description of the \nALTER\n query).\n\n\nCREATE\n, \nDROP\n, \nATTACH\n, \nDETACH\n and \nRENAME\n queries are executed on a single server and are not replicated:\n\n\n\n\nThe CREATE TABLE\n query creates a new replicatable table on the server where the query is run. If this table already exists on other servers, it adds a new replica.\n\n\nThe DROP TABLE\n query deletes the replica located on the server where the query is run.\n\n\nThe RENAME\n query renames the table on one of the replicas. In other words, replicated tables can have different names on different replicas.\n\n\n\n\nTo use replication, set the addresses of the ZooKeeper cluster in the config file. Example:\n\n\nzookeeper\n\n    \nnode\n \nindex=\n1\n\n        \nhost\nexample1\n/host\n\n        \nport\n2181\n/port\n\n    \n/node\n\n    \nnode\n \nindex=\n2\n\n        \nhost\nexample2\n/host\n\n        \nport\n2181\n/port\n\n    \n/node\n\n    \nnode\n \nindex=\n3\n\n        \nhost\nexample3\n/host\n\n        \nport\n2181\n/port\n\n    \n/node\n\n\n/zookeeper\n\n\n\n\n\n\nUse ZooKeeper version 3.4.5 or later.\n\n\nYou can specify any existing ZooKeeper cluster and the system will use a directory on it for its own data (the directory is specified when creating a replicatable table).\n\n\nIf ZooKeeper isn't set in the config file, you can't create replicated tables, and any existing replicated tables will be read-only.\n\n\nZooKeeper is not used in \nSELECT\n queries because replication does not affect the performance of \nSELECT\n and queries run just as fast as they do for non-replicated tables. When querying distributed replicated tables, ClickHouse behavior is controlled by the settings \nmax_replica_delay_for_distributed_queries\n and \nfallback_to_stale_replicas_for_distributed_queries\n.\n\n\nFor each \nINSERT\n query, approximately ten entries are added to ZooKeeper through several transactions. (To be more precise, this is for each inserted block of data; an INSERT query contains one block or one block per \nmax_insert_block_size = 1048576\n rows.) This leads to slightly longer latencies for \nINSERT\n compared to non-replicated tables. But if you follow the recommendations to insert data in batches of no more than one \nINSERT\n per second, it doesn't create any problems. The entire ClickHouse cluster used for coordinating one ZooKeeper cluster has a total of several hundred \nINSERTs\n per second. The throughput on data inserts (the number of rows per second) is just as high as for non-replicated data.\n\n\nFor very large clusters, you can use different ZooKeeper clusters for different shards. However, this hasn't proven necessary on the Yandex.Metrica cluster (approximately 300 servers).\n\n\nReplication is asynchronous and multi-master. \nINSERT\n queries (as well as \nALTER\n) can be sent to any available server. Data is inserted on the server where the query is run, and then it is copied to the other servers. Because it is asynchronous, recently inserted data appears on the other replicas with some latency. If part of the replicas are not available, the data is written when they become available. If a replica is available, the latency is the amount of time it takes to transfer the block of compressed data over the network.\n\n\nBy default, an INSERT query waits for confirmation of writing the data from only one replica. If the data was successfully written to only one replica and the server with this replica ceases to exist, the stored data will be lost. Tp enable getting confirmation of data writes from multiple replicas, use the \ninsert_quorum\n option.\n\n\nEach block of data is written atomically. The INSERT query is divided into blocks up to \nmax_insert_block_size = 1048576\n rows. In other words, if the \nINSERT\n query has less than 1048576 rows, it is made atomically.\n\n\nData blocks are deduplicated. For multiple writes of the same data block (data blocks of the same size containing the same rows in the same order), the block is only written once. The reason for this is in case of network failures when the client application doesn't know if the data was written to the DB, so the \nINSERT\n query can simply be repeated. It doesn't matter which replica INSERTs were sent to with identical data. \nINSERTs\n are idempotent. Deduplication parameters are controlled by \nmerge_tree\n server settings.\n\n\nDuring replication, only the source data to insert is transferred over the network. Further data transformation (merging) is coordinated and performed on all the replicas in the same way. This minimizes network usage, which means that replication works well when replicas reside in different datacenters. (Note that duplicating data in different datacenters is the main goal of replication.)\n\n\nYou can have any number of replicas of the same data. Yandex.Metrica uses double replication in production. Each server uses RAID-5 or RAID-6, and RAID-10 in some cases. This is a relatively reliable and convenient solution.\n\n\nThe system monitors data synchronicity on replicas and is able to recover after a failure. Failover is automatic (for small differences in data) or semi-automatic (when data differs too much, which may indicate a configuration error).\n\n\n\n\nCreating replicated tables\n\n\nThe \nReplicated\n prefix is added to the table engine name. For example:\nReplicatedMergeTree\n.\n\n\nTwo parameters are also added in the beginning of the parameters list \u2013 the path to the table in ZooKeeper, and the replica name in ZooKeeper.\n\n\nExample:\n\n\nReplicatedMergeTree(\n/clickhouse/tables/{layer}-{shard}/hits\n, \n{replica}\n, EventDate, intHash32(UserID), (CounterID, EventDate, intHash32(UserID), EventTime), 8192)\n\n\n\n\n\nAs the example shows, these parameters can contain substitutions in curly brackets. The substituted values are taken from the 'macros' section of the config file. Example:\n\n\nmacros\n\n    \nlayer\n05\n/layer\n\n    \nshard\n02\n/shard\n\n    \nreplica\nexample05-02-1.yandex.ru\n/replica\n\n\n/macros\n\n\n\n\n\n\nThe path to the table in ZooKeeper should be unique for each replicated table. Tables on different shards should have different paths.\nIn this case, the path consists of the following parts:\n\n\n/clickhouse/tables/\n is the common prefix. We recommend using exactly this one.\n\n\n{layer}-{shard}\n is the shard identifier. In this example it consists of two parts, since the Yandex.Metrica cluster uses bi-level sharding. For most tasks, you can leave just the {shard} substitution, which will be expanded to the shard identifier.\n\n\nhits\n is the name of the node for the table in ZooKeeper. It is a good idea to make it the same as the table name. It is defined explicitly, because in contrast to the table name, it doesn't change after a RENAME query.\n\n\nThe replica name identifies different replicas of the same table. You can use the server name for this, as in the example. The name only needs to be unique within each shard.\n\n\nYou can define the parameters explicitly instead of using substitutions. This might be convenient for testing and for configuring small clusters. However, you can't use distributed DDL queries (\nON CLUSTER\n) in this case.\n\n\nWhen working with large clusters, we recommend using substitutions because they reduce the probability of error.\n\n\nRun the \nCREATE TABLE\n query on each replica. This query creates a new replicated table, or adds a new replica to an existing one.\n\n\nIf you add a new replica after the table already contains some data on other replicas, the data will be copied from the other replicas to the new one after running the query. In other words, the new replica syncs itself with the others.\n\n\nTo delete a replica, run \nDROP TABLE\n. However, only one replica is deleted \u2013 the one that resides on the server where you run the query.\n\n\nRecovery after failures\n\n\nIf ZooKeeper is unavailable when a server starts, replicated tables switch to read-only mode. The system periodically attempts to connect to ZooKeeper.\n\n\nIf ZooKeeper is unavailable during an \nINSERT\n, or an error occurs when interacting with ZooKeeper, an exception is thrown.\n\n\nAfter connecting to ZooKeeper, the system checks whether the set of data in the local file system matches the expected set of data (ZooKeeper stores this information). If there are minor inconsistencies, the system resolves them by syncing data with the replicas.\n\n\nIf the system detects broken data parts (with the wrong size of files) or unrecognized parts (parts written to the file system but not recorded in ZooKeeper), it moves them to the 'detached' subdirectory (they are not deleted). Any missing parts are copied from the replicas.\n\n\nNote that ClickHouse does not perform any destructive actions such as automatically deleting a large amount of data.\n\n\nWhen the server starts (or establishes a new session with ZooKeeper), it only checks the quantity and sizes of all files. If the file sizes match but bytes have been changed somewhere in the middle, this is not detected immediately, but only when attempting to read the data for a \nSELECT\n query. The query throws an exception about a non-matching checksum or size of a compressed block. In this case, data parts are added to the verification queue and copied from the replicas if necessary.\n\n\nIf the local set of data differs too much from the expected one, a safety mechanism is triggered. The server enters this in the log and refuses to launch. The reason for this is that this case may indicate a configuration error, such as if a replica on a shard was accidentally configured like a replica on a different shard. However, the thresholds for this mechanism are set fairly low, and this situation might occur during normal failure recovery. In this case, data is restored semi-automatically - by \"pushing a button\".\n\n\nTo start recovery, create the node \n/path_to_table/replica_name/flags/force_restore_data\n in ZooKeeper with any content, or run the command to restore all replicated tables:\n\n\nsudo -u clickhouse touch /var/lib/clickhouse/flags/force_restore_data\n\n\n\n\n\nThen restart the server. On start, the server deletes these flags and starts recovery.\n\n\nRecovery after complete data loss\n\n\nIf all data and metadata disappeared from one of the servers, follow these steps for recovery:\n\n\n\n\nInstall ClickHouse on the server. Define substitutions correctly in the config file that contains the shard identifier and replicas, if you use them.\n\n\nIf you had unreplicated tables that must be manually duplicated on the servers, copy their data from a replica (in the directory \n/var/lib/clickhouse/data/db_name/table_name/\n).\n\n\nCopy table definitions located in \n/var/lib/clickhouse/metadata/\n from a replica. If a shard or replica identifier is defined explicitly in the table definitions, correct it so that it corresponds to this replica. (Alternatively, start the server and make all the \nATTACH TABLE\n queries that should have been in the .sql files in \n/var/lib/clickhouse/metadata/\n.)\n\n\nTo start recovery, create the ZooKeeper node \n/path_to_table/replica_name/flags/force_restore_data\n with any content, or run the command to restore all replicated tables: \nsudo -u clickhouse touch /var/lib/clickhouse/flags/force_restore_data\n\n\n\n\nThen start the server (restart, if it is already running). Data will be downloaded from replicas.\n\n\nAn alternative recovery option is to delete information about the lost replica from ZooKeeper (\n/path_to_table/replica_name\n), then create the replica again as described in \"\nCreating replicatable tables\n\".\n\n\nThere is no restriction on network bandwidth during recovery. Keep this in mind if you are restoring many replicas at once.\n\n\nConverting from MergeTree to ReplicatedMergeTree\n\n\nWe use the term \nMergeTree\n to refer to all table engines in the \nMergeTree family\n, the same as for \nReplicatedMergeTree\n.\n\n\nIf you had a \nMergeTree\n table that was manually replicated, you can convert it to a replicatable table. You might need to do this if you have already collected a large amount of data in a \nMergeTree\n table and now you want to enable replication.\n\n\nIf the data differs on various replicas, first sync it, or delete this data on all the replicas except one.\n\n\nRename the existing MergeTree table, then create a \nReplicatedMergeTree\n table with the old name.\nMove the data from the old table to the 'detached' subdirectory inside the directory with the new table data (\n/var/lib/clickhouse/data/db_name/table_name/\n).\nThen run \nALTER TABLE ATTACH PARTITION\n on one of the replicas to add these data parts to the working set.\n\n\nConverting from ReplicatedMergeTree to MergeTree\n\n\nCreate a MergeTree table with a different name. Move all the data from the directory with the \nReplicatedMergeTree\n table data to the new table's data directory. Then delete the \nReplicatedMergeTree\n table and restart the server.\n\n\nIf you want to get rid of a \nReplicatedMergeTree\n table without launching the server:\n\n\n\n\nDelete the corresponding \n.sql\n file in the metadata directory (\n/var/lib/clickhouse/metadata/\n).\n\n\nDelete the corresponding path in ZooKeeper (\n/path_to_table/replica_name\n).\n\n\n\n\nAfter this, you can launch the server, create a \nMergeTree\n table, move the data to its directory, and then restart the server.\n\n\nRecovery when metadata in the ZooKeeper cluster is lost or damaged\n\n\nIf the data in ZooKeeper was lost or damaged, you can save data by moving it to an unreplicated table as described above.\n\n\nIf exactly the same parts exist on the other replicas, they are added to the working set on them. If not, the parts are downloaded from the replica that has them.\n\n\n\n\nDistributed\n\n\nThe Distributed engine does not store data itself\n, but allows distributed query processing on multiple servers.\nReading is automatically parallelized. During a read, the table indexes on remote servers are used, if there are any.\nThe Distributed engine accepts parameters: the cluster name in the server's config file, the name of a remote database, the name of a remote table, and (optionally) a sharding key.\nExample:\n\n\nDistributed(logs, default, hits[, sharding_key])\n\n\n\n\n\nData will be read from all servers in the 'logs' cluster, from the default.hits table located on every server in the cluster.\nData is not only read, but is partially processed on the remote servers (to the extent that this is possible).\nFor example, for a query with GROUP BY, data will be aggregated on remote servers, and the intermediate states of aggregate functions will be sent to the requestor server. Then data will be further aggregated.\n\n\nInstead of the database name, you can use a constant expression that returns a string. For example: currentDatabase().\n\n\nlogs \u2013 The cluster name in the server's config file.\n\n\nClusters are set like this:\n\n\nremote_servers\n\n    \nlogs\n\n        \nshard\n\n            \n!-- Optional. Shard weight when writing data. Default: 1. --\n\n            \nweight\n1\n/weight\n\n            \n!-- Optional. Whether to write data to just one of the replicas. Default: false (write data to all replicas). --\n\n            \ninternal_replication\nfalse\n/internal_replication\n\n            \nreplica\n\n                \nhost\nexample01-01-1\n/host\n\n                \nport\n9000\n/port\n\n            \n/replica\n\n            \nreplica\n\n                \nhost\nexample01-01-2\n/host\n\n                \nport\n9000\n/port\n\n            \n/replica\n\n        \n/shard\n\n        \nshard\n\n            \nweight\n2\n/weight\n\n            \ninternal_replication\nfalse\n/internal_replication\n\n            \nreplica\n\n                \nhost\nexample01-02-1\n/host\n\n                \nport\n9000\n/port\n\n            \n/replica\n\n            \nreplica\n\n                \nhost\nexample01-02-2\n/host\n\n                \nport\n9000\n/port\n\n            \n/replica\n\n        \n/shard\n\n    \n/logs\n\n\n/remote_servers\n\n\n\n\n\n\nHere a cluster is defined with the name 'logs' that consists of two shards, each of which contains two replicas.\nShards refer to the servers that contain different parts of the data (in order to read all the data, you must access all the shards).\nReplicas are duplicating servers (in order to read all the data, you can access the data on any one of the replicas).\n\n\nThe parameters \nhost\n, \nport\n, and optionally \nuser\n and \npassword\n are specified for each server:\n\n\n:   -   \nhost\n \u2013 The address of the remote server. You can use either the domain or the IPv4 or IPv6 address. If you specify the domain, the server makes a DNS request when it starts, and the result is stored as long as the server is running. If the DNS request fails, the server doesn't start. If you change the DNS record, restart the server.\n-   \nport\n\u2013 The TCP port for messenger activity ('tcp_port' in the config, usually set to 9000). Do not confuse it with http_port.\n-   \nuser\n\u2013 Name of the user for connecting to a remote server. Default value: default. This user must have access to connect to the specified server. Access is configured in the users.xml file. For more information, see the section \"Access rights\".\n- \npassword\n \u2013 The password for connecting to a remote server (not masked). Default value: empty string.\n\n\nWhen specifying replicas, one of the available replicas will be selected for each of the shards when reading. You can configure the algorithm for load balancing (the preference for which replica to access) \u2013 see the 'load_balancing' setting.\nIf the connection with the server is not established, there will be an attempt to connect with a short timeout. If the connection failed, the next replica will be selected, and so on for all the replicas. If the connection attempt failed for all the replicas, the attempt will be repeated the same way, several times.\nThis works in favor of resiliency, but does not provide complete fault tolerance: a remote server might accept the connection, but might not work, or work poorly.\n\n\nYou can specify just one of the shards (in this case, query processing should be called remote, rather than distributed) or up to any number of shards. In each shard, you can specify from one to any number of replicas. You can specify a different number of replicas for each shard.\n\n\nYou can specify as many clusters as you wish in the configuration.\n\n\nTo view your clusters, use the 'system.clusters' table.\n\n\nThe Distributed engine allows working with a cluster like a local server. However, the cluster is inextensible: you must write its configuration in the server config file (even better, for all the cluster's servers).\n\n\nThere is no support for Distributed tables that look at other Distributed tables (except in cases when a Distributed table only has one shard). As an alternative, make the Distributed table look at the \"final\" tables.\n\n\nThe Distributed engine requires writing clusters to the config file. Clusters from the config file are updated on the fly, without restarting the server. If you need to send a query to an unknown set of shards and replicas each time, you don't need to create a Distributed table \u2013 use the 'remote' table function instead. See the section \"Table functions\".\n\n\nThere are two methods for writing data to a cluster:\n\n\nFirst, you can define which servers to write which data to, and perform the write directly on each shard. In other words, perform INSERT in the tables that the distributed table \"looks at\".\nThis is the most flexible solution \u2013 you can use any sharding scheme, which could be non-trivial due to the requirements of the subject area.\nThis is also the most optimal solution, since data can be written to different shards completely independently.\n\n\nSecond, you can perform INSERT in a Distributed table. In this case, the table will distribute the inserted data across servers itself.\nIn order to write to a Distributed table, it must have a sharding key set (the last parameter). In addition, if there is only one shard, the write operation works without specifying the sharding key, since it doesn't have any meaning in this case.\n\n\nEach shard can have a weight defined in the config file. By default, the weight is equal to one. Data is distributed across shards in the amount proportional to the shard weight. For example, if there are two shards and the first has a weight of 9 while the second has a weight of 10, the first will be sent 9 / 19 parts of the rows, and the second will be sent 10 / 19.\n\n\nEach shard can have the 'internal_replication' parameter defined in the config file.\n\n\nIf this parameter is set to 'true', the write operation selects the first healthy replica and writes data to it. Use this alternative if the Distributed table \"looks at\" replicated tables. In other words, if the table where data will be written is going to replicate them itself.\n\n\nIf it is set to 'false' (the default), data is written to all replicas. In essence, this means that the Distributed table replicates data itself. This is worse than using replicated tables, because the consistency of replicas is not checked, and over time they will contain slightly different data.\n\n\nTo select the shard that a row of data is sent to, the sharding expression is analyzed, and its remainder is taken from dividing it by the total weight of the shards. The row is sent to the shard that corresponds to the half-interval of the remainders from 'prev_weight' to 'prev_weights + weight', where 'prev_weights' is the total weight of the shards with the smallest number, and 'weight' is the weight of this shard. For example, if there are two shards, and the first has a weight of 9 while the second has a weight of 10, the row will be sent to the first shard for the remainders from the range [0, 9), and to the second for the remainders from the range [9, 19).\n\n\nThe sharding expression can be any expression from constants and table columns that returns an integer. For example, you can use the expression 'rand()' for random distribution of data, or 'UserID' for distribution by the remainder from dividing the user's ID (then the data of a single user will reside on a single shard, which simplifies running IN and JOIN by users). If one of the columns is not distributed evenly enough, you can wrap it in a hash function: intHash64(UserID).\n\n\nA simple remainder from division is a limited solution for sharding and isn't always appropriate. It works for medium and large volumes of data (dozens of servers), but not for very large volumes of data (hundreds of servers or more). In the latter case, use the sharding scheme required by the subject area, rather than using entries in Distributed tables.\n\n\nSELECT queries are sent to all the shards, and work regardless of how data is distributed across the shards (they can be distributed completely randomly). When you add a new shard, you don't have to transfer the old data to it. You can write new data with a heavier weight \u2013 the data will be distributed slightly unevenly, but queries will work correctly and efficiently.\n\n\nYou should be concerned about the sharding scheme in the following cases:\n\n\n\n\nQueries are used that require joining data (IN or JOIN) by a specific key. If data is sharded by this key, you can use local IN or JOIN instead of GLOBAL IN or GLOBAL JOIN, which is much more efficient.\n\n\nA large number of servers is used (hundreds or more) with a large number of small queries (queries of individual clients - websites, advertisers, or partners). In order for the small queries to not affect the entire cluster, it makes sense to locate data for a single client on a single shard. Alternatively, as we've done in Yandex.Metrica, you can set up bi-level sharding: divide the entire cluster into \"layers\", where a layer may consist of multiple shards. Data for a single client is located on a single layer, but shards can be added to a layer as necessary, and data is randomly distributed within them. Distributed tables are created for each layer, and a single shared distributed table is created for global queries.\n\n\n\n\nData is written asynchronously. For an INSERT to a Distributed table, the data block is just written to the local file system. The data is sent to the remote servers in the background as soon as possible. You should check whether data is sent successfully by checking the list of files (data waiting to be sent) in the table directory: /var/lib/clickhouse/data/database/table/.\n\n\nIf the server ceased to exist or had a rough restart (for example, after a device failure) after an INSERT to a Distributed table, the inserted data might be lost. If a damaged data part is detected in the table directory, it is transferred to the 'broken' subdirectory and no longer used.\n\n\nWhen the max_parallel_replicas option is enabled, query processing is parallelized across all replicas within a single shard. For more information, see the section \"Settings, max_parallel_replicas\".\n\n\n\n\nDictionary\n\n\nThe \nDictionary\n engine displays the dictionary data as a ClickHouse table.\n\n\nAs an example, consider a dictionary of \nproducts\n with the following configuration:\n\n\ndictionaries\n\n\ndictionary\n\n        \nname\nproducts\n/name\n\n        \nsource\n\n            \nodbc\n\n                \ntable\nproducts\n/table\n\n                \nconnection_string\nDSN=some-db-server\n/connection_string\n\n            \n/odbc\n\n        \n/source\n\n        \nlifetime\n\n            \nmin\n300\n/min\n\n            \nmax\n360\n/max\n\n        \n/lifetime\n\n        \nlayout\n\n            \nflat/\n\n        \n/layout\n\n        \nstructure\n\n            \nid\n\n                \nname\nproduct_id\n/name\n\n            \n/id\n\n            \nattribute\n\n                \nname\ntitle\n/name\n\n                \ntype\nString\n/type\n\n                \nnull_value\n/null_value\n\n            \n/attribute\n\n        \n/structure\n\n\n/dictionary\n\n\n/dictionaries\n\n\n\n\n\n\nQuery the dictionary data:\n\n\nselect\n \nname\n,\n \ntype\n,\n \nkey\n,\n \nattribute\n.\nnames\n,\n \nattribute\n.\ntypes\n,\n \nbytes_allocated\n,\n \nelement_count\n,\nsource\n \nfrom\n \nsystem\n.\ndictionaries\n \nwhere\n \nname\n \n=\n \nproducts\n;\n                     \n\n\nSELECT\n\n    \nname\n,\n\n    \ntype\n,\n\n    \nkey\n,\n\n    \nattribute\n.\nnames\n,\n\n    \nattribute\n.\ntypes\n,\n\n    \nbytes_allocated\n,\n\n    \nelement_count\n,\n\n    \nsource\n\n\nFROM\n \nsystem\n.\ndictionaries\n\n\nWHERE\n \nname\n \n=\n \nproducts\n\n\n\n\n\n\n\u250c\u2500name\u2500\u2500\u2500\u2500\u2500\u252c\u2500type\u2500\u252c\u2500key\u2500\u2500\u2500\u2500\u252c\u2500attribute.names\u2500\u252c\u2500attribute.types\u2500\u252c\u2500bytes_allocated\u2500\u252c\u2500element_count\u2500\u252c\u2500source\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 products \u2502 Flat \u2502 UInt64 \u2502 [\ntitle\n]       \u2502 [\nString\n]      \u2502        23065376 \u2502        175032 \u2502 ODBC: .products \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n\n\nYou can use the \ndictGet*\n function to get the dictionary data in this format.\n\n\nThis view isn't helpful when you need to get raw data, or when performing a \nJOIN\n operation. For these cases, you can use the \nDictionary\n engine, which displays the dictionary data in a table.\n\n\nSyntax:\n\n\nCREATE TABLE %table_name% (%fields%) engine = Dictionary(%dictionary_name%)`\n\n\n\n\n\nUsage example:\n\n\ncreate\n \ntable\n \nproducts\n \n(\nproduct_id\n \nUInt64\n,\n \ntitle\n \nString\n)\n \nEngine\n \n=\n \nDictionary\n(\nproducts\n);\n\n\n\nCREATE\n \nTABLE\n \nproducts\n\n\n(\n\n    \nproduct_id\n \nUInt64\n,\n\n    \ntitle\n \nString\n,\n\n\n)\n\n\nENGINE\n \n=\n \nDictionary\n(\nproducts\n)\n\n\n\n\n\n\nOk.\n\n0 rows in set. Elapsed: 0.004 sec.\n\n\n\n\n\nTake a look at what's in the table.\n\n\nselect\n \n*\n \nfrom\n \nproducts\n \nlimit\n \n1\n;\n\n\n\nSELECT\n \n*\n\n\nFROM\n \nproducts\n\n\nLIMIT\n \n1\n\n\n\n\n\n\n\u250c\u2500\u2500\u2500\u2500product_id\u2500\u252c\u2500title\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502        152689 \u2502 Some item       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n1 rows in set. Elapsed: 0.006 sec.\n\n\n\n\n\nMerge\n\n\nThe Merge engine (not to be confused with \nMergeTree\n) does not store data itself, but allows reading from any number of other tables simultaneously.\nReading is automatically parallelized. Writing to a table is not supported. When reading, the indexes of tables that are actually being read are used, if they exist.\nThe Merge engine accepts parameters: the database name and a regular expression for tables.\n\n\nExample:\n\n\nMerge(hits, \n^WatchLog\n)\n\n\n\n\n\nData will be read from the tables in the 'hits' database that have names that match the regular expression '\n^WatchLog\n'.\n\n\nInstead of the database name, you can use a constant expression that returns a string. For example, \ncurrentDatabase()\n.\n\n\nRegular expressions \u2014 \nre2\n (supports a subset of PCRE), case-sensitive.\nSee the notes about escaping symbols in regular expressions in the \"match\" section.\n\n\nWhen selecting tables to read, the Merge table itself will not be selected, even if it matches the regex. This is to avoid loops.\nIt is possible to create two Merge tables that will endlessly try to read each others' data, but this is not a good idea.\n\n\nThe typical way to use the Merge engine is for working with a large number of TinyLog tables as if with a single table.\n\n\nVirtual columns\n\n\nVirtual columns are columns that are provided by the table engine, regardless of the table definition. In other words, these columns are not specified in CREATE TABLE, but they are accessible for SELECT.\n\n\nVirtual columns differ from normal columns in the following ways:\n\n\n\n\nThey are not specified in table definitions.\n\n\nData can't be added to them with INSERT.\n\n\nWhen using INSERT without specifying the list of columns, virtual columns are ignored.\n\n\nThey are not selected when using the asterisk (\nSELECT *\n).\n\n\nVirtual columns are not shown in \nSHOW CREATE TABLE\n and \nDESC TABLE\n queries.\n\n\n\n\nA Merge type table contains a virtual _table column with the String type. (If the table already has a _table column, the virtual column is named _table1, and if it already has _table1, it is named _table2, and so on.) It contains the name of the table that data was read from.\n\n\nIf the WHERE or PREWHERE clause contains conditions for the '_table' column that do not depend on other table columns (as one of the conjunction elements, or as an entire expression), these conditions are used as an index. The conditions are performed on a data set of table names to read data from, and the read operation will be performed from only those tables that the condition was triggered on.\n\n\nBuffer\n\n\nBuffers the data to write in RAM, periodically flushing it to another table. During the read operation, data is read from the buffer and the other table simultaneously.\n\n\nBuffer(database, table, num_layers, min_time, max_time, min_rows, max_rows, min_bytes, max_bytes)\n\n\n\n\n\nEngine parameters:database, table \u2013 The table to flush data to. Instead of the database name, you can use a constant expression that returns a string.num_layers \u2013 Parallelism layer. Physically, the table will be represented as 'num_layers' of independent buffers. Recommended value: 16.min_time, max_time, min_rows, max_rows, min_bytes, and max_bytes are conditions for flushing data from the buffer.\n\n\nData is flushed from the buffer and written to the destination table if all the 'min' conditions or at least one 'max' condition are met.min_time, max_time \u2013 Condition for the time in seconds from the moment of the first write to the buffer.min_rows, max_rows \u2013 Condition for the number of rows in the buffer.min_bytes, max_bytes \u2013 Condition for the number of bytes in the buffer.\n\n\nDuring the write operation, data is inserted to a 'num_layers' number of random buffers. Or, if the data part to insert is large enough (greater than 'max_rows' or 'max_bytes'), it is written directly to the destination table, omitting the buffer.\n\n\nThe conditions for flushing the data are calculated separately for each of the 'num_layers' buffers. For example, if num_layers = 16 and max_bytes = 100000000, the maximum RAM consumption is 1.6 GB.\n\n\nExample:\n\n\nCREATE\n \nTABLE\n \nmerge\n.\nhits_buffer\n \nAS\n \nmerge\n.\nhits\n \nENGINE\n \n=\n \nBuffer\n(\nmerge\n,\n \nhits\n,\n \n16\n,\n \n10\n,\n \n100\n,\n \n10000\n,\n \n1000000\n,\n \n10000000\n,\n \n100000000\n)\n\n\n\n\n\n\nCreating a 'merge.hits_buffer' table with the same structure as 'merge.hits' and using the Buffer engine. When writing to this table, data is buffered in RAM and later written to the 'merge.hits' table. 16 buffers are created. The data in each of them is flushed if either 100 seconds have passed, or one million rows have been written, or 100 MB of data have been written; or if simultaneously 10 seconds have passed and 10,000 rows and 10 MB of data have been written. For example, if just one row has been written, after 100 seconds it will be flushed, no matter what. But if many rows have been written, the data will be flushed sooner.\n\n\nWhen the server is stopped, with DROP TABLE or DETACH TABLE, buffer data is also flushed to the destination table.\n\n\nYou can set empty strings in single quotation marks for the database and table name. This indicates the absence of a destination table. In this case, when the data flush conditions are reached, the buffer is simply cleared. This may be useful for keeping a window of data in memory.\n\n\nWhen reading from a Buffer table, data is processed both from the buffer and from the destination table (if there is one).\nNote that the Buffer tables does not support an index. In other words, data in the buffer is fully scanned, which might be slow for large buffers. (For data in a subordinate table, the index that it supports will be used.)\n\n\nIf the set of columns in the Buffer table doesn't match the set of columns in a subordinate table, a subset of columns that exist in both tables is inserted.\n\n\nIf the types don't match for one of the columns in the Buffer table and a subordinate table, an error message is entered in the server log and the buffer is cleared.\nThe same thing happens if the subordinate table doesn't exist when the buffer is flushed.\n\n\nIf you need to run ALTER for a subordinate table and the Buffer table, we recommend first deleting the Buffer table, running ALTER for the subordinate table, then creating the Buffer table again.\n\n\nIf the server is restarted abnormally, the data in the buffer is lost.\n\n\nPREWHERE, FINAL and SAMPLE do not work correctly for Buffer tables. These conditions are passed to the destination table, but are not used for processing data in the buffer. Because of this, we recommend only using the Buffer table for writing, while reading from the destination table.\n\n\nWhen adding data to a Buffer, one of the buffers is locked. This causes delays if a read operation is simultaneously being performed from the table.\n\n\nData that is inserted to a Buffer table may end up in the subordinate table in a different order and in different blocks. Because of this, a Buffer table is difficult to use for writing to a CollapsingMergeTree correctly. To avoid problems, you can set 'num_layers' to 1.\n\n\nIf the destination table is replicated, some expected characteristics of replicated tables are lost when writing to a Buffer table. The random changes to the order of rows and sizes of data parts cause data deduplication to quit working, which means it is not possible to have a reliable 'exactly once' write to replicated tables.\n\n\nDue to these disadvantages, we can only recommend using a Buffer table in rare cases.\n\n\nA Buffer table is used when too many INSERTs are received from a large number of servers over a unit of time and data can't be buffered before insertion, which means the INSERTs can't run fast enough.\n\n\nNote that it doesn't make sense to insert data one row at a time, even for Buffer tables. This will only produce a speed of a few thousand rows per second, while inserting larger blocks of data can produce over a million rows per second (see the section \"Performance\").\n\n\nFile(InputFormat)\n\n\nThe data source is a file that stores data in one of the supported input formats (TabSeparated, Native, etc.).\n\n\nNull\n\n\nWhen writing to a Null table, data is ignored. When reading from a Null table, the response is empty.\n\n\nHowever, you can create a materialized view on a Null table. So the data written to the table will end up in the view.\n\n\nSet\n\n\nA data set that is always in RAM. It is intended for use on the right side of the IN operator (see the section \"IN operators\").\n\n\nYou can use INSERT to insert data in the table. New elements will be added to the data set, while duplicates will be ignored.\nBut you can't perform SELECT from the table. The only way to retrieve data is by using it in the right half of the IN operator.\n\n\nData is always located in RAM. For INSERT, the blocks of inserted data are also written to the directory of tables on the disk. When starting the server, this data is loaded to RAM. In other words, after restarting, the data remains in place.\n\n\nFor a rough server restart, the block of data on the disk might be lost or damaged. In the latter case, you may need to manually delete the file with damaged data.\n\n\nJoin\n\n\nA prepared data structure for JOIN that is always located in RAM.\n\n\nJoin(ANY|ALL, LEFT|INNER, k1[, k2, ...])\n\n\n\n\n\nEngine parameters: \nANY|ALL\n \u2013 strictness; \nLEFT|INNER\n \u2013 type.\nThese parameters are set without quotes and must match the JOIN that the table will be used for. k1, k2, ... are the key columns from the USING clause that the join will be made on.\n\n\nThe table can't be used for GLOBAL JOINs.\n\n\nYou can use INSERT to add data to the table, similar to the Set engine. For ANY, data for duplicated keys will be ignored. For ALL, it will be counted. You can't perform SELECT directly from the table. The only way to retrieve data is to use it as the \"right-hand\" table for JOIN.\n\n\nStoring data on the disk is the same as for the Set engine.\n\n\nView\n\n\nUsed for implementing views (for more information, see the \nCREATE VIEW query\n). It does not store data, but only stores the specified \nSELECT\n query. When reading from a table, it runs this query (and deletes all unnecessary columns from the query).\n\n\nMaterializedView\n\n\nUsed for implementing materialized views (for more information, see the \nCREATE TABLE\n) query. For storing data, it uses a different engine that was specified when creating the view. When reading from a table, it just uses this engine.\n\n\nKafka\n\n\nThis engine works with \nApache Kafka\n.\n\n\nKafka lets you:\n\n\n\n\nPublish or subscribe to data flows.\n\n\nOrganize fault-tolerant storage.\n\n\nProcess streams as they become available.\n\n\n\n\nKafka(broker_list, topic_list, group_name, format[, schema, num_consumers])\n\n\n\n\n\nParameters:\n\n\n\n\nbroker_list\n \u2013 A comma-separated list of brokers (\nlocalhost:9092\n).\n\n\ntopic_list\n \u2013 A list of Kafka topics (\nmy_topic\n).\n\n\ngroup_name\n \u2013 A group of Kafka consumers (\ngroup1\n). Reading margins are tracked for each group separately. If you don't want messages to be duplicated in the cluster, use the same group name everywhere.\n\n\n--format\n \u2013 Message format. Uses the same notation as the SQL \nFORMAT\n function, such as \nJSONEachRow\n. For more information, see the \"Formats\" section.\n\n\nschema\n \u2013 An optional parameter that must be used if the format requires a schema definition. For example, \nCap'n Proto\n  requires the path to the schema file and the name of the root \nschema.capnp:Message\n object.\n\n\nnum_consumers\n \u2013 The number of consumers per table. Default: \n1\n. Specify more consumers if the throughput of one consumer is insufficient. The total number of consumers should not exceed the number of partitions in the topic, since only one consumer can be assigned per partition.\n\n\n\n\nExample:\n\n\n  \nCREATE\n \nTABLE\n \nqueue\n \n(\n\n    \ntimestamp\n \nUInt64\n,\n\n    \nlevel\n \nString\n,\n\n    \nmessage\n \nString\n\n  \n)\n \nENGINE\n \n=\n \nKafka\n(\nlocalhost:9092\n,\n \ntopic\n,\n \ngroup1\n,\n \nJSONEachRow\n);\n\n\n  \nSELECT\n \n*\n \nFROM\n \nqueue\n \nLIMIT\n \n5\n;\n\n\n\n\n\n\nThe delivered messages are tracked automatically, so each message in a group is only counted once. If you want to get the data twice, then create a copy of the table with another group name.\n\n\nGroups are flexible and synced on the cluster. For instance, if you have 10 topics and 5 copies of a table in a cluster, then each copy gets 2 topics. If the number of copies changes, the topics are redistributed across the copies automatically. Read more about this at \nhttp://kafka.apache.org/intro\n.\n\n\nSELECT\n is not particularly useful for reading messages (except for debugging), because each message can be read only once. It is more practical to create real-time threads using materialized views. To do this:\n\n\n\n\nUse the engine to create a Kafka consumer and consider it a data stream.\n\n\nCreate a table with the desired structure.\n\n\nCreate a materialized view that converts data from the engine and puts it into a previously created table.\n\n\n\n\nWhen the \nMATERIALIZED VIEW\n joins the engine, it starts collecting data in the background. This allows you to continually receive messages from Kafka and convert them to the required format using \nSELECT\n\n\nExample:\n\n\n  \nCREATE\n \nTABLE\n \nqueue\n \n(\n\n    \ntimestamp\n \nUInt64\n,\n\n    \nlevel\n \nString\n,\n\n    \nmessage\n \nString\n\n  \n)\n \nENGINE\n \n=\n \nKafka\n(\nlocalhost:9092\n,\n \ntopic\n,\n \ngroup1\n,\n \nJSONEachRow\n);\n\n\n  \nCREATE\n \nTABLE\n \ndaily\n \n(\n\n    \nday\n \nDate\n,\n\n    \nlevel\n \nString\n,\n\n    \ntotal\n \nUInt64\n\n  \n)\n \nENGINE\n \n=\n \nSummingMergeTree\n(\nday\n,\n \n(\nday\n,\n \nlevel\n),\n \n8192\n);\n\n\n  \nCREATE\n \nMATERIALIZED\n \nVIEW\n \nconsumer\n \nTO\n \ndaily\n\n    \nAS\n \nSELECT\n \ntoDate\n(\ntoDateTime\n(\ntimestamp\n))\n \nAS\n \nday\n,\n \nlevel\n,\n \ncount\n()\n \nas\n \ntotal\n\n    \nFROM\n \nqueue\n \nGROUP\n \nBY\n \nday\n,\n \nlevel\n;\n\n\n  \nSELECT\n \nlevel\n,\n \nsum\n(\ntotal\n)\n \nFROM\n \ndaily\n \nGROUP\n \nBY\n \nlevel\n;\n\n\n\n\n\n\nTo improve performance, received messages are grouped into blocks the size of \nmax_insert_block_size\n. If the block wasn't formed within \nstream_flush_interval_ms\n milliseconds, the data will be flushed to the table regardless of the completeness of the block.\n\n\nTo stop receiving topic data or to change the conversion logic, detach the materialized view:\n\n\n  DETACH TABLE consumer;\n  ATTACH MATERIALIZED VIEW consumer;\n\n\n\n\n\nIf you want to change the target table by using \nALTER\nmaterialized view, we recommend disabling the material view to avoid discrepancies between the target table and the data from the view.\n\n\nConfiguration\n\n\nSimilar to GraphiteMergeTree, the Kafka engine supports extended configuration using the ClickHouse config file. There are two configuration keys that you can use: global (\nkafka\n) and topic-level (\nkafka_topic_*\n). The global configuration is applied first, and the topic-level configuration is second (if it exists).\n\n\n  \n!--  Global configuration options for all tables of Kafka engine type --\n\n  \nkafka\n\n    \ndebug\ncgrp\n/debug\n\n    \nauto_offset_reset\nsmallest\n/auto_offset_reset\n\n  \n/kafka\n\n\n  \n!-- Configuration specific for topic \nlogs\n --\n\n  \nkafka_topic_logs\n\n    \nretry_backoff_ms\n250\n/retry_backoff_ms\n\n    \nfetch_min_bytes\n100000\n/fetch_min_bytes\n\n  \n/kafka_topic_logs\n\n\n\n\n\n\nFor a list of possible configuration options, see the \nlibrdkafka configuration reference\n. Use the underscore (\n_\n) instead of a dot in the ClickHouse configuration. For example, \ncheck.crcs=true\n will be \ncheck_crcs\ntrue\n/check_crcs\n.\n\n\n\n\nMySQL\n\n\nThe MySQL engine allows you to perform SELECT queries on data that is stored on a remote MySQL server.\n\n\nThe engine takes 4 parameters: the server address (host and port); the name of the database; the name of the table; the user's name; the user's password. Example:\n\n\nMySQL(\nhost:port\n, \ndatabase\n, \ntable\n, \nuser\n, \npassword\n);\n\n\n\n\n\nAt this time, simple WHERE clauses such as \n=, !=, \n, \n=, \n, \n=\n are executed on the MySQL server.\n\n\nThe rest of the conditions and the LIMIT sampling constraint are executed in ClickHouse only after the query to MySQL finishes.\n\n\nExternal data for query processing\n\n\nClickHouse allows sending a server the data that is needed for processing a query, together with a SELECT query. This data is put in a temporary table (see the section \"Temporary tables\") and can be used in the query (for example, in IN operators).\n\n\nFor example, if you have a text file with important user identifiers, you can upload it to the server along with a query that uses filtration by this list.\n\n\nIf you need to run more than one query with a large volume of external data, don't use this feature. It is better to upload the data to the DB ahead of time.\n\n\nExternal data can be uploaded using the command-line client (in non-interactive mode), or using the HTTP interface.\n\n\nIn the command-line client, you can specify a parameters section in the format\n\n\n--external --file\n=\n... \n[\n--name\n=\n...\n]\n \n[\n--format\n=\n...\n]\n \n[\n--types\n=\n...\n|\n--structure\n=\n...\n]\n\n\n\n\n\n\nYou may have multiple sections like this, for the number of tables being transmitted.\n\n\n--external\n \u2013 Marks the beginning of a clause.\n\n--file\n \u2013 Path to the file with the table dump, or -, which refers to stdin.\nOnly a single table can be retrieved from stdin.\n\n\nThe following parameters are optional: \n--name\n\u2013 Name of the table. If omitted, _data is used.\n\n--format\n \u2013 Data format in the file. If omitted, TabSeparated is used.\n\n\nOne of the following parameters is required:\n--types\n \u2013 A list of comma-separated column types. For example: \nUInt64,String\n. The columns will be named _1, _2, ...\n\n--structure\n\u2013 The table structure in the format\nUserID UInt64\n, \nURL String\n. Defines the column names and types.\n\n\nThe files specified in 'file' will be parsed by the format specified in 'format', using the data types specified in 'types' or 'structure'. The table will be uploaded to the server and accessible there as a temporary table with the name in 'name'.\n\n\nExamples:\n\n\necho\n -ne \n1\\n2\\n3\\n\n \n|\n clickhouse-client --query\n=\nSELECT count() FROM test.visits WHERE TraficSourceID IN _data\n --external --file\n=\n- --types\n=\nInt8\n\n849897\n\ncat /etc/passwd \n|\n sed \ns/:/\\t/g\n \n|\n clickhouse-client --query\n=\nSELECT shell, count() AS c FROM passwd GROUP BY shell ORDER BY c DESC\n --external --file\n=\n- --name\n=\npasswd --structure\n=\nlogin String, unused String, uid UInt16, gid UInt16, comment String, home String, shell String\n\n/bin/sh \n20\n\n/bin/false      \n5\n\n/bin/bash       \n4\n\n/usr/sbin/nologin       \n1\n\n/bin/sync       \n1\n\n\n\n\n\n\nWhen using the HTTP interface, external data is passed in the multipart/form-data format. Each table is transmitted as a separate file. The table name is taken from the file name. The 'query_string' is passed the parameters 'name_format', 'name_types', and 'name_structure', where 'name' is the name of the table that these parameters correspond to. The meaning of the parameters is the same as when using the command-line client.\n\n\nExample:\n\n\ncat /etc/passwd \n|\n sed \ns/:/\\t/g\n \n passwd.tsv\n\ncurl -F \npasswd=@passwd.tsv;\n \nhttp://localhost:8123/?query=SELECT+shell,+count()+AS+c+FROM+passwd+GROUP+BY+shell+ORDER+BY+c+DESC\npasswd_structure=login+String,+unused+String,+uid+UInt16,+gid+UInt16,+comment+String,+home+String,+shell+String\n\n/bin/sh \n20\n\n/bin/false      \n5\n\n/bin/bash       \n4\n\n/usr/sbin/nologin       \n1\n\n/bin/sync       \n1\n\n\n\n\n\n\nFor distributed query processing, the temporary tables are sent to all the remote servers.\n\n\nSystem tables\n\n\nSystem tables are used for implementing part of the system's functionality, and for providing access to information about how the system is working.\nYou can't delete a system table (but you can perform DETACH).\nSystem tables don't have files with data on the disk or files with metadata. The server creates all the system tables when it starts.\nSystem tables are read-only.\nThey are located in the 'system' database.\n\n\nsystem.one\n\n\nThis table contains a single row with a single 'dummy' UInt8 column containing the value 0.\nThis table is used if a SELECT query doesn't specify the FROM clause.\nThis is similar to the DUAL table found in other DBMSs.\n\n\nsystem.numbers\n\n\nThis table contains a single UInt64 column named 'number' that contains almost all the natural numbers starting from zero.\nYou can use this table for tests, or if you need to do a brute force search.\nReads from this table are not parallelized.\n\n\nsystem.numbers_mt\n\n\nThe same as 'system.numbers' but reads are parallelized. The numbers can be returned in any order.\nUsed for tests.\n\n\nsystem.databases\n\n\nThis table contains a single String column called 'name' \u2013 the name of a database.\nEach database that the server knows about has a corresponding entry in the table.\nThis system table is used for implementing the \nSHOW DATABASES\n query.\n\n\nsystem.tables\n\n\nThis table contains the String columns 'database', 'name', and 'engine'.\nThe table also contains three virtual columns: metadata_modification_time (DateTime type), create_table_query, and engine_full (String type).\nEach table that the server knows about is entered in the 'system.tables' table.\nThis system table is used for implementing SHOW TABLES queries.\n\n\nsystem.columns\n\n\nContains information about the columns in all tables.\nYou can use this table to get information similar to \nDESCRIBE TABLE\n, but for multiple tables at once.\n\n\ndatabase String           - Name of the database the table is located in.\ntable String              - Table name.\nname String               - Column name.\ntype String               - Column type.\ndefault_type String       - Expression type (DEFAULT, MATERIALIZED, ALIAS) for the default value, or an empty string if it is not defined.\ndefault_expression String - Expression for the default value, or an empty string if it is not defined.\n\n\n\n\n\nsystem.parts\n\n\nContains information about parts of a table in the \nMergeTree\n family.\n\n\nEach row describes one part of the data.\n\n\nColumns:\n\n\n\n\npartition (String) \u2013 The partition name. YYYYMM format. To learn what a partition is, see the description of the \nALTER\n query.\n\n\nname (String) \u2013 Name of the data part.\n\n\nactive (UInt8) \u2013 Indicates whether the part is active. If a part is active, it is used in a table; otherwise, it will be deleted. Inactive data parts remain after merging.\n\n\nmarks (UInt64) \u2013 The number of marks. To get the approximate number of rows in a data part, multiply \nmarks\n  by the index granularity (usually 8192).\n\n\nmarks_size (UInt64) \u2013 The size of the file with marks.\n\n\nrows (UInt64) \u2013 The number of rows.\n\n\nbytes (UInt64) \u2013 The number of bytes when compressed.\n\n\nmodification_time (DateTime) \u2013 The modification time of the directory with the data part. This usually corresponds to the time of data part creation.|\n\n\nremove_time (DateTime) \u2013 The time when the data part became inactive.\n\n\nrefcount (UInt32) \u2013 The number of places where the data part is used. A value greater than 2 indicates that the data part is used in queries or merges.\n\n\nmin_date (Date) \u2013 The minimum value of the date key in the data part.\n\n\nmax_date (Date) \u2013 The maximum value of the date key in the data part.\n\n\nmin_block_number (UInt64) \u2013 The minimum number of data parts that make up the current part after merging.\n\n\nmax_block_number (UInt64) \u2013 The maximum number of data parts that make up the current part after merging.\n\n\nlevel (UInt32) \u2013 Depth of the merge tree. If a merge was not performed, \nlevel=0\n.\n\n\nprimary_key_bytes_in_memory (UInt64) \u2013 The amount of memory (in bytes) used by primary key values.\n\n\nprimary_key_bytes_in_memory_allocated (UInt64) \u2013 The amount of memory (in bytes) reserved for primary key values.\n\n\ndatabase (String) \u2013 Name of the database.\n\n\ntable (String) \u2013 Name of the table.\n\n\nengine (String) \u2013 Name of the table engine without parameters.\n\n\n\n\nsystem.processes\n\n\nThis system table is used for implementing the \nSHOW PROCESSLIST\n query.\nColumns:\n\n\nuser String              \u2013 Name of the user who made the request. For distributed query processing, this is the user who helped the requestor server send the query to this server, not the user who made the distributed request on the requestor server.\n\naddress String           \u2013 The IP address that the query was made from. The same is true for distributed query processing.\n\nelapsed Float64          \u2013  The time in seconds since request execution started.\n\nrows_read UInt64         \u2013 The number of rows read from the table. For distributed processing, on the requestor server, this is the total for all remote servers.\n\nbytes_read UInt64        \u2013 The number of uncompressed bytes read from the table. For distributed processing, on the requestor server, this is the total for all remote servers.\n\nUInt64 total_rows_approx \u2013 The approximate total number of rows that must be read. For distributed processing, on the requestor server, this is the total for all remote servers. It can be updated during request processing, when new sources to process become known.\n\nmemory_usage UInt64 \u2013 Memory consumption by the query. It might not include some types of dedicated memory.\n\nquery String \u2013 The query text. For INSERT, it doesn\nt include the data to insert.\n\nquery_id \u2013 Query ID, if defined.\n\n\n\n\n\nsystem.merges\n\n\nContains information about merges currently in process for tables in the MergeTree family.\n\n\nColumns:\n\n\n\n\ndatabase String\n \u2014 Name of the database the table is located in.\n\n\ntable String\n \u2014 Name of the table.\n\n\nelapsed Float64\n \u2014 Time in seconds since the merge started.\n\n\nprogress Float64\n \u2014 Percent of progress made, from 0 to 1.\n\n\nnum_parts UInt64\n \u2014 Number of parts to merge.\n\n\nresult_part_name String\n \u2014 Name of the part that will be formed as the result of the merge.\n\n\ntotal_size_bytes_compressed UInt64\n \u2014 Total size of compressed data in the parts being merged.\n\n\ntotal_size_marks UInt64\n \u2014 Total number of marks in the parts being merged.\n\n\nbytes_read_uncompressed UInt64\n \u2014 Amount of bytes read, decompressed.\n\n\nrows_read UInt64\n \u2014 Number of rows read.\n\n\nbytes_written_uncompressed UInt64\n \u2014 Amount of bytes written, uncompressed.\n\n\nrows_written UInt64\n \u2014 Number of rows written.\n\n\n\n\n\n\nsystem.events\n\n\nContains information about the number of events that have occurred in the system. This is used for profiling and monitoring purposes.\nExample: The number of processed SELECT queries.\nColumns: 'event String' \u2013 the event name, and 'value UInt64' \u2013 the quantity.\n\n\n\n\nsystem.metrics\n\n\n\n\nsystem.asynchronous_metrics\n\n\nContain metrics used for profiling and monitoring.\nThey usually reflect the number of events currently in the system, or the total resources consumed by the system.\nExample: The number of SELECT queries currently running; the amount of memory in use.\nsystem.asynchronous_metrics\nand\nsystem.metrics\n differ in their sets of metrics and how they are calculated.\n\n\nsystem.replicas\n\n\nContains information and status for replicated tables residing on the local server.\nThis table can be used for monitoring. The table contains a row for every Replicated* table.\n\n\nExample:\n\n\nSELECT\n \n*\n\n\nFROM\n \nsystem\n.\nreplicas\n\n\nWHERE\n \ntable\n \n=\n \nvisits\n\n\nFORMAT\n \nVertical\n\n\n\n\n\n\nRow 1:\n\u2500\u2500\u2500\u2500\u2500\u2500\ndatabase:           merge\ntable:              visits\nengine:             ReplicatedCollapsingMergeTree\nis_leader:          1\nis_readonly:        0\nis_session_expired: 0\nfuture_parts:       1\nparts_to_check:     0\nzookeeper_path:     /clickhouse/tables/01-06/visits\nreplica_name:       example01-06-1.yandex.ru\nreplica_path:       /clickhouse/tables/01-06/visits/replicas/example01-06-1.yandex.ru\ncolumns_version:    9\nqueue_size:         1\ninserts_in_queue:   0\nmerges_in_queue:    1\nlog_max_index:      596273\nlog_pointer:        596274\ntotal_replicas:     2\nactive_replicas:    2\n\n\n\n\n\nColumns:\n\n\ndatabase:           database name\ntable:              table name\nengine:             table engine name\n\nis_leader:          whether the replica is the leader\n\nOnly one replica at a time can be the leader. The leader is responsible for selecting background merges to perform.\nNote that writes can be performed to any replica that is available and has a session in ZK, regardless of whether it is a leader.\n\nis_readonly:        Whether the replica is in read-only mode.\nThis mode is turned on if the config doesn\nt have sections with ZK, if an unknown error occurred when reinitializing sessions in ZK, and during session reinitialization in ZK.\n\nis_session_expired: Whether the ZK session expired.\nBasically, the same thing as is_readonly.\n\nfuture_parts: The number of data parts that will appear as the result of INSERTs or merges that haven\nt been done yet. \n\nparts_to_check: The number of data parts in the queue for verification.\nA part is put in the verification queue if there is suspicion that it might be damaged.\n\nzookeeper_path: The path to the table data in ZK. \nreplica_name: Name of the replica in ZK. Different replicas of the same table have different names. \nreplica_path: The path to the replica data in ZK. The same as concatenating zookeeper_path/replicas/replica_path.\n\ncolumns_version: Version number of the table structure.\nIndicates how many times ALTER was performed. If replicas have different versions, it means some replicas haven\nt made all of the ALTERs yet.\n\nqueue_size:         Size of the queue for operations waiting to be performed.\nOperations include inserting blocks of data, merges, and certain other actions.\nNormally coincides with future_parts.\n\ninserts_in_queue: Number of inserts of blocks of data that need to be made.\nInsertions are usually replicated fairly quickly. If the number is high, something is wrong.\n\nmerges_in_queue: The number of merges waiting to be made. \nSometimes merges are lengthy, so this value may be greater than zero for a long time.\n\nThe next 4 columns have a non-null value only if the ZK session is active.\n\nlog_max_index:     Maximum entry number in the log of general activity.\nlog_pointer:        Maximum entry number in the log of general activity that the replica copied to its execution queue, plus one.\nIf log_pointer is much smaller than log_max_index, something is wrong.\n\ntotal_replicas:     Total number of known replicas of this table.\nactive_replicas:    Number of replicas of this table that have a ZK session (the number of active replicas).\n\n\n\n\n\nIf you request all the columns, the table may work a bit slowly, since several reads from ZK are made for each row.\nIf you don't request the last 4 columns (log_max_index, log_pointer, total_replicas, active_replicas), the table works quickly.\n\n\nFor example, you can check that everything is working correctly like this:\n\n\nSELECT\n\n    \ndatabase\n,\n\n    \ntable\n,\n\n    \nis_leader\n,\n\n    \nis_readonly\n,\n\n    \nis_session_expired\n,\n\n    \nfuture_parts\n,\n\n    \nparts_to_check\n,\n\n    \ncolumns_version\n,\n\n    \nqueue_size\n,\n\n    \ninserts_in_queue\n,\n\n    \nmerges_in_queue\n,\n\n    \nlog_max_index\n,\n\n    \nlog_pointer\n,\n\n    \ntotal_replicas\n,\n\n    \nactive_replicas\n\n\nFROM\n \nsystem\n.\nreplicas\n\n\nWHERE\n\n       \nis_readonly\n\n    \nOR\n \nis_session_expired\n\n    \nOR\n \nfuture_parts\n \n \n20\n\n    \nOR\n \nparts_to_check\n \n \n10\n\n    \nOR\n \nqueue_size\n \n \n20\n\n    \nOR\n \ninserts_in_queue\n \n \n10\n\n    \nOR\n \nlog_max_index\n \n-\n \nlog_pointer\n \n \n10\n\n    \nOR\n \ntotal_replicas\n \n \n2\n\n    \nOR\n \nactive_replicas\n \n \ntotal_replicas\n\n\n\n\n\n\nIf this query doesn't return anything, it means that everything is fine.\n\n\nsystem.dictionaries\n\n\nContains information about external dictionaries.\n\n\nColumns:\n\n\n\n\nname String\n \u2013 Dictionary name.\n\n\ntype String\n \u2013 Dictionary type: Flat, Hashed, Cache.\n\n\norigin String\n \u2013 Path to the config file where the dictionary is described.\n\n\nattribute.names Array(String)\n \u2013 Array of attribute names provided by the dictionary.\n\n\nattribute.types Array(String)\n \u2013 Corresponding array of attribute types provided by the dictionary.\n\n\nhas_hierarchy UInt8\n \u2013 Whether the dictionary is hierarchical.\n\n\nbytes_allocated UInt64\n \u2013 The amount of RAM used by the dictionary.\n\n\nhit_rate Float64\n \u2013 For cache dictionaries, the percent of usage for which the value  was in the cache.\n\n\nelement_count UInt64\n \u2013 The number of items stored in the dictionary.\n\n\nload_factor Float64\n \u2013 The filled percentage of the dictionary (for a hashed dictionary, it is the filled percentage of the hash table).\n\n\ncreation_time DateTime\n \u2013 Time spent for the creation or last successful reload of the dictionary.\n\n\nlast_exception String\n \u2013 Text of an error that occurred when creating or reloading the dictionary, if the dictionary couldn't be created.\n\n\nsource String\n \u2013 Text describing the data source for the dictionary.\n\n\n\n\nNote that the amount of memory used by the dictionary is not proportional to the number of items stored in it. So for flat and cached dictionaries, all the memory cells are pre-assigned, regardless of how full the dictionary actually is.\n\n\nsystem.clusters\n\n\nContains information about clusters available in the config file and the servers in them.\nColumns:\n\n\ncluster String      \u2013 Cluster name.\nshard_num UInt32    \u2013 Number of a shard in the cluster, starting from 1.\nshard_weight UInt32 \u2013 Relative weight of a shard when writing data.\nreplica_num UInt32  \u2013 Number of a replica in the shard, starting from 1.\nhost_name String    \u2013 Host name as specified in the config.\nhost_address String \u2013 Host\ns IP address obtained from DNS.\nport UInt16         \u2013 The port used to access the server.\nuser String         \u2013 The username to use for connecting to the server.\n\n\n\n\n\nsystem.functions\n\n\nContains information about normal and aggregate functions.\n\n\nColumns:\n\n\n\n\nname\n (\nString\n) \u2013 Function name.\n\n\nis_aggregate\n (\nUInt8\n) \u2013 Whether it is an aggregate function.\n\n\n\n\nsystem.settings\n\n\nContains information about settings that are currently in use.\nI.e. used for executing the query you are using to read from the system.settings table).\n\n\nColumns:\n\n\nname String   \u2013 Setting name.\nvalue String  \u2013 Setting value.\nchanged UInt8 - Whether the setting was explicitly defined in the config or explicitly changed.\n\n\n\n\n\nExample:\n\n\nSELECT\n \n*\n\n\nFROM\n \nsystem\n.\nsettings\n\n\nWHERE\n \nchanged\n\n\n\n\n\n\n\u250c\u2500name\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500value\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500changed\u2500\u2510\n\u2502 max_threads            \u2502 8           \u2502       1 \u2502\n\u2502 use_uncompressed_cache \u2502 0           \u2502       1 \u2502\n\u2502 load_balancing         \u2502 random      \u2502       1 \u2502\n\u2502 max_memory_usage       \u2502 10000000000 \u2502       1 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n\n\nsystem.zookeeper\n\n\nAllows reading data from the ZooKeeper cluster defined in the config.\nThe query must have a 'path' equality condition in the WHERE clause. This is the path in ZooKeeper for the children that you want to get data for.\n\n\nThe query \nSELECT * FROM system.zookeeper WHERE path = '/clickhouse'\n outputs data for all children on the \n/clickhouse\n node.\nTo output data for all root nodes, write path = '/'.\nIf the path specified in 'path' doesn't exist, an exception will be thrown.\n\n\nColumns:\n\n\n\n\nname String\n \u2014 Name of the node.\n\n\npath String\n \u2014 Path to the node.\n\n\nvalue String\n \u2014 Value of the node.\n\n\ndataLength Int32\n \u2014 Size of the value.\n\n\nnumChildren Int32\n \u2014 Number of children.\n\n\nczxid Int64\n \u2014 ID of the transaction that created the node.\n\n\nmzxid Int64\n \u2014 ID of the transaction that last changed the node.\n\n\npzxid Int64\n \u2014 ID of the transaction that last added or removed children.\n\n\nctime DateTime\n \u2014 Time of node creation.\n\n\nmtime DateTime\n \u2014 Time of the last node modification.\n\n\nversion Int32\n \u2014 Node version - the number of times the node was changed.\n\n\ncversion Int32\n \u2014 Number of added or removed children.\n\n\naversion Int32\n \u2014 Number of changes to ACL.\n\n\nephemeralOwner Int64\n \u2014 For ephemeral nodes, the ID of the session that owns this node.\n\n\n\n\nExample:\n\n\nSELECT\n \n*\n\n\nFROM\n \nsystem\n.\nzookeeper\n\n\nWHERE\n \npath\n \n=\n \n/clickhouse/tables/01-08/visits/replicas\n\n\nFORMAT\n \nVertical\n\n\n\n\n\n\nRow 1:\n\u2500\u2500\u2500\u2500\u2500\u2500\nname:           example01-08-1.yandex.ru\nvalue:\nczxid:          932998691229\nmzxid:          932998691229\nctime:          2015-03-27 16:49:51\nmtime:          2015-03-27 16:49:51\nversion:        0\ncversion:       47\naversion:       0\nephemeralOwner: 0\ndataLength:     0\nnumChildren:    7\npzxid:          987021031383\npath:           /clickhouse/tables/01-08/visits/replicas\n\nRow 2:\n\u2500\u2500\u2500\u2500\u2500\u2500\nname:           example01-08-2.yandex.ru\nvalue:\nczxid:          933002738135\nmzxid:          933002738135\nctime:          2015-03-27 16:57:01\nmtime:          2015-03-27 16:57:01\nversion:        0\ncversion:       37\naversion:       0\nephemeralOwner: 0\ndataLength:     0\nnumChildren:    7\npzxid:          987021252247\npath:           /clickhouse/tables/01-08/visits/replicas\n\n\n\n\n\nTable functions\n\n\nTable functions can be specified in the FROM clause instead of the database and table names.\nTable functions can only be used if 'readonly' is not set.\nTable functions aren't related to other functions.\n\n\n\n\nremote\n\n\nAllows you to access remote servers without creating a \nDistributed\n table.\n\n\nSignatures:\n\n\nremote\n(\naddresses_expr\n,\n \ndb\n,\n \ntable\n[,\n \nuser\n[,\n \npassword\n]])\n\n\nremote\n(\naddresses_expr\n,\n \ndb\n.\ntable\n[,\n \nuser\n[,\n \npassword\n]])\n\n\n\n\n\n\naddresses_expr\n \u2013 An expression that generates addresses of remote servers. This may be just one server address. The server address is \nhost:port\n, or just \nhost\n. The host can be specified as the server name, or as the IPv4 or IPv6 address. An IPv6 address is specified in square brackets. The port is the TCP port on the remote server. If the port is omitted, it uses \ntcp_port\n from the server's config file (by default, 9000).\n\n\n\n\nThe port is required for an IPv6 address.\n\n\n\n\n\nExamples:\n\n\nexample01-01-1\nexample01-01-1:9000\nlocalhost\n127.0.0.1\n[::]:9000\n[2a02:6b8:0:1111::11]:9000\n\n\n\n\n\nMultiple addresses can be comma-separated. In this case, ClickHouse will use distributed processing, so it will send the query to all specified addresses (like to shards with different data).\n\n\nExample:\n\n\nexample01-01-1,example01-02-1\n\n\n\n\n\nPart of the expression can be specified in curly brackets. The previous example can be written as follows:\n\n\nexample01-0{1,2}-1\n\n\n\n\n\nCurly brackets can contain a range of numbers separated by two dots (non-negative integers). In this case, the range is expanded to a set of values that generate shard addresses. If the first number starts with zero, the values are formed with the same zero alignment. The previous example can be written as follows:\n\n\nexample01-{01..02}-1\n\n\n\n\n\nIf you have multiple pairs of curly brackets, it generates the direct product of the corresponding sets.\n\n\nAddresses and parts of addresses in curly brackets can be separated by the pipe symbol (|). In this case, the corresponding sets of addresses are interpreted as replicas, and the query will be sent to the first healthy replica. However, the replicas are iterated in the order currently set in the \nload_balancing\n setting.\n\n\nExample:\n\n\nexample01-{01..02}-{1|2}\n\n\n\n\n\nThis example specifies two shards that each have two replicas.\n\n\nThe number of addresses generated is limited by a constant. Right now this is 1000 addresses.\n\n\nUsing the \nremote\n table function is less optimal than creating a \nDistributed\n table, because in this case, the server connection is re-established for every request. In addition, if host names are set, the names are resolved, and errors are not counted when working with various replicas. When processing a large number of queries, always create the \nDistributed\n table ahead of time, and don't use the \nremote\n table function.\n\n\nThe \nremote\n table function can be useful in the following cases:\n\n\n\n\nAccessing a specific server for data comparison, debugging, and testing.\n\n\nQueries between various ClickHouse clusters for research purposes.\n\n\nInfrequent distributed requests that are made manually.\n\n\nDistributed requests where the set of servers is re-defined each time.\n\n\n\n\nIf the user is not specified, \ndefault\n is used.\nIf the password is not specified, an empty password is used.\n\n\nmerge\n\n\nmerge(db_name, 'tables_regexp')\n \u2013 Creates a temporary Merge table. For more information, see the section \"Table engines, Merge\".\n\n\nThe table structure is taken from the first table encountered that matches the regular expression.\n\n\nnumbers\n\n\nnumbers(N)\n \u2013 Returns a table with the single 'number' column (UInt64) that contains integers from 0 to N-1.\n\n\nSimilar to the \nsystem.numbers\n table, it can be used for testing and generating successive values.\n\n\nThe following two queries are equivalent:\n\n\nSELECT\n \n*\n \nFROM\n \nnumbers\n(\n10\n);\n\n\nSELECT\n \n*\n \nFROM\n \nsystem\n.\nnumbers\n \nLIMIT\n \n10\n;\n\n\n\n\n\n\nExamples:\n\n\n-- Generate a sequence of dates from 2010-01-01 to 2010-12-31\n\n\nselect\n \ntoDate\n(\n2010-01-01\n)\n \n+\n \nnumber\n \nas\n \nd\n \nFROM\n \nnumbers\n(\n365\n);\n\n\n\n\n\n\n\n\nFormats\n\n\nThe format determines how data is returned to you after SELECTs (how it is written and formatted by the server), and how it is accepted for INSERTs (how it is read and parsed by the server).\n\n\nTabSeparated\n\n\nIn TabSeparated format, data is written by row. Each row contains values separated by tabs. Each value is follow by a tab, except the last value in the row, which is followed by a line feed. Strictly Unix line feeds are assumed everywhere. The last row also must contain a line feed at the end. Values are written in text format, without enclosing quotation marks, and with special characters escaped.\n\n\nInteger numbers are written in decimal form. Numbers can contain an extra \"+\" character at the beginning (ignored when parsing, and not recorded when formatting). Non-negative numbers can't contain the negative sign. When reading, it is allowed to parse an empty string as a zero, or (for signed types) a string consisting of just a minus sign as a zero. Numbers that do not fit into the corresponding data type may be parsed as a different number, without an error message.\n\n\nFloating-point numbers are written in decimal form. The dot is used as the decimal separator. Exponential entries are supported, as are 'inf', '+inf', '-inf', and 'nan'. An entry of floating-point numbers may begin or end with a decimal point.\nDuring formatting, accuracy may be lost on floating-point numbers.\nDuring parsing, it is not strictly required to read the nearest machine-representable number.\n\n\nDates are written in YYYY-MM-DD format and parsed in the same format, but with any characters as separators.\nDates with times are written in the format YYYY-MM-DD hh:mm:ss and parsed in the same format, but with any characters as separators.\nThis all occurs in the system time zone at the time the client or server starts (depending on which one formats data). For dates with times, daylight saving time is not specified. So if a dump has times during daylight saving time, the dump does not unequivocally match the data, and parsing will select one of the two times.\nDuring a read operation, incorrect dates and dates with times can be parsed with natural overflow or as null dates and times, without an error message.\n\n\nAs an exception, parsing dates with times is also supported in Unix timestamp format, if it consists of exactly 10 decimal digits. The result is not time zone-dependent. The formats YYYY-MM-DD hh:mm:ss and NNNNNNNNNN are differentiated automatically.\n\n\nStrings are output with backslash-escaped special characters. The following escape sequences are used for output: \n\\b\n, \n\\f\n, \n\\r\n, \n\\n\n, \n\\t\n, \n\\0\n, \n\\'\n, \n\\\\\n. Parsing also supports the sequences \n\\a\n, \n\\v\n, and \n\\xHH\n  (hex escape sequences) and any \n\\c\n sequences, where \nc\n is any character (these sequences are converted to \nc\n). Thus, reading data supports formats where a line feed can be written as \n\\n\n  or \n\\\n, or as a line feed. For example, the string \nHello world\n with a line feed between the words instead of a space can be parsed in any of the following variations:\n\n\nHello\\nworld\n\nHello\\\nworld\n\n\n\n\n\nThe second variant is supported because MySQL uses it when writing tab-separated dumps.\n\n\nThe minimum set of characters that you need to escape when passing data in TabSeparated format: tab, line feed (LF) and backslash.\n\n\nOnly a small set of symbols are escaped. You can easily stumble onto a string value that your terminal will ruin in output.\n\n\nArrays are written as a list of comma-separated values in square brackets. Number items in the array are fomratted as normally, but dates, dates with times, and strings are written in single quotes with the same escaping rules as above.\n\n\nThe TabSeparated format is convenient for processing data using custom programs and scripts. It is used by default in the HTTP interface, and in the command-line client's batch mode. This format also allows transferring data between different DBMSs. For example, you can get a dump from MySQL and upload it to ClickHouse, or vice versa.\n\n\nThe TabSeparated format supports outputting total values (when using WITH TOTALS) and extreme values (when 'extremes' is set to 1). In these cases, the total values and extremes are output after the main data. The main result, total values, and extremes are separated from each other by an empty line. Example:\n\n\nSELECT\n \nEventDate\n,\n \ncount\n()\n \nAS\n \nc\n \nFROM\n \ntest\n.\nhits\n \nGROUP\n \nBY\n \nEventDate\n \nWITH\n \nTOTALS\n \nORDER\n \nBY\n \nEventDate\n \nFORMAT\n \nTabSeparated\n``\n\n\n\n\n\n\n2014-03-17      1406958\n2014-03-18      1383658\n2014-03-19      1405797\n2014-03-20      1353623\n2014-03-21      1245779\n2014-03-22      1031592\n2014-03-23      1046491\n\n0000-00-00      8873898\n\n2014-03-17      1031592\n2014-03-23      1406958\n\n\n\n\n\nThis format is also available under the name \nTSV\n.\n\n\nTabSeparatedRaw\n\n\nDiffers from \nTabSeparated\n format in that the rows are written without escaping.\nThis format is only appropriate for outputting a query result, but not for parsing (retrieving data to insert in a table).\n\n\nThis format is also available under the name \nTSVRaw\n.\n\n\nTabSeparatedWithNames\n\n\nDiffers from the \nTabSeparated\n format in that the column names are written in the first row.\nDuring parsing, the first row is completely ignored. You can't use column names to determine their position or to check their correctness.\n(Support for parsing the header row may be added in the future.)\n\n\nThis format is also available under the name \nTSVWithNames\n.\n\n\nTabSeparatedWithNamesAndTypes\n\n\nDiffers from the \nTabSeparated\n format in that the column names are written to the first row, while the column types are in the second row.\nDuring parsing, the first and second rows are completely ignored.\n\n\nThis format is also available under the name \nTSVWithNamesAndTypes\n.\n\n\nCSV\n\n\nComma Separated Values format (\nRFC\n).\n\n\nWhen formatting, rows are enclosed in double quotes. A double quote inside a string is output as two double quotes in a row. There are no other rules for escaping characters. Date and date-time are enclosed in double quotes. Numbers are output without quotes. Values \u200b\u200bare separated by a delimiter\n. Rows are separated using the Unix line feed (LF). Arrays are serialized in CSV as follows: first the array is serialized to a string as in TabSeparated format, and then the resulting string is output to CSV in double quotes. Tuples in CSV format are serialized as separate columns (that is, their nesting in the tuple is lost).\n\n\nBy default \u2014 \n,\n. See a \nformat_csv_delimiter\n setting for additional info.\n\n\nWhen parsing, all values can be parsed either with or without quotes. Both double and single quotes are supported. Rows can also be arranged without quotes. In this case, they are parsed up to a delimiter or line feed (CR or LF). In violation of the RFC, when parsing rows without quotes, the leading and trailing spaces and tabs are ignored. For the line feed, Unix (LF), Windows (CR LF) and Mac OS Classic (CR LF) are all supported.\n\n\nThe CSV format supports the output of totals and extremes the same way as \nTabSeparated\n.\n\n\nCSVWithNames\n\n\nAlso prints the header row, similar to \nTabSeparatedWithNames\n.\n\n\nValues\n\n\nPrints every row in brackets. Rows are separated by commas. There is no comma after the last row. The values inside the brackets are also comma-separated. Numbers are output in decimal format without quotes. Arrays are output in square brackets. Strings, dates, and dates with times are output in quotes. Escaping rules and parsing are similar to the TabSeparated format. During formatting, extra spaces aren't inserted, but during parsing, they are allowed and skipped (except for spaces inside array values, which are not allowed).\n\n\nThe minimum set of characters that you need to escape when passing data in Values \u200b\u200bformat: single quotes and backslashes.\n\n\nThis is the format that is used in \nINSERT INTO t VALUES ...\n, but you can also use it for formatting query results.\n\n\nVertical\n\n\nPrints each value on a separate line with the column name specified. This format is convenient for printing just one or a few rows, if each row consists of a large number of columns.\nThis format is only appropriate for outputting a query result, but not for parsing (retrieving data to insert in a table).\n\n\nVerticalRaw\n\n\nDiffers from \nVertical\n format in that the rows are not escaped.\nThis format is only appropriate for outputting a query result, but not for parsing (retrieving data to insert in a table).\n\n\nExamples:\n\n\n:) SHOW CREATE TABLE geonames FORMAT VerticalRaw;\nRow 1:\n\u2500\u2500\u2500\u2500\u2500\u2500\nstatement: CREATE TABLE default.geonames ( geonameid UInt32, date Date DEFAULT CAST(\n2017-12-08\n AS Date)) ENGINE = MergeTree(date, geonameid, 8192)\n\n:) SELECT \nstring with \\\nquotes\\\n and \\t with some special \\n characters\n AS test FORMAT VerticalRaw;\nRow 1:\n\u2500\u2500\u2500\u2500\u2500\u2500\ntest: string with \nquotes\n and   with some special\n characters\n\n\n\n\n\nCompare with the Vertical format:\n\n\n:) SELECT \nstring with \\\nquotes\\\n and \\t with some special \\n characters\n AS test FORMAT Vertical;\nRow 1:\n\u2500\u2500\u2500\u2500\u2500\u2500\ntest: string with \\\nquotes\\\n and \\t with some special \\n characters\n\n\n\n\n\nJSON\n\n\nOutputs data in JSON format. Besides data tables, it also outputs column names and types, along with some additional information: the total number of output rows, and the number of rows that could have been output if there weren't a LIMIT. Example:\n\n\nSELECT\n \nSearchPhrase\n,\n \ncount\n()\n \nAS\n \nc\n \nFROM\n \ntest\n.\nhits\n \nGROUP\n \nBY\n \nSearchPhrase\n \nWITH\n \nTOTALS\n \nORDER\n \nBY\n \nc\n \nDESC\n \nLIMIT\n \n5\n \nFORMAT\n \nJSON\n\n\n\n\n\n\n{\n\n        \nmeta\n:\n\n        \n[\n\n                \n{\n\n                        \nname\n:\n \nSearchPhrase\n,\n\n                        \ntype\n:\n \nString\n\n                \n},\n\n                \n{\n\n                        \nname\n:\n \nc\n,\n\n                        \ntype\n:\n \nUInt64\n\n                \n}\n\n        \n],\n\n\n        \ndata\n:\n\n        \n[\n\n                \n{\n\n                        \nSearchPhrase\n:\n \n,\n\n                        \nc\n:\n \n8267016\n\n                \n},\n\n                \n{\n\n                        \nSearchPhrase\n:\n \nbathroom interior design\n,\n\n                        \nc\n:\n \n2166\n\n                \n},\n\n                \n{\n\n                        \nSearchPhrase\n:\n \nyandex\n,\n\n                        \nc\n:\n \n1655\n\n                \n},\n\n                \n{\n\n                        \nSearchPhrase\n:\n \nspring 2014 fashion\n,\n\n                        \nc\n:\n \n1549\n\n                \n},\n\n                \n{\n\n                        \nSearchPhrase\n:\n \nfreeform photos\n,\n\n                        \nc\n:\n \n1480\n\n                \n}\n\n        \n],\n\n\n        \ntotals\n:\n\n        \n{\n\n                \nSearchPhrase\n:\n \n,\n\n                \nc\n:\n \n8873898\n\n        \n},\n\n\n        \nextremes\n:\n\n        \n{\n\n                \nmin\n:\n\n                \n{\n\n                        \nSearchPhrase\n:\n \n,\n\n                        \nc\n:\n \n1480\n\n                \n},\n\n                \nmax\n:\n\n                \n{\n\n                        \nSearchPhrase\n:\n \n,\n\n                        \nc\n:\n \n8267016\n\n                \n}\n\n        \n},\n\n\n        \nrows\n:\n \n5\n,\n\n\n        \nrows_before_limit_at_least\n:\n \n141137\n\n\n}\n\n\n\n\n\n\nThe JSON is compatible with JavaScript. To ensure this, some characters are additionally escaped: the slash \n/\n  is escaped as \n\\/\n; alternative line breaks \nU+2028\n and \nU+2029\n, which break some browsers, are escaped as \n\\uXXXX\n. ASCII control characters are escaped: backspace, form feed, line feed, carriage return, and horizontal tab are replaced with \n\\b\n, \n\\f\n, \n\\n\n, \n\\r\n, \n\\t\n  , as well as the remaining bytes in the 00-1F range using \n\\uXXXX\n sequences. Invalid UTF-8 sequences are changed to the replacement character \ufffd so the output text will consist of valid UTF-8 sequences. For compatibility with JavaScript, Int64 and UInt64 integers are enclosed in double quotes  by default. To remove the quotes, you can set the configuration parameter output_format_json_quote_64bit_integers to 0.\n\n\nrows\n \u2013 The total number of output rows.\n\n\nrows_before_limit_at_least\n The minimal number of rows there would have been without LIMIT. Output only if the query contains LIMIT.\nIf the query contains GROUP BY, rows_before_limit_at_least is the exact number of rows there would have been without a LIMIT.\n\n\ntotals\n \u2013 Total values (when using WITH TOTALS).\n\n\nextremes\n \u2013 Extreme values (when extremes is set to 1).\n\n\nThis format is only appropriate for outputting a query result, but not for parsing (retrieving data to insert in a table).\nSee also the JSONEachRow format.\n\n\nJSONCompact\n\n\nDiffers from JSON only in that data rows are output in arrays, not in objects.\n\n\nExample:\n\n\n{\n\n        \nmeta\n:\n\n        \n[\n\n                \n{\n\n                        \nname\n:\n \nSearchPhrase\n,\n\n                        \ntype\n:\n \nString\n\n                \n},\n\n                \n{\n\n                        \nname\n:\n \nc\n,\n\n                        \ntype\n:\n \nUInt64\n\n                \n}\n\n        \n],\n\n\n        \ndata\n:\n\n        \n[\n\n                \n[\n,\n \n8267016\n],\n\n                \n[\nbathroom interior design\n,\n \n2166\n],\n\n                \n[\nyandex\n,\n \n1655\n],\n\n                \n[\nspring 2014 fashion\n,\n \n1549\n],\n\n                \n[\nfreeform photos\n,\n \n1480\n]\n\n        \n],\n\n\n        \ntotals\n:\n \n[\n,\n8873898\n],\n\n\n        \nextremes\n:\n\n        \n{\n\n                \nmin\n:\n \n[\n,\n1480\n],\n\n                \nmax\n:\n \n[\n,\n8267016\n]\n\n        \n},\n\n\n        \nrows\n:\n \n5\n,\n\n\n        \nrows_before_limit_at_least\n:\n \n141137\n\n\n}\n\n\n\n\n\n\nThis format is only appropriate for outputting a query result, but not for parsing (retrieving data to insert in a table).\nSee also the \nJSONEachRow\n format.\n\n\nJSONEachRow\n\n\nOutputs data as separate JSON objects for each row (newline delimited JSON).\n\n\n{\nSearchPhrase\n:\n,\ncount()\n:\n8267016\n}\n\n\n{\nSearchPhrase\n:\nbathroom interior design\n,\ncount()\n:\n2166\n}\n\n\n{\nSearchPhrase\n:\nyandex\n,\ncount()\n:\n1655\n}\n\n\n{\nSearchPhrase\n:\nspring 2014 fashion\n,\ncount()\n:\n1549\n}\n\n\n{\nSearchPhrase\n:\nfreeform photo\n,\ncount()\n:\n1480\n}\n\n\n{\nSearchPhrase\n:\nangelina jolie\n,\ncount()\n:\n1245\n}\n\n\n{\nSearchPhrase\n:\nomsk\n,\ncount()\n:\n1112\n}\n\n\n{\nSearchPhrase\n:\nphotos of dog breeds\n,\ncount()\n:\n1091\n}\n\n\n{\nSearchPhrase\n:\ncurtain design\n,\ncount()\n:\n1064\n}\n\n\n{\nSearchPhrase\n:\nbaku\n,\ncount()\n:\n1000\n}\n\n\n\n\n\n\nUnlike the JSON format, there is no substitution of invalid UTF-8 sequences. Any set of bytes can be output in the rows. This is necessary so that data can be formatted without losing any information. Values are escaped in the same way as for JSON.\n\n\nFor parsing, any order is supported for the values of different columns. It is acceptable for some values to be omitted \u2013 they are treated as equal to their default values. In this case, zeros and blank rows are used as default values. Complex values that could be specified in the table are not supported as defaults. Whitespace between elements is ignored. If a comma is placed after the objects, it is ignored. Objects don't necessarily have to be separated by new lines.\n\n\nTSKV\n\n\nSimilar to TabSeparated, but outputs a value in name=value format. Names are escaped the same way as in TabSeparated format, and the = symbol is also escaped.\n\n\nSearchPhrase=   count()=8267016\nSearchPhrase=bathroom interior design    count()=2166\nSearchPhrase=yandex     count()=1655\nSearchPhrase=spring 2014 fashion    count()=1549\nSearchPhrase=freeform photos       count()=1480\nSearchPhrase=angelina jolia    count()=1245\nSearchPhrase=omsk       count()=1112\nSearchPhrase=photos of dog breeds    count()=1091\nSearchPhrase=curtain design        count()=1064\nSearchPhrase=baku       count()=1000\n\n\n\n\n\nWhen there is a large number of small columns, this format is ineffective, and there is generally no reason to use it. It is used in some departments of Yandex.\n\n\nBoth data output and parsing are supported in this format. For parsing, any order is supported for the values of different columns. It is acceptable for some values to be omitted \u2013 they are treated as equal to their default values. In this case, zeros and blank rows are used as default values. Complex values that could be specified in the table are not supported as defaults.\n\n\nParsing allows the presence of the additional field \ntskv\n without the equal sign or a value. This field is ignored.\n\n\nPretty\n\n\nOutputs data as Unicode-art tables, also using ANSI-escape sequences for setting colors in the terminal.\nA full grid of the table is drawn, and each row occupies two lines in the terminal.\nEach result block is output as a separate table. This is necessary so that blocks can be output without buffering results (buffering would be necessary in order to pre-calculate the visible width of all the values).\nTo avoid dumping too much data to the terminal, only the first 10,000 rows are printed. If the number of rows is greater than or equal to 10,000, the message \"Showed first 10 000\" is printed.\nThis format is only appropriate for outputting a query result, but not for parsing (retrieving data to insert in a table).\n\n\nThe Pretty format supports outputting total values (when using WITH TOTALS) and extremes (when 'extremes' is set to 1). In these cases, total values and extreme values are output after the main data, in separate tables. Example (shown for the PrettyCompact format):\n\n\nSELECT\n \nEventDate\n,\n \ncount\n()\n \nAS\n \nc\n \nFROM\n \ntest\n.\nhits\n \nGROUP\n \nBY\n \nEventDate\n \nWITH\n \nTOTALS\n \nORDER\n \nBY\n \nEventDate\n \nFORMAT\n \nPrettyCompact\n\n\n\n\n\n\n\u250c\u2500\u2500EventDate\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500c\u2500\u2510\n\u2502 2014-03-17 \u2502 1406958 \u2502\n\u2502 2014-03-18 \u2502 1383658 \u2502\n\u2502 2014-03-19 \u2502 1405797 \u2502\n\u2502 2014-03-20 \u2502 1353623 \u2502\n\u2502 2014-03-21 \u2502 1245779 \u2502\n\u2502 2014-03-22 \u2502 1031592 \u2502\n\u2502 2014-03-23 \u2502 1046491 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nTotals:\n\u250c\u2500\u2500EventDate\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500c\u2500\u2510\n\u2502 0000-00-00 \u2502 8873898 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nExtremes:\n\u250c\u2500\u2500EventDate\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500c\u2500\u2510\n\u2502 2014-03-17 \u2502 1031592 \u2502\n\u2502 2014-03-23 \u2502 1406958 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n\n\nPrettyCompact\n\n\nDiffers from \nPretty\n in that the grid is drawn between rows and the result is more compact.\nThis format is used by default in the command-line client in interactive mode.\n\n\nPrettyCompactMonoBlock\n\n\nDiffers from \nPrettyCompact\n in that up to 10,000 rows are buffered, then output as a single table, not by blocks.\n\n\nPrettyNoEscapes\n\n\nDiffers from Pretty in that ANSI-escape sequences aren't used. This is necessary for displaying this format in a browser, as well as for using the 'watch' command-line utility.\n\n\nExample:\n\n\nwatch -n1 \nclickhouse-client --query=\nSELECT * FROM system.events FORMAT PrettyCompactNoEscapes\n\n\n\n\n\n\nYou can use the HTTP interface for displaying in the browser.\n\n\nPrettyCompactNoEscapes\n\n\nThe same as the previous setting.\n\n\nPrettySpaceNoEscapes\n\n\nThe same as the previous setting.\n\n\nPrettySpace\n\n\nDiffers from \nPrettyCompact\n in that whitespace (space characters) is used instead of the grid.\n\n\nRowBinary\n\n\nFormats and parses data by row in binary format. Rows and values are listed consecutively, without separators.\nThis format is less efficient than the Native format, since it is row-based.\n\n\nIntegers use fixed-length little endian representation. For example, UInt64 uses 8 bytes.\nDateTime is represented as UInt32 containing the Unix timestamp as the value.\nDate is represented as a UInt16 object that contains the number of days since 1970-01-01 as the value.\nString is represented as a varint length (unsigned \nLEB128\n), followed by the bytes of the string.\nFixedString is represented simply as a sequence of bytes.\n\n\nArray is represented as a varint length (unsigned \nLEB128\n), followed by successive elements of the array.\n\n\nNative\n\n\nThe most efficient format. Data is written and read by blocks in binary format. For each block, the number of rows, number of columns, column names and types, and parts of columns in this block are recorded one after another. In other words, this format is \"columnar\" \u2013 it doesn't convert columns to rows. This is the format used in the native interface for interaction between servers, for using the command-line client, and for C++ clients.\n\n\nYou can use this format to quickly generate dumps that can only be read by the ClickHouse DBMS. It doesn't make sense to work with this format yourself.\n\n\nNull\n\n\nNothing is output. However, the query is processed, and when using the command-line client, data is transmitted to the client. This is used for tests, including productivity testing.\nObviously, this format is only appropriate for output, not for parsing.\n\n\nXML\n\n\nXML format is suitable only for output, not for parsing. Example:\n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n ?\n\n\nresult\n\n        \nmeta\n\n                \ncolumns\n\n                        \ncolumn\n\n                                \nname\nSearchPhrase\n/name\n\n                                \ntype\nString\n/type\n\n                        \n/column\n\n                        \ncolumn\n\n                                \nname\ncount()\n/name\n\n                                \ntype\nUInt64\n/type\n\n                        \n/column\n\n                \n/columns\n\n        \n/meta\n\n        \ndata\n\n                \nrow\n\n                        \nSearchPhrase\n/SearchPhrase\n\n                        \nfield\n8267016\n/field\n\n                \n/row\n\n                \nrow\n\n                        \nSearchPhrase\nbathroom interior design\n/SearchPhrase\n\n                        \nfield\n2166\n/field\n\n                \n/row\n\n                \nrow\n\n                        \nSearchPhrase\nyandex\n/SearchPhrase\n\n                        \nfield\n1655\n/field\n\n                \n/row\n\n                \nrow\n\n                        \nSearchPhrase\nspring 2014 fashion\n/SearchPhrase\n\n                        \nfield\n1549\n/field\n\n                \n/row\n\n                \nrow\n\n                        \nSearchPhrase\nfreeform photos\n/SearchPhrase\n\n                        \nfield\n1480\n/field\n\n                \n/row\n\n                \nrow\n\n                        \nSearchPhrase\nangelina jolie\n/SearchPhrase\n\n                        \nfield\n1245\n/field\n\n                \n/row\n\n                \nrow\n\n                        \nSearchPhrase\nomsk\n/SearchPhrase\n\n                        \nfield\n1112\n/field\n\n                \n/row\n\n                \nrow\n\n                        \nSearchPhrase\nphotos of dog breeds\n/SearchPhrase\n\n                        \nfield\n1091\n/field\n\n                \n/row\n\n                \nrow\n\n                        \nSearchPhrase\ncurtain design\n/SearchPhrase\n\n                        \nfield\n1064\n/field\n\n                \n/row\n\n                \nrow\n\n                        \nSearchPhrase\nbaku\n/SearchPhrase\n\n                        \nfield\n1000\n/field\n\n                \n/row\n\n        \n/data\n\n        \nrows\n10\n/rows\n\n        \nrows_before_limit_at_least\n141137\n/rows_before_limit_at_least\n\n\n/result\n\n\n\n\n\n\nIf the column name does not have an acceptable format, just 'field' is used as the element name. In general, the XML structure follows the JSON structure.\nJust as for JSON, invalid UTF-8 sequences are changed to the replacement character \ufffd so the output text will consist of valid UTF-8 sequences.\n\n\nIn string values, the characters \n and \n are escaped as \n and \n.\n\n\nArrays are output as \narray\nelem\nHello\n/elem\nelem\nWorld\n/elem\n...\n/array\n,\nand tuples as \ntuple\nelem\nHello\n/elem\nelem\nWorld\n/elem\n...\n/tuple\n.\n\n\n\n\nCapnProto\n\n\nCap'n Proto is a binary message format similar to Protocol Buffers and Thrift, but not like JSON or MessagePack.\n\n\nCap'n Proto messages are strictly typed and not self-describing, meaning they need an external schema description. The schema is applied on the fly and cached for each query.\n\n\nSELECT\n \nSearchPhrase\n,\n \ncount\n()\n \nAS\n \nc\n \nFROM\n \ntest\n.\nhits\n\n       \nGROUP\n \nBY\n \nSearchPhrase\n \nFORMAT\n \nCapnProto\n \nSETTINGS\n \nschema\n \n=\n \nschema:Message\n\n\n\n\n\n\nWhere \nschema.capnp\n looks like this:\n\n\nstruct\n \nMessage\n \n{\n\n  \nSearchPhrase\n \n@0\n \n:\nText\n;\n\n  \nc\n \n@1\n \n:\nUint64\n;\n\n\n}\n\n\n\n\n\n\nSchema files are in the file that is located in the directory specified in \n format_schema_path\n in the server configuration.\n\n\nDeserialization is effective and usually doesn't increase the system load.\n\n\n\n\nData types\n\n\nClickHouse can store various types of data in table cells.\n\n\nThis section describes the supported data types and special considerations when using and/or implementing them, if any.\n\n\nUInt8, UInt16, UInt32, UInt64, Int8, Int16, Int32, Int64\n\n\nFixed-length integers, with or without a sign.\n\n\nInt ranges\n\n\n\n\nInt8 - [-128 : 127]\n\n\nInt16 - [-32768 : 32767]\n\n\nInt32 - [-2147483648 : 2147483647]\n\n\nInt64 - [-9223372036854775808 : 9223372036854775807]\n\n\n\n\nUint ranges\n\n\n\n\nUInt8 - [0 : 255]\n\n\nUInt16 - [0 : 65535]\n\n\nUInt32 - [0 : 4294967295]\n\n\nUInt64 - [0 : 18446744073709551615]\n\n\n\n\nFloat32, Float64\n\n\nFloating point numbers\n.\n\n\nTypes are equivalent to types of C:\n\n\n\n\nFloat32\n - \nfloat\n\n\nFloat64\n  - \ndouble\n\n\n\n\nWe recommend that you store data in integer form whenever possible. For example, convert fixed precision numbers to integer values, such as monetary amounts or page load times in milliseconds.\n\n\nUsing floating-point numbers\n\n\n\n\nComputations with floating-point numbers might produce a rounding error.\n\n\n\n\nSELECT\n \n1\n \n-\n \n0\n.\n9\n\n\n\n\n\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500minus(1, 0.9)\u2500\u2510\n\u2502 0.09999999999999998 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n\n\n\n\nThe result of the calculation depends on the calculation method (the processor type and architecture of the computer system).\n\n\nFloating-point calculations might result in numbers such as infinity (\nInf\n) and \"not-a-number\" (\nNaN\n). This should be taken into account when processing the results of calculations.\n\n\nWhen reading floating point numbers from rows, the result might not be the nearest machine-representable number.\n\n\n\n\nNaN and Inf\n\n\nIn contrast to standard SQL, ClickHouse supports the following categories of floating-point numbers:\n\n\n\n\nInf\n \u2013 Infinity.\n\n\n\n\nSELECT\n \n0\n.\n5\n \n/\n \n0\n\n\n\n\n\n\n\u250c\u2500divide(0.5, 0)\u2500\u2510\n\u2502            inf \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n\n\n\n\n-Inf\n \u2013 Negative infinity.\n\n\n\n\nSELECT\n \n-\n0\n.\n5\n \n/\n \n0\n\n\n\n\n\n\n\u250c\u2500divide(-0.5, 0)\u2500\u2510\n\u2502            -inf \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n\n\n\n\nNaN\n \u2013 Not a number.\n\n\n\n\nSELECT 0 / 0\n\n\n\n\n\n\u250c\u2500divide(0, 0)\u2500\u2510\n\u2502          nan \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n\n\nSee the rules for \nNaN\n sorting in the section \nORDER BY clause\n.\n\n\nBoolean values\n\n\nThere isn't a separate type for boolean values. They use the UInt8 type, restricted to the values 0 or 1.\n\n\nString\n\n\nStrings of an arbitrary length. The length is not limited. The value can contain an arbitrary set of bytes, including null bytes.\nThe String type replaces the types VARCHAR, BLOB, CLOB, and others from other DBMSs.\n\n\nEncodings\n\n\nClickHouse doesn't have the concept of encodings. Strings can contain an arbitrary set of bytes, which are stored and output as-is.\nIf you need to store texts, we recommend using UTF-8 encoding. At the very least, if your terminal uses UTF-8 (as recommended), you can read and write your values without making conversions.\nSimilarly, certain functions for working with strings have separate variations that work under the assumption that the string contains a set of bytes representing a UTF-8 encoded text.\nFor example, the 'length' function calculates the string length in bytes, while the 'lengthUTF8' function calculates the string length in Unicode code points, assuming that the value is UTF-8 encoded.\n\n\nFixedString(N)\n\n\nA fixed-length string of N bytes (not characters or code points). N must be a strictly positive natural number.\nWhen the server reads a string that contains fewer bytes (such as when parsing INSERT data), the string is padded to N bytes by appending null bytes at the right.\nWhen the server reads a string that contains more bytes, an error message is returned.\nWhen the server writes a string (such as when outputting the result of a SELECT query), null bytes are not trimmed off of the end of the string, but are output.\nNote that this behavior differs from MySQL behavior for the CHAR type (where strings are padded with spaces, and the spaces are removed for output).\n\n\nFewer functions can work with the FixedString(N) type than with String, so it is less convenient to use.\n\n\nDate\n\n\nA date. Stored in two bytes as the number of days since 1970-01-01 (unsigned). Allows storing values from just after the beginning of the Unix Epoch to the upper threshold defined by a constant at the compilation stage (currently, this is until the year 2106, but the final fully-supported year is 2105).\nThe minimum value is output as 0000-00-00.\n\n\nThe date is stored without the time zone.\n\n\nDateTime\n\n\nDate with time. Stored in four bytes as a Unix timestamp (unsigned). Allows storing values in the same range as for the Date type. The minimal value is output as 0000-00-00 00:00:00.\nThe time is stored with accuracy up to one second (without leap seconds).\n\n\nTime zones\n\n\nThe date with time is converted from text (divided into component parts) to binary and back, using the system's time zone at the time the client or server starts. In text format, information about daylight savings is lost.\n\n\nBy default, the client switches to the timezone of the server when it connects. You can change this behavior by enabling the client command-line option \n--use_client_time_zone\n.\n\n\nSupports only those time zones that never had the time differ from UTC for a partial number of hours (without leap seconds) over the entire time range you will be working with.\n\n\nSo when working with a textual date (for example, when saving text dumps), keep in mind that there may be ambiguity during changes for daylight savings time, and there may be problems matching data if the time zone changed.\n\n\nEnum\n\n\nEnum8 or Enum16. A finite set of string values that can be stored more efficiently than the \nString\n data type.\n\n\nExample:\n\n\nEnum8(\nhello\n = 1, \nworld\n = 2)\n\n\n\n\n\n\n\nA data type with two possible values: 'hello' and 'world'.\n\n\n\n\nEach of the values is assigned a number in the range \n-128 ... 127\n for \nEnum8\n or in the range \n-32768 ... 32767\n for \nEnum16\n. All the strings and numbers must be different. An empty string is allowed. If this type is specified (in a table definition), numbers can be in an arbitrary order. However, the order does not matter.\n\n\nIn RAM, this type of column is stored in the same way as \nInt8\n or \nInt16\n  of the corresponding numerical values.\nWhen reading in text form, ClickHouse parses the value as a string and searches for the corresponding string from the set of Enum values. If it is not found, an exception is thrown. When reading in text format, the string is read and the corresponding numeric value is looked up. An exception will be thrown if it is not found.\nWhen writing in text form, it writes the value as the corresponding string. If column data contains garbage (numbers that are not from the valid set), an exception is thrown. When reading and writing in binary form, it works the same way as for Int8 and Int16 data types.\nThe implicit default value is the value with the lowest number.\n\n\nDuring \nORDER BY\n, \nGROUP BY\n, \nIN\n, \nDISTINCT\n and so on, Enums behave the same way as the corresponding numbers. For example, ORDER BY sorts them numerically. Equality and comparison operators work the same way on Enums as they do on the underlying numeric values.\n\n\nEnum values cannot be compared with numbers. Enums can be compared to a constant string. If the string compared to is not a valid value for the Enum, an exception will be thrown. The IN operator is supported with the Enum on the left hand side and a set of strings on the right hand side. The strings are the values of the corresponding Enum.\n\n\nMost numeric and string operations are not defined for Enum values, e.g. adding a number to an Enum or concatenating a string to an Enum.\nHowever, the Enum has a natural \ntoString\n function that returns its string value.\n\n\nEnum values are also convertible to numeric types using the \ntoT\n function, where T is a numeric type. When T corresponds to the enum\u2019s underlying numeric type, this conversion is zero-cost.\nThe Enum type can be changed without cost using ALTER, if only the set of values is changed. It is possible to both add and remove members of the Enum using ALTER (removing is safe only if the removed value has never been used in the table). As a safeguard, changing the numeric value of a previously defined Enum member will throw an exception.\n\n\nUsing ALTER, it is possible to change an Enum8 to an Enum16 or vice versa, just like changing an Int8 to Int16.\n\n\nArray(T)\n\n\nAn array of elements of type T. The T type can be any type, including an array.\nWe don't recommend using multidimensional arrays, because they are not well supported (for example, you can't store multidimensional arrays in tables with a MergeTree engine).\n\n\nAggregateFunction(name, types_of_arguments...)\n\n\nThe intermediate state of an aggregate function. To get it, use aggregate functions with the '-State' suffix. For more information, see \"AggregatingMergeTree\".\n\n\nTuple(T1, T2, ...)\n\n\nTuples can't be written to tables (other than Memory tables). They are used for temporary column grouping. Columns can be grouped when an IN expression is used in a query, and for specifying certain formal parameters of lambda functions. For more information, see \"IN operators\" and \"Higher order functions\".\n\n\nTuples can be output as the result of running a query. In this case, for text formats other than JSON*, values are comma-separated in brackets. In JSON* formats, tuples are output as arrays (in square brackets).\n\n\nNested data structures\n\n\nNested(Name1 Type1, Name2 Type2, ...)\n\n\nA nested data structure is like a nested table. The parameters of a nested data structure \u2013 the column names and types \u2013 are specified the same way as in a CREATE query. Each table row can correspond to any number of rows in a nested data structure.\n\n\nExample:\n\n\nCREATE\n \nTABLE\n \ntest\n.\nvisits\n\n\n(\n\n    \nCounterID\n \nUInt32\n,\n\n    \nStartDate\n \nDate\n,\n\n    \nSign\n \nInt8\n,\n\n    \nIsNew\n \nUInt8\n,\n\n    \nVisitID\n \nUInt64\n,\n\n    \nUserID\n \nUInt64\n,\n\n    \n...\n\n    \nGoals\n \nNested\n\n    \n(\n\n        \nID\n \nUInt32\n,\n\n        \nSerial\n \nUInt32\n,\n\n        \nEventTime\n \nDateTime\n,\n\n        \nPrice\n \nInt64\n,\n\n        \nOrderID\n \nString\n,\n\n        \nCurrencyID\n \nUInt32\n\n    \n),\n\n    \n...\n\n\n)\n \nENGINE\n \n=\n \nCollapsingMergeTree\n(\nStartDate\n,\n \nintHash32\n(\nUserID\n),\n \n(\nCounterID\n,\n \nStartDate\n,\n \nintHash32\n(\nUserID\n),\n \nVisitID\n),\n \n8192\n,\n \nSign\n)\n\n\n\n\n\n\nThis example declares the \nGoals\n nested data structure, which contains data about conversions (goals reached). Each row in the 'visits' table can correspond to zero or any number of conversions.\n\n\nOnly a single nesting level is supported. Columns of nested structures containing arrays are equivalent to multidimensional arrays, so they have limited support (there is no support for storing these columns in tables with the MergeTree engine).\n\n\nIn most cases, when working with a nested data structure, its individual columns are specified. To do this, the column names are separated by a dot. These columns make up an array of matching types. All the column arrays of a single nested data structure have the same length.\n\n\nExample:\n\n\nSELECT\n\n    \nGoals\n.\nID\n,\n\n    \nGoals\n.\nEventTime\n\n\nFROM\n \ntest\n.\nvisits\n\n\nWHERE\n \nCounterID\n \n=\n \n101500\n \nAND\n \nlength\n(\nGoals\n.\nID\n)\n \n \n5\n\n\nLIMIT\n \n10\n\n\n\n\n\n\n\u250c\u2500Goals.ID\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500Goals.EventTime\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [1073752,591325,591325]        \u2502 [\n2014-03-17 16:38:10\n,\n2014-03-17 16:38:48\n,\n2014-03-17 16:42:27\n]                       \u2502\n\u2502 [1073752]                      \u2502 [\n2014-03-17 00:28:25\n]                                                                   \u2502\n\u2502 [1073752]                      \u2502 [\n2014-03-17 10:46:20\n]                                                                   \u2502\n\u2502 [1073752,591325,591325,591325] \u2502 [\n2014-03-17 13:59:20\n,\n2014-03-17 22:17:55\n,\n2014-03-17 22:18:07\n,\n2014-03-17 22:18:51\n] \u2502\n\u2502 []                             \u2502 []                                                                                        \u2502\n\u2502 [1073752,591325,591325]        \u2502 [\n2014-03-17 11:37:06\n,\n2014-03-17 14:07:47\n,\n2014-03-17 14:36:21\n]                       \u2502\n\u2502 []                             \u2502 []                                                                                        \u2502\n\u2502 []                             \u2502 []                                                                                        \u2502\n\u2502 [591325,1073752]               \u2502 [\n2014-03-17 00:46:05\n,\n2014-03-17 00:46:05\n]                                             \u2502\n\u2502 [1073752,591325,591325,591325] \u2502 [\n2014-03-17 13:28:33\n,\n2014-03-17 13:30:26\n,\n2014-03-17 18:51:21\n,\n2014-03-17 18:51:45\n] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n\n\nIt is easiest to think of a nested data structure as a set of multiple column arrays of the same length.\n\n\nThe only place where a SELECT query can specify the name of an entire nested data structure instead of individual columns is the ARRAY JOIN clause. For more information, see \"ARRAY JOIN clause\". Example:\n\n\nSELECT\n\n    \nGoal\n.\nID\n,\n\n    \nGoal\n.\nEventTime\n\n\nFROM\n \ntest\n.\nvisits\n\n\nARRAY\n \nJOIN\n \nGoals\n \nAS\n \nGoal\n\n\nWHERE\n \nCounterID\n \n=\n \n101500\n \nAND\n \nlength\n(\nGoals\n.\nID\n)\n \n \n5\n\n\nLIMIT\n \n10\n\n\n\n\n\n\n\u250c\u2500Goal.ID\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500Goal.EventTime\u2500\u2510\n\u2502 1073752 \u2502 2014-03-17 16:38:10 \u2502\n\u2502  591325 \u2502 2014-03-17 16:38:48 \u2502\n\u2502  591325 \u2502 2014-03-17 16:42:27 \u2502\n\u2502 1073752 \u2502 2014-03-17 00:28:25 \u2502\n\u2502 1073752 \u2502 2014-03-17 10:46:20 \u2502\n\u2502 1073752 \u2502 2014-03-17 13:59:20 \u2502\n\u2502  591325 \u2502 2014-03-17 22:17:55 \u2502\n\u2502  591325 \u2502 2014-03-17 22:18:07 \u2502\n\u2502  591325 \u2502 2014-03-17 22:18:51 \u2502\n\u2502 1073752 \u2502 2014-03-17 11:37:06 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n\n\nYou can't perform SELECT for an entire nested data structure. You can only explicitly list individual columns that are part of it.\n\n\nFor an INSERT query, you should pass all the component column arrays of a nested data structure separately (as if they were individual column arrays). During insertion, the system checks that they have the same length.\n\n\nFor a DESCRIBE query, the columns in a nested data structure are listed separately in the same way.\n\n\nThe ALTER query is very limited for elements in a nested data structure.\n\n\nSpecial data types\n\n\nSpecial data type values can't be saved to a table or output in results, but are used as the intermediate result of running a query.\n\n\nExpression\n\n\nUsed for representing lambda expressions in high-order functions.\n\n\nSet\n\n\nUsed for the right half of an IN expression.\n\n\nOperators\n\n\nAll operators are transformed to the corresponding functions at the query parsing stage, in accordance with their precedence and associativity.\nGroups of operators are listed in order of priority (the higher it is in the list, the earlier the operator is connected to its arguments).\n\n\nAccess operators\n\n\na[N]\n  Access to an element of an array; \narrayElement(a, N) function\n.\n\n\na.N\n \u2013 Access to a tuble element; \ntupleElement(a, N)\n function.\n\n\nNumeric negation operator\n\n\n-a\n  \u2013 The \nnegate (a)\n function.\n\n\nMultiplication and division operators\n\n\na * b\n  \u2013 The \nmultiply (a, b) function.\n\n\na / b\n  \u2013 The \ndivide(a, b) function.\n\n\na % b\n \u2013 The \nmodulo(a, b) function.\n\n\nAddition and subtraction operators\n\n\na + b\n \u2013 The \nplus(a, b) function.\n\n\na - b\n  \u2013 The \nminus(a, b) function.\n\n\nComparison operators\n\n\na = b\n \u2013 The \nequals(a, b) function.\n\n\na == b\n \u2013 The \nequals(a, b) function.\n\n\na != b\n \u2013 The \nnotEquals(a, b) function.\n\n\na \n b\n \u2013 The \nnotEquals(a, b) function.\n\n\na \n= b\n \u2013 The \nlessOrEquals(a, b) function.\n\n\na \n= b\n \u2013 The \ngreaterOrEquals(a, b) function.\n\n\na \n b\n \u2013 The \nless(a, b) function.\n\n\na \n b\n \u2013 The \ngreater(a, b) function.\n\n\na LIKE s\n \u2013 The \nlike(a, b) function.\n\n\na NOT LIKE s\n \u2013 The \nnotLike(a, b) function.\n\n\na BETWEEN b AND c\n \u2013 The same as \na \n= b AND a \n= c.\n\n\nOperators for working with data sets\n\n\nSee the section \"IN operators\".\n\n\na IN ...\n \u2013 The \nin(a, b) function\n\n\na NOT IN ...\n \u2013 The \nnotIn(a, b) function.\n\n\na GLOBAL IN ...\n \u2013 The \nglobalIn(a, b) function.\n\n\na GLOBAL NOT IN ...\n \u2013 The \nglobalNotIn(a, b) function.\n\n\nLogical negation operator\n\n\nNOT a\n The \nnot(a) function.\n\n\nLogical AND operator\n\n\na AND b\n \u2013 The\nand(a, b) function.\n\n\nLogical OR operator\n\n\na OR b\n \u2013 The \nor(a, b) function.\n\n\nConditional operator\n\n\na ? b : c\n \u2013 The \nif(a, b, c) function.\n\n\nNote:\n\n\nThe conditional operator calculates the values of b and c, then checks whether condition a is met, and then returns the corresponding value. If \"b\" or \"c\" is an arrayJoin() function, each row will be replicated regardless of the \"a\" condition.\n\n\nConditional expression\n\n\nCASE\n \n[\nx\n]\n\n    \nWHEN\n \na\n \nTHEN\n \nb\n\n    \n[\nWHEN\n \n...\n \nTHEN\n \n...]\n\n    \nELSE\n \nc\n\n\nEND\n\n\n\n\n\n\nIf \"x\" is specified, then transform(x, [a, ...], [b, ...], c). Otherwise \u2013 multiIf(a, b, ..., c).\n\n\nConcatenation operator\n\n\ns1 || s2\n \u2013 The \nconcat(s1, s2) function.\n\n\nLambda creation operator\n\n\nx -\n expr\n \u2013 The \nlambda(x, expr) function.\n\n\nThe following operators do not have a priority, since they are brackets:\n\n\nArray creation operator\n\n\n[x1, ...]\n \u2013 The \narray(x1, ...) function.\n\n\nTuple creation operator\n\n\n(x1, x2, ...)\n \u2013 The \ntuple(x2, x2, ...) function.\n\n\nAssociativity\n\n\nAll binary operators have left associativity. For example, \n1 + 2 + 3\n is transformed to \nplus(plus(1, 2), 3)\n.\nSometimes this doesn't work the way you expect. For example, \nSELECT 4 \n 2 \n 3\n  will result in 0.\n\n\nFor efficiency, the \nand\n and \nor\n functions accept any number of arguments. The corresponding chains of \nAND\n and \nOR\n operators are transformed to a single call of these functions.\n\n\nFunctions\n\n\nThere are at least* two types of functions - regular functions (they are just called \"functions\") and aggregate functions. These are completely different concepts. Regular functions work as if they are applied to each row separately (for each row, the result of the function doesn't depend on the other rows). Aggregate functions accumulate a set of values from various rows (i.e. they depend on the entire set of rows).\n\n\nIn this section we discuss regular functions. For aggregate functions, see the section \"Aggregate functions\".\n\n\n* - There is a third type of function that the 'arrayJoin' function belongs to; table functions can also be mentioned separately.*\n\n\nStrong typing\n\n\nIn contrast to standard SQL, ClickHouse has strong typing. In other words, it doesn't make implicit conversions between types. Each function works for a specific set of types. This means that sometimes you need to use type conversion functions.\n\n\nCommon subexpression elimination\n\n\nAll expressions in a query that have the same AST (the same record or same result of syntactic parsing) are considered to have identical values. Such expressions are concatenated and executed once. Identical subqueries are also eliminated this way.\n\n\nTypes of results\n\n\nAll functions return a single return as the result (not several values, and not zero values). The type of result is usually defined only by the types of arguments, not by the values. Exceptions are the tupleElement function (the a.N operator), and the toFixedString function.\n\n\nConstants\n\n\nFor simplicity, certain functions can only work with constants for some arguments. For example, the right argument of the LIKE operator must be a constant.\nAlmost all functions return a constant for constant arguments. The exception is functions that generate random numbers.\nThe 'now' function returns different values for queries that were run at different times, but the result is considered a constant, since constancy is only important within a single query.\nA constant expression is also considered a constant (for example, the right half of the LIKE operator can be constructed from multiple constants).\n\n\nFunctions can be implemented in different ways for constant and non-constant arguments (different code is executed). But the results for a constant and for a true column containing only the same value should match each other.\n\n\nConstancy\n\n\nFunctions can't change the values of their arguments \u2013 any changes are returned as the result. Thus, the result of calculating separate functions does not depend on the order in which the functions are written in the query.\n\n\nError handling\n\n\nSome functions might throw an exception if the data is invalid. In this case, the query is canceled and an error text is returned to the client. For distributed processing, when an exception occurs on one of the servers, the other servers also attempt to abort the query.\n\n\nEvaluation of argument expressions\n\n\nIn almost all programming languages, one of the arguments might not be evaluated for certain operators. This is usually the operators \n, \n||\n, and \n?:\n.\nBut in ClickHouse, arguments of functions (operators) are always evaluated. This is because entire parts of columns are evaluated at once, instead of calculating each row separately.\n\n\nPerforming functions for distributed query processing\n\n\nFor distributed query processing, as many stages of query processing as possible are performed on remote servers, and the rest of the stages (merging intermediate results and everything after that) are performed on the requestor server.\n\n\nThis means that functions can be performed on different servers.\nFor example, in the query \nSELECT f(sum(g(x))) FROM distributed_table GROUP BY h(y),\n\n\n\n\nif a \ndistributed_table\n has at least two shards, the functions 'g' and 'h' are performed on remote servers, and the function 'f' is performed on the requestor server.\n\n\nif a \ndistributed_table\n has only one shard, all the 'f', 'g', and 'h' functions are performed on this shard's server.\n\n\n\n\nThe result of a function usually doesn't depend on which server it is performed on. However, sometimes this is important.\nFor example, functions that work with dictionaries use the dictionary that exists on the server they are running on.\nAnother example is the \nhostName\n function, which returns the name of the server it is running on in order to make \nGROUP BY\n by servers in a \nSELECT\n query.\n\n\nIf a function in a query is performed on the requestor server, but you need to perform it on remote servers, you can wrap it in an 'any' aggregate function or add it to a key in \nGROUP BY\n.\n\n\nArithmetic functions\n\n\nFor all arithmetic functions, the result type is calculated as the smallest number type that the result fits in, if there is such a type. The minimum is taken simultaneously based on the number of bits, whether it is signed, and whether it floats. If there are not enough bits, the highest bit type is taken.\n\n\nExample:\n\n\nSELECT\n \ntoTypeName\n(\n0\n),\n \ntoTypeName\n(\n0\n \n+\n \n0\n),\n \ntoTypeName\n(\n0\n \n+\n \n0\n \n+\n \n0\n),\n \ntoTypeName\n(\n0\n \n+\n \n0\n \n+\n \n0\n \n+\n \n0\n)\n\n\n\n\n\n\n\u250c\u2500toTypeName(0)\u2500\u252c\u2500toTypeName(plus(0, 0))\u2500\u252c\u2500toTypeName(plus(plus(0, 0), 0))\u2500\u252c\u2500toTypeName(plus(plus(plus(0, 0), 0), 0))\u2500\u2510\n\u2502 UInt8         \u2502 UInt16                 \u2502 UInt32                          \u2502 UInt64                                   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n\n\nArithmetic functions work for any pair of types from UInt8, UInt16, UInt32, UInt64, Int8, Int16, Int32, Int64, Float32, or Float64.\n\n\nOverflow is produced the same way as in C++.\n\n\nplus(a, b), a + b operator\n\n\nCalculates the sum of the numbers.\nYou can also add integer numbers with a date or date and time. In the case of a date, adding an integer means adding the corresponding number of days. For a date with time, it means adding the corresponding number of seconds.\n\n\nminus(a, b), a - b operator\n\n\nCalculates the difference. The result is always signed.\n\n\nYou can also calculate integer numbers from a date or date with time. The idea is the same \u2013 see above for 'plus'.\n\n\nmultiply(a, b), a * b operator\n\n\nCalculates the product of the numbers.\n\n\ndivide(a, b), a / b operator\n\n\nCalculates the quotient of the numbers. The result type is always a floating-point type.\nIt is not integer division. For integer division, use the 'intDiv' function.\nWhen dividing by zero you get 'inf', '-inf', or 'nan'.\n\n\nintDiv(a, b)\n\n\nCalculates the quotient of the numbers. Divides into integers, rounding down (by the absolute value).\nAn exception is thrown when dividing by zero or when dividing a minimal negative number by minus one.\n\n\nintDivOrZero(a, b)\n\n\nDiffers from 'intDiv' in that it returns zero when dividing by zero or when dividing a minimal negative number by minus one.\n\n\nmodulo(a, b), a % b operator\n\n\nCalculates the remainder after division.\nIf arguments are floating-point numbers, they are pre-converted to integers by dropping the decimal portion.\nThe remainder is taken in the same sense as in C++. Truncated division is used for negative numbers.\nAn exception is thrown when dividing by zero or when dividing a minimal negative number by minus one.\n\n\nnegate(a), -a operator\n\n\nCalculates a number with the reverse sign. The result is always signed.\n\n\nabs(a)\n\n\nCalculates the absolute value of the number (a). That is, if a \n 0, it returns -a. For unsigned types it doesn't do anything. For signed integer types, it returns an unsigned number.\n\n\ngcd(a, b)\n\n\nReturns the greatest common divisor of the numbers.\nAn exception is thrown when dividing by zero or when dividing a minimal negative number by minus one.\n\n\nlcm(a, b)\n\n\nReturns the least common multiple of the numbers.\nAn exception is thrown when dividing by zero or when dividing a minimal negative number by minus one.\n\n\nComparison functions\n\n\nComparison functions always return 0 or 1 (Uint8).\n\n\nThe following types can be compared:\n\n\n\n\nnumbers\n\n\nstrings and fixed strings\n\n\ndates\n\n\ndates with times\n\n\n\n\nwithin each group, but not between different groups.\n\n\nFor example, you can't compare a date with a string. You have to use a function to convert the string to a date, or vice versa.\n\n\nStrings are compared by bytes. A shorter string is smaller than all strings that start with it and that contain at least one more character.\n\n\nNote. Up until version 1.1.54134, signed and unsigned numbers were compared the same way as in C++. In other words, you could get an incorrect result in cases like SELECT 9223372036854775807 \n -1. This behavior changed in version 1.1.54134 and is now mathematically correct.\n\n\nequals, a = b and a == b operator\n\n\nnotEquals, a ! operator= b and a \n b\n\n\nless, \n operator\n\n\ngreater, \n operator\n\n\nlessOrEquals, \n= operator\n\n\ngreaterOrEquals, \n= operator\n\n\nLogical functions\n\n\nLogical functions accept any numeric types, but return a UInt8 number equal to 0 or 1.\n\n\nZero as an argument is considered \"false,\" while any non-zero value is considered \"true\".\n\n\nand, AND operator\n\n\nor, OR operator\n\n\nnot, NOT operator\n\n\nxor\n\n\n\n\nType conversion functions\n\n\ntoUInt8, toUInt16, toUInt32, toUInt64\n\n\ntoInt8, toInt16, toInt32, toInt64\n\n\ntoFloat32, toFloat64\n\n\ntoUInt8OrZero, toUInt16OrZero, toUInt32OrZero, toUInt64OrZero, toInt8OrZero, toInt16OrZero, toInt32OrZero, toInt64OrZero, toFloat32OrZero, toFloat64OrZero\n\n\ntoDate, toDateTime\n\n\ntoString\n\n\nFunctions for converting between numbers, strings (but not fixed strings), dates, and dates with times.\nAll these functions accept one argument.\n\n\nWhen converting to or from a string, the value is formatted or parsed using the same rules as for the TabSeparated format (and almost all other text formats). If the string can't be parsed, an exception is thrown and the request is canceled.\n\n\nWhen converting dates to numbers or vice versa, the date corresponds to the number of days since the beginning of the Unix epoch.\nWhen converting dates with times to numbers or vice versa, the date with time corresponds to the number of seconds since the beginning of the Unix epoch.\n\n\nThe date and date-with-time formats for the toDate/toDateTime functions are defined as follows:\n\n\nYYYY-MM-DD\nYYYY-MM-DD hh:mm:ss\n\n\n\n\n\nAs an exception, if converting from UInt32, Int32, UInt64, or Int64 numeric types to Date, and if the number is greater than or equal to 65536, the number is interpreted as a Unix timestamp (and not as the number of days) and is rounded to the date. This allows support for the common occurrence of writing 'toDate(unix_timestamp)', which otherwise would be an error and would require writing the more cumbersome 'toDate(toDateTime(unix_timestamp))'.\n\n\nConversion between a date and date with time is performed the natural way: by adding a null time or dropping the time.\n\n\nConversion between numeric types uses the same rules as assignments between different numeric types in C++.\n\n\nAdditionally, the toString function of the DateTime argument can take a second String argument containing the name of the time zone. Example: \nAsia/Yekaterinburg\n In this case, the time is formatted according to the specified time zone.\n\n\nSELECT\n\n    \nnow\n()\n \nAS\n \nnow_local\n,\n\n    \ntoString\n(\nnow\n(),\n \nAsia/Yekaterinburg\n)\n \nAS\n \nnow_yekat\n\n\n\n\n\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500now_local\u2500\u252c\u2500now_yekat\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 2016-06-15 00:11:21 \u2502 2016-06-15 02:11:21 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n\n\nAlso see the \ntoUnixTimestamp\n function.\n\n\ntoFixedString(s, N)\n\n\nConverts a String type argument to a FixedString(N) type (a string with fixed length N). N must be a constant.\nIf the string has fewer bytes than N, it is passed with null bytes to the right. If the string has more bytes than N, an exception is thrown.\n\n\ntoStringCutToZero(s)\n\n\nAccepts a String or FixedString argument. Returns the String with the content truncated at the first zero byte found.\n\n\nExample:\n\n\nSELECT\n \ntoFixedString\n(\nfoo\n,\n \n8\n)\n \nAS\n \ns\n,\n \ntoStringCutToZero\n(\ns\n)\n \nAS\n \ns_cut\n\n\n\n\n\n\n\u250c\u2500s\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500s_cut\u2500\u2510\n\u2502 foo\\0\\0\\0\\0\\0 \u2502 foo   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n\n\nSELECT\n \ntoFixedString\n(\nfoo\\0bar\n,\n \n8\n)\n \nAS\n \ns\n,\n \ntoStringCutToZero\n(\ns\n)\n \nAS\n \ns_cut\n\n\n\n\n\n\n\u250c\u2500s\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500s_cut\u2500\u2510\n\u2502 foo\\0bar\\0 \u2502 foo   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n\n\nreinterpretAsUInt8, reinterpretAsUInt16, reinterpretAsUInt32, reinterpretAsUInt64\n\n\nreinterpretAsInt8, reinterpretAsInt16, reinterpretAsInt32, reinterpretAsInt64\n\n\nreinterpretAsFloat32, reinterpretAsFloat64\n\n\nreinterpretAsDate, reinterpretAsDateTime\n\n\nThese functions accept a string and interpret the bytes placed at the beginning of the string as a number in host order (little endian). If the string isn't long enough, the functions work as if the string is padded with the necessary number of null bytes. If the string is longer than needed, the extra bytes are ignored. A date is interpreted as the number of days since the beginning of the Unix Epoch, and a date with time is interpreted as the number of seconds since the beginning of the Unix Epoch.\n\n\nreinterpretAsString\n\n\nThis function accepts a number or date or date with time, and returns a string containing bytes representing the corresponding value in host order (little endian). Null bytes are dropped from the end. For example, a UInt32 type value of 255 is a string that is one byte long.\n\n\nCAST(x, t)\n\n\nConverts 'x' to the 't' data type. The syntax CAST(x AS t) is also supported.\n\n\nExample:\n\n\nSELECT\n\n    \n2016-06-15 23:00:00\n \nAS\n \ntimestamp\n,\n\n    \nCAST\n(\ntimestamp\n \nAS\n \nDateTime\n)\n \nAS\n \ndatetime\n,\n\n    \nCAST\n(\ntimestamp\n \nAS\n \nDate\n)\n \nAS\n \ndate\n,\n\n    \nCAST\n(\ntimestamp\n,\n \nString\n)\n \nAS\n \nstring\n,\n\n    \nCAST\n(\ntimestamp\n,\n \nFixedString(22)\n)\n \nAS\n \nfixed_string\n\n\n\n\n\n\n\u250c\u2500timestamp\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500datetime\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500date\u2500\u252c\u2500string\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500fixed_string\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 2016-06-15 23:00:00 \u2502 2016-06-15 23:00:00 \u2502 2016-06-15 \u2502 2016-06-15 23:00:00 \u2502 2016-06-15 23:00:00\\0\\0\\0 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n\n\nConversion to FixedString (N) only works for arguments of type String or FixedString (N).\n\n\nFunctions for working with dates and times\n\n\nSupport for time zones\n\n\nAll functions for working with the date and time that have a logical use for the time zone can accept a second optional time zone argument. Example: Asia/Yekaterinburg. In this case, they use the specified time zone instead of the local (default) one.\n\n\nSELECT\n\n    \ntoDateTime\n(\n2016-06-15 23:00:00\n)\n \nAS\n \ntime\n,\n\n    \ntoDate\n(\ntime\n)\n \nAS\n \ndate_local\n,\n\n    \ntoDate\n(\ntime\n,\n \nAsia/Yekaterinburg\n)\n \nAS\n \ndate_yekat\n,\n\n    \ntoString\n(\ntime\n,\n \nUS/Samoa\n)\n \nAS\n \ntime_samoa\n\n\n\n\n\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500time\u2500\u252c\u2500date_local\u2500\u252c\u2500date_yekat\u2500\u252c\u2500time_samoa\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 2016-06-15 23:00:00 \u2502 2016-06-15 \u2502 2016-06-16 \u2502 2016-06-15 09:00:00 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n\n\nOnly time zones that differ from UTC by a whole number of hours are supported.\n\n\ntoYear\n\n\nConverts a date or date with time to a UInt16 number containing the year number (AD).\n\n\ntoMonth\n\n\nConverts a date or date with time to a UInt8 number containing the month number (1-12).\n\n\ntoDayOfMonth\n\n\n-Converts a date or date with time to a UInt8 number containing the number of the day of the month (1-31).\n\n\ntoDayOfWeek\n\n\nConverts a date or date with time to a UInt8 number containing the number of the day of the week (Monday is 1, and Sunday is 7).\n\n\ntoHour\n\n\nConverts a date with time to a UInt8 number containing the number of the hour in 24-hour time (0-23).\nThis function assumes that if clocks are moved ahead, it is by one hour and occurs at 2 a.m., and if clocks are moved back, it is by one hour and occurs at 3 a.m. (which is not always true \u2013 even in Moscow the clocks were twice changed at a different time).\n\n\ntoMinute\n\n\nConverts a date with time to a UInt8 number containing the number of the minute of the hour (0-59).\n\n\ntoSecond\n\n\nConverts a date with time to a UInt8 number containing the number of the second in the minute (0-59).\nLeap seconds are not accounted for.\n\n\ntoMonday\n\n\nRounds down a date or date with time to the nearest Monday.\nReturns the date.\n\n\ntoStartOfMonth\n\n\nRounds down a date or date with time to the first day of the month.\nReturns the date.\n\n\ntoStartOfQuarter\n\n\nRounds down a date or date with time to the first day of the quarter.\nThe first day of the quarter is either 1 January, 1 April, 1 July, or 1 October.\nReturns the date.\n\n\ntoStartOfYear\n\n\nRounds down a date or date with time to the first day of the year.\nReturns the date.\n\n\ntoStartOfMinute\n\n\nRounds down a date with time to the start of the minute.\n\n\ntoStartOfFiveMinute\n\n\nRounds down a date with time to the start of the hour.\n\n\ntoStartOfFifteenMinutes\n\n\nRounds down the date with time to the start of the fifteen-minute interval.\n\n\nNote: If you need to round a date with time to any other number of seconds, minutes, or hours, you can convert it into a number by using the toUInt32 function, then round the number using intDiv and multiplication, and convert it back using the toDateTime function.\n\n\ntoStartOfHour\n\n\nRounds down a date with time to the start of the hour.\n\n\ntoStartOfDay\n\n\nRounds down a date with time to the start of the day.\n\n\ntoTime\n\n\nConverts a date with time to a certain fixed date, while preserving the time.\n\n\ntoRelativeYearNum\n\n\nConverts a date with time or date to the number of the year, starting from a certain fixed point in the past.\n\n\ntoRelativeMonthNum\n\n\nConverts a date with time or date to the number of the month, starting from a certain fixed point in the past.\n\n\ntoRelativeWeekNum\n\n\nConverts a date with time or date to the number of the week, starting from a certain fixed point in the past.\n\n\ntoRelativeDayNum\n\n\nConverts a date with time or date to the number of the day, starting from a certain fixed point in the past.\n\n\ntoRelativeHourNum\n\n\nConverts a date with time or date to the number of the hour, starting from a certain fixed point in the past.\n\n\ntoRelativeMinuteNum\n\n\nConverts a date with time or date to the number of the minute, starting from a certain fixed point in the past.\n\n\ntoRelativeSecondNum\n\n\nConverts a date with time or date to the number of the second, starting from a certain fixed point in the past.\n\n\nnow\n\n\nAccepts zero arguments and returns the current time at one of the moments of request execution.\nThis function returns a constant, even if the request took a long time to complete.\n\n\ntoday\n\n\nAccepts zero arguments and returns the current date at one of the moments of request execution.\nThe same as 'toDate(now())'.\n\n\nyesterday\n\n\nAccepts zero arguments and returns yesterday's date at one of the moments of request execution.\nThe same as 'today() - 1'.\n\n\ntimeSlot\n\n\nRounds the time to the half hour.\nThis function is specific to Yandex.Metrica, since half an hour is the minimum amount of time for breaking a session into two sessions if a tracking tag shows a single user's consecutive pageviews that differ in time by strictly more than this amount. This means that tuples (the tag ID, user ID, and time slot) can be used to search for pageviews that are included in the corresponding session.\n\n\ntimeSlots(StartTime, Duration)\n\n\nFor a time interval starting at 'StartTime' and continuing for 'Duration' seconds, it returns an array of moments in time, consisting of points from this interval rounded down to the half hour.\nFor example, \ntimeSlots(toDateTime('2012-01-01 12:20:00'), 600) = [toDateTime('2012-01-01 12:00:00'), toDateTime('2012-01-01 12:30:00')]\n.\nThis is necessary for searching for pageviews in the corresponding session.\n\n\nFunctions for working with strings\n\n\nempty\n\n\nReturns 1 for an empty string or 0 for a non-empty string.\nThe result type is UInt8.\nA string is considered non-empty if it contains at least one byte, even if this is a space or a null byte.\nThe function also works for arrays.\n\n\nnotEmpty\n\n\nReturns 0 for an empty string or 1 for a non-empty string.\nThe result type is UInt8.\nThe function also works for arrays.\n\n\nlength\n\n\nReturns the length of a string in bytes (not in characters, and not in code points).\nThe result type is UInt64.\nThe function also works for arrays.\n\n\nlengthUTF8\n\n\nReturns the length of a string in Unicode code points (not in characters), assuming that the string contains a set of bytes that make up UTF-8 encoded text. If this assumption is not met, it returns some result (it doesn't throw an exception).\nThe result type is UInt64.\n\n\nlower\n\n\nConverts ASCII Latin symbols in a string to lowercase.\n\n\nupper\n\n\nConverts ASCII Latin symbols in a string to uppercase.\n\n\nlowerUTF8\n\n\nConverts a string to lowercase, assuming the string contains a set of bytes that make up a UTF-8 encoded text.\nIt doesn't detect the language. So for Turkish the result might not be exactly correct.\nIf the length of the UTF-8 byte sequence is different for upper and lower case of a code point, the result may be incorrect for this code point.\nIf the string contains a set of bytes that is not UTF-8, then the behavior is undefined.\n\n\nupperUTF8\n\n\nConverts a string to uppercase, assuming the string contains a set of bytes that make up a UTF-8 encoded text.\nIt doesn't detect the language. So for Turkish the result might not be exactly correct.\nIf the length of the UTF-8 byte sequence is different for upper and lower case of a code point, the result may be incorrect for this code point.\nIf the string contains a set of bytes that is not UTF-8, then the behavior is undefined.\n\n\nreverse\n\n\nReverses the string (as a sequence of bytes).\n\n\nreverseUTF8\n\n\nReverses a sequence of Unicode code points, assuming that the string contains a set of bytes representing a UTF-8 text. Otherwise, it does something else (it doesn't throw an exception).\n\n\nconcat(s1, s2, ...)\n\n\nConcatenates the strings listed in the arguments, without a separator.\n\n\nsubstring(s, offset, length)\n\n\nReturns a substring starting with the byte from the 'offset' index that is 'length' bytes long. Character indexing starts from one (as in standard SQL). The 'offset' and 'length' arguments must be constants.\n\n\nsubstringUTF8(s, offset, length)\n\n\nThe same as 'substring', but for Unicode code points. Works under the assumption that the string contains a set of bytes representing a UTF-8 encoded text. If this assumption is not met, it returns some result (it doesn't throw an exception).\n\n\nappendTrailingCharIfAbsent(s, c)\n\n\nIf the 's' string is non-empty and does not contain the 'c' character at the end, it appends the 'c' character to the end.\n\n\nconvertCharset(s, from, to)\n\n\nReturns the string 's' that was converted from the encoding in 'from' to the encoding in 'to'.\n\n\nFunctions for searching strings\n\n\nThe search is case-sensitive in all these functions.\nThe search substring or regular expression must be a constant in all these functions.\n\n\nposition(haystack, needle)\n\n\nSearch for the \nneedle\n substring in the \nhaystack\n string.\nReturns the position (in bytes) of the found substring, starting from 1, or returns 0 if the substring was not found.\n\n\nFor case-insensitive search use \npositionCaseInsensitive\n function.\n\n\npositionUTF8(haystack, needle)\n\n\nThe same as \nposition\n, but the position is returned in Unicode code points. Works under the assumption that the string contains a set of bytes representing a UTF-8 encoded text. If this assumption is not met, it returns some result (it doesn't throw an exception).\n\n\nFor case-insensitive search use \npositionCaseInsensitiveUTF8\n function.\n\n\nmatch(haystack, pattern)\n\n\nChecks whether the string matches the 'pattern' regular expression. A re2 regular expression.\nReturns 0 if it doesn't match, or 1 if it matches.\n\n\nNote that the backslash symbol (\n\\\n) is used for escaping in the regular expression. The same symbol is used for escaping in string literals. So in order to escape the symbol in a regular expression, you must write two backslashes (\\) in a string literal.\n\n\nThe regular expression works with the string as if it is a set of bytes. The regular expression can't contain null bytes.\nFor patterns to search for substrings in a string, it is better to use LIKE or 'position', since they work much faster.\n\n\nextract(haystack, pattern)\n\n\nExtracts a fragment of a string using a regular expression. If 'haystack' doesn't match the 'pattern' regex, an empty string is returned. If the regex doesn't contain subpatterns, it takes the fragment that matches the entire regex. Otherwise, it takes the fragment that matches the first subpattern.\n\n\nextractAll(haystack, pattern)\n\n\nExtracts all the fragments of a string using a regular expression. If 'haystack' doesn't match the 'pattern' regex, an empty string is returned. Returns an array of strings consisting of all matches to the regex. In general, the behavior is the same as the 'extract' function (it takes the first subpattern, or the entire expression if there isn't a subpattern).\n\n\nlike(haystack, pattern), haystack LIKE pattern operator\n\n\nChecks whether a string matches a simple regular expression.\nThe regular expression can contain the metasymbols \n%\n and \n_\n.\n\n\n``% indicates any quantity of any bytes (including zero characters).\n\n\n_\n indicates any one byte.\n\n\nUse the backslash (\n\\\n) for escaping metasymbols. See the note on escaping in the description of the 'match' function.\n\n\nFor regular expressions like \n%needle%\n, the code is more optimal and works as fast as the \nposition\n function.\nFor other regular expressions, the code is the same as for the 'match' function.\n\n\nnotLike(haystack, pattern), haystack NOT LIKE pattern operator\n\n\nThe same thing as 'like', but negative.\n\n\nFunctions for searching and replacing in strings\n\n\nreplaceOne(haystack, pattern, replacement)\n\n\nReplaces the first occurrence, if it exists, of the 'pattern' substring in 'haystack' with the 'replacement' substring.\nHereafter, 'pattern' and 'replacement' must be constants.\n\n\nreplaceAll(haystack, pattern, replacement)\n\n\nReplaces all occurrences of the 'pattern' substring in 'haystack' with the 'replacement' substring.\n\n\nreplaceRegexpOne(haystack, pattern, replacement)\n\n\nReplacement using the 'pattern' regular expression. A re2 regular expression.\nReplaces only the first occurrence, if it exists.\nA pattern can be specified as 'replacement'. This pattern can include substitutions \n\\0-\\9\n.\nThe substitution \n\\0\n includes the entire regular expression. Substitutions \n\\1-\\9\n correspond to the subpattern numbers.To use the \n\\\n character in a template, escape it using \n\\\n.\nAlso keep in mind that a string literal requires an extra escape.\n\n\nExample 1. Converting the date to American format:\n\n\nSELECT\n \nDISTINCT\n\n    \nEventDate\n,\n\n    \nreplaceRegexpOne\n(\ntoString\n(\nEventDate\n),\n \n(\\\\d{4})-(\\\\d{2})-(\\\\d{2})\n,\n \n\\\\2/\\\\3/\\\\1\n)\n \nAS\n \nres\n\n\nFROM\n \ntest\n.\nhits\n\n\nLIMIT\n \n7\n\n\nFORMAT\n \nTabSeparated\n\n\n\n\n\n\n2014-03-17      03/17/2014\n2014-03-18      03/18/2014\n2014-03-19      03/19/2014\n2014-03-20      03/20/2014\n2014-03-21      03/21/2014\n2014-03-22      03/22/2014\n2014-03-23      03/23/2014\n\n\n\n\n\nExample 2. Copying a string ten times:\n\n\nSELECT\n \nreplaceRegexpOne\n(\nHello, World!\n,\n \n.*\n,\n \n\\\\0\\\\0\\\\0\\\\0\\\\0\\\\0\\\\0\\\\0\\\\0\\\\0\n)\n \nAS\n \nres\n\n\n\n\n\n\n\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Hello, World!Hello, World!Hello, World!Hello, World!Hello, World!Hello, World!Hello, World!Hello, World!Hello, World!Hello, World! \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n\n\nreplaceRegexpAll(haystack, pattern, replacement)\n\n\nThis does the same thing, but replaces all the occurrences. Example:\n\n\nSELECT\n \nreplaceRegexpAll\n(\nHello, World!\n,\n \n.\n,\n \n\\\\0\\\\0\n)\n \nAS\n \nres\n\n\n\n\n\n\n\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 HHeelllloo,,  WWoorrlldd!! \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n\n\nAs an exception, if a regular expression worked on an empty substring, the replacement is not made more than once.\nExample:\n\n\nSELECT\n \nreplaceRegexpAll\n(\nHello, World!\n,\n \n^\n,\n \nhere: \n)\n \nAS\n \nres\n\n\n\n\n\n\n\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 here: Hello, World! \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n\n\nConditional functions\n\n\nif(cond, then, else), cond ? operator then : else\n\n\nReturns 'then' if cond !or 'else' if cond = 0.'cond' must be UInt 8, and 'then' and 'else' must be a type that has the smallest common type.\n\n\nMathematical functions\n\n\nAll the functions return a Float64 number. The accuracy of the result is close to the maximum precision possible, but the result might not coincide with the machine representable number nearest to the corresponding real number.\n\n\ne()\n\n\nReturns a Float64 number close to the e number.\n\n\npi()\n\n\nReturns a Float64 number close to \u03c0.\n\n\nexp(x)\n\n\nAccepts a numeric argument and returns a Float64 number close to the exponent of the argument.\n\n\nlog(x)\n\n\nAccepts a numeric argument and returns a Float64 number close to the natural logarithm of the argument.\n\n\nexp2(x)\n\n\nAccepts a numeric argument and returns a Float64 number close to 2^x.\n\n\nlog2(x)\n\n\nAccepts a numeric argument and returns a Float64 number close to the binary logarithm of the argument.\n\n\nexp10(x)\n\n\nAccepts a numeric argument and returns a Float64 number close to 10^x.\n\n\nlog10(x)\n\n\nAccepts a numeric argument and returns a Float64 number close to the decimal logarithm of the argument.\n\n\nsqrt(x)\n\n\nAccepts a numeric argument and returns a Float64 number close to the square root of the argument.\n\n\ncbrt(x)\n\n\nAccepts a numeric argument and returns a Float64 number close to the cubic root of the argument.\n\n\nerf(x)\n\n\nIf 'x' is non-negative, then erf(x / \u03c3\u221a2)\n is the probability that a random variable having a normal distribution with standard deviation '\u03c3' takes the value that is separated from the expected value by more than 'x'.\n\n\nExample (three sigma rule):\n\n\nSELECT\n \nerf\n(\n3\n \n/\n \nsqrt\n(\n2\n))\n\n\n\n\n\n\n\u250c\u2500erf(divide(3, sqrt(2)))\u2500\u2510\n\u2502      0.9973002039367398 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n\n\nerfc(x)\n\n\nAccepts a numeric argument and returns a Float64 number close to 1 - erf(x), but without loss of precision for large 'x' values.\n\n\nlgamma(x)\n\n\nThe logarithm of the gamma function.\n\n\ntgamma(x)\n\n\nGamma function.\n\n\nsin(x)\n\n\nThe sine.\n\n\ncos(x)\n\n\nThe cosine.\n\n\ntan(x)\n\n\nThe tangent.\n\n\nasin(x)\n\n\nThe arc sine.\n\n\nacos(x)\n\n\nThe arc cosine.\n\n\natan(x)\n\n\nThe arc tangent.\n\n\npow(x, y)\n\n\nAccepts two numeric arguments and returns a Float64 number close to x^y.\n\n\nRounding functions\n\n\nfloor(x[, N])\n\n\nReturns the largest round number that is less than or equal to x. A round number is a multiple of 1/10N, or the nearest number of the appropriate data type if 1 / 10N isn't exact.\n'N' is an integer constant, optional parameter. By default it is zero, which means to round to an integer.\n'N' may be negative.\n\n\nExamples: \nfloor(123.45, 1) = 123.4, floor(123.45, -1) = 120.\n\n\nx\n is any numeric type. The result is a number of the same type.\nFor integer arguments, it makes sense to round with a negative 'N' value (for non-negative 'N', the function doesn't do anything).\nIf rounding causes overflow (for example, floor(-128, -1)), an implementation-specific result is returned.\n\n\nceil(x[, N])\n\n\nReturns the smallest round number that is greater than or equal to 'x'. In every other way, it is the same as the 'floor' function (see above).\n\n\nround(x[, N])\n\n\nReturns the round number nearest to 'num', which may be less than, greater than, or equal to 'x'.If 'x' is exactly in the middle between the nearest round numbers, one of them is returned (implementation-specific).\nThe number '-0.' may or may not be considered round (implementation-specific).\nIn every other way, this function is the same as 'floor' and 'ceil' described above.\n\n\nroundToExp2(num)\n\n\nAccepts a number. If the number is less than one, it returns 0. Otherwise, it rounds the number down to the nearest (whole non-negative) degree of two.\n\n\nroundDuration(num)\n\n\nAccepts a number. If the number is less than one, it returns 0. Otherwise, it rounds the number down to numbers from the set: 1, 10, 30, 60, 120, 180, 240, 300, 600, 1200, 1800, 3600, 7200, 18000, 36000. This function is specific to Yandex.Metrica and used for implementing the report on session length\n\n\nroundAge(num)\n\n\nAccepts a number. If the number is less than 18, it returns 0. Otherwise, it rounds the number down to a number from the set: 18, 25, 35, 45, 55. This function is specific to Yandex.Metrica and used for implementing the report on user age.\n\n\nFunctions for working with arrays\n\n\nempty\n\n\nReturns 1 for an empty array, or 0 for a non-empty array.\nThe result type is UInt8.\nThe function also works for strings.\n\n\nnotEmpty\n\n\nReturns 0 for an empty array, or 1 for a non-empty array.\nThe result type is UInt8.\nThe function also works for strings.\n\n\nlength\n\n\nReturns the number of items in the array.\nThe result type is UInt64.\nThe function also works for strings.\n\n\nemptyArrayUInt8, emptyArrayUInt16, emptyArrayUInt32, emptyArrayUInt64\n\n\nemptyArrayInt8, emptyArrayInt16, emptyArrayInt32, emptyArrayInt64\n\n\nemptyArrayFloat32, emptyArrayFloat64\n\n\nemptyArrayDate, emptyArrayDateTime\n\n\nemptyArrayString\n\n\nAccepts zero arguments and returns an empty array of the appropriate type.\n\n\nemptyArrayToSingle\n\n\nAccepts an empty array and returns a one-element array that is equal to the default value.\n\n\nrange(N)\n\n\nReturns an array of numbers from 0 to N-1.\nJust in case, an exception is thrown if arrays with a total length of more than 100,000,000 elements are created in a data block.\n\n\narray(x1, ...), operator [x1, ...]\n\n\nCreates an array from the function arguments.\nThe arguments must be constants and have types that have the smallest common type. At least one argument must be passed, because otherwise it isn't clear which type of array to create. That is, you can't use this function to create an empty array (to do that, use the 'emptyArray*' function described above).\nReturns an 'Array(T)' type result, where 'T' is the smallest common type out of the passed arguments.\n\n\narrayConcat\n\n\nCombines arrays passed as arguments.\n\n\narrayConcat(arrays)\n\n\n\n\n\nArguments\n\n\n\n\narrays\n \u2013 Arrays of comma-separated \n[values]\n.\n\n\n\n\nExample\n\n\nSELECT\n \narrayConcat\n([\n1\n,\n \n2\n],\n \n[\n3\n,\n \n4\n],\n \n[\n5\n,\n \n6\n])\n \nAS\n \nres\n\n\n\n\n\n\n\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [1,2,3,4,5,6] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n\n\narrayElement(arr, n), operator arr[n]\n\n\nGet the element with the index 'n' from the array 'arr'.'n' must be any integer type.\nIndexes in an array begin from one.\nNegative indexes are supported. In this case, it selects the corresponding element numbered from the end. For example, 'arr[-1]' is the last item in the array.\n\n\nIf the index falls outside of the bounds of an array, it returns some default value (0 for numbers, an empty string for strings, etc.).\n\n\nhas(arr, elem)\n\n\nChecks whether the 'arr' array has the 'elem' element.\nReturns 0 if the the element is not in the array, or 1 if it is.\n\n\nindexOf(arr, x)\n\n\nReturns the index of the 'x' element (starting from 1) if it is in the array, or 0 if it is not.\n\n\ncountEqual(arr, x)\n\n\nReturns the number of elements in the array equal to x. Equivalent to arrayCount (elem-\n  elem = x, arr).\n\n\narrayEnumerate(arr)\n\n\nReturns the array [1, 2, 3, ..., length (arr) ]\n\n\nThis function is normally used with ARRAY JOIN. It allows counting something just once for each array after applying ARRAY JOIN. Example:\n\n\nSELECT\n\n    \ncount\n()\n \nAS\n \nReaches\n,\n\n    \ncountIf\n(\nnum\n \n=\n \n1\n)\n \nAS\n \nHits\n\n\nFROM\n \ntest\n.\nhits\n\n\nARRAY\n \nJOIN\n\n    \nGoalsReached\n,\n\n    \narrayEnumerate\n(\nGoalsReached\n)\n \nAS\n \nnum\n\n\nWHERE\n \nCounterID\n \n=\n \n160656\n\n\nLIMIT\n \n10\n\n\n\n\n\n\n\u250c\u2500Reaches\u2500\u252c\u2500\u2500Hits\u2500\u2510\n\u2502   95606 \u2502 31406 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n\n\nIn this example, Reaches is the number of conversions (the strings received after applying ARRAY JOIN), and Hits is the number of pageviews (strings before ARRAY JOIN). In this particular case, you can get the same result in an easier way:\n\n\nSELECT\n\n    \nsum\n(\nlength\n(\nGoalsReached\n))\n \nAS\n \nReaches\n,\n\n    \ncount\n()\n \nAS\n \nHits\n\n\nFROM\n \ntest\n.\nhits\n\n\nWHERE\n \n(\nCounterID\n \n=\n \n160656\n)\n \nAND\n \nnotEmpty\n(\nGoalsReached\n)\n\n\n\n\n\n\n\u250c\u2500Reaches\u2500\u252c\u2500\u2500Hits\u2500\u2510\n\u2502   95606 \u2502 31406 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n\n\nThis function can also be used in higher-order functions. For example, you can use it to get array indexes for elements that match a condition.\n\n\narrayEnumerateUniq(arr, ...)\n\n\nReturns an array the same size as the source array, indicating for each element what its position is among elements with the same value.\nFor example: arrayEnumerateUniq([10, 20, 10, 30]) = [1,  1,  2,  1].\n\n\nThis function is useful when using ARRAY JOIN and aggregation of array elements.\nExample:\n\n\nSELECT\n\n    \nGoals\n.\nID\n \nAS\n \nGoalID\n,\n\n    \nsum\n(\nSign\n)\n \nAS\n \nReaches\n,\n\n    \nsumIf\n(\nSign\n,\n \nnum\n \n=\n \n1\n)\n \nAS\n \nVisits\n\n\nFROM\n \ntest\n.\nvisits\n\n\nARRAY\n \nJOIN\n\n    \nGoals\n,\n\n    \narrayEnumerateUniq\n(\nGoals\n.\nID\n)\n \nAS\n \nnum\n\n\nWHERE\n \nCounterID\n \n=\n \n160656\n\n\nGROUP\n \nBY\n \nGoalID\n\n\nORDER\n \nBY\n \nReaches\n \nDESC\n\n\nLIMIT\n \n10\n\n\n\n\n\n\n\u250c\u2500\u2500GoalID\u2500\u252c\u2500Reaches\u2500\u252c\u2500Visits\u2500\u2510\n\u2502   53225 \u2502    3214 \u2502   1097 \u2502\n\u2502 2825062 \u2502    3188 \u2502   1097 \u2502\n\u2502   56600 \u2502    2803 \u2502    488 \u2502\n\u2502 1989037 \u2502    2401 \u2502    365 \u2502\n\u2502 2830064 \u2502    2396 \u2502    910 \u2502\n\u2502 1113562 \u2502    2372 \u2502    373 \u2502\n\u2502 3270895 \u2502    2262 \u2502    812 \u2502\n\u2502 1084657 \u2502    2262 \u2502    345 \u2502\n\u2502   56599 \u2502    2260 \u2502    799 \u2502\n\u2502 3271094 \u2502    2256 \u2502    812 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n\n\nIn this example, each goal ID has a calculation of the number of conversions (each element in the Goals nested data structure is a goal that was reached, which we refer to as a conversion) and the number of sessions. Without ARRAY JOIN, we would have counted the number of sessions as sum(Sign). But in this particular case, the rows were multiplied by the nested Goals structure, so in order to count each session one time after this, we apply a condition to the value of the arrayEnumerateUniq(Goals.ID) function.\n\n\nThe arrayEnumerateUniq function can take multiple arrays of the same size as arguments. In this case, uniqueness is considered for tuples of elements in the same positions in all the arrays.\n\n\nSELECT\n \narrayEnumerateUniq\n([\n1\n,\n \n1\n,\n \n1\n,\n \n2\n,\n \n2\n,\n \n2\n],\n \n[\n1\n,\n \n1\n,\n \n2\n,\n \n1\n,\n \n1\n,\n \n2\n])\n \nAS\n \nres\n\n\n\n\n\n\n\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [1,2,1,1,2,1] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n\n\nThis is necessary when using ARRAY JOIN with a nested data structure and further aggregation across multiple elements in this structure.\n\n\narrayPopBack\n\n\nRemoves the last item from the array.\n\n\narrayPopBack(array)\n\n\n\n\n\nArguments\n\n\n\n\narray\n \u2013 Array.\n\n\n\n\nExample\n\n\nSELECT\n \narrayPopBack\n([\n1\n,\n \n2\n,\n \n3\n])\n \nAS\n \nres\n\n\n\n\n\n\n\u250c\u2500res\u2500\u2500\u2500\u2510\n\u2502 [1,2] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n\n\narrayPopFront\n\n\nRemoves the first item from the array.\n\n\narrayPopFront(array)\n\n\n\n\n\nArguments\n\n\n\n\narray\n \u2013 Array.\n\n\n\n\nExample\n\n\nSELECT\n \narrayPopFront\n([\n1\n,\n \n2\n,\n \n3\n])\n \nAS\n \nres\n\n\n\n\n\n\n\u250c\u2500res\u2500\u2500\u2500\u2510\n\u2502 [2,3] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n\n\narrayPushBack\n\n\nAdds one item to the end of the array.\n\n\narrayPushBack(array, single_value)\n\n\n\n\n\nArguments\n\n\n\n\narray\n \u2013 Array.\n\n\nsingle_value\n \u2013 A single value. Only numbers can be added to an array with numbers, and only strings can be added to an array of strings. When adding numbers, ClickHouse automatically sets the \nsingle_value\n type for the data type of the array. For more information about ClickHouse data types, read the section \"\nData types\n\".\n\n\n\n\nExample\n\n\nSELECT\n \narrayPushBack\n([\na\n],\n \nb\n)\n \nAS\n \nres\n\n\n\n\n\n\n\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [\na\n,\nb\n] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n\n\narrayPushFront\n\n\nAdds one element to the beginning of the array.\n\n\narrayPushFront(array, single_value)\n\n\n\n\n\nArguments\n\n\n\n\narray\n \u2013 Array.\n\n\nsingle_value\n \u2013 A single value.  Only numbers can be added to an array with numbers, and only strings can be added to an array of strings. When adding numbers, ClickHouse automatically sets the \nsingle_value\n type for the data type of the array.  For more information about ClickHouse data types, read the section \"\nData types\n\".\n\n\n\n\nExample\n\n\nSELECT\n \narrayPushBack\n([\nb\n],\n \na\n)\n \nAS\n \nres\n\n\n\n\n\n\n\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [\na\n,\nb\n] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n\n\narraySlice\n\n\nReturns a slice of the array.\n\n\narraySlice(array, offset[, length])\n\n\n\n\n\nArguments\n\n\n\n\narray\n \u2013  Array of data.\n\n\noffset\n \u2013 Indent from the edge of the array. A positive value indicates an offset on the left, and a negative value is an indent on the right. Numbering of the array items begins with 1.\n\n\nlength\n - The length of the required slice. If you specify a negative value, the function returns an open slice \n[offset, array_length - length)\n. If you omit the value, the function returns the slice \n[offset, the_end_of_array]\n.\n\n\n\n\nExample\n\n\nSELECT\n \narraySlice\n([\n1\n,\n \n2\n,\n \n3\n,\n \n4\n,\n \n5\n],\n \n2\n,\n \n3\n)\n \nAS\n \nres\n\n\n\n\n\n\n\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [2,3,4] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n\n\narrayUniq(arr, ...)\n\n\nIf one argument is passed, it counts the number of different elements in the array.\nIf multiple arguments are passed, it counts the number of different tuples of elements at corresponding positions in multiple arrays.\n\n\nIf you want to get a list of unique items in an array, you can use arrayReduce('groupUniqArray', arr).\n\n\narrayJoin(arr)\n\n\nA special function. See the section \n\"ArrayJoin function\"\n.\n\n\nFunctions for splitting and merging strings and arrays\n\n\nsplitByChar(separator, s)\n\n\nSplits a string into substrings separated by 'separator'.'separator' must be a string constant consisting of exactly one character.\nReturns an array of selected substrings. Empty substrings may be selected if the separator occurs at the beginning or end of the string, or if there are multiple consecutive separators.\n\n\nsplitByString(separator, s)\n\n\nThe same as above, but it uses a string of multiple characters as the separator. The string must be non-empty.\n\n\narrayStringConcat(arr[, separator])\n\n\nConcatenates the strings listed in the array with the separator.'separator' is an optional parameter: a constant string, set to an empty string by default.\nReturns the string.\n\n\nalphaTokens(s)\n\n\nSelects substrings of consecutive bytes from the ranges a-z and A-Z.Returns an array of substrings.\n\n\nBit functions\n\n\nBit functions work for any pair of types from UInt8, UInt16, UInt32, UInt64, Int8, Int16, Int32, Int64, Float32, or Float64.\n\n\nThe result type is an integer with bits equal to the maximum bits of its arguments. If at least one of the arguments is signed, the result is a signed number. If an argument is a floating-point number, it is cast to Int64.\n\n\nbitAnd(a, b)\n\n\nbitOr(a, b)\n\n\nbitXor(a, b)\n\n\nbitNot(a)\n\n\nbitShiftLeft(a, b)\n\n\nbitShiftRight(a, b)\n\n\nHash functions\n\n\nHash functions can be used for deterministic pseudo-random shuffling of elements.\n\n\nhalfMD5\n\n\nCalculates the MD5 from a string. Then it takes the first 8 bytes of the hash and interprets them as UInt64 in big endian.\nAccepts a String-type argument. Returns UInt64.\nThis function works fairly slowly (5 million short strings per second per processor core).\nIf you don't need MD5 in particular, use the 'sipHash64' function instead.\n\n\nMD5\n\n\nCalculates the MD5 from a string and returns the resulting set of bytes as FixedString(16).\nIf you don't need MD5 in particular, but you need a decent cryptographic 128-bit hash, use the 'sipHash128' function instead.\nIf you want to get the same result as output by the md5sum utility, use lower(hex(MD5(s))).\n\n\nsipHash64\n\n\nCalculates SipHash from a string.\nAccepts a String-type argument. Returns UInt64.\nSipHash is a cryptographic hash function. It works at least three times faster than MD5.\nFor more information, see the link: \nhttps://131002.net/siphash/\n\n\nsipHash128\n\n\nCalculates SipHash from a string.\nAccepts a String-type argument. Returns FixedString(16).\nDiffers from sipHash64 in that the final xor-folding state is only done up to 128 bytes.\n\n\ncityHash64\n\n\nCalculates CityHash64 from a string or a similar hash function for any number of any type of arguments.\nFor String-type arguments, CityHash is used. This is a fast non-cryptographic hash function for strings with decent quality.\nFor other types of arguments, a decent implementation-specific fast non-cryptographic hash function is used.\nIf multiple arguments are passed, the function is calculated using the same rules and chain combinations using the CityHash combinator.\nFor example, you can compute the checksum of an entire table with accuracy up to the row order: \nSELECT sum(cityHash64(*)) FROM table\n.\n\n\nintHash32\n\n\nCalculates a 32-bit hash code from any type of integer.\nThis is a relatively fast non-cryptographic hash function of average quality for numbers.\n\n\nintHash64\n\n\nCalculates a 64-bit hash code from any type of integer.\nIt works faster than intHash32. Average quality.\n\n\nSHA1\n\n\nSHA224\n\n\nSHA256\n\n\nCalculates SHA-1, SHA-224, or SHA-256 from a string and returns the resulting set of bytes as FixedString(20), FixedString(28), or FixedString(32).\nThe function works fairly slowly (SHA-1 processes about 5 million short strings per second per processor core, while SHA-224 and SHA-256 process about 2.2 million).\nWe recommend using this function only in cases when you need a specific hash function and you can't select it.\nEven in these cases, we recommend applying the function offline and pre-calculating values when inserting them into the table, instead of applying it in SELECTS.\n\n\nURLHash(url[, N])\n\n\nA fast, decent-quality non-cryptographic hash function for a string obtained from a URL using some type of normalization.\n\nURLHash(s)\n \u2013 Calculates a hash from a string without one of the trailing symbols \n/\n,\n?\n or \n#\n at the end, if present.\n\nURLHash(s, N)\n \u2013 Calculates a hash from a string up to the N level in the URL hierarchy, without one of the trailing symbols \n/\n,\n?\n or \n#\n at the end, if present.\nLevels are the same as in URLHierarchy. This function is specific to Yandex.Metrica.\n\n\nFunctions for generating pseudo-random numbers\n\n\nNon-cryptographic generators of pseudo-random numbers are used.\n\n\nAll the functions accept zero arguments or one argument.\nIf an argument is passed, it can be any type, and its value is not used for anything.\nThe only purpose of this argument is to prevent common subexpression elimination, so that two different instances of the same function return different columns with different random numbers.\n\n\nrand\n\n\nReturns a pseudo-random UInt32 number, evenly distributed among all UInt32-type numbers.\nUses a linear congruential generator.\n\n\nrand64\n\n\nReturns a pseudo-random UInt64 number, evenly distributed among all UInt64-type numbers.\nUses a linear congruential generator.\n\n\nEncoding functions\n\n\nhex\n\n\nAccepts arguments of types: \nString\n, \nunsigned integer\n, \nDate\n, or \nDateTime\n. Returns a string containing the argument's hexadecimal representation. Uses uppercase letters \nA-F\n. Does not use \n0x\n prefixes or \nh\n suffixes. For strings, all bytes are simply encoded as two hexadecimal numbers. Numbers are converted to big endian (\"human readable\") format. For numbers, older zeros are trimmed, but only by entire bytes. For example, \nhex (1) = '01'\n. \nDate\n is encoded as the number of days since the beginning of the Unix epoch. \nDateTime\n is encoded as the number of seconds since the beginning of the Unix epoch.\n\n\nunhex(str)\n\n\nAccepts a string containing any number of hexadecimal digits, and returns a string containing the corresponding bytes. Supports both uppercase and lowercase letters A-F. The number of hexadecimal digits does not have to be even. If it is odd, the last digit is interpreted as the younger half of the 00-0F byte. If the argument string contains anything other than hexadecimal digits, some implementation-defined result is returned (an exception isn't thrown).\nIf you want to convert the result to a number, you can use the 'reverse' and 'reinterpretAsType' functions.\n\n\nUUIDStringToNum(str)\n\n\nAccepts a string containing 36 characters in the format \n123e4567-e89b-12d3-a456-426655440000\n, and returns it as a set of bytes in a FixedString(16).\n\n\nUUIDNumToString(str)\n\n\nAccepts a FixedString(16) value. Returns a string containing 36 characters in text format.\n\n\nbitmaskToList(num)\n\n\nAccepts an integer. Returns a string containing the list of powers of two that total the source number when summed. They are comma-separated without spaces in text format, in ascending order.\n\n\nbitmaskToArray(num)\n\n\nAccepts an integer. Returns an array of UInt64 numbers containing the list of powers of two that total the source number when summed. Numbers in the array are in ascending order.\n\n\nFunctions for working with URLs\n\n\nAll these functions don't follow the RFC. They are maximally simplified for improved performance.\n\n\nFunctions that extract part of a URL\n\n\nIf there isn't anything similar in a URL, an empty string is returned.\n\n\nprotocol\n\n\nReturns the protocol. Examples: http, ftp, mailto, magnet...\n\n\ndomain\n\n\nGets the domain.\n\n\ndomainWithoutWWW\n\n\nReturns the domain and removes no more than one 'www.' from the beginning of it, if present.\n\n\ntopLevelDomain\n\n\nReturns the top-level domain. Example: .ru.\n\n\nfirstSignificantSubdomain\n\n\nReturns the \"first significant subdomain\". This is a non-standard concept specific to Yandex.Metrica. The first significant subdomain is a second-level domain if it is 'com', 'net', 'org', or 'co'. Otherwise, it is a third-level domain. For example, firstSignificantSubdomain ('\nhttps://news.yandex.ru/\n') = 'yandex ', firstSignificantSubdomain ('\nhttps://news.yandex.com.tr/\n') = 'yandex '. The list of \"insignificant\" second-level domains and other implementation details may change in the future.\n\n\ncutToFirstSignificantSubdomain\n\n\nReturns the part of the domain that includes top-level subdomains up to the \"first significant subdomain\" (see the explanation above).\n\n\nFor example, \ncutToFirstSignificantSubdomain('https://news.yandex.com.tr/') = 'yandex.com.tr'\n.\n\n\npath\n\n\nReturns the path. Example: \n/top/news.html\n  The path does not include the query string.\n\n\npathFull\n\n\nThe same as above, but including query string and fragment. Example: /top/news.html?page=2#comments\n\n\nqueryString\n\n\nReturns the query string. Example: page=1\nlr=213. query-string does not include the initial question mark, as well as #  and everything after #.\n\n\nfragment\n\n\nReturns the fragment identifier. fragment does not include the initial hash symbol.\n\n\nqueryStringAndFragment\n\n\nReturns the query string and fragment identifier. Example: page=1#29390.\n\n\nextractURLParameter(URL, name)\n\n\nReturns the value of the 'name' parameter in the URL, if present. Otherwise, an empty string. If there are many parameters with this name, it returns the first occurrence. This function works under the assumption that the parameter name is encoded in the URL exactly the same way as in the passed argument.\n\n\nextractURLParameters(URL)\n\n\nReturns an array of name=value strings corresponding to the URL parameters. The values are not decoded in any way.\n\n\nextractURLParameterNames(URL)\n\n\nReturns an array of name strings corresponding to the names of URL parameters. The values are not decoded in any way.\n\n\nURLHierarchy(URL)\n\n\nReturns an array containing the URL, truncated at the end by the symbols /,? in the path and query-string. Consecutive separator characters are counted as one. The cut is made in the position after all the consecutive separator characters. Example:\n\n\nURLPathHierarchy(URL)\n\n\nThe same as above, but without the protocol and host in the result. The / element (root) is not included. Example: the function is used to implement tree reports the URL in Yandex. Metric.\n\n\nURLPathHierarchy(\nhttps://example.com/browse/CONV-6788\n) =\n[\n    \n/browse/\n,\n    \n/browse/CONV-6788\n\n]\n\n\n\n\n\ndecodeURLComponent(URL)\n\n\nReturns the decoded URL.\nExample:\n\n\nSELECT\n \ndecodeURLComponent\n(\nhttp://127.0.0.1:8123/?query=SELECT%201%3B\n)\n \nAS\n \nDecodedURL\n;\n\n\n\n\n\n\n\u250c\u2500DecodedURL\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 http://127.0.0.1:8123/?query=SELECT 1; \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n\n\nFunctions that remove part of a URL.\n\n\nIf the URL doesn't have anything similar, the URL remains unchanged.\n\n\ncutWWW\n\n\nRemoves no more than one 'www.' from the beginning of the URL's domain, if present.\n\n\ncutQueryString\n\n\nRemoves query string. The question mark is also removed.\n\n\ncutFragment\n\n\nRemoves the fragment identifier. The number sign is also removed.\n\n\ncutQueryStringAndFragment\n\n\nRemoves the query string and fragment identifier. The question mark and number sign are also removed.\n\n\ncutURLParameter(URL, name)\n\n\nRemoves the 'name' URL parameter, if present. This function works under the assumption that the parameter name is encoded in the URL exactly the same way as in the passed argument.\n\n\nFunctions for working with IP addresses\n\n\nIPv4NumToString(num)\n\n\nTakes a UInt32 number. Interprets it as an IPv4 address in big endian. Returns a string containing the corresponding IPv4 address in the format A.B.C.d (dot-separated numbers in decimal form).\n\n\nIPv4StringToNum(s)\n\n\nThe reverse function of IPv4NumToString. If the IPv4 address has an invalid format, it returns 0.\n\n\nIPv4NumToStringClassC(num)\n\n\nSimilar to IPv4NumToString, but using xxx instead of the last octet.\n\n\nExample:\n\n\nSELECT\n\n    \nIPv4NumToStringClassC\n(\nClientIP\n)\n \nAS\n \nk\n,\n\n    \ncount\n()\n \nAS\n \nc\n\n\nFROM\n \ntest\n.\nhits\n\n\nGROUP\n \nBY\n \nk\n\n\nORDER\n \nBY\n \nc\n \nDESC\n\n\nLIMIT\n \n10\n\n\n\n\n\n\n\u250c\u2500k\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500c\u2500\u2510\n\u2502 83.149.9.xxx   \u2502 26238 \u2502\n\u2502 217.118.81.xxx \u2502 26074 \u2502\n\u2502 213.87.129.xxx \u2502 25481 \u2502\n\u2502 83.149.8.xxx   \u2502 24984 \u2502\n\u2502 217.118.83.xxx \u2502 22797 \u2502\n\u2502 78.25.120.xxx  \u2502 22354 \u2502\n\u2502 213.87.131.xxx \u2502 21285 \u2502\n\u2502 78.25.121.xxx  \u2502 20887 \u2502\n\u2502 188.162.65.xxx \u2502 19694 \u2502\n\u2502 83.149.48.xxx  \u2502 17406 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n\n\nSince using 'xxx' is highly unusual, this may be changed in the future. We recommend that you don't rely on the exact format of this fragment.\n\n\nIPv6NumToString(x)\n\n\nAccepts a FixedString(16) value containing the IPv6 address in binary format. Returns a string containing this address in text format.\nIPv6-mapped IPv4 addresses are output in the format ::ffff:111.222.33.44. Examples:\n\n\nSELECT\n \nIPv6NumToString\n(\ntoFixedString\n(\nunhex\n(\n2A0206B8000000000000000000000011\n),\n \n16\n))\n \nAS\n \naddr\n\n\n\n\n\n\n\u250c\u2500addr\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 2a02:6b8::11 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n\n\nSELECT\n\n    \nIPv6NumToString\n(\nClientIP6\n \nAS\n \nk\n),\n\n    \ncount\n()\n \nAS\n \nc\n\n\nFROM\n \nhits_all\n\n\nWHERE\n \nEventDate\n \n=\n \ntoday\n()\n \nAND\n \nsubstring\n(\nClientIP6\n,\n \n1\n,\n \n12\n)\n \n!=\n \nunhex\n(\n00000000000000000000FFFF\n)\n\n\nGROUP\n \nBY\n \nk\n\n\nORDER\n \nBY\n \nc\n \nDESC\n\n\nLIMIT\n \n10\n\n\n\n\n\n\n\u250c\u2500IPv6NumToString(ClientIP6)\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500c\u2500\u2510\n\u2502 2a02:2168:aaa:bbbb::2                   \u2502 24695 \u2502\n\u2502 2a02:2698:abcd:abcd:abcd:abcd:8888:5555 \u2502 22408 \u2502\n\u2502 2a02:6b8:0:fff::ff                      \u2502 16389 \u2502\n\u2502 2a01:4f8:111:6666::2                    \u2502 16016 \u2502\n\u2502 2a02:2168:888:222::1                    \u2502 15896 \u2502\n\u2502 2a01:7e00::ffff:ffff:ffff:222           \u2502 14774 \u2502\n\u2502 2a02:8109:eee:ee:eeee:eeee:eeee:eeee    \u2502 14443 \u2502\n\u2502 2a02:810b:8888:888:8888:8888:8888:8888  \u2502 14345 \u2502\n\u2502 2a02:6b8:0:444:4444:4444:4444:4444      \u2502 14279 \u2502\n\u2502 2a01:7e00::ffff:ffff:ffff:ffff          \u2502 13880 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n\n\nSELECT\n\n    \nIPv6NumToString\n(\nClientIP6\n \nAS\n \nk\n),\n\n    \ncount\n()\n \nAS\n \nc\n\n\nFROM\n \nhits_all\n\n\nWHERE\n \nEventDate\n \n=\n \ntoday\n()\n\n\nGROUP\n \nBY\n \nk\n\n\nORDER\n \nBY\n \nc\n \nDESC\n\n\nLIMIT\n \n10\n\n\n\n\n\n\n\u250c\u2500IPv6NumToString(ClientIP6)\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500c\u2500\u2510\n\u2502 ::ffff:94.26.111.111       \u2502 747440 \u2502\n\u2502 ::ffff:37.143.222.4        \u2502 529483 \u2502\n\u2502 ::ffff:5.166.111.99        \u2502 317707 \u2502\n\u2502 ::ffff:46.38.11.77         \u2502 263086 \u2502\n\u2502 ::ffff:79.105.111.111      \u2502 186611 \u2502\n\u2502 ::ffff:93.92.111.88        \u2502 176773 \u2502\n\u2502 ::ffff:84.53.111.33        \u2502 158709 \u2502\n\u2502 ::ffff:217.118.11.22       \u2502 154004 \u2502\n\u2502 ::ffff:217.118.11.33       \u2502 148449 \u2502\n\u2502 ::ffff:217.118.11.44       \u2502 148243 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n\n\nIPv6StringToNum(s)\n\n\nThe reverse function of IPv6NumToString. If the IPv6 address has an invalid format, it returns a string of null bytes.\nHEX can be uppercase or lowercase.\n\n\nFunctions for working with JSON\n\n\nIn Yandex.Metrica, JSON is transmitted by users as session parameters. There are some special functions for working with this JSON. (Although in most of the cases, the JSONs are additionally pre-processed, and the resulting values are put in separate columns in their processed format.) All these functions are based on strong assumptions about what the JSON can be, but they try to do as little as possible to get the job done.\n\n\nThe following assumptions are made:\n\n\n\n\nThe field name (function argument) must be a constant.\n\n\nThe field name is somehow canonically encoded in JSON. For example: \nvisitParamHas('{\"abc\":\"def\"}', 'abc') = 1\n, but \nvisitParamHas('{\"\\\\u0061\\\\u0062\\\\u0063\":\"def\"}', 'abc') = 0\n\n\nFields are searched for on any nesting level, indiscriminately. If there are multiple matching fields, the first occurrence is used.\n\n\nThe JSON doesn't have space characters outside of string literals.\n\n\n\n\nvisitParamHas(params, name)\n\n\nChecks whether there is a field with the 'name' name.\n\n\nvisitParamExtractUInt(params, name)\n\n\nParses UInt64 from the value of the field named 'name'. If this is a string field, it tries to parse a number from the beginning of the string. If the field doesn't exist, or it exists but doesn't contain a number, it returns 0.\n\n\nvisitParamExtractInt(params, name)\n\n\nThe same as for Int64.\n\n\nvisitParamExtractFloat(params, name)\n\n\nThe same as for Float64.\n\n\nvisitParamExtractBool(params, name)\n\n\nParses a true/false value. The result is UInt8.\n\n\nvisitParamExtractRaw(params, name)\n\n\nReturns the value of a field, including separators.\n\n\nExamples:\n\n\nvisitParamExtractRaw(\n{\nabc\n:\n\\\\n\\\\u0000\n}\n, \nabc\n) = \n\\\\n\\\\u0000\n\nvisitParamExtractRaw(\n{\nabc\n:{\ndef\n:[1,2,3]}}\n, \nabc\n) = \n{\ndef\n:[1,2,3]}\n\n\n\n\n\n\nvisitParamExtractString(params, name)\n\n\nParses the string in double quotes. The value is unescaped. If unescaping failed, it returns an empty string.\n\n\nExamples:\n\n\nvisitParamExtractString(\n{\nabc\n:\n\\\\n\\\\u0000\n}\n, \nabc\n) = \n\\n\\0\n\nvisitParamExtractString(\n{\nabc\n:\n\\\\u263a\n}\n, \nabc\n) = \n\u263a\n\nvisitParamExtractString(\n{\nabc\n:\n\\\\u263\n}\n, \nabc\n) = \n\nvisitParamExtractString(\n{\nabc\n:\nhello}\n, \nabc\n) = \n\n\n\n\n\n\nThere is currently no support for code points in the format \n\\uXXXX\\uYYYY\n that are not from the basic multilingual plane (they are converted to CESU-8 instead of UTF-8).\n\n\nHigher-order functions\n\n\n-\n operator, lambda(params, expr) function\n\n\nAllows describing a lambda function for passing to a higher-order function. The left side of the arrow has a formal parameter, which is any ID, or multiple formal parameters \u2013 any IDs in a tuple. The right side of the arrow has an expression that can use these formal parameters, as well as any table columns.\n\n\nExamples: \nx -\n 2 * x, str -\n str != Referer.\n\n\nHigher-order functions can only accept lambda functions as their functional argument.\n\n\nA lambda function that accepts multiple arguments can be passed to a higher-order function. In this case, the higher-order function is passed several arrays of identical length that these arguments will correspond to.\n\n\nFor all functions other than 'arrayMap' and 'arrayFilter', the first argument (the lambda function) can be omitted. In this case, identical mapping is assumed.\n\n\narrayMap(func, arr1, ...)\n\n\nReturns an array obtained from the original application of the 'func' function to each element in the 'arr' array.\n\n\narrayFilter(func, arr1, ...)\n\n\nReturns an array containing only the elements in 'arr1' for which 'func' returns something other than 0.\n\n\nExamples:\n\n\nSELECT\n \narrayFilter\n(\nx\n \n-\n \nx\n \nLIKE\n \n%World%\n,\n \n[\nHello\n,\n \nabc World\n])\n \nAS\n \nres\n\n\n\n\n\n\n\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [\nabc World\n] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n\n\nSELECT\n\n    \narrayFilter\n(\n\n        \n(\ni\n,\n \nx\n)\n \n-\n \nx\n \nLIKE\n \n%World%\n,\n\n        \narrayEnumerate\n(\narr\n),\n\n        \n[\nHello\n,\n \nabc World\n]\n \nAS\n \narr\n)\n\n    \nAS\n \nres\n\n\n\n\n\n\n\u250c\u2500res\u2500\u2510\n\u2502 [2] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n\n\narrayCount([func,] arr1, ...)\n\n\nReturns the number of elements in the arr array for which func returns something other than 0. If 'func' is not specified, it returns the number of non-zero elements in the array.\n\n\narrayExists([func,] arr1, ...)\n\n\nReturns 1 if there is at least one element in 'arr' for which 'func' returns something other than 0. Otherwise, it returns 0.\n\n\narrayAll([func,] arr1, ...)\n\n\nReturns 1 if 'func' returns something other than 0 for all the elements in 'arr'. Otherwise, it returns 0.\n\n\narraySum([func,] arr1, ...)\n\n\nReturns the sum of the 'func' values. If the function is omitted, it just returns the sum of the array elements.\n\n\narrayFirst(func, arr1, ...)\n\n\nReturns the first element in the 'arr1' array for which 'func' returns something other than 0.\n\n\narrayFirstIndex(func, arr1, ...)\n\n\nReturns the index of the first element in the 'arr1' array for which 'func' returns something other than 0.\n\n\narrayCumSum([func,] arr1, ...)\n\n\nReturns an array of partial sums of elements in the source array (a running sum). If the \nfunc\n function is specified, then the values of the array elements are converted by this function before summing.\n\n\nExample:\n\n\nSELECT\n \narrayCumSum\n([\n1\n,\n \n1\n,\n \n1\n,\n \n1\n])\n \nAS\n \nres\n\n\n\n\n\n\n\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [1, 2, 3, 4] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n\n\narraySort([func,] arr1, ...)\n\n\nReturns an array as result of sorting the elements of \narr1\n in ascending order. If the \nfunc\n function is specified, sorting order is determined by the result of the function \nfunc\n applied to the elements of array (arrays)  \n\n\nThe \nSchwartzian transform\n is used to impove sorting efficiency.\n\n\nExample:\n\n\nSELECT\n \narraySort\n((\nx\n,\n \ny\n)\n \n-\n \ny\n,\n \n[\nhello\n,\n \nworld\n],\n \n[\n2\n,\n \n1\n]);\n\n\n\n\n\n\n\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [\nworld\n, \nhello\n] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n\n\narrayReverseSort([func,] arr1, ...)\n\n\nReturns an array as result of sorting the elements of \narr1\n in descending order. If the \nfunc\n function is specified, sorting order is determined by the result of the function \nfunc\n applied to the elements of array (arrays)  \n\n\nOther functions\n\n\nhostName()\n\n\nReturns a string with the name of the host that this function was performed on. For distributed processing, this is the name of the remote server host, if the function is performed on a remote server.\n\n\nvisibleWidth(x)\n\n\nCalculates the approximate width when outputting values to the console in text format (tab-separated).\nThis function is used by the system for implementing Pretty formats.\n\n\ntoTypeName(x)\n\n\nReturns a string containing the type name of the passed argument.\n\n\nblockSize()\n\n\nGets the size of the block.\nIn ClickHouse, queries are always run on blocks (sets of column parts). This function allows getting the size of the block that you called it for.\n\n\nmaterialize(x)\n\n\nTurns a constant into a full column containing just one value.\nIn ClickHouse, full columns and constants are represented differently in memory. Functions work differently for constant arguments and normal arguments (different code is executed), although the result is almost always the same. This function is for debugging this behavior.\n\n\nignore(...)\n\n\nAccepts any arguments and always returns 0.\nHowever, the argument is still evaluated. This can be used for benchmarks.\n\n\nsleep(seconds)\n\n\nSleeps 'seconds' seconds on each data block. You can specify an integer or a floating-point number.\n\n\ncurrentDatabase()\n\n\nReturns the name of the current database.\nYou can use this function in table engine parameters in a CREATE TABLE query where you need to specify the database.\n\n\nisFinite(x)\n\n\nAccepts Float32 and Float64 and returns UInt8 equal to 1 if the argument is not infinite and not a NaN, otherwise 0.\n\n\nisInfinite(x)\n\n\nAccepts Float32 and Float64 and returns UInt8 equal to 1 if the argument is infinite, otherwise 0. Note that 0 is returned for a NaN.\n\n\nisNaN(x)\n\n\nAccepts Float32 and Float64 and returns UInt8 equal to 1 if the argument is a NaN, otherwise 0.\n\n\nhasColumnInTable(['hostname'[, 'username'[, 'password']],] 'database', 'table', 'column')\n\n\nAccepts constant strings: database name, table name, and column name. Returns a UInt8 constant expression equal to 1 if there is a column, otherwise 0. If the hostname parameter is set, the test will run on a remote server.\nThe function throws an exception if the table does not exist.\nFor elements in a nested data structure, the function checks for the existence of a column. For the nested data structure itself, the function returns 0.\n\n\nbar\n\n\nAllows building a unicode-art diagram.\n\n\nbar (x, min, max, width)\n draws a band with a width proportional to \n(x - min)\n and equal to \nwidth\n characters when \nx = max\n.\n\n\nParameters:\n\n\n\n\nx\n \u2013 Value to display.\n\n\nmin, max\n \u2013 Integer constants. The value must fit in Int64.\n\n\nwidth\n \u2013 Constant, positive number, may be a fraction.\n\n\n\n\nThe band is drawn with accuracy to one eighth of a symbol.\n\n\nExample:\n\n\nSELECT\n\n    \ntoHour\n(\nEventTime\n)\n \nAS\n \nh\n,\n\n    \ncount\n()\n \nAS\n \nc\n,\n\n    \nbar\n(\nc\n,\n \n0\n,\n \n600000\n,\n \n20\n)\n \nAS\n \nbar\n\n\nFROM\n \ntest\n.\nhits\n\n\nGROUP\n \nBY\n \nh\n\n\nORDER\n \nBY\n \nh\n \nASC\n\n\n\n\n\n\n\u250c\u2500\u2500h\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500c\u2500\u252c\u2500bar\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  0 \u2502 292907 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b         \u2502\n\u2502  1 \u2502 180563 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588             \u2502\n\u2502  2 \u2502 114861 \u2502 \u2588\u2588\u2588\u258b               \u2502\n\u2502  3 \u2502  85069 \u2502 \u2588\u2588\u258b                \u2502\n\u2502  4 \u2502  68543 \u2502 \u2588\u2588\u258e                \u2502\n\u2502  5 \u2502  78116 \u2502 \u2588\u2588\u258c                \u2502\n\u2502  6 \u2502 113474 \u2502 \u2588\u2588\u2588\u258b               \u2502\n\u2502  7 \u2502 170678 \u2502 \u2588\u2588\u2588\u2588\u2588\u258b             \u2502\n\u2502  8 \u2502 278380 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e         \u2502\n\u2502  9 \u2502 391053 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588      \u2502\n\u2502 10 \u2502 457681 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e   \u2502\n\u2502 11 \u2502 493667 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d  \u2502\n\u2502 12 \u2502 509641 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  \u2502\n\u2502 13 \u2502 522947 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d \u2502\n\u2502 14 \u2502 539954 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a \u2502\n\u2502 15 \u2502 528460 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c \u2502\n\u2502 16 \u2502 539201 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a \u2502\n\u2502 17 \u2502 523539 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d \u2502\n\u2502 18 \u2502 506467 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  \u2502\n\u2502 19 \u2502 520915 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e \u2502\n\u2502 20 \u2502 521665 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d \u2502\n\u2502 21 \u2502 542078 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2502\n\u2502 22 \u2502 493642 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d  \u2502\n\u2502 23 \u2502 400397 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n\n\n\n\ntransform\n\n\nTransforms a value according to the explicitly defined mapping of some elements to other ones.\nThere are two variations of this function:\n\n\n\n\ntransform(x, array_from, array_to, default)\n\n\n\n\nx\n \u2013 What to transform.\n\n\narray_from\n \u2013 Constant array of values for converting.\n\n\narray_to\n \u2013 Constant array of values to convert the values in 'from' to.\n\n\ndefault\n \u2013 Which value to use if 'x' is not equal to any of the values in 'from'.\n\n\narray_from\n and \narray_to\n \u2013 Arrays of the same size.\n\n\nTypes:\n\n\ntransform(T, Array(T), Array(U), U) -\n U\n\n\nT\n and \nU\n can be numeric, string, or Date or DateTime types.\nWhere the same letter is indicated (T or U), for numeric types these might not be matching types, but types that have a common type.\nFor example, the first argument can have the Int64 type, while the second has the Array(Uint16) type.\n\n\nIf the 'x' value is equal to one of the elements in the 'array_from' array, it returns the existing element (that is numbered the same) from the 'array_to' array. Otherwise, it returns 'default'. If there are multiple matching elements in 'array_from', it returns one of the matches.\n\n\nExample:\n\n\nSELECT\n\n    \ntransform\n(\nSearchEngineID\n,\n \n[\n2\n,\n \n3\n],\n \n[\nYandex\n,\n \nGoogle\n],\n \nOther\n)\n \nAS\n \ntitle\n,\n\n    \ncount\n()\n \nAS\n \nc\n\n\nFROM\n \ntest\n.\nhits\n\n\nWHERE\n \nSearchEngineID\n \n!=\n \n0\n\n\nGROUP\n \nBY\n \ntitle\n\n\nORDER\n \nBY\n \nc\n \nDESC\n\n\n\n\n\n\n\u250c\u2500title\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500c\u2500\u2510\n\u2502 Yandex    \u2502 498635 \u2502\n\u2502 Google    \u2502 229872 \u2502\n\u2502 Other     \u2502 104472 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n\n\n\n\ntransform(x, array_from, array_to)\n\n\n\n\nDiffers from the first variation in that the 'default' argument is omitted.\nIf the 'x' value is equal to one of the elements in the 'array_from' array, it returns the matching element (that is numbered the same) from the 'array_to' array. Otherwise, it returns 'x'.\n\n\nTypes:\n\n\ntransform(T, Array(T), Array(T)) -\n T\n\n\nExample:\n\n\nSELECT\n\n    \ntransform\n(\ndomain\n(\nReferer\n),\n \n[\nyandex.ru\n,\n \ngoogle.ru\n,\n \nvk.com\n],\n \n[\nwww.yandex\n,\n \nexample.com\n])\n \nAS\n \ns\n,\n\n    \ncount\n()\n \nAS\n \nc\n\n\nFROM\n \ntest\n.\nhits\n\n\nGROUP\n \nBY\n \ndomain\n(\nReferer\n)\n\n\nORDER\n \nBY\n \ncount\n()\n \nDESC\n\n\nLIMIT\n \n10\n\n\n\n\n\n\n\u250c\u2500s\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500c\u2500\u2510\n\u2502                \u2502 2906259 \u2502\n\u2502 www.yandex     \u2502  867767 \u2502\n\u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588.ru     \u2502  313599 \u2502\n\u2502 mail.yandex.ru \u2502  107147 \u2502\n\u2502 \u2588\u2588\u2588\u2588\u2588\u2588.ru      \u2502  100355 \u2502\n\u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588.ru   \u2502   65040 \u2502\n\u2502 news.yandex.ru \u2502   64515 \u2502\n\u2502 \u2588\u2588\u2588\u2588\u2588\u2588.net     \u2502   59141 \u2502\n\u2502 example.com    \u2502   57316 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n\n\nformatReadableSize(x)\n\n\nAccepts the size (number of bytes). Returns a rounded size with a suffix (KiB, MiB, etc.) as a string.\n\n\nExample:\n\n\nSELECT\n\n    \narrayJoin\n([\n1\n,\n \n1024\n,\n \n1024\n*\n1024\n,\n \n192851925\n])\n \nAS\n \nfilesize_bytes\n,\n\n    \nformatReadableSize\n(\nfilesize_bytes\n)\n \nAS\n \nfilesize\n\n\n\n\n\n\n\u250c\u2500filesize_bytes\u2500\u252c\u2500filesize\u2500\u2500\u2500\u2510\n\u2502              1 \u2502 1.00 B     \u2502\n\u2502           1024 \u2502 1.00 KiB   \u2502\n\u2502        1048576 \u2502 1.00 MiB   \u2502\n\u2502      192851925 \u2502 183.92 MiB \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n\n\nleast(a, b)\n\n\nReturns the smallest value from a and b.\n\n\ngreatest(a, b)\n\n\nReturns the largest value of a and b.\n\n\nuptime()\n\n\nReturns the server's uptime in seconds.\n\n\nversion()\n\n\nReturns the version of the server as a string.\n\n\nrowNumberInAllBlocks()\n\n\nReturns the ordinal number of the row in the data block. This function only considers the affected data blocks.\n\n\nrunningDifference(x)\n\n\nCalculates the difference between successive row values \u200b\u200bin the data block.\nReturns 0 for the first row and the difference from the previous row for each subsequent row.\n\n\nThe result of the function depends on the affected data blocks and the order of data in the block.\nIf you make a subquery with ORDER BY and call the function from outside the subquery, you can get the expected result.\n\n\nExample:\n\n\nSELECT\n\n    \nEventID\n,\n\n    \nEventTime\n,\n\n    \nrunningDifference\n(\nEventTime\n)\n \nAS\n \ndelta\n\n\nFROM\n\n\n(\n\n    \nSELECT\n\n        \nEventID\n,\n\n        \nEventTime\n\n    \nFROM\n \nevents\n\n    \nWHERE\n \nEventDate\n \n=\n \n2016-11-24\n\n    \nORDER\n \nBY\n \nEventTime\n \nASC\n\n    \nLIMIT\n \n5\n\n\n)\n\n\n\n\n\n\n\u250c\u2500EventID\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500EventTime\u2500\u252c\u2500delta\u2500\u2510\n\u2502    1106 \u2502 2016-11-24 00:00:04 \u2502     0 \u2502\n\u2502    1107 \u2502 2016-11-24 00:00:05 \u2502     1 \u2502\n\u2502    1108 \u2502 2016-11-24 00:00:05 \u2502     0 \u2502\n\u2502    1109 \u2502 2016-11-24 00:00:09 \u2502     4 \u2502\n\u2502    1110 \u2502 2016-11-24 00:00:10 \u2502     1 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n\n\nMACNumToString(num)\n\n\nAccepts a UInt64 number. Interprets it as a MAC address in big endian. Returns a string containing the corresponding MAC address in the format AA:BB:CC:DD:EE:FF (colon-separated numbers in hexadecimal form).\n\n\nMACStringToNum(s)\n\n\nThe inverse function of MACNumToString. If the MAC address has an invalid format, it returns 0.\n\n\nMACStringToOUI(s)\n\n\nAccepts a MAC address in the format AA:BB:CC:DD:EE:FF (colon-separated numbers in hexadecimal form). Returns the first three octets as a UInt64 number. If the MAC address has an invalid format, it returns 0.\n\n\n\n\nFunctions for working with external dictionaries\n\n\nFor information on connecting and configuring external dictionaries, see \"\nExternal dictionaries\n\".\n\n\ndictGetUInt8, dictGetUInt16, dictGetUInt32, dictGetUInt64\n\n\ndictGetInt8, dictGetInt16, dictGetInt32, dictGetInt64\n\n\ndictGetFloat32, dictGetFloat64\n\n\ndictGetDate, dictGetDateTime\n\n\ndictGetUUID\n\n\ndictGetString\n\n\ndictGetT('dict_name', 'attr_name', id)\n\n\n\n\nGet the value of the attr_name attribute  from the dict_name dictionary using the 'id' key.\ndict_name\n  and \nattr_name\n  are constant strings.\nid\nmust be UInt64.\nIf there is no \nid\n key in the dictionary, it returns the default value specified in the dictionary description.\n\n\n\n\ndictGetTOrDefault\n\n\ndictGetT('dict_name', 'attr_name', id, default)\n\n\nThe same as the \ndictGetT\n functions, but the default value is taken from the function's last argument.\n\n\ndictIsIn\n\n\ndictIsIn('dict_name', child_id, ancestor_id)\n\n\n\n\nFor the 'dict_name' hierarchical dictionary, finds out whether the 'child_id' key is located inside 'ancestor_id' (or matches 'ancestor_id'). Returns UInt8.\n\n\n\n\ndictGetHierarchy\n\n\ndictGetHierarchy('dict_name', id)\n\n\n\n\nFor the 'dict_name' hierarchical dictionary, returns an array of dictionary keys starting from 'id' and continuing along the chain of parent elements. Returns Array(UInt64).\n\n\n\n\ndictHas\n\n\ndictHas('dict_name', id)\n\n\n\n\nCheck whether the dictionary has the key. Returns a UInt8 value equal to 0 if there is no key and 1 if there is a key.\n\n\n\n\nFunctions for working with Yandex.Metrica dictionaries\n\n\nIn order for the functions below to work, the server config must specify the paths and addresses for getting all the Yandex.Metrica dictionaries. The dictionaries are loaded at the first call of any of these functions. If the reference lists can't be loaded, an exception is thrown.\n\n\nFor information about creating reference lists, see the section \"Dictionaries\".\n\n\nMultiple geobases\n\n\nClickHouse supports working with multiple alternative geobases (regional hierarchies) simultaneously, in order to support various perspectives on which countries certain regions belong to.\n\n\nThe 'clickhouse-server' config specifies the file with the regional hierarchy::\npath_to_regions_hierarchy_file\n/opt/geo/regions_hierarchy.txt\n/path_to_regions_hierarchy_file\n\n\nBesides this file, it also searches for files nearby that have the _ symbol and any suffix appended to the name (before the file extension).\nFor example, it will also find the file \n/opt/geo/regions_hierarchy_ua.txt\n, if present.\n\n\nua\n is called the dictionary key. For a dictionary without a suffix, the key is an empty string.\n\n\nAll the dictionaries are re-loaded in runtime (once every certain number of seconds, as defined in the builtin_dictionaries_reload_interval config parameter, or once an hour by default). However, the list of available dictionaries is defined one time, when the server starts.\n\n\nAll functions for working with regions have an optional argument at the end \u2013 the dictionary key. It is referred to as the geobase.\nExample:\n\n\nregionToCountry(RegionID) \u2013 Uses the default dictionary: /opt/geo/regions_hierarchy.txt\nregionToCountry(RegionID, \n) \u2013 Uses the default dictionary: /opt/geo/regions_hierarchy.txt\nregionToCountry(RegionID, \nua\n) \u2013 Uses the dictionary for the \nua\n key: /opt/geo/regions_hierarchy_ua.txt\n\n\n\n\n\nregionToCity(id[, geobase])\n\n\nAccepts a UInt32 number \u2013 the region ID from the Yandex geobase. If this region is a city or part of a city, it returns the region ID for the appropriate city. Otherwise, returns 0.\n\n\nregionToArea(id[, geobase])\n\n\nConverts a region to an area (type 5 in the geobase). In every other way, this function is the same as 'regionToCity'.\n\n\nSELECT\n \nDISTINCT\n \nregionToName\n(\nregionToArea\n(\ntoUInt32\n(\nnumber\n),\n \nua\n))\n\n\nFROM\n \nsystem\n.\nnumbers\n\n\nLIMIT\n \n15\n\n\n\n\n\n\n\u250c\u2500regionToName(regionToArea(toUInt32(number), \\\nua\\\n))\u2500\u2510\n\u2502                                                      \u2502\n\u2502 Moscow and Moscow region                             \u2502\n\u2502 St. Petersburg and Leningrad region                  \u2502\n\u2502 Belgorod region                                      \u2502\n\u2502 Ivanovsk region                                      \u2502\n\u2502 Kaluga region                                        \u2502\n\u2502 Kostroma region                                      \u2502\n\u2502 Kursk region                                         \u2502\n\u2502 Lipetsk region                                       \u2502\n\u2502 Orlov region                                         \u2502\n\u2502 Ryazan region                                        \u2502\n\u2502 Smolensk region                                      \u2502\n\u2502 Tambov region                                        \u2502\n\u2502 Tver region                                          \u2502\n\u2502 Tula region                                          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n\n\nregionToDistrict(id[, geobase])\n\n\nConverts a region to a federal district (type 4 in the geobase). In every other way, this function is the same as 'regionToCity'.\n\n\nSELECT\n \nDISTINCT\n \nregionToName\n(\nregionToDistrict\n(\ntoUInt32\n(\nnumber\n),\n \nua\n))\n\n\nFROM\n \nsystem\n.\nnumbers\n\n\nLIMIT\n \n15\n\n\n\n\n\n\n\u250c\u2500regionToName(regionToDistrict(toUInt32(number), \\\nua\\\n))\u2500\u2510\n\u2502                                                          \u2502\n\u2502 Central federal district                                 \u2502\n\u2502 Northwest federal district                               \u2502\n\u2502 South federal district                                   \u2502\n\u2502 North Caucases federal district                          \u2502\n\u2502 Privolga federal district                                \u2502\n\u2502 Ural federal district                                    \u2502\n\u2502 Siberian federal district                                \u2502\n\u2502 Far East federal district                                \u2502\n\u2502 Scotland                                                 \u2502\n\u2502 Faroe Islands                                            \u2502\n\u2502 Flemish region                                           \u2502\n\u2502 Brussels capital region                                  \u2502\n\u2502 Wallonia                                                 \u2502\n\u2502 Federation of Bosnia and Herzegovina                     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n\n\nregionToCountry(id[, geobase])\n\n\nConverts a region to a country. In every other way, this function is the same as 'regionToCity'.\nExample: \nregionToCountry(toUInt32(213)) = 225\n converts Moscow (213) to Russia (225).\n\n\nregionToContinent(id[, geobase])\n\n\nConverts a region to a continent. In every other way, this function is the same as 'regionToCity'.\nExample: \nregionToContinent(toUInt32(213)) = 10001\n converts Moscow (213) to Eurasia (10001).\n\n\nregionToPopulation(id[, geobase])\n\n\nGets the population for a region.\nThe population can be recorded in files with the geobase. See the section \"External dictionaries\".\nIf the population is not recorded for the region, it returns 0.\nIn the Yandex geobase, the population might be recorded for child regions, but not for parent regions.\n\n\nregionIn(lhs, rhs[, geobase])\n\n\nChecks whether a 'lhs' region belongs to a 'rhs' region. Returns a UInt8 number equal to 1 if it belongs, or 0 if it doesn't belong.\nThe relationship is reflexive \u2013 any region also belongs to itself.\n\n\nregionHierarchy(id[, geobase])\n\n\nAccepts a UInt32 number \u2013 the region ID from the Yandex geobase. Returns an array of region IDs consisting of the passed region and all parents along the chain.\nExample: \nregionHierarchy(toUInt32(213)) = [213,1,3,225,10001,10000]\n.\n\n\nregionToName(id[, lang])\n\n\nAccepts a UInt32 number \u2013 the region ID from the Yandex geobase. A string with the name of the language can be passed as a second argument. Supported languages are: ru, en, ua, uk, by, kz, tr. If the second argument is omitted, the language 'ru' is used. If the language is not supported, an exception is thrown. Returns a string \u2013 the name of the region in the corresponding language. If the region with the specified ID doesn't exist, an empty string is returned.\n\n\nua\n and \nuk\n both mean Ukrainian.\n\n\nFunctions for implementing the IN operator\n\n\nin, notIn, globalIn, globalNotIn\n\n\nSee the section \"IN operators\".\n\n\ntuple(x, y, ...), operator (x, y, ...)\n\n\nA function that allows grouping multiple columns.\nFor columns with the types T1, T2, ..., it returns a Tuple(T1, T2, ...) type tuple containing these columns. There is no cost to execute the function.\nTuples are normally used as intermediate values for an argument of IN operators, or for creating a list of formal parameters of lambda functions. Tuples can't be written to a table.\n\n\ntupleElement(tuple, n), operator x.N\n\n\nA function that allows getting a column from a tuple.\n'N' is the column index, starting from 1. N must be a constant. 'N' must be a constant. 'N' must be a strict postive integer no greater than the size of the tuple.\nThere is no cost to execute the function.\n\n\n\n\narrayJoin function\n\n\nThis is a very unusual function.\n\n\nNormal functions don't change a set of rows, but just change the values in each row (map).\nAggregate functions compress a set of rows (fold or reduce).\nThe 'arrayJoin' function takes each row and generates a set of rows (unfold).\n\n\nThis function takes an array as an argument, and propagates the source row to multiple rows for the number of elements in the array.\nAll the values in columns are simply copied, except the values in the column where this function is applied; it is replaced with the corresponding array value.\n\n\nA query can use multiple \narrayJoin\n functions. In this case, the transformation is performed multiple times.\n\n\nNote the ARRAY JOIN syntax in the SELECT query, which provides broader possibilities.\n\n\nExample:\n\n\nSELECT\n \narrayJoin\n([\n1\n,\n \n2\n,\n \n3\n]\n \nAS\n \nsrc\n)\n \nAS\n \ndst\n,\n \nHello\n,\n \nsrc\n\n\n\n\n\n\n\u250c\u2500dst\u2500\u252c\u2500\\\nHello\\\n\u2500\u252c\u2500src\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   1 \u2502 Hello     \u2502 [1,2,3] \u2502\n\u2502   2 \u2502 Hello     \u2502 [1,2,3] \u2502\n\u2502   3 \u2502 Hello     \u2502 [1,2,3] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n\n\n\n\nAggregate functions\n\n\nAggregate functions work in the \nnormal\n way as expected by database experts.\n\n\nClickHouse also supports:\n\n\n\n\nParametric aggregate functions\n, which accept other parameters in addition to columns.\n\n\nCombinators\n, which change the behavior of aggregate functions.\n\n\n\n\n\n\nFunction reference\n\n\ncount()\n\n\nCounts the number of rows. Accepts zero arguments and returns UInt64.\nThe syntax \nCOUNT(DISTINCT x)\n is not supported. The separate \nuniq\n aggregate function exists for this purpose.\n\n\nA \nSELECT count() FROM table\n query is not optimized, because the number of entries in the table is not stored separately. It will select some small column from the table and count the number of values in it.\n\n\nany(x)\n\n\nSelects the first encountered value.\nThe query can be executed in any order and even in a different order each time, so the result of this function is indeterminate.\nTo get a determinate result, you can use the 'min' or 'max' function instead of 'any'.\n\n\nIn some cases, you can rely on the order of execution. This applies to cases when SELECT comes from a subquery that uses ORDER BY.\n\n\nWhen a \nSELECT\n query has the \nGROUP BY\n clause or at least one aggregate function, ClickHouse (in contrast to MySQL) requires that all expressions in the \nSELECT\n, \nHAVING\n, and \nORDER BY\n clauses be calculated from keys or from aggregate functions. In other words, each column selected from the table must be used either in keys or inside aggregate functions. To get behavior like in MySQL, you can put the other columns in the \nany\n aggregate function.\n\n\nanyHeavy(x)\n\n\nSelects a frequently occurring value using the \nheavy hitters\n algorithm. If there is a value that occurs more than in half the cases in each of the query's execution threads, this value is returned. Normally, the result is nondeterministic.\n\n\nanyHeavy(column)\n\n\n\n\n\nArguments\n\n- \ncolumn\n \u2013 The column name.\n\n\nExample\n\n\nTake the \nOnTime\n data set and select any frequently occurring value in the \nAirlineID\n column.\n\n\nSELECT\n \nanyHeavy\n(\nAirlineID\n)\n \nAS\n \nres\n\n\nFROM\n \nontime\n\n\n\n\n\n\n\u250c\u2500\u2500\u2500res\u2500\u2510\n\u2502 19690 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n\n\nanyLast(x)\n\n\nSelects the last value encountered.\nThe result is just as indeterminate as for the \nany\n function.\n\n\nmin(x)\n\n\nCalculates the minimum.\n\n\nmax(x)\n\n\nCalculates the maximum.\n\n\nargMin(arg, val)\n\n\nCalculates the 'arg' value for a minimal 'val' value. If there are several different values of 'arg' for minimal values of 'val', the first of these values encountered is output.\n\n\nargMax(arg, val)\n\n\nCalculates the 'arg' value for a maximum 'val' value. If there are several different values of 'arg' for maximum values of 'val', the first of these values encountered is output.\n\n\nsum(x)\n\n\nCalculates the sum.\nOnly works for numbers.\n\n\nsumWithOverflow(x)\n\n\nComputes the sum of the numbers, using the same data type for the result as for the input parameters. If the sum exceeds the maximum value for this data type, the function returns an error.\n\n\nOnly works for numbers.\n\n\nsumMap(key, value)\n\n\nTotals the 'value' array according to the keys specified in the 'key' array.\nThe number of elements in 'key' and 'value' must be the same for each row that is totaled.\nReturns a tuple of two arrays: keys in sorted order, and values \u200b\u200bsummed for the corresponding keys.\n\n\nExample:\n\n\nCREATE\n \nTABLE\n \nsum_map\n(\n\n    \ndate\n \nDate\n,\n\n    \ntimeslot\n \nDateTime\n,\n\n    \nstatusMap\n \nNested\n(\n\n        \nstatus\n \nUInt16\n,\n\n        \nrequests\n \nUInt64\n\n    \n)\n\n\n)\n \nENGINE\n \n=\n \nLog\n;\n\n\nINSERT\n \nINTO\n \nsum_map\n \nVALUES\n\n    \n(\n2000-01-01\n,\n \n2000-01-01 00:00:00\n,\n \n[\n1\n,\n \n2\n,\n \n3\n],\n \n[\n10\n,\n \n10\n,\n \n10\n]),\n\n    \n(\n2000-01-01\n,\n \n2000-01-01 00:00:00\n,\n \n[\n3\n,\n \n4\n,\n \n5\n],\n \n[\n10\n,\n \n10\n,\n \n10\n]),\n\n    \n(\n2000-01-01\n,\n \n2000-01-01 00:01:00\n,\n \n[\n4\n,\n \n5\n,\n \n6\n],\n \n[\n10\n,\n \n10\n,\n \n10\n]),\n\n    \n(\n2000-01-01\n,\n \n2000-01-01 00:01:00\n,\n \n[\n6\n,\n \n7\n,\n \n8\n],\n \n[\n10\n,\n \n10\n,\n \n10\n]);\n\n\nSELECT\n\n    \ntimeslot\n,\n\n    \nsumMap\n(\nstatusMap\n.\nstatus\n,\n \nstatusMap\n.\nrequests\n)\n\n\nFROM\n \nsum_map\n\n\nGROUP\n \nBY\n \ntimeslot\n\n\n\n\n\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500timeslot\u2500\u252c\u2500sumMap(statusMap.status, statusMap.requests)\u2500\u2510\n\u2502 2000-01-01 00:00:00 \u2502 ([1,2,3,4,5],[10,10,20,10,10])               \u2502\n\u2502 2000-01-01 00:01:00 \u2502 ([4,5,6,7,8],[10,10,20,10,10])               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n\n\navg(x)\n\n\nCalculates the average.\nOnly works for numbers.\nThe result is always Float64.\n\n\nuniq(x)\n\n\nCalculates the approximate number of different values of the argument. Works for numbers, strings, dates, date-with-time, and for multiple arguments and tuple arguments.\n\n\nUses an adaptive sampling algorithm: for the calculation state, it uses a sample of element hash values with a size up to 65536.\nThis algorithm is also very accurate for data sets with low cardinality (up to 65536) and very efficient on CPU (when computing not too many of these functions, using \nuniq\n is almost as fast as using other aggregate functions).\n\n\nThe result is determinate (it doesn't depend on the order of query processing).\n\n\nThis function provides excellent accuracy even for data sets with extremely high cardinality (over 10 billion elements). It is recommended for default use.\n\n\nuniqCombined(x)\n\n\nCalculates the approximate number of different values of the argument. Works for numbers, strings, dates, date-with-time, and for multiple arguments and tuple arguments.\n\n\nA combination of three algorithms is used: array, hash table and \nHyperLogLog\n with an error correction table. The memory consumption is several times smaller than for the \nuniq\n function, and the accuracy is several times higher. Performance is slightly lower than for the \nuniq\n function, but sometimes it can be even higher than it, such as with distributed queries that transmit a large number of aggregation states over the network. The maximum state size is 96 KiB (HyperLogLog of 217 6-bit cells).\n\n\nThe result is determinate (it doesn't depend on the order of query processing).\n\n\nThe \nuniqCombined\n function is a good default choice for calculating the number of different values, but keep in mind that the estimation error will increase for high-cardinality data sets (200M+ elements), and the function will return very inaccurate results for data sets with extremely high cardinality (1B+ elements).\n\n\nuniqHLL12(x)\n\n\nUses the \nHyperLogLog\n algorithm to approximate the number of different values of the argument.\n212 5-bit cells are used. The size of the state is slightly more than 2.5 KB. The result is not very accurate (up to ~10% error) for small data sets (\n10K elements). However, the result is fairly accurate for high-cardinality data sets (10K-100M), with a maximum error of ~1.6%. Starting from 100M, the estimation error increases, and the function will return very inaccurate results for data sets with extremely high cardinality (1B+ elements).\n\n\nThe result is determinate (it doesn't depend on the order of query processing).\n\n\nWe don't recommend using this function. In most cases, use the  \nuniq\n or \nuniqCombined\n function.\n\n\nuniqExact(x)\n\n\nCalculates the number of different values of the argument, exactly.\nThere is no reason to fear approximations. It's better to use the \nuniq\n function.\nUse the \nuniqExact\n function if you definitely need an exact result.\n\n\nThe \nuniqExact\n function uses more memory than the \nuniq\n function, because the size of the state has unbounded growth as the number of different values increases.\n\n\ngroupArray(x), groupArray(max_size)(x)\n\n\nCreates an array of argument values.\nValues can be added to the array in any (indeterminate) order.\n\n\nThe second version (with the \nmax_size\n parameter) limits the size of the resulting array to \nmax_size\n elements.\nFor example, \ngroupArray (1) (x)\n is equivalent to \n[any (x)]\n.\n\n\nIn some cases, you can still rely on the order of execution. This applies to cases when \nSELECT\n comes from a subquery that uses \nORDER BY\n.\n\n\n\n\ngroupArrayInsertAt(x)\n\n\nInserts a value into the array in the specified position.\n\n\nAccepts the value and position as input. If several values \u200b\u200bare inserted into the same position, any of them might end up in the resulting array (the first one will be used in the case of single-threaded execution). If no value is inserted into a position, the position is assigned the default value.\n\n\nOptional parameters:\n\n\n\n\nThe default value for substituting in empty positions.\n\n\nThe length of the resulting array. This allows you to receive arrays of the same size for all the aggregate keys. When using this parameter, the default value must be specified.\n\n\n\n\ngroupUniqArray(x)\n\n\nCreates an array from different argument values. Memory consumption is the same as for the \nuniqExact\n function.\n\n\nquantile(level)(x)\n\n\nApproximates the 'level' quantile. 'level' is a constant, a floating-point number from 0 to 1.\nWe recommend using a 'level' value in the range of 0.01..0.99\nDon't use a 'level' value equal to 0 or 1 \u2013 use the 'min' and 'max' functions for these cases.\n\n\nIn this function, as well as in all functions for calculating quantiles, the 'level' parameter can be omitted. In this case, it is assumed to be equal to 0.5 (in other words, the function will calculate the median).\n\n\nWorks for numbers, dates, and dates with times.\nReturns: for numbers \u2013 Float64; for dates \u2013 a date; for dates with times \u2013 a date with time.\n\n\nUses \nreservoir sampling\n with a reservoir size up to 8192.\nIf necessary, the result is output with linear approximation from the two neighboring values.\nThis algorithm provides very low accuracy. See also: \nquantileTiming\n, \nquantileTDigest\n, \nquantileExact\n.\n\n\nThe result depends on the order of running the query, and is nondeterministic.\n\n\nWhen using multiple \nquantile\n (and similar) functions with different levels in a query, the internal states are not combined (that is, the query works less efficiently than it could). In this case, use the \nquantiles\n (and similar) functions.\n\n\nquantileDeterministic(level)(x, determinator)\n\n\nWorks the same way as the \nquantile\n function, but the result is deterministic and does not depend on the order of query execution.\n\n\nTo achieve this, the function takes a second argument \u2013 the \"determinator\". This is a number whose hash is used instead of a random number generator in the reservoir sampling algorithm. For the function to work correctly, the same determinator value should not occur too often. For the determinator, you can use an event ID, user ID, and so on.\n\n\nDon't use this function for calculating timings. There is a more suitable function for this purpose: \nquantileTiming\n.\n\n\nquantileTiming(level)(x)\n\n\nComputes the quantile of 'level' with a fixed precision.\nWorks for numbers. Intended for calculating quantiles of page loading time in milliseconds.\n\n\nIf the value is greater than 30,000 (a page loading time of more than 30 seconds), the result is equated to 30,000.\n\n\nIf the total value is not more than about 5670, then the calculation is accurate.\n\n\nOtherwise:\n\n\n\n\nif the time is less than 1024 ms, then the calculation is accurate.\n\n\notherwise the calculation is rounded to a multiple of 16 ms.\n\n\n\n\nWhen passing negative values to the function, the behavior is undefined.\n\n\nThe returned value has the Float32 type. If no values were passed to the function (when using \nquantileTimingIf\n), 'nan' is returned. The purpose of this is to differentiate these instances from zeros. See the note on sorting NaNs in \"ORDER BY clause\".\n\n\nThe result is determinate (it doesn't depend on the order of query processing).\n\n\nFor its purpose (calculating quantiles of page loading times), using this function is more effective and the result is more accurate than for the \nquantile\n function.\n\n\nquantileTimingWeighted(level)(x, weight)\n\n\nDiffers from the \nquantileTiming\n  function in that it has a second argument, \"weights\". Weight is a non-negative integer.\nThe result is calculated as if the \nx\n  value were passed \nweight\n number of times to the \nquantileTiming\n function.\n\n\nquantileExact(level)(x)\n\n\nComputes the quantile of 'level' exactly. To do this, all the passed values \u200b\u200bare combined into an array, which is then partially sorted. Therefore, the function consumes O(n) memory, where 'n' is the number of values that were passed. However, for a small number of values, the function is very effective.\n\n\nquantileExactWeighted(level)(x, weight)\n\n\nComputes the quantile of 'level' exactly. In addition, each value is counted with its weight, as if it is present 'weight' times. The arguments of the function can be considered as histograms, where the value 'x' corresponds to a histogram \"column\" of the height 'weight', and the function itself can be considered as a summation of histograms.\n\n\nA hash table is used as the algorithm. Because of this, if the passed values \u200b\u200bare frequently repeated, the function consumes less RAM than \nquantileExact\n. You can use this function instead of \nquantileExact\n and specify the weight as 1.\n\n\nquantileTDigest(level)(x)\n\n\nApproximates the quantile level using the \nt-digest\n algorithm. The maximum error is 1%. Memory consumption by State is proportional to the logarithm of the number of passed values.\n\n\nThe performance of the function is lower than for \nquantile\n, \nquantileTiming\n. In terms of the ratio of State size to precision, this function is much better than \nquantile\n.\n\n\nThe result depends on the order of running the query, and is nondeterministic.\n\n\nmedian(x)\n\n\nAll the quantile functions have corresponding median functions: \nmedian\n, \nmedianDeterministic\n, \nmedianTiming\n, \nmedianTimingWeighted\n, \nmedianExact\n, \nmedianExactWeighted\n, \nmedianTDigest\n. They are synonyms and their behavior is identical.\n\n\nquantiles(level1, level2, ...)(x)\n\n\nAll the quantile functions also have corresponding quantiles functions: \nquantiles\n, \nquantilesDeterministic\n, \nquantilesTiming\n, \nquantilesTimingWeighted\n, \nquantilesExact\n, \nquantilesExactWeighted\n, \nquantilesTDigest\n. These functions calculate all the quantiles of the listed levels in one pass, and return an array of the resulting values.\n\n\nvarSamp(x)\n\n\nCalculates the amount \n\u03a3((x - x\u0305)^2) / (n - 1)\n, where \nn\n is the sample size and \nx\u0305\nis the average value of \nx\n.\n\n\nIt represents an unbiased estimate of the variance of a random variable, if the values passed to the function are a sample of this random amount.\n\n\nReturns \nFloat64\n. When \nn \n= 1\n, returns \n+\u221e\n.\n\n\nvarPop(x)\n\n\nCalculates the amount \n\u03a3((x - x\u0305)^2) / (n - 1)\n, where \nn\n is the sample size and \nx\u0305\nis the average value of \nx\n.\n\n\nIn other words, dispersion for a set of values. Returns \nFloat64\n.\n\n\nstddevSamp(x)\n\n\nThe result is equal to the square root of \nvarSamp(x)\n.\n\n\nstddevPop(x)\n\n\nThe result is equal to the square root of \nvarPop(x)\n.\n\n\ntopK(N)(column)\n\n\nReturns an array of the most frequent values in the specified column. The resulting array is sorted in descending order of frequency of values (not by the values themselves).\n\n\nImplements the \nFiltered Space-Saving\n  algorithm for analyzing TopK, based on the reduce-and-combine algorithm from \nParallel Space Saving\n.\n\n\ntopK(N)(column)\n\n\n\n\n\nThis function doesn't provide a guaranteed result. In certain situations, errors might occur and it might return frequent values that aren't the most frequent values.\n\n\nWe recommend using the \nN \n 10\n value; performance is reduced with large \nN\n values. Maximum value of \nN = 65536\n.\n\n\nArguments\n\n- 'N' is the number of values.\n- ' x ' \u2013 The column.\n\n\nExample\n\n\nTake the \nOnTime\n data set and select the three most frequently occurring values in the \nAirlineID\n column.\n\n\nSELECT\n \ntopK\n(\n3\n)(\nAirlineID\n)\n \nAS\n \nres\n\n\nFROM\n \nontime\n\n\n\n\n\n\n\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [19393,19790,19805] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\n\n\ncovarSamp(x, y)\n\n\nCalculates the value of \n\u03a3((x - x\u0305)(y - y\u0305)) / (n - 1)\n.\n\n\nReturns Float64. When \nn \n= 1\n, returns +\u221e.\n\n\ncovarPop(x, y)\n\n\nCalculates the value of \n\u03a3((x - x\u0305)(y - y\u0305)) / n\n.\n\n\ncorr(x, y)\n\n\nCalculates the Pearson correlation coefficient: \n\u03a3((x - x\u0305)(y - y\u0305)) / sqrt(\u03a3((x - x\u0305)^2) * \u03a3((y - y\u0305)^2))\n.\n\n\n\n\nAggregate function combinators\n\n\nThe name of an aggregate function can have a suffix appended to it. This changes the way the aggregate function works.\n\n\n-If\n\n\nThe suffix -If can be appended to the name of any aggregate function. In this case, the aggregate function accepts an extra argument \u2013 a condition (Uint8 type). The aggregate function processes only the rows that trigger the condition. If the condition was not triggered even once, it returns a default value (usually zeros or empty strings).\n\n\nExamples: \nsumIf(column, cond)\n, \ncountIf(cond)\n, \navgIf(x, cond)\n, \nquantilesTimingIf(level1, level2)(x, cond)\n, \nargMinIf(arg, val, cond)\n and so on.\n\n\nWith conditional aggregate functions, you can calculate aggregates for several conditions at once, without using subqueries and \nJOIN\ns. For example, in Yandex.Metrica, conditional aggregate functions are used to implement the segment comparison functionality.\n\n\n-Array\n\n\nThe -Array suffix can be appended to any aggregate function. In this case, the aggregate function takes arguments of the 'Array(T)' type (arrays) instead of 'T' type arguments. If the aggregate function accepts multiple arguments, this must be arrays of equal lengths. When processing arrays, the aggregate function works like the original aggregate function across all array elements.\n\n\nExample 1: \nsumArray(arr)\n - Totals all the elements of all 'arr' arrays. In this example, it could have been written more simply: \nsum(arraySum(arr))\n.\n\n\nExample 2: \nuniqArray(arr)\n \u2013 Count the number of unique elements in all 'arr' arrays. This could be done an easier way: \nuniq(arrayJoin(arr))\n, but it's not always possible to add 'arrayJoin' to a query.\n\n\n-If and -Array can be combined. However, 'Array' must come first, then 'If'. Examples: \nuniqArrayIf(arr, cond)\n, \nquantilesTimingArrayIf(level1, level2)(arr, cond)\n. Due to this order, the 'cond' argument can't be an array.\n\n\n-State\n\n\nIf you apply this combinator, the aggregate function doesn't return the resulting value (such as the number of unique values for the 'uniq' function), but an intermediate state of the aggregation (for \nuniq\n, this is the hash table for calculating the number of unique values). This is an AggregateFunction(...) that can be used for further processing or stored in a table to finish aggregating later. See the sections \"AggregatingMergeTree\" and \"Functions for working with intermediate aggregation states\".\n\n\n-Merge\n\n\nIf you apply this combinator, the aggregate function takes the intermediate aggregation state as an argument, combines the states to finish aggregation, and returns the resulting value.\n\n\n-MergeState.\n\n\nMerges the intermediate aggregation states in the same way as the -Merge combinator. However, it doesn't return the resulting value, but an intermediate aggregation state, similar to the -State combinator.\n\n\n-ForEach\n\n\nConverts an aggregate function for tables into an aggregate function for arrays that aggregates the corresponding array items and returns an array of results. For example, \nsumForEach\n for the arrays \n[1, 2]\n, \n[3, 4, 5]\nand\n[6, 7]\nreturns the result \n[10, 13, 5]\n after adding together the corresponding array items.\n\n\n\n\nParametric aggregate functions\n\n\nSome aggregate functions can accept not only argument columns (used for compression), but a set of parameters \u2013 constants for initialization. The syntax is two pairs of brackets instead of one. The first is for parameters, and the second is for arguments.\n\n\nsequenceMatch(pattern)(time, cond1, cond2, ...)\n\n\nPattern matching for event chains.\n\n\npattern\n is a string containing a pattern to match. The pattern is similar to a regular expression.\n\n\ntime\n is the time of the event with the DateTime type.\n\n\ncond1\n, \ncond2\n ... is from one to 32 arguments of type UInt8 that indicate whether a certain condition was met for the event.\n\n\nThe function collects a sequence of events in RAM. Then it checks whether this sequence matches the pattern.\nIt returns UInt8: 0 if the pattern isn't matched, or 1 if it matches.\n\n\nExample: \nsequenceMatch ('(?1).*(?2)')(EventTime, URL LIKE '%company%', URL LIKE '%cart%')\n\n\n\n\nwhether there was a chain of events in which a pageview with 'company' in the address occurred earlier than a pageview with 'cart' in the address.\n\n\n\n\nThis is a singular example. You could write it using other aggregate functions:\n\n\nminIf(EventTime, URL LIKE \n%company%\n) \n maxIf(EventTime, URL LIKE \n%cart%\n).\n\n\n\n\n\nHowever, there is no such solution for more complex situations.\n\n\nPattern syntax:\n\n\n(?1)\n refers to the condition (any number can be used in place of 1).\n\n\n.*\n is any number of any events.\n\n\n(?t\n=1800)\n is a time condition.\n\n\nAny quantity of any type of events is allowed over the specified time.\n\n\nInstead of \n=\n,  the following operators can be used:\n, \n, \n=\n.\n\n\nAny number may be specified in place of 1800.\n\n\nEvents that occur during the same second can be put in the chain in any order. This may affect the result of the function.\n\n\nsequenceCount(pattern)(time, cond1, cond2, ...)\n\n\nWorks the same way as the sequenceMatch function, but instead of returning whether there is an event chain, it returns UInt64 with the number of event chains found.\nChains are searched for without overlapping. In other words, the next chain can start only after the end of the previous one.\n\n\nwindowFunnel(window)(timestamp, cond1, cond2, cond3, ....)\n\n\nWindow funnel matching for event chains, calculates the max event level in a sliding window.\n\n\nwindow\n is the timestamp window value, such as 3600.\n\n\ntimestamp\n is the time of the event with the DateTime type or UInt32 type.\n\n\ncond1\n, \ncond2\n ... is from one to 32 arguments of type UInt8 that indicate whether a certain condition was met for the event\n\n\nExample: \n\n\nConsider you are doing a website analytics, intend to find out the user counts clicked login button( event = 1001 ), then the user counts followed by searched the phones( event = 1003 and product = 'phone' ) , then the user counts followed by made an order ( event = 1009 ). And all event chains must be in a 3600 seconds sliding window. \n\n\nThis could be easily calculate by \nwindowFunnel\n\n\nSELECT\n    level,\n    count() AS c\nFROM\n(\n    SELECT\n        user_id,\n        windowFunnel(3600)(timestamp, event_id = 1001, event_id = 1003 AND product = \nphone\n, event_id = 1009) AS level\n    FROM trend_event\n    WHERE (event_date \n= \n2017-01-01\n) AND (event_date \n= \n2017-01-31\n)\n    GROUP BY user_id\n)\nGROUP BY level\nORDER BY level\n\n\n\n\n\nSimply, the level could only be 0,1,2,3, it means the maxium event action stage that one user could reach.\n\n\nuniqUpTo(N)(x)\n\n\nCalculates the number of different argument values \u200b\u200bif it is less than or equal to N. If the number of different argument values is greater than N, it returns N + 1.\n\n\nRecommended for use with small Ns, up to 10. The maximum value of N is 100.\n\n\nFor the state of an aggregate function, it uses the amount of memory equal to 1 + N * the size of one value of bytes.\nFor strings, it stores a non-cryptographic hash of 8 bytes. That is, the calculation is approximated for strings.\n\n\nThe function also works for several arguments.\n\n\nIt works as fast as possible, except for cases when a large N value is used and the number of unique values is slightly less than N.\n\n\nUsage example:\n\n\nProblem: Generate a report that shows only keywords that produced at least 5 unique users.\nSolution: Write in the GROUP BY query SearchPhrase HAVING uniqUpTo(4)(UserID) \n= 5\n\n\n\n\n\nDictionaries\n\n\nA dictionary\n is a mapping (key \n-\n attributes) that can be used in a query as functions.\nYou can think of this as a more convenient and efficient type of JOIN with dimension tables.\n\n\nThere are built-in (internal) and add-on (external) dictionaries.\n\n\n\n\nExternal dictionaries\n\n\nYou can add your own dictionaries from various data sources. The data source for a dictionary can be a local text or executable file, an HTTP(s) resource, or another DBMS. For more information, see \"\nSources for external dictionaries\n\".\n\n\nClickHouse:\n\n\n\n\n\n\nFully or partially stores dictionaries in RAM.\n\n\nPeriodically updates dictionaries and dynamically loads missing values. In other words, dictionaries can be loaded dynamically.\n\n\n\n\n\n\nThe configuration of external dictionaries is located in one or more files. The path to the configuration is specified in the \ndictionaries_config\n parameter.\n\n\nDictionaries can be loaded at server startup or at first use, depending on the \ndictionaries_lazy_load\n setting.\n\n\nThe dictionary config file has the following format:\n\n\nyandex\n\n    \ncomment\nAn optional element with any content. Ignored by the ClickHouse server.\n/comment\n\n\n    \n!--Optional element. File name with substitutions--\n\n    \ninclude_from\n/etc/metrika.xml\n/include_from\n\n\n\n    \ndictionary\n\n        \n!-- Dictionary configuration --\n\n    \n/dictionary\n\n\n    ...\n\n    \ndictionary\n\n        \n!-- Dictionary configuration --\n\n    \n/dictionary\n\n\n/yandex\n\n\n\n\n\n\nYou can \nconfigure\n any number of dictionaries in the same file. The file format is preserved even if there is only one dictionary (i.e. \nyandex\ndictionary\n \n!--configuration -\n \n/dictionary\n/yandex\n ).\n\n\nSee also \"\nFunctions for working with external dictionaries\n\".\n\n\n\n\nYou can convert values \u200b\u200bfor a small dictionary by describing it in a `SELECT` query (see the [transform](#other_functions-transform) function). This functionality is not related to external dictionaries.\n\n\n\n\n\n\n\nConfiguring an external dictionary\n\n\nThe dictionary configuration has the following structure:\n\n\ndictionary\n\n    \nname\ndict_name\n/name\n\n\n    \nsource\n\n      \n!-- Source configuration --\n\n    \n/source\n\n\n    \nlayout\n\n      \n!-- Memory layout configuration --\n\n    \n/layout\n\n\n    \nstructure\n\n      \n!-- Complex key configuration --\n\n    \n/structure\n\n\n    \nlifetime\n\n      \n!-- Lifetime of dictionary in memory --\n\n    \n/lifetime\n\n\n/dictionary\n\n\n\n\n\n\n\n\nname \u2013 The identifier that can be used to access the dictionary. Use the characters \n[a-zA-Z0-9_\\-]\n.\n\n\nsource\n \u2014 Source of the dictionary.\n\n\nlayout\n \u2014 Dictionary layout in memory.\n\n\nstructure\n \u2014 Structure of the dictionary . A key and attributes that can be retrieved by this key.\n\n\nlifetime\n \u2014 Frequency of dictionary updates.\n\n\n\n\n\n\nStoring dictionaries in memory\n\n\nThere are a \nvariety of ways\n to store dictionaries in memory.\n\n\nWe recommend \nflat\n, \nhashed\nand\ncomplex_key_hashed\n. which provide optimal processing speed.\n\n\nCaching is not recommended because of potentially poor performance and difficulties in selecting optimal parameters. Read more in the section \"\ncache\n\".\n\n\nThere are several ways to improve dictionary performance:\n\n\n\n\nCall the function for working with the dictionary after \nGROUP BY\n.\n\n\nMark attributes to extract as injective. An attribute is called injective if different attribute values correspond to different keys. So when \nGROUP BY\n uses a function that fetches an attribute value by the key, this function is automatically taken out of \nGROUP BY\n.\n\n\n\n\nClickHouse generates an exception for errors with dictionaries. Examples of errors:\n\n\n\n\nThe dictionary being accessed could not be loaded.\n\n\nError querying a \ncached\n dictionary.\n\n\n\n\nYou can view the list of external dictionaries and their statuses in the \nsystem.dictionaries\n table.\n\n\nThe configuration looks like this:\n\n\nyandex\n\n    \ndictionary\n\n        ...\n        \nlayout\n\n            \nlayout_type\n\n                \n!-- layout settings --\n\n            \n/layout_type\n\n        \n/layout\n\n        ...\n    \n/dictionary\n\n\n/yandex\n\n\n\n\n\n\n\n\nWays to store dictionaries in memory\n\n\n\n\nflat\n\n\nhashed\n\n\ncache\n\n\nrange_hashed\n\n\ncomplex_key_hashed\n\n\ncomplex_key_cache\n\n\nip_trie\n\n\n\n\n\n\nflat\n\n\nThe dictionary is completely stored in memory in the form of flat arrays. How much memory does the dictionary use? The amount is proportional to the size of the largest key (in space used).\n\n\nThe dictionary key has the \nUInt64\n type and the value is limited to 500,000. If a larger key is discovered when creating the dictionary, ClickHouse throws an exception and does not create the dictionary.\n\n\nAll types of sources are supported. When updating, data (from a file or from a table) is read in its entirety.\n\n\nThis method provides the best performance among all available methods of storing the dictionary.\n\n\nConfiguration example:\n\n\nlayout\n\n  \nflat\n \n/\n\n\n/layout\n\n\n\n\n\n\n\n\nhashed\n\n\nThe dictionary is completely stored in memory in the form of a hash table. The dictionary can contain any number of elements with any identifiers In practice, the number of keys can reach tens of millions of items.\n\n\nAll types of sources are supported. When updating, data (from a file or from a table) is read in its entirety.\n\n\nConfiguration example:\n\n\nlayout\n\n  \nhashed\n \n/\n\n\n/layout\n\n\n\n\n\n\n\n\ncomplex_key_hashed\n\n\nThis type of storage is for use with composite \nkeys\n. Similar to \nhashed\n.\n\n\nConfiguration example:\n\n\nlayout\n\n  \ncomplex_key_hashed\n \n/\n\n\n/layout\n\n\n\n\n\n\n\n\nrange_hashed\n\n\nThe dictionary is stored in memory in the form of a hash table with an ordered array of ranges and their corresponding values.\n\n\nThis storage method works the same way as hashed and allows using date/time ranges  in addition to the key, if they appear in the dictionary.\n\n\nExample: The table contains discounts for each advertiser in the format:\n\n\n+---------------+---------------------+-------------------+--------+\n| advertiser id | discount start date | discount end date | amount |\n+===============+=====================+===================+========+\n| 123           | 2015-01-01          | 2015-01-15        | 0.15   |\n+---------------+---------------------+-------------------+--------+\n| 123           | 2015-01-16          | 2015-01-31        | 0.25   |\n+---------------+---------------------+-------------------+--------+\n| 456           | 2015-01-01          | 2015-01-15        | 0.05   |\n+---------------+---------------------+-------------------+--------+\n\n\n\n\n\nTo use a sample for date ranges, define the \nrange_min\n and \nrange_max\n elements in the \nstructure\n.\n\n\nExample:\n\n\nstructure\n\n    \nid\n\n        \nname\nId\n/name\n\n    \n/id\n\n    \nrange_min\n\n        \nname\nfirst\n/name\n\n    \n/range_min\n\n    \nrange_max\n\n        \nname\nlast\n/name\n\n    \n/range_max\n\n    ...\n\n\n\n\n\nTo work with these dictionaries, you need to pass an additional date argument to the \ndictGetT\n function:\n\n\ndictGetT(\ndict_name\n, \nattr_name\n, id, date)\n\n\n\n\n\nThis function returns the value for the specified \nid\ns and the date range that includes the passed date.\n\n\nDetails of the algorithm:\n\n\n\n\nIf the \nid\n is not found or a range is not found for the \nid\n, it returns the default value for the dictionary.\n\n\nIf there are overlapping ranges, you can use any.\n\n\nIf the range delimiter is \nNULL\n or an invalid date (such as 1900-01-01 or 2039-01-01), the range is left open. The range can be open on both sides.\n\n\n\n\nConfiguration example:\n\n\nyandex\n\n        \ndictionary\n\n\n                ...\n\n                \nlayout\n\n                        \nrange_hashed\n \n/\n\n                \n/layout\n\n\n                \nstructure\n\n                        \nid\n\n                                \nname\nAbcdef\n/name\n\n                        \n/id\n\n                        \nrange_min\n\n                                \nname\nStartDate\n/name\n\n                        \n/range_min\n\n                        \nrange_max\n\n                                \nname\nEndDate\n/name\n\n                        \n/range_max\n\n                        \nattribute\n\n                                \nname\nXXXType\n/name\n\n                                \ntype\nString\n/type\n\n                                \nnull_value\n \n/\n\n                        \n/attribute\n\n                \n/structure\n\n\n        \n/dictionary\n\n\n/yandex\n\n\n\n\n\n\n\n\ncache\n\n\nThe dictionary is stored in a cache that has a fixed number of cells. These cells contain frequently used elements.\n\n\nWhen searching for a dictionary, the cache is searched first. For each block of data, all keys that are not found in the cache or are outdated are requested from the source using \nSELECT attrs... FROM db.table WHERE id IN (k1, k2, ...)\n. The received data is then written to the cache.\n\n\nFor cache dictionaries, the expiration \nlifetime\n of data in the cache can be set. If more time than \nlifetime\n has passed since loading the data in a cell, the cell's value is not used, and it is re-requested the next time it needs to be used.\n\n\nThis is the least effective of all the ways to store dictionaries. The speed of the cache depends strongly on correct settings and the usage scenario. A cache type dictionary performs well only when the hit rates are high enough (recommended 99% and higher). You can view the average hit rate in the \nsystem.dictionaries\n table.\n\n\nTo improve cache performance, use a subquery with \nLIMIT\n, and call the function with the dictionary externally.\n\n\nSupported \nsources\n: MySQL, ClickHouse, executable, HTTP.\n\n\nExample of settings:\n\n\nlayout\n\n    \ncache\n\n        \n!-- The size of the cache, in number of cells. Rounded up to a power of two. --\n\n        \nsize_in_cells\n1000000000\n/size_in_cells\n\n    \n/cache\n\n\n/layout\n\n\n\n\n\n\nSet a large enough cache size. You need to experiment to select the number of cells:\n\n\n\n\nSet some value.\n\n\nRun queries until the cache is completely full.\n\n\nAssess memory consumption using the \nsystem.dictionaries\n table.\n\n\nIncrease or decrease the number of cells until the required memory consumption is reached.\n\n\n\n\n\n\nDo not use ClickHouse as a source, because it is slow to process queries with random reads.\n\n\n\n\n\n\n\ncomplex_key_cache\n\n\nThis type of storage is for use with composite \nkeys\n. Similar to \ncache\n.\n\n\n\n\nip_trie\n\n\nThis type of storage is for mapping network prefixes (IP addresses) to metadata such as ASN.\n\n\nExample: The table contains network prefixes and their corresponding AS number and country code:\n\n\n  +-----------------+-------+--------+\n  | prefix          | asn   | cca2   |\n  +=================+=======+========+\n  | 202.79.32.0/20  | 17501 | NP     |\n  +-----------------+-------+--------+\n  | 2620:0:870::/48 | 3856  | US     |\n  +-----------------+-------+--------+\n  | 2a02:6b8:1::/48 | 13238 | RU     |\n  +-----------------+-------+--------+\n  | 2001:db8::/32   | 65536 | ZZ     |\n  +-----------------+-------+--------+\n\n\n\n\n\nWhen using this type of layout, the structure must have a composite key.\n\n\nExample:\n\n\nstructure\n\n    \nkey\n\n        \nattribute\n\n            \nname\nprefix\n/name\n\n            \ntype\nString\n/type\n\n        \n/attribute\n\n    \n/key\n\n    \nattribute\n\n            \nname\nasn\n/name\n\n            \ntype\nUInt32\n/type\n\n            \nnull_value\n \n/\n\n    \n/attribute\n\n    \nattribute\n\n            \nname\ncca2\n/name\n\n            \ntype\nString\n/type\n\n            \nnull_value\n??\n/null_value\n\n    \n/attribute\n\n    ...\n\n\n\n\n\nThe key must have only one String type attribute that contains an allowed IP prefix. Other types are not supported yet.\n\n\nFor queries, you must use the same functions (\ndictGetT\n with a tuple) as for dictionaries with composite keys:\n\n\ndictGetT(\ndict_name\n, \nattr_name\n, tuple(ip))\n\n\n\n\n\nThe function takes either \nUInt32\n for IPv4, or \nFixedString(16)\n for IPv6:\n\n\ndictGetString(\nprefix\n, \nasn\n, tuple(IPv6StringToNum(\n2001:db8::1\n)))\n\n\n\n\n\nOther types are not supported yet. The function returns the attribute for the prefix that corresponds to this IP address. If there are overlapping prefixes, the most specific one is returned.\n\n\nData is stored in a \ntrie\n. It must completely fit into RAM.\n\n\n\n\nDictionary updates\n\n\nClickHouse periodically updates the dictionaries. The update interval for fully downloaded dictionaries and the invalidation interval for cached dictionaries are defined in the \nlifetime\n tag in seconds.\n\n\nDictionary updates (other than loading for first use) do not block queries. During updates, the old version of a dictionary is used. If an error occurs during an update, the error is written to the server log, and queries continue using the old version of dictionaries.\n\n\nExample of settings:\n\n\ndictionary\n\n    ...\n    \nlifetime\n300\n/lifetime\n\n    ...\n\n/dictionary\n\n\n\n\n\n\nSetting \nlifetime\n 0\n/lifetime\n  prevents updating dictionaries.\n\n\nYou can set a time interval for upgrades, and ClickHouse will choose a uniformly random time within this range. This is necessary in order to distribute the load on the dictionary source when upgrading on a large number of servers.\n\n\nExample of settings:\n\n\ndictionary\n\n    ...\n    \nlifetime\n\n        \nmin\n300\n/min\n\n        \nmax\n360\n/max\n\n    \n/lifetime\n\n    ...\n\n/dictionary\n\n\n\n\n\n\nWhen upgrading the dictionaries, the ClickHouse server applies different logic depending on the type of \n source\n:\n\n\n\n\n\n\nFor a text file, it checks the time of modification. If the time differs from the previously recorded time, the dictionary is updated.\n\n\nFor MyISAM tables, the time of modification is checked using a \nSHOW TABLE STATUS\n query.\n\n\nDictionaries from other sources are updated every time by default.\n\n\n\n\n\n\nFor MySQL (InnoDB) and ODBC sources, you can set up a query that will update the dictionaries only if they really changed, rather than each time. To do this, follow these steps:\n\n\n\n\n\n\nThe dictionary table must have a field that always changes when the source data is updated.\n\n\nThe settings of the source must specify a query that retrieves the changing field. The ClickHouse server interprets the query result as a row, and if this row has changed relative to its previous state, the dictionary is updated. Specify the query in the \ninvalidate_query\n field in the settings for the \nsource\n.\n\n\n\n\n\n\nExample of settings:\n\n\ndictionary\n\n    ...\n    \nodbc\n\n      ...\n      \ninvalidate_query\nSELECT update_time FROM dictionary_source where id = 1\n/invalidate_query\n\n    \n/odbc\n\n    ...\n\n/dictionary\n\n\n\n\n\n\n\n\nSources of external dictionaries\n\n\nAn external dictionary can be connected from many different sources.\n\n\nThe configuration looks like this:\n\n\nyandex\n\n  \ndictionary\n\n    ...\n    \nsource\n\n      \nsource_type\n\n        \n!-- Source configuration --\n\n      \n/source_type\n\n    \n/source\n\n    ...\n  \n/dictionary\n\n  ...\n\n/yandex\n\n\n\n\n\n\nThe source is configured in the \nsource\n section.\n\n\nTypes of sources (\nsource_type\n):\n\n\n\n\nLocal file\n\n\nExecutable file\n\n\nHTTP(s)\n\n\nODBC\n\n\nDBMS\n\n\nMySQL\n\n\nClickHouse\n\n\nMongoDB\n\n\n\n\n\n\nLocal file\n\n\nExample of settings:\n\n\nsource\n\n  \nfile\n\n    \npath\n/opt/dictionaries/os.tsv\n/path\n\n    \nformat\nTabSeparated\n/format\n\n  \n/file\n\n\n/source\n\n\n\n\n\n\nSetting fields:\n\n\n\n\npath\n \u2013 The absolute path to the file.\n\n\nformat\n \u2013 The file format. All the formats described in \"\nFormats\n\" are supported.\n\n\n\n\n\n\nExecutable file\n\n\nWorking with executable files depends on \nhow the dictionary is stored in memory\n. If the dictionary is stored using \ncache\n and \ncomplex_key_cache\n, ClickHouse requests the necessary keys by sending a request to the executable file's \nSTDIN\n.\n\n\nExample of settings:\n\n\nsource\n\n    \nexecutable\n\n        \ncommand\ncat /opt/dictionaries/os.tsv\n/command\n\n        \nformat\nTabSeparated\n/format\n\n    \n/executable\n\n\n/source\n\n\n\n\n\n\nSetting fields:\n\n\n\n\ncommand\n \u2013 The absolute path to the executable file, or the file name (if the program directory is written to \nPATH\n).\n\n\nformat\n \u2013 The file format. All the formats described in \"\nFormats\n\" are supported.\n\n\n\n\n\n\nHTTP(s)\n\n\nWorking with an HTTP(s) server depends on \nhow the dictionary is stored in memory\n. If the dictionary is stored using \ncache\n and \ncomplex_key_cache\n, ClickHouse requests the necessary keys by sending a request via the \nPOST\n method.\n\n\nExample of settings:\n\n\nsource\n\n    \nhttp\n\n        \nurl\nhttp://[::1]/os.tsv\n/url\n\n        \nformat\nTabSeparated\n/format\n\n    \n/http\n\n\n/source\n\n\n\n\n\n\nIn order for ClickHouse to access an HTTPS resource, you must \nconfigure openSSL\n in the server configuration.\n\n\nSetting fields:\n\n\n\n\nurl\n \u2013 The source URL.\n\n\nformat\n \u2013 The file format. All the formats described in \"\nFormats\n\" are supported.\n\n\n\n\n\n\nODBC\n\n\nYou can use this method to connect any database that has an ODBC driver.\n\n\nExample of settings:\n\n\nodbc\n\n    \ndb\nDatabaseName\n/db\n\n    \ntable\nTableName\n/table\n\n    \nconnection_string\nDSN=some_parameters\n/connection_string\n\n    \ninvalidate_query\nSQL_QUERY\n/invalidate_query\n\n\n/odbc\n\n\n\n\n\n\nSetting fields:\n\n\n\n\ndb\n \u2013 Name of the database. Omit it if the database name is set in the \nconnection_string\n parameters.\n\n\ntable\n \u2013 Name of the table.\n\n\nconnection_string\n \u2013 Connection string.\n\n\ninvalidate_query\n \u2013 Query for checking the dictionary status. Optional parameter. Read more in the section \nUpdating dictionaries\n.\n\n\n\n\nExample of connecting PostgreSQL\n\n\nUbuntu OS.\n\n\nInstalling unixODBC and the ODBC driver for PostgreSQL:\n\n\nsudo apt-get install -y unixodbc odbcinst odbc-postgresql\n\n\n\n\n\nConfiguring \n/etc/odbc.ini\n (or \n~/.odbc.ini\n):\n\n\n    [DEFAULT]\n    Driver = myconnection\n\n    [myconnection]\n    Description         = PostgreSQL connection to my_db\n    Driver              = PostgreSQL Unicode\n    Database            = my_db\n    Servername          = 127.0.0.1\n    UserName            = username\n    Password            = password\n    Port                = 5432\n    Protocol            = 9.3\n    ReadOnly            = No\n    RowVersioning       = No\n    ShowSystemTables    = No\n    ConnSettings        =\n\n\n\n\n\nThe dictionary configuration in ClickHouse:\n\n\ndictionary\n\n    \nname\ntable_name\n/name\n\n    \nsource\n\n    \nodbc\n\n        \n!-- You can specifiy the following parameters in connection_string: --\n\n        \n!-- DSN=myconnection;UID=username;PWD=password;HOST=127.0.0.1;PORT=5432;DATABASE=my_db --\n\n            \nconnection_string\nDSN=myconnection\n/connection_string\n\n            \ntable\npostgresql_table\n/table\n\n        \n/odbc\n\n    \n/source\n\n    \nlifetime\n\n        \nmin\n300\n/min\n\n        \nmax\n360\n/max\n\n    \n/lifetime\n\n    \nlayout\n\n        \nhashed/\n\n    \n/layout\n\n    \nstructure\n\n        \nid\n\n            \nname\nid\n/name\n\n        \n/id\n\n        \nattribute\n\n            \nname\nsome_column\n/name\n\n            \ntype\nUInt64\n/type\n\n            \nnull_value\n0\n/null_value\n\n        \n/attribute\n\n    \n/structure\n\n\n/dictionary\n\n\n\n\n\n\nYou may need to edit \nodbc.ini\n to specify the full path to the library with the driver \nDRIVER=/usr/local/lib/psqlodbcw.so\n.\n\n\nExample of connecting MS SQL Server\n\n\nUbuntu OS.\n\n\nInstalling the driver: :\n\n\n    sudo apt-get install tdsodbc freetds-bin sqsh\n\n\n\n\n\nConfiguring the driver: :\n\n\n    $ cat /etc/freetds/freetds.conf \n    ...\n\n    [MSSQL]\n    host = 192.168.56.101\n    port = 1433\n    tds version = 7.0\n    client charset = UTF-8\n\n    $ cat /etc/odbcinst.ini \n    ...\n\n    [FreeTDS]\n    Description     = FreeTDS\n    Driver          = /usr/lib/x86_64-linux-gnu/odbc/libtdsodbc.so\n    Setup           = /usr/lib/x86_64-linux-gnu/odbc/libtdsS.so\n    FileUsage       = 1\n    UsageCount      = 5\n\n    $ cat ~/.odbc.ini \n    ...\n\n    [MSSQL]\n    Description     = FreeTDS\n    Driver          = FreeTDS\n    Servername      = MSSQL\n    Database        = test\n    UID             = test\n    PWD             = test\n    Port            = 1433\n\n\n\n\n\nConfiguring the dictionary in ClickHouse:\n\n\nyandex\n\n    \ndictionary\n\n        \nname\ntest\n/name\n\n        \nsource\n\n            \nodbc\n\n                \ntable\ndict\n/table\n\n                \nconnection_string\nDSN=MSSQL;UID=test;PWD=test\n/connection_string\n\n            \n/odbc\n\n        \n/source\n\n\n        \nlifetime\n\n            \nmin\n300\n/min\n\n            \nmax\n360\n/max\n\n        \n/lifetime\n\n\n        \nlayout\n\n            \nflat\n \n/\n\n        \n/layout\n\n\n        \nstructure\n\n            \nid\n\n                \nname\nk\n/name\n\n            \n/id\n\n            \nattribute\n\n                \nname\ns\n/name\n\n                \ntype\nString\n/type\n\n                \nnull_value\n/null_value\n\n            \n/attribute\n\n        \n/structure\n\n    \n/dictionary\n\n\n/yandex\n\n\n\n\n\n\nDBMS\n\n\n\n\nMySQL\n\n\nExample of settings:\n\n\nsource\n\n  \nmysql\n\n      \nport\n3306\n/port\n\n      \nuser\nclickhouse\n/user\n\n      \npassword\nqwerty\n/password\n\n      \nreplica\n\n          \nhost\nexample01-1\n/host\n\n          \npriority\n1\n/priority\n\n      \n/replica\n\n      \nreplica\n\n          \nhost\nexample01-2\n/host\n\n          \npriority\n1\n/priority\n\n      \n/replica\n\n      \ndb\ndb_name\n/db\n\n      \ntable\ntable_name\n/table\n\n      \nwhere\nid=10\n/where\n\n      \ninvalidate_query\nSQL_QUERY\n/invalidate_query\n\n  \n/mysql\n\n\n/source\n\n\n\n\n\n\nSetting fields:\n\n\n\n\n\n\nport\n \u2013 The port on the MySQL server. You can specify it for all replicas, or for each one individually (inside \nreplica\n).\n\n\n\n\n\n\nuser\n \u2013 Name of the MySQL user. You can specify it for all replicas, or for each one individually (inside \nreplica\n).\n\n\n\n\n\n\npassword\n \u2013 Password of the MySQL user. You can specify it for all replicas, or for each one individually (inside \nreplica\n).\n\n\n\n\n\n\nreplica\n \u2013 Section of replica configurations. There can be multiple sections.\n\n\n\n\nreplica/host\n \u2013 The MySQL host.\n\n\n\n\n* \nreplica/priority\n \u2013 The replica priority. When attempting to connect, ClickHouse traverses the replicas in order of priority. The lower the number, the higher the priority.\n\n\n\n\n\n\ndb\n \u2013 Name of the database.\n\n\n\n\n\n\ntable\n \u2013 Name of the table.\n\n\n\n\n\n\nwhere\n \u2013 The selection criteria. Optional parameter.\n\n\n\n\n\n\ninvalidate_query\n \u2013 Query for checking the dictionary status. Optional parameter. Read more in the section \nUpdating dictionaries\n.\n\n\n\n\n\n\nMySQL can be connected on a local host via sockets. To do this, set \nhost\n and \nsocket\n.\n\n\nExample of settings:\n\n\nsource\n\n  \nmysql\n\n      \nhost\nlocalhost\n/host\n\n      \nsocket\n/path/to/socket/file.sock\n/socket\n\n      \nuser\nclickhouse\n/user\n\n      \npassword\nqwerty\n/password\n\n      \ndb\ndb_name\n/db\n\n      \ntable\ntable_name\n/table\n\n      \nwhere\nid=10\n/where\n\n      \ninvalidate_query\nSQL_QUERY\n/invalidate_query\n\n  \n/mysql\n\n\n/source\n\n\n\n\n\n\n\n\nClickHouse\n\n\nExample of settings:\n\n\nsource\n\n    \nclickhouse\n\n        \nhost\nexample01-01-1\n/host\n\n        \nport\n9000\n/port\n\n        \nuser\ndefault\n/user\n\n        \npassword\n/password\n\n        \ndb\ndefault\n/db\n\n        \ntable\nids\n/table\n\n        \nwhere\nid=10\n/where\n\n    \n/clickhouse\n\n\n/source\n\n\n\n\n\n\nSetting fields:\n\n\n\n\nhost\n \u2013 The ClickHouse host. If it is a local host, the query is processed without any network activity. To improve fault tolerance, you can create a \nDistributed\n table and enter it in subsequent configurations.\n\n\nport\n \u2013 The port on the ClickHouse server.\n\n\nuser\n \u2013 Name of the ClickHouse user.\n\n\npassword\n \u2013 Password of the ClickHouse user.\n\n\ndb\n \u2013 Name of the database.\n\n\ntable\n \u2013 Name of the table.\n\n\nwhere\n \u2013 The selection criteria. May be omitted.\n\n\n\n\n\n\nMongoDB\n\n\nExample of settings:\n\n\nsource\n\n    \nmongodb\n\n        \nhost\nlocalhost\n/host\n\n        \nport\n27017\n/port\n\n        \nuser\n/user\n\n        \npassword\n/password\n\n        \ndb\ntest\n/db\n\n        \ncollection\ndictionary_source\n/collection\n\n    \n/mongodb\n\n\n/source\n\n\n\n\n\n\nSetting fields:\n\n\n\n\nhost\n \u2013 The MongoDB host.\n\n\nport\n \u2013 The port on the MongoDB server.\n\n\nuser\n \u2013 Name of the MongoDB user.\n\n\npassword\n \u2013 Password of the MongoDB user.\n\n\ndb\n \u2013 Name of the database.\n\n\ncollection\n \u2013 Name of the collection.\n\n\n\n\n\n\nDictionary key and fields\n\n\nThe \nstructure\n clause describes the dictionary key and fields available for queries.\n\n\nOverall structure:\n\n\ndictionary\n\n    \nstructure\n\n        \nid\n\n            \nname\nId\n/name\n\n        \n/id\n\n\n        \nattribute\n\n            \n!-- Attribute parameters --\n\n        \n/attribute\n\n\n        ...\n\n    \n/structure\n\n\n/dictionary\n\n\n\n\n\n\nColumns are described in the structure:\n\n\n\n\nid\n - \nkey column\n.\n\n\nattribute\n - \ndata column\n. There can be a large number of columns.\n\n\n\n\n\n\nKey\n\n\nClickHouse supports the following types of keys:\n\n\n\n\nNumeric key. UInt64. Defined in the tag \nid\n .\n\n\nComposite key. Set of values of different types. Defined in the tag \nkey\n .\n\n\n\n\nA structure can contain either \nid\n or \nkey\n .\n\n\n\n\nThe key doesn't need to be defined separately in attributes.\n\n\n\n\n\nNumeric key\n\n\nFormat: \nUInt64\n.\n\n\nConfiguration example:\n\n\nid\n\n    \nname\nId\n/name\n\n\n/id\n\n\n\n\n\n\nConfiguration fields:\n\n\n\n\nname \u2013 The name of the column with keys.\n\n\n\n\nComposite key\n\n\nThe key can be a \ntuple\n from any types of fields. The \nlayout\n in this case must be \ncomplex_key_hashed\n or \ncomplex_key_cache\n.\n\n\n\nA composite key can consist of a single element. This makes it possible to use a string as the key, for instance.\n\n\n\n\nThe key structure is set in the element \nkey\n. Key fields are specified in the same format as the dictionary \nattributes\n. Example:\n\n\nstructure\n\n    \nkey\n\n        \nattribute\n\n            \nname\nfield1\n/name\n\n            \ntype\nString\n/type\n\n        \n/attribute\n\n        \nattribute\n\n            \nname\nfield2\n/name\n\n            \ntype\nUInt32\n/type\n\n        \n/attribute\n\n        ...\n    \n/key\n\n...\n\n\n\n\n\nFor a query to the \ndictGet*\n function, a tuple is passed as the key. Example: \ndictGetString('dict_name', 'attr_name', tuple('string for field1', num_for_field2))\n.\n\n\n\n\nAttributes\n\n\nConfiguration example:\n\n\nstructure\n\n    ...\n    \nattribute\n\n        \nname\nName\n/name\n\n        \ntype\nType\n/type\n\n        \nnull_value\n/null_value\n\n        \nexpression\nrand64()\n/expression\n\n        \nhierarchical\ntrue\n/hierarchical\n\n        \ninjective\ntrue\n/injective\n\n        \nis_object_id\ntrue\n/is_object_id\n\n    \n/attribute\n\n\n/structure\n\n\n\n\n\n\nConfiguration fields:\n\n\n\n\nname\n \u2013 The column name.\n\n\ntype\n \u2013 The column type. Sets the method for interpreting data in the source. For example, for MySQL, the field might be \nTEXT\n, \nVARCHAR\n, or \nBLOB\n in the source table, but it can be uploaded as \nString\n.\n\n\nnull_value\n \u2013 The default value for a non-existing element. In the example, it is an empty string.\n\n\nexpression\n \u2013 The attribute can be an expression. The tag is not required.\n\n\nhierarchical\n \u2013 Hierarchical support. Mirrored to the parent identifier. By default, \nfalse\n.\n\n\ninjective\n \u2013 Whether the \nid -\n attribute\n image is injective. If \ntrue\n, then you can optimize the \nGROUP BY\n clause. By default, \nfalse\n.\n\n\nis_object_id\n \u2013 Whether the query is executed for a MongoDB document by \nObjectID\n.\n\n\n\n\nInternal dictionaries\n\n\nClickHouse contains a built-in feature for working with a geobase.\n\n\nThis allows you to:\n\n\n\n\nUse a region's ID to get its name in the desired language.\n\n\nUse a region's ID to get the ID of a city, area, federal district, country, or continent.\n\n\nCheck whether a region is part of another region.\n\n\nGet a chain of parent regions.\n\n\n\n\nAll the functions support \"translocality,\" the ability to simultaneously use different perspectives on region ownership. For more information, see the section \"Functions for working with Yandex.Metrica dictionaries\".\n\n\nThe internal dictionaries are disabled in the default package.\nTo enable them, uncomment the parameters \npath_to_regions_hierarchy_file\n and \npath_to_regions_names_files\n in the server configuration file.\n\n\nThe geobase is loaded from text files.\nIf you work at Yandex, you can follow these instructions to create them:\n\nhttps://github.yandex-team.ru/raw/Metrika/ClickHouse_private/master/doc/create_embedded_geobase_dictionaries.txt\n\n\nPut the regions_hierarchy*.txt files in the path_to_regions_hierarchy_file directory. This configuration parameter must contain the path to the regions_hierarchy.txt file (the default regional hierarchy), and the other files (regions_hierarchy_ua.txt) must be located in the same directory.\n\n\nPut the \nregions_names_*.txt\n files in the path_to_regions_names_files directory.\n\n\nYou can also create these files yourself. The file format is as follows:\n\n\nregions_hierarchy*.txt\n: TabSeparated (no header), columns:\n\n\n\n\nRegion ID (UInt32)\n\n\nParent region ID (UInt32)\n\n\nRegion type (UInt8): 1 - continent, 3 - country, 4 - federal district, 5 - region, 6 - city; other types don't have values.\n\n\nPopulation (UInt32) - Optional column.\n\n\n\n\nregions_names_*.txt\n: TabSeparated (no header), columns:\n\n\n\n\nRegion ID (UInt32)\n\n\nRegion name (String) - Can't contain tabs or line feeds, even escaped ones.\n\n\n\n\nA flat array is used for storing in RAM. For this reason, IDs shouldn't be more than a million.\n\n\nDictionaries can be updated without restarting the server. However, the set of available dictionaries is not updated.\nFor updates, the file modification times are checked. If a file has changed, the dictionary is updated.\nThe interval to check for changes is configured in the 'builtin_dictionaries_reload_interval' parameter.\nDictionary updates (other than loading at first use) do not block queries. During updates, queries use the old versions of dictionaries. If an error occurs during an update, the error is written to the server log, and queries continue using the old version of dictionaries.\n\n\nWe recommend periodically updating the dictionaries with the geobase. During an update, generate new files and write them to a separate location. When everything is ready, rename them to the files used by the server.\n\n\nThere are also functions for working with OS identifiers and Yandex.Metrica search engines, but they shouldn't be used.\n\n\nUsage\n\n\nAccess rights\n\n\nUsers and access rights are set up in the user config. This is usually \nusers.xml\n.\n\n\nUsers are recorded in the \nusers\n section. Here is a fragment of the \nusers.xml\n file:\n\n\n!-- Users and ACL. --\n\n\nusers\n\n    \n!-- If the user name is not specified, the \ndefault\n user is used. --\n\n    \ndefault\n\n        \n!-- Password could be specified in plaintext or in SHA256 (in hex format).\n\n\n\n             If you want to specify the password in plain text (not recommended), place it in the \npassword\n element.\n\n\n             Example: \npassword\nqwerty\n/password\n.\n\n\n             Password can be empty.\n\n\n\n             If you want to specify SHA256, place it in the \npassword_sha256_hex\n element.\n\n\n                          Example: \npassword_sha256_hex\n65e84be33532fb784c48129675f9eff3a682b27168c0ea744b2cf58ee02337c5\n/password_sha256_hex\n\n\n\n             How to generate decent password:\n\n\n             Execute: PASSWORD=$(base64 \n /dev/urandom | head -c8); echo \n$PASSWORD\n; echo -n \n$PASSWORD\n | sha256sum | tr -d \n-\n\n\n             In first line will be password and in second - corresponding SHA256.\n\n\n        --\n\n        \npassword\n/password\n\n        \n!-- A list of networks that access is allowed from.\n\n\n            Each list item has one of the following forms:\n\n\n            \nip\nIP address or subnet mask. For example: 198.51.100.0/24 or 2001:DB8::/32.\n\n\n            \nhost\n Host name. For example: example01. A DNS query is made for verification, and all addresses obtained are compared with the address of the customer.\n\n\n            \nhost_regexp\n Regular expression for host names. For example: ^example\\d\\d-\\d\\d-\\d\\.yandex\\.ru$\n\n\n                For verification, a DNS PTR query is made for the customer\ns address and a regular expression is applied to the result.\n\n\n                Then another DNS query is made for the result of the PTR query, and all received address are compared to the client address.\n\n\n                We strongly recommend that the regex ends with \\.yandex\\.ru$.\n\n\n\n            If you are installing ClickHouse yourself, enter:\n\n\n                \nnetworks\n\n\n                        \nip\n::/0\n/ip\n\n\n                \n/networks\n\n\n        --\n\n        \nnetworks\n \nincl=\nnetworks\n \n/\n\n\n        \n!-- Settings profile for the user. --\n\n        \nprofile\ndefault\n/profile\n\n\n        \n!-- Quota for the user. --\n\n        \nquota\ndefault\n/quota\n\n    \n/default\n\n\n    \n!-- For requests from the Yandex.Metrica user interface via the API for data on specific counters. --\n\n    \nweb\n\n        \npassword\n/password\n\n        \nnetworks\n \nincl=\nnetworks\n \n/\n\n        \nprofile\nweb\n/profile\n\n        \nquota\ndefault\n/quota\n\n        \nallow_databases\n\n        \ndatabase\ntest\n/database\n\n        \n/allow_databases\n\n    \n/web\n\n\n/users\n\n\n\n\n\n\nYou can see a declaration from two users: \ndefault\n and \nweb\n. We added the \nweb\n user separately.\n\n\nThe \ndefault\n user is chosen in cases when the username is not passed. The \ndefault\n user is also used for distributed query processing, if the configuration of the server or cluster doesn't specify the \nuser\n and \npassword\n (see the section on the \nDistributed\n engine).\n\n\nThe user that is used for exchanging information between servers combined in a cluster must not have substantial restrictions or quotas \u2013 otherwise, distributed queries will fail.\n\n\nThe password is specified in open format (not recommended) or in SHA-256. The hash isn't salted. In this regard, you should not consider these passwords as providing security against potential malicious attacks. Rather, they are necessary for protection from employees.\n\n\nA list of networks is specified that access is allowed from. In this example, the list of networks for both users is loaded from a separate file (/etc/metrika.xml) containing the 'networks' substitution. Here is a fragment of it:\n\n\nyandex\n\n    ...\n    \nnetworks\n\n        \nip\n::/64\n/ip\n\n        \nip\n203.0.113.0/24\n/ip\n\n        \nip\n2001:DB8::/32\n/ip\n\n        ...\n    \n/networks\n\n\n/yandex\n\n\n\n\n\n\nWe could have defined this list of networks directly in 'users.xml', or in a file in the 'users.d' directory (for more information, see the section \"Configuration files\").\n\n\nThe config includes comments explaining how to open access from everywhere.\n\n\nFor use in production, only specify IP elements (IP addresses and their masks), since using 'host' and 'hoost_regexp' might cause extra latency.\n\n\nNext the user settings profile is specified (see the section \"Settings profiles\"). You can specify the default profile, \ndefault\n. The profile can have any name. You can specify the same profile for different users. The most important thing you can write in the settings profile is 'readonly' set to 1, which provides read-only access.\n\n\nAfter this, the quota is defined (see the section \"Quotas\"). You can specify the default quota, \ndefault\n. It is set in the config by default so that it only counts resource usage, but does not restrict it. The quota can have any name. You can specify the same quota for different users \u2013 in this case, resource usage is calculated for each user individually.\n\n\nIn the optional \nallow_databases\n section, you can also specify a list of databases that the user can access. By default, all databases are available to the user. You can specify the \ndefault\n database. In this case, the user will receive access to the database by default.\n\n\nAccess to the \nsystem\n database is always allowed (since this database is used for processing queries).\n\n\nThe user can get a list of all databases and tables in them by using \nSHOW\n queries or system tables, even if access to individual databases isn't allowed.\n\n\nDatabase access is not related to the \nreadonly\n setting. You can't grant full access to one database and \nreadonly\n access to another one.\n\n\n\n\nConfiguration files\n\n\nThe main server config file is \nconfig.xml\n. It resides in the \n/etc/clickhouse-server/\n directory.\n\n\nIndividual settings can be overridden in the \n*.xml\nand\n*.conf\n files in the \nconf.d\n and \nconfig.d\n directories next to the config file.\n\n\nThe \nreplace\n or \nremove\n attributes can be specified for the elements of these config files.\n\n\nIf neither is specified, it combines the contents of elements recursively, replacing values of duplicate children.\n\n\nIf \nreplace\n is specified, it replaces the entire element with the specified one.\n\n\nIf \nremove\n is specified, it deletes the element.\n\n\nThe config can also define \"substitutions\". If an element has the \nincl\n attribute, the corresponding substitution from the file will be used as the value. By default, the path to the file with substitutions is \n/etc/metrika.xml\n. This can be changed in the \ninclude_from\n element in the server config. The substitution values are specified in  \n/yandex/substitution_name\n elements in this file. If a substitution specified in \nincl\n  does not exist, it is recorded in the log. To prevent ClickHouse from logging missing substitutions, specify the  \noptional=\"true\"\n attribute (for example, settings for \nmacros\n).\n\n\nSubstitutions can also be performed from ZooKeeper. To do this, specify the attribute \nfrom_zk = \"/path/to/node\"\n. The element value is replaced with the contents of the node at \n/path/to/node\n in ZooKeeper. You can also put an entire XML subtree on the ZooKeeper node and it will be fully inserted into the source element.\n\n\nThe \nconfig.xml\n file can specify a separate config with user settings, profiles, and quotas. The relative path to this config is set in the 'users_config' element. By default, it is \nusers.xml\n. If \nusers_config\n is omitted, the user settings, profiles, and quotas are specified directly in \nconfig.xml\n.\n\n\nIn addition, \nusers_config\n may have overrides in files from the \nusers_config.d\n directory (for example, \nusers.d\n) and substitutions.\n\n\nFor each config file, the server also generates \nfile-preprocessed.xml\n files when starting. These files contain all the completed substitutions and overrides, and they are intended for informational use. If ZooKeeper substitutions were used in the config files but ZooKeeper is not available on the server start, the server loads the configuration from the preprocessed file.\n\n\nThe server tracks changes in config files, as well as files and ZooKeeper nodes that were used when performing substitutions and overrides, and reloads the settings for users and clusters on the fly. This means that you can modify the cluster, users, and their settings without restarting the server.\n\n\nQuotas\n\n\nQuotas allow you to limit resource usage over a period of time, or simply track the use of resources.\nQuotas are set up in the user config. This is usually 'users.xml'.\n\n\nThe system also has a feature for limiting the complexity of a single query. See the section \"Restrictions on query complexity\").\n\n\nIn contrast to query complexity restrictions, quotas:\n\n\n\n\nPlace restrictions on a set of queries that can be run over a period of time, instead of limiting a single query.\n\n\nAccount for resources spent on all remote servers for distributed query processing.\n\n\n\n\nLet's look at the section of the 'users.xml' file that defines quotas.\n\n\n!-- Quotas. --\n\n\nquotas\n\n    \n!-- Quota name. --\n\n    \ndefault\n\n        \n!-- Restrictions for a time period. You can set many intervals with different restrictions. --\n\n        \ninterval\n\n            \n!-- Length of the interval. --\n\n            \nduration\n3600\n/duration\n\n\n            \n!-- Unlimited. Just collect data for the specified time interval. --\n\n            \nqueries\n0\n/queries\n\n            \nerrors\n0\n/errors\n\n            \nresult_rows\n0\n/result_rows\n\n            \nread_rows\n0\n/read_rows\n\n            \nexecution_time\n0\n/execution_time\n\n        \n/interval\n\n    \n/default\n\n\n\n\n\n\nBy default, the quota just tracks resource consumption for each hour, without limiting usage.\nThe resource consumption calculated for each interval is output to the server log after each request.\n\n\nstatbox\n\n    \n!-- Restrictions for a time period. You can set many intervals with different restrictions. --\n\n    \ninterval\n\n        \n!-- Length of the interval. --\n\n        \nduration\n3600\n/duration\n\n\n        \nqueries\n1000\n/queries\n\n        \nerrors\n100\n/errors\n\n        \nresult_rows\n1000000000\n/result_rows\n\n        \nread_rows\n100000000000\n/read_rows\n\n        \nexecution_time\n900\n/execution_time\n\n    \n/interval\n\n\n    \ninterval\n\n        \nduration\n86400\n/duration\n\n\n        \nqueries\n10000\n/queries\n\n        \nerrors\n1000\n/errors\n\n        \nresult_rows\n5000000000\n/result_rows\n\n        \nread_rows\n500000000000\n/read_rows\n\n        \nexecution_time\n7200\n/execution_time\n\n    \n/interval\n\n\n/statbox\n\n\n\n\n\n\nFor the 'statbox' quota, restrictions are set for every hour and for every 24 hours (86,400 seconds). The time interval is counted starting from an implementation-defined fixed moment in time. In other words, the 24-hour interval doesn't necessarily begin at midnight.\n\n\nWhen the interval ends, all collected values are cleared. For the next hour, the quota calculation starts over.\n\n\nHere are the amounts that can be restricted:\n\n\nqueries\n \u2013 The total number of requests.\n\n\nerrors\n \u2013 The number of queries that threw an exception.\n\n\nresult_rows\n \u2013 The total number of rows given as the result.\n\n\nread_rows\n \u2013 The total number of source rows read from tables for running the query, on all remote servers.\n\n\nexecution_time\n \u2013 The total query execution time, in seconds (wall time).\n\n\nIf the limit is exceeded for at least one time interval, an exception is thrown with a text about which restriction was exceeded, for which interval, and when the new interval begins (when queries can be sent again).\n\n\nQuotas can use the \"quota key\" feature in order to report on resources for multiple keys independently. Here is an example of this:\n\n\n!-- For the global reports designer. --\n\n\nweb_global\n\n    \n!-- keyed - The quota_key \nkey\n is passed in the query parameter,\n\n\n            and the quota is tracked separately for each key value.\n\n\n        For example, you can pass a Yandex.Metrica username as the key,\n\n\n            so the quota will be counted separately for each username.\n\n\n        Using keys makes sense only if quota_key is transmitted by the program, not by a user.\n\n\n\n        You can also write \nkeyed_by_ip /\n so the IP address is used as the quota key.\n\n\n        (But keep in mind that users can change the IPv6 address fairly easily.)\n\n\n    --\n\n    \nkeyed\n \n/\n\n\n\n\n\n\nThe quota is assigned to users in the 'users' section of the config. See the section \"Access rights\".\n\n\nFor distributed query processing, the accumulated amounts are stored on the requestor server. So if the user goes to another server, the quota there will \"start over\".\n\n\nWhen the server is restarted, quotas are reset.\n\n\nUsage recommendations\n\n\nCPU\n\n\nThe SSE 4.2 instruction set must be supported. Modern processors (since 2008) support it.\n\n\nWhen choosing a processor, prefer a large number of cores and slightly slower clock rate over fewer cores and a higher clock rate.\nFor example, 16 cores with 2600 MHz is better than 8 cores with 3600 MHz.\n\n\nHyper-threading\n\n\nDon't disable hyper-threading. It helps for some queries, but not for others.\n\n\nTurbo Boost\n\n\nTurbo Boost is highly recommended. It significantly improves performance with a typical load.\nYou can use \nturbostat\n to view the CPU's actual clock rate under a load.\n\n\nCPU scaling governor\n\n\nAlways use the \nperformance\n scaling governor.  The \non-demand\n scaling governor works much worse with constantly high demand.\n\n\nsudo \necho\n \nperformance\n \n|\n tee /sys/devices/system/cpu/cpu\n\\*\n/cpufreq/scaling_governor\n\n\n\n\n\nCPU limitations\n\n\nProcessors can overheat. Use \ndmesg\n to see if the CPU's clock rate was limited due to overheating.\nThe restriction can also be set externally at the datacenter level. You can use \nturbostat\n to monitor it under a load.\n\n\nRAM\n\n\nFor small amounts of data (up to \\~200 GB compressed), it is best to use as much memory as the volume of data.\nFor large amounts of data and when processing interactive (online) queries, you should use a reasonable amount of RAM (128 GB or more) so the hot data subset will fit in the cache of pages.\nEven for data volumes of \\~50 TB per server, using 128 GB of RAM significantly improves query performance compared to 64 GB.\n\n\nSwap file\n\n\nAlways disable the swap file. The only reason for not doing this is if you are using ClickHouse on your personal laptop.\n\n\nHuge pages\n\n\nAlways disable transparent huge pages. It interferes with memory allocators, which leads to significant performance degradation.\n\n\necho\n \nnever\n \n|\n sudo tee /sys/kernel/mm/transparent_hugepage/enabled\n\n\n\n\n\nUse \nperf top\n to watch the time spent in the kernel for memory management.\nPermanent huge pages also do not need to be allocated.\n\n\nStorage subsystem\n\n\nIf your budget allows you to use SSD, use SSD.\nIf not, use HDD. SATA HDDs 7200 RPM will do.\n\n\nGive preference to a lot of servers with local hard drives over a smaller number of servers with attached disk shelves.\nBut for storing archives with rare queries, shelves will work.\n\n\nRAID\n\n\nWhen using HDD, you can combine their RAID-10, RAID-5, RAID-6 or RAID-50.\nFor Linux, software RAID is better (with \nmdadm\n). We don't recommend using LVM.\nWhen creating RAID-10, select the \nfar\n layout.\nIf your budget allows, choose RAID-10.\n\n\nIf you have more than 4 disks, use RAID-6 (preferred) or RAID-50, instead of RAID-5.\nWhen using RAID-5, RAID-6 or RAID-50, always increase stripe_cache_size, since the default value is usually not the best choice.\n\n\necho\n \n4096\n \n|\n sudo tee /sys/block/md2/md/stripe_cache_size\n\n\n\n\n\nCalculate the exact number from the number of devices and the block size, using the formula: \n2 * num_devices * chunk_size_in_bytes / 4096\n.\n\n\nA block size of 1025 KB is sufficient for all RAID configurations.\nNever set the block size too small or too large.\n\n\nYou can use RAID-0 on SSD.\nRegardless of RAID use, always use replication for data security.\n\n\nEnable NCQ with a long queue. For HDD, choose the CFQ scheduler, and for SSD, choose noop. Don't reduce the 'readahead' setting.\nFor HDD, enable the write cache.\n\n\nFile system\n\n\nExt4 is the most reliable option. Set the mount options \nnoatime, nobarrier\n.\nXFS is also suitable, but it hasn't been as thoroughly tested with ClickHouse.\nMost other file systems should also work fine. File systems with delayed allocation work better.\n\n\nLinux kernel\n\n\nDon't use an outdated Linux kernel. In 2015, 3.18.19 was new enough.\nConsider using the kernel build from Yandex:\nhttps://github.com/yandex/smart\n \u2013 it provides at least a 5% performance increase.\n\n\nNetwork\n\n\nIf you are using IPv6, increase the size of the route cache.\nThe Linux kernel prior to 3.2 had a multitude of problems with IPv6 implementation.\n\n\nUse at least a 10 GB network, if possible. 1 Gb will also work, but it will be much worse for patching replicas with tens of terabytes of data, or for processing distributed queries with a large amount of intermediate data.\n\n\nZooKeeper\n\n\nYou are probably already using ZooKeeper for other purposes. You can use the same installation of ZooKeeper, if it isn't already overloaded.\n\n\nIt's best to use a fresh version of ZooKeeper \u2013 3.4.9 or later. The version in stable Linux distributions may be outdated.\n\n\nWith the default settings, ZooKeeper is a time bomb:\n\n\n\n\nThe ZooKeeper server won't delete files from old snapshots and logs when using the default configuration (see autopurge), and this is the responsibility of the operator.\n\n\n\n\nThis bomb must be defused.\n\n\nThe ZooKeeper (3.5.1) configuration below is used in the Yandex.Metrica production environment as of May 20, 2017:\n\n\nzoo.cfg:\n\n\n## http://hadoop.apache.org/zookeeper/docs/current/zookeeperAdmin.html\n\n\n\n## The number of milliseconds of each tick\n\n\ntickTime\n=\n2000\n\n\n## The number of ticks that the initial\n\n\n## synchronization phase can take\n\n\ninitLimit\n=\n30000\n\n\n## The number of ticks that can pass between\n\n\n## sending a request and getting an acknowledgement\n\n\nsyncLimit\n=\n10\n\n\n\nmaxClientCnxns\n=\n2000\n\n\n\nmaxSessionTimeout\n=\n60000000\n\n\n## the directory where the snapshot is stored.\n\n\ndataDir\n=\n/opt/zookeeper/\n{{\n cluster\n[\nname\n]\n \n}}\n/data\n\n## Place the dataLogDir to a separate physical disc for better performance\n\n\ndataLogDir\n=\n/opt/zookeeper/\n{{\n cluster\n[\nname\n]\n \n}}\n/logs\n\nautopurge.snapRetainCount\n=\n10\n\nautopurge.purgeInterval\n=\n1\n\n\n\n\n## To avoid seeks ZooKeeper allocates space in the transaction log file in\n\n\n## blocks of preAllocSize kilobytes. The default block size is 64M. One reason\n\n\n## for changing the size of the blocks is to reduce the block size if snapshots\n\n\n## are taken more often. (Also, see snapCount).\n\n\npreAllocSize\n=\n131072\n\n\n\n## Clients can submit requests faster than ZooKeeper can process them,\n\n\n## especially if there are a lot of clients. To prevent ZooKeeper from running\n\n\n## out of memory due to queued requests, ZooKeeper will throttle clients so that\n\n\n## there is no more than globalOutstandingLimit outstanding requests in the\n\n\n## system. The default limit is 1,000.ZooKeeper logs transactions to a\n\n\n## transaction log. After snapCount transactions are written to a log file a\n\n\n## snapshot is started and a new transaction log file is started. The default\n\n\n## snapCount is 10,000.\n\n\nsnapCount\n=\n3000000\n\n\n\n## If this option is defined, requests will be will logged to a trace file named\n\n\n## traceFile.year.month.day.\n\n\n##traceFile=\n\n\n\n## Leader accepts client connections. Default value is \nyes\n. The leader machine\n\n\n## coordinates updates. For higher update throughput at thes slight expense of\n\n\n## read throughput the leader can be configured to not accept clients and focus\n\n\n## on coordination.\n\n\nleaderServes\n=\nyes\n\n\nstandaloneEnabled\n=\nfalse\n\n\ndynamicConfigFile\n=\n/etc/zookeeper-\n{{\n cluster\n[\nname\n]\n \n}}\n/conf/zoo.cfg.dynamic\n\n\n\n\n\nJava version:\n\n\nJava(TM) SE Runtime Environment (build 1.8.0_25-b17)\nJava HotSpot(TM) 64-Bit Server VM (build 25.25-b02, mixed mode)\n\n\n\n\n\nJVM parameters:\n\n\nNAME\n=\nzookeeper-\n{{\n cluster\n[\nname\n]\n \n}}\n\n\nZOOCFGDIR\n=\n/etc/\n$NAME\n/conf\n\n\n## TODO this is really ugly\n\n\n## How to find out, which jars are needed?\n\n\n## seems, that log4j requires the log4j.properties file to be in the classpath\n\n\nCLASSPATH\n=\n$ZOOCFGDIR\n:/usr/build/classes:/usr/build/lib/*.jar:/usr/share/zookeeper/zookeeper-3.5.1-metrika.jar:/usr/share/zookeeper/slf4j-log4j12-1.7.5.jar:/usr/share/zookeeper/slf4j-api-1.7.5.jar:/usr/share/zookeeper/servlet-api-2.5-20081211.jar:/usr/share/zookeeper/netty-3.7.0.Final.jar:/usr/share/zookeeper/log4j-1.2.16.jar:/usr/share/zookeeper/jline-2.11.jar:/usr/share/zookeeper/jetty-util-6.1.26.jar:/usr/share/zookeeper/jetty-6.1.26.jar:/usr/share/zookeeper/javacc.jar:/usr/share/zookeeper/jackson-mapper-asl-1.9.11.jar:/usr/share/zookeeper/jackson-core-asl-1.9.11.jar:/usr/share/zookeeper/commons-cli-1.2.jar:/usr/src/java/lib/*.jar:/usr/etc/zookeeper\n\n\n\nZOOCFG\n=\n$ZOOCFGDIR\n/zoo.cfg\n\n\nZOO_LOG_DIR\n=\n/var/log/\n$NAME\n\n\nUSER\n=\nzookeeper\n\nGROUP\n=\nzookeeper\n\nPIDDIR\n=\n/var/run/\n$NAME\n\n\nPIDFILE\n=\n$PIDDIR\n/\n$NAME\n.pid\n\nSCRIPTNAME\n=\n/etc/init.d/\n$NAME\n\n\nJAVA\n=\n/usr/bin/java\n\nZOOMAIN\n=\norg.apache.zookeeper.server.quorum.QuorumPeerMain\n\n\nZOO_LOG4J_PROP\n=\nINFO,ROLLINGFILE\n\n\nJMXLOCALONLY\n=\nfalse\n\n\nJAVA_OPTS\n=\n-Xms{{ cluster.get(\nxms\n,\n128M\n) }} \\\n\n\n    -Xmx{{ cluster.get(\nxmx\n,\n1G\n) }} \\\n\n\n    -Xloggc:/var/log/\n$NAME\n/zookeeper-gc.log \\\n\n\n    -XX:+UseGCLogFileRotation \\\n\n\n    -XX:NumberOfGCLogFiles=16 \\\n\n\n    -XX:GCLogFileSize=16M \\\n\n\n    -verbose:gc \\\n\n\n    -XX:+PrintGCTimeStamps \\\n\n\n    -XX:+PrintGCDateStamps \\\n\n\n    -XX:+PrintGCDetails\n\n\n    -XX:+PrintTenuringDistribution \\\n\n\n    -XX:+PrintGCApplicationStoppedTime \\\n\n\n    -XX:+PrintGCApplicationConcurrentTime \\\n\n\n    -XX:+PrintSafepointStatistics \\\n\n\n    -XX:+UseParNewGC \\\n\n\n    -XX:+UseConcMarkSweepGC \\\n\n\n-XX:+CMSParallelRemarkEnabled\n\n\n\n\n\n\nSalt init:\n\n\ndescription \nzookeeper-{{ cluster[\nname\n] }} centralized coordination service\n\n\nstart on runlevel [2345]\nstop on runlevel [!2345]\n\nrespawn\n\nlimit nofile 8192 8192\n\npre-start script\n    [ -r \n/etc/zookeeper-{{ cluster[\nname\n] }}/conf/environment\n ] || exit 0\n    . /etc/zookeeper-{{ cluster[\nname\n] }}/conf/environment\n    [ -d $ZOO_LOG_DIR ] || mkdir -p $ZOO_LOG_DIR\n    chown $USER:$GROUP $ZOO_LOG_DIR\nend script\n\nscript\n    . /etc/zookeeper-{{ cluster[\nname\n] }}/conf/environment\n    [ -r /etc/default/zookeeper ] \n . /etc/default/zookeeper\n    if [ -z \n$JMXDISABLE\n ]; then\n        JAVA_OPTS=\n$JAVA_OPTS -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.local.only=$JMXLOCALONLY\n\n    fi\n    exec start-stop-daemon --start -c $USER --exec $JAVA --name zookeeper-{{ cluster[\nname\n] }} \\\n        -- -cp $CLASSPATH $JAVA_OPTS -Dzookeeper.log.dir=${ZOO_LOG_DIR} \\\n        -Dzookeeper.root.logger=${ZOO_LOG4J_PROP} $ZOOMAIN $ZOOCFG\nend script\n\n\n\n\n\n\n\nServer configuration parameters\n\n\nThis section contains descriptions of server settings that cannot be changed at the session or query level.\n\n\nThese settings are stored in the \nconfig.xml\n file on the ClickHouse server.\n\n\nOther settings are described in the \"\nSettings\n\" section.\n\n\nBefore studying the settings, read the \nConfiguration files\n section and note the use of substitutions (the \nincl\n and \noptional\n attributes).\n\n\nServer settings\n\n\n\n\nbuiltin_dictionaries_reload_interval\n\n\nThe interval in seconds before reloading built-in dictionaries.\n\n\nClickHouse reloads built-in dictionaries every x seconds. This makes it possible to edit dictionaries \"on the fly\" without restarting the server.\n\n\nDefault value: 3600.\n\n\nExample\n\n\nbuiltin_dictionaries_reload_interval\n3600\n/builtin_dictionaries_reload_interval\n\n\n\n\n\n\n\n\ncompression\n\n\nData compression settings.\n\n\n\n\nDon't use it if you have just started using ClickHouse.\n\n\n\n\n\nThe configuration looks like this:\n\n\ncompression\n\n    \ncase\n\n      \nparameters/\n\n    \n/case\n\n    ...\n\n/compression\n\n\n\n\n\n\nYou can configure multiple sections \ncase\n.\n\n\nBlock field \ncase\n:\n\n\n\n\nmin_part_size\n \u2013 The minimum size of a table part.\n\n\nmin_part_size_ratio\n \u2013 The ratio of the minimum size of a table part to the full size of the table.\n\n\nmethod\n \u2013 Compression method. Acceptable values \u200b: \nlz4\n or \nzstd\n(experimental).\n\n\n\n\nClickHouse checks \nmin_part_size\n  and \nmin_part_size_ratio\n  and processes the \ncase\n blocks that match these conditions. If none of the \ncase\n matches, ClickHouse applies the \nlz4\n compression algorithm.\n\n\nExample\n\n\ncompression\n \nincl=\nclickhouse_compression\n\n    \ncase\n\n        \nmin_part_size\n10000000000\n/min_part_size\n\n        \nmin_part_size_ratio\n0.01\n/min_part_size_ratio\n\n        \nmethod\nzstd\n/method\n\n    \n/case\n\n\n/compression\n\n\n\n\n\n\n\n\ndefault_database\n\n\nThe default database.\n\n\nTo get a list of databases, use the \nSHOW DATABASES\n.\n\n\nExample\n\n\ndefault_database\ndefault\n/default_database\n\n\n\n\n\n\n\n\ndefault_profile\n\n\nDefault settings profile.\n\n\nSettings profiles are located in the file specified in the parameter \nuser_config\n.\n\n\nExample\n\n\ndefault_profile\ndefault\n/default_profile\n\n\n\n\n\n\n\n\ndictionaries_config\n\n\nThe path to the config file for external dictionaries.\n\n\nPath:\n\n\n\n\nSpecify the absolute path or the path relative to the server config file.\n\n\nThe path can contain wildcards * and ?.\n\n\n\n\nSee also \"\nExternal dictionaries\n\".\n\n\nExample\n\n\ndictionaries_config\n*_dictionary.xml\n/dictionaries_config\n\n\n\n\n\n\n\n\ndictionaries_lazy_load\n\n\nLazy loading of dictionaries.\n\n\nIf \ntrue\n, then each dictionary is created on first use. If dictionary creation failed, the function that was using the dictionary throws an exception.\n\n\nIf \nfalse\n, all dictionaries are created when the server starts, and if there is an error, the server shuts down.\n\n\nThe default is \ntrue\n.\n\n\nExample\n\n\ndictionaries_lazy_load\ntrue\n/dictionaries_lazy_load\n\n\n\n\n\n\n\n\nformat_schema_path\n\n\nThe path to the directory with the schemes for the input data, such as schemas for the \nCapnProto\n format.\n\n\nExample\n\n\n  \n!-- Directory containing schema files for various input formats. --\n\n  \nformat_schema_path\nformat_schemas/\n/format_schema_path\n\n\n\n\n\n\n\n\ngraphite\n\n\nSending data to \nGraphite\n.\n\n\nSettings:\n\n\n\n\nhost \u2013 The Graphite server.\n\n\nport \u2013 The port on the Graphite server.\n\n\ninterval \u2013 The interval for sending, in seconds.\n\n\ntimeout \u2013 The timeout for sending data, in seconds.\n\n\nroot_path \u2013 Prefix for keys.\n\n\nmetrics \u2013 Sending data from a :ref:\nsystem_tables-system.metrics\n table.\n\n\nevents \u2013 Sending data from a :ref:\nsystem_tables-system.events\n table.\n\n\nasynchronous_metrics \u2013 Sending data from a :ref:\nsystem_tables-system.asynchronous_metrics\n table.\n\n\n\n\nYou can configure multiple \ngraphite\n clauses. For instance, you can use this for sending different data at different intervals.\n\n\nExample\n\n\ngraphite\n\n    \nhost\nlocalhost\n/host\n\n    \nport\n42000\n/port\n\n    \ntimeout\n0.1\n/timeout\n\n    \ninterval\n60\n/interval\n\n    \nroot_path\none_min\n/root_path\n\n    \nmetrics\ntrue\n/metrics\n\n    \nevents\ntrue\n/events\n\n    \nasynchronous_metrics\ntrue\n/asynchronous_metrics\n\n\n/graphite\n\n\n\n\n\n\n\n\ngraphite_rollup\n\n\nSettings for thinning data for Graphite.\n\n\nFor more information, see \nGraphiteMergeTree\n.\n\n\nExample\n\n\ngraphite_rollup_example\n\n    \ndefault\n\n        \nfunction\nmax\n/function\n\n        \nretention\n\n            \nage\n0\n/age\n\n            \nprecision\n60\n/precision\n\n        \n/retention\n\n        \nretention\n\n            \nage\n3600\n/age\n\n            \nprecision\n300\n/precision\n\n        \n/retention\n\n        \nretention\n\n            \nage\n86400\n/age\n\n            \nprecision\n3600\n/precision\n\n        \n/retention\n\n    \n/default\n\n\n/graphite_rollup_example\n\n\n\n\n\n\n\n\nhttp_port/https_port\n\n\nThe port for connecting to the server over HTTP(s).\n\n\nIf \nhttps_port\n is specified, \nopenSSL\n must be configured.\n\n\nIf \nhttp_port\n is specified, the openSSL configuration is ignored even if it is set.\n\n\nExample\n\n\nhttps\n0000\n/https\n\n\n\n\n\n\n\n\nhttp_server_default_response\n\n\nThe page that is shown by default when you access the ClickHouse HTTP(s) server.\n\n\nExample\n\n\nOpens \nhttps://tabix.io/\n when accessing \nhttp://localhost: http_port\n.\n\n\nhttp_server_default_response\n\n  \n![CDATA[\nhtml ng-app=\nSMI2\nhead\nbase href=\nhttp://ui.tabix.io/\n/head\nbody\ndiv ui-view=\n class=\ncontent-ui\n/div\nscript src=\nhttp://loader.tabix.io/master.js\n/script\n/body\n/html\n]]\n\n\n/http_server_default_response\n\n\n\n\n\n\n\n\ninclude_from\n\n\nThe path to the file with substitutions.\n\n\nFor more information, see the section \"\nConfiguration files\n\".\n\n\nExample\n\n\ninclude_from\n/etc/metrica.xml\n/include_from\n\n\n\n\n\n\n\n\ninterserver_http_port\n\n\nPort for exchanging data between ClickHouse servers.\n\n\nExample\n\n\ninterserver_http_port\n9009\n/interserver_http_port\n\n\n\n\n\n\n\n\ninterserver_http_host\n\n\nThe host name that can be used by other servers to access this server.\n\n\nIf omitted, it is defined in the same way as the \nhostname-f\n command.\n\n\nUseful for breaking away from a specific network interface.\n\n\nExample\n\n\ninterserver_http_host\nexample.yandex.ru\n/interserver_http_host\n\n\n\n\n\n\n\n\nkeep_alive_timeout\n\n\nThe number of milliseconds that ClickHouse waits for incoming requests before closing the connection.\n\n\nExample\n\n\nkeep_alive_timeout\n3\n/keep_alive_timeout\n\n\n\n\n\n\n\n\nlisten_host\n\n\nRestriction on hosts that requests can come from. If you want the server to answer all of them, specify \n::\n.\n\n\nExamples:\n\n\nlisten_host\n::1\n/listen_host\n\n\nlisten_host\n127.0.0.1\n/listen_host\n\n\n\n\n\n\n\n\nlogger\n\n\nLogging settings.\n\n\nKeys:\n\n\n\n\nlevel \u2013 Logging level. Acceptable values: \ntrace\n, \ndebug\n, \ninformation\n, \nwarning\n, \nerror\n.\n\n\nlog \u2013 The log file. Contains all the entries according to \nlevel\n.\n\n\nerrorlog \u2013 Error log file.\n\n\nsize \u2013 Size of the file. Applies to \nlog\nand\nerrorlog\n. Once the file reaches \nsize\n, ClickHouse archives and renames it, and creates a new log file in its place.\n\n\ncount \u2013 The number of archived log files that ClickHouse stores.\n\n\n\n\nExample\n\n\nlogger\n\n    \nlevel\ntrace\n/level\n\n    \nlog\n/var/log/clickhouse-server/clickhouse-server.log\n/log\n\n    \nerrorlog\n/var/log/clickhouse-server/clickhouse-server.err.log\n/errorlog\n\n    \nsize\n1000M\n/size\n\n    \ncount\n10\n/count\n\n\n/logger\n\n\n\n\n\n\n\n\nmacros\n\n\nParameter substitutions for replicated tables.\n\n\nCan be omitted if replicated tables are not used.\n\n\nFor more information, see the section \"\nCreating replicated tables\n\".\n\n\nExample\n\n\nmacros\n \nincl=\nmacros\n \noptional=\ntrue\n \n/\n\n\n\n\n\n\n\n\nmark_cache_size\n\n\nApproximate size (in bytes) of the cache of \"marks\" used by \nMergeTree\n engines.\n\n\nThe cache is shared for the server and memory is allocated as needed. The cache size must be at least 5368709120.\n\n\nExample\n\n\nmark_cache_size\n5368709120\n/mark_cache_size\n\n\n\n\n\n\n\n\nmax_concurrent_queries\n\n\nThe maximum number of simultaneously processed requests.\n\n\nExample\n\n\nmax_concurrent_queries\n100\n/max_concurrent_queries\n\n\n\n\n\n\n\n\nmax_connections\n\n\nThe maximum number of inbound connections.\n\n\nExample\n\n\nmax_connections\n4096\n/max_connections\n\n\n\n\n\n\n\n\nmax_open_files\n\n\nThe maximum number of open files.\n\n\nBy default: \nmaximum\n.\n\n\nWe recommend using this option in Mac OS X, since the \ngetrlimit()\n function returns an incorrect value.\n\n\nExample\n\n\nmax_open_files\n262144\n/max_open_files\n\n\n\n\n\n\n\n\nmax_table_size_to_drop\n\n\nRestriction on deleting tables.\n\n\nIf the size of a \nMergeTree\n type table exceeds \nmax_table_size_to_drop\n (in bytes), you can't delete it using a DROP query.\n\n\nIf you still need to delete the table without restarting the ClickHouse server, create the \nclickhouse-path\n/flags/force_drop_table\n file and run the DROP query.\n\n\nDefault value: 50 GB.\n\n\nThe value 0 means that you can delete all tables without any restrictions.\n\n\nExample\n\n\nmax_table_size_to_drop\n0\n/max_table_size_to_drop\n\n\n\n\n\n\n\n\nmerge_tree\n\n\nFine tuning for tables in the \n MergeTree\n family.\n\n\nFor more information, see the MergeTreeSettings.h header file.\n\n\nExample\n\n\nmerge_tree\n\n    \nmax_suspicious_broken_parts\n5\n/max_suspicious_broken_parts\n\n\n/merge_tree\n\n\n\n\n\n\n\n\nopenSSL\n\n\nSSL client/server configuration.\n\n\nSupport for SSL is provided by the \nlibpoco\n library. The interface is described in the file \nSSLManager.h\n\n\nKeys for server/client settings:\n\n\n\n\nprivateKeyFile \u2013 The path to the file with the secret key of the PEM certificate. The file may contain a key and certificate at the same time.\n\n\ncertificateFile \u2013 The path to the client/server certificate file in PEM format. You can omit it if \nprivateKeyFile\n contains the certificate.\n\n\ncaConfig \u2013 The path to the file or directory that contains trusted root certificates.\n\n\nverificationMode \u2013 The method for checking the node's certificates. Details are in the description of the \nContext\n class. Possible values: \nnone\n, \nrelaxed\n, \nstrict\n, \nonce\n.\n\n\nverificationDepth \u2013 The maximum length of the verification chain. Verification will fail if the certificate chain length exceeds the set value.\n\n\nloadDefaultCAFile \u2013 Indicates that built-in CA certificates for OpenSSL will be used. Acceptable values: \ntrue\n, \nfalse\n.  |\n\n\ncipherList \u2013 Supported OpenSSL encryptions. For example: \nALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH\n.\n\n\ncacheSessions \u2013 Enables or disables caching sessions. Must be used in combination with \nsessionIdContext\n. Acceptable values: \ntrue\n, \nfalse\n.\n\n\nsessionIdContext \u2013 A unique set of random characters that the server appends to each generated identifier. The length of the string must not exceed \nSSL_MAX_SSL_SESSION_ID_LENGTH\n. This parameter is always recommended, since it helps avoid problems both if the server caches the session and if the client requested caching. Default value: \n${application.name}\n.\n\n\nsessionCacheSize \u2013 The maximum number of sessions that the server caches. Default value: 1024*20. 0 \u2013 Unlimited sessions.\n\n\nsessionTimeout \u2013 Time for caching the session on the server.\n\n\nextendedVerification \u2013 Automatically extended verification of certificates after the session ends. Acceptable values: \ntrue\n, \nfalse\n.\n\n\nrequireTLSv1 \u2013 Require a TLSv1 connection. Acceptable values: \ntrue\n, \nfalse\n.\n\n\nrequireTLSv1_1 \u2013 Require a TLSv1.1 connection. Acceptable values: \ntrue\n, \nfalse\n.\n\n\nrequireTLSv1 \u2013 Require a TLSv1.2 connection. Acceptable values: \ntrue\n, \nfalse\n.\n\n\nfips \u2013 Activates OpenSSL FIPS mode. Supported if the library's OpenSSL version supports FIPS.\n\n\nprivateKeyPassphraseHandler \u2013 Class (PrivateKeyPassphraseHandler subclass) that requests the passphrase for accessing the private key. For example: \nprivateKeyPassphraseHandler\n, \nname\nKeyFileHandler\n/name\n, \noptions\npassword\ntest\n/password\n/options\n, \n/privateKeyPassphraseHandler\n.\n\n\ninvalidCertificateHandler \u2013 Class (subclass of CertificateHandler) for verifying invalid certificates. For example: \ninvalidCertificateHandler\n \nname\nConsoleCertificateHandler\n/name\n  \n/invalidCertificateHandler\n .\n\n\ndisableProtocols \u2013 Protocols that are not allowed to use.\n\n\npreferServerCiphers \u2013 Preferred server ciphers on the client.\n\n\n\n\nExample of settings:\n\n\nopenSSL\n\n    \nserver\n\n        \n!-- openssl req -subj \n/CN=localhost\n -new -newkey rsa:2048 -days 365 -nodes -x509 -keyout /etc/clickhouse-server/server.key -out /etc/clickhouse-server/server.crt --\n\n        \ncertificateFile\n/etc/clickhouse-server/server.crt\n/certificateFile\n\n        \nprivateKeyFile\n/etc/clickhouse-server/server.key\n/privateKeyFile\n\n        \n!-- openssl dhparam -out /etc/clickhouse-server/dhparam.pem 4096 --\n\n        \ndhParamsFile\n/etc/clickhouse-server/dhparam.pem\n/dhParamsFile\n\n        \nverificationMode\nnone\n/verificationMode\n\n        \nloadDefaultCAFile\ntrue\n/loadDefaultCAFile\n\n        \ncacheSessions\ntrue\n/cacheSessions\n\n        \ndisableProtocols\nsslv2,sslv3\n/disableProtocols\n\n        \npreferServerCiphers\ntrue\n/preferServerCiphers\n\n    \n/server\n\n    \nclient\n\n        \nloadDefaultCAFile\ntrue\n/loadDefaultCAFile\n\n        \ncacheSessions\ntrue\n/cacheSessions\n\n        \ndisableProtocols\nsslv2,sslv3\n/disableProtocols\n\n        \npreferServerCiphers\ntrue\n/preferServerCiphers\n\n        \n!-- Use for self-signed: \nverificationMode\nnone\n/verificationMode\n --\n\n        \ninvalidCertificateHandler\n\n            \n!-- Use for self-signed: \nname\nAcceptCertificateHandler\n/name\n --\n\n            \nname\nRejectCertificateHandler\n/name\n\n        \n/invalidCertificateHandler\n\n    \n/client\n\n\n/openSSL\n\n\n\n\n\n\n\n\npart_log\n\n\nLogging events that are associated with \nMergeTree\n data. For instance, adding or merging data. You can use the log to simulate merge algorithms and compare their characteristics. You can visualize the merge process.\n\n\nQueries are logged in the ClickHouse table, not in a separate file.\n\n\nColumns in the log:\n\n\n\n\nevent_time \u2013 Date of the event.\n\n\nduration_ms \u2013 Duration of the event.\n\n\nevent_type \u2013 Type of event. 1 \u2013 new data part; 2 \u2013 merge result; 3 \u2013 data part downloaded from replica; 4 \u2013 data part deleted.\n\n\ndatabase_name \u2013 The name of the database.\n\n\ntable_name \u2013 Name of the table.\n\n\npart_name \u2013 Name of the data part.\n\n\nsize_in_bytes \u2013 Size of the data part in bytes.\n\n\nmerged_from \u2013 An array of names of data parts that make up the merge (also used when downloading a merged part).\n\n\nmerge_time_ms \u2013 Time spent on the merge.\n\n\n\n\nUse the following parameters to configure logging:\n\n\n\n\ndatabase \u2013 Name of the database.\n\n\ntable \u2013 Name of the table.\n\n\npartition_by \u2013 Sets a \ncustom partitioning key\n.\n\n\nflush_interval_milliseconds \u2013 Interval for flushing data from memory to the disk.\n\n\n\n\nExample\n\n\npart_log\n\n    \ndatabase\nsystem\n/database\n\n    \ntable\npart_log\n/table\n\n    \npartition_by\ntoMonday(event_date)\n/partition_by\n\n    \nflush_interval_milliseconds\n7500\n/flush_interval_milliseconds\n\n\n/part_log\n\n\n\n\n\n\n\n\npath\n\n\nThe path to the directory containing data.\n\n\n\n\nThe end slash is mandatory.\n\n\n\n\n\nExample\n\n\npath\n/var/lib/clickhouse/\n/path\n\n\n\n\n\n\n\n\nquery_log\n\n\nSetting for logging queries received with the \nlog_queries=1\n setting.\n\n\nQueries are logged in the ClickHouse table, not in a separate file.\n\n\nUse the following parameters to configure logging:\n\n\n\n\ndatabase \u2013 Name of the database.\n\n\ntable \u2013 Name of the table.\n\n\npartition_by \u2013 Sets a \ncustom partitioning key\n.\n\n\nflush_interval_milliseconds \u2013 Interval for flushing data from memory to the disk.\n\n\n\n\nIf the table doesn't exist, ClickHouse will create it. If the structure of the query log changed when the ClickHouse server was updated, the table with the old structure is renamed, and a new table is created automatically.\n\n\nExample\n\n\nquery_log\n\n    \ndatabase\nsystem\n/database\n\n    \ntable\nquery_log\n/table\n\n    \npartition_by\ntoMonday(event_date)\n/partition_by\n\n    \nflush_interval_milliseconds\n7500\n/flush_interval_milliseconds\n\n\n/query_log\n\n\n\n\n\n\n\n\nremote_servers\n\n\nConfiguration of clusters used by the Distributed table engine.\n\n\nFor more information, see the section \"\nTable engines/Distributed\n\".\n\n\nExample\n\n\nremote_servers\n \nincl=\nclickhouse_remote_servers\n \n/\n\n\n\n\n\n\nFor the value of the \nincl\n attribute, see the section \"\nConfiguration files\n\".\n\n\n\n\ntimezone\n\n\nThe server's time zone.\n\n\nSpecified as an IANA identifier for the UTC time zone or geographic location (for example, Africa/Abidjan).\n\n\nThe time zone is necessary for conversions between String and DateTime formats when DateTime fields are output to text format (printed on the screen or in a file), and when getting DateTime from a string. In addition, the time zone is used in functions that work with the time and date if they didn't receive the time zone in the input parameters.\n\n\nExample\n\n\ntimezone\nEurope/Moscow\n/timezone\n\n\n\n\n\n\n\n\ntcp_port\n\n\nPort for communicating with clients over the TCP protocol.\n\n\nExample\n\n\ntcp_port\n9000\n/tcp_port\n\n\n\n\n\n\n\n\ntmp_path\n\n\nPath to temporary data for processing large queries.\n\n\n\n\nThe end slash is mandatory.\n\n\n\n\n\nExample\n\n\ntmp_path\n/var/lib/clickhouse/tmp/\n/tmp_path\n\n\n\n\n\n\n\n\nuncompressed_cache_size\n\n\nCache size (in bytes) for uncompressed data used by table engines from the \nMergeTree\n family.\n\n\nThere is one shared cache for the server. Memory is allocated on demand. The cache is used if the option \nuse_uncompressed_cache\n is enabled.\n\n\nThe uncompressed cache is advantageous for very short queries in individual cases.\n\n\nExample\n\n\nuncompressed_cache_size\n8589934592\n/uncompressed_cache_size\n\n\n\n\n\n\n\n\nusers_config\n\n\nPath to the file that contains:\n\n\n\n\nUser configurations.\n\n\nAccess rights.\n\n\nSettings profiles.\n\n\nQuota settings.\n\n\n\n\nExample\n\n\nusers_config\nusers.xml\n/users_config\n\n\n\n\n\n\n\n\nzookeeper\n\n\nConfiguration of ZooKeeper servers.\n\n\nClickHouse uses ZooKeeper for storing replica metadata when using replicated tables.\n\n\nThis parameter can be omitted if replicated tables are not used.\n\n\nFor more information, see the section \"\nReplication\n\".\n\n\nExample\n\n\nzookeeper\n \nincl=\nzookeeper-servers\n \noptional=\ntrue\n \n/\n\n\n\n\n\n\n\n\nSettings\n\n\nThere are multiple ways to make all the settings described below.\nSettings are configured in layers, so each subsequent layer redefines the previous settings.\n\n\nWays to configure settings, in order of priority:\n\n\n\n\nSettings in the server config file.\n\n\n\n\nSettings from user profiles.\n\n\n\n\nSession settings.\n\n\n\n\nSend \nSET setting=value\n from the ClickHouse console client in interactive mode.\nSimilarly, you can use ClickHouse sessions in the HTTP protocol. To do this, you need to specify the \nsession_id\n HTTP parameter.\n\n\n\n\nFor a query.\n\n\nWhen starting the ClickHouse console client in non-interactive mode, set the startup parameter \n--setting=value\n.\n\n\nWhen using the HTTP API, pass CGI parameters (\nURL?setting_1=value\nsetting_2=value...\n).\n\n\n\n\nSettings that can only be made in the server config file are not covered in this section.\n\n\nRestrictions on query complexity\n\n\nRestrictions on query complexity are part of the settings.\nThey are used in order to provide safer execution from the user interface.\nAlmost all the restrictions only apply to SELECTs.For distributed query processing, restrictions are applied on each server separately.\n\n\nRestrictions on the \"maximum amount of something\" can take the value 0, which means \"unrestricted\".\nMost restrictions also have an 'overflow_mode' setting, meaning what to do when the limit is exceeded.\nIt can take one of two values: \nthrow\n or \nbreak\n. Restrictions on aggregation (group_by_overflow_mode) also have the value \nany\n.\n\n\nthrow\n \u2013 Throw an exception (default).\n\n\nbreak\n \u2013 Stop executing the query and return the partial result, as if the source data ran out.\n\n\nany (only for group_by_overflow_mode)\n \u2013 Continuing aggregation for the keys that got into the set, but don't add new keys to the set.\n\n\n\n\nreadonly\n\n\nWith a value of 0, you can execute any queries.\nWith a value of 1, you can only execute read requests (such as SELECT and SHOW). Requests for writing and changing settings (INSERT, SET) are prohibited.\nWith a value of 2, you can process read queries (SELECT, SHOW) and change settings (SET).\n\n\nAfter enabling readonly mode, you can't disable it in the current session.\n\n\nWhen using the GET method in the HTTP interface, 'readonly = 1' is set automatically. In other words, for queries that modify data, you can only use the POST method. You can send the query itself either in the POST body, or in the URL parameter.\n\n\n\n\nmax_memory_usage\n\n\nThe maximum amount of RAM to use for running a query on a single server.\n\n\nIn the default configuration file, the maximum is 10 GB.\n\n\nThe setting doesn't consider the volume of available memory or the total volume of memory on the machine.\nThe restriction applies to a single query within a single server.\nYou can use \nSHOW PROCESSLIST\n to see the current memory consumption for each query.\nIn addition, the peak memory consumption is tracked for each query and written to the log.\n\n\nMemory usage is not monitored for the states of certain aggregate functions.\n\n\nMemory usage is not fully tracked for states of the aggregate functions \nmin\n, \nmax\n, \nany\n, \nanyLast\n, \nargMin\n, \nargMax\n from \nString\n and \nArray\n arguments.\n\n\nMemory consumption is also restricted by the parameters \nmax_memory_usage_for_user\n and \nmax_memory_usage_for_all_queries\n.\n\n\nmax_memory_usage_for_user\n\n\nThe maximum amount of RAM to use for running a user's queries on a single server.\n\n\nDefault values are defined in \nSettings.h\n. By default, the amount is not restricted (\nmax_memory_usage_for_user = 0\n).\n\n\nSee also the description of \nmax_memory_usage\n.\n\n\nmax_memory_usage_for_all_queries\n\n\nThe maximum amount of RAM to use for running all queries on a single server.\n\n\nDefault values are defined in \nSettings.h\n. By default, the amount is not restricted (\nmax_memory_usage_for_all_queries = 0\n).\n\n\nSee also the description of \nmax_memory_usage\n.\n\n\nmax_rows_to_read\n\n\nThe following restrictions can be checked on each block (instead of on each row). That is, the restrictions can be broken a little.\nWhen running a query in multiple threads, the following restrictions apply to each thread separately.\n\n\nMaximum number of rows that can be read from a table when running a query.\n\n\nmax_bytes_to_read\n\n\nMaximum number of bytes (uncompressed data) that can be read from a table when running a query.\n\n\nread_overflow_mode\n\n\nWhat to do when the volume of data read exceeds one of the limits: 'throw' or 'break'. By default, throw.\n\n\nmax_rows_to_group_by\n\n\nMaximum number of unique keys received from aggregation. This setting lets you limit memory consumption when aggregating.\n\n\ngroup_by_overflow_mode\n\n\nWhat to do when the number of unique keys for aggregation exceeds the limit: 'throw', 'break', or 'any'. By default, throw.\nUsing the 'any' value lets you run an approximation of GROUP BY. The quality of this approximation depends on the statistical nature of the data.\n\n\nmax_rows_to_sort\n\n\nMaximum number of rows before sorting. This allows you to limit memory consumption when sorting.\n\n\nmax_bytes_to_sort\n\n\nMaximum number of bytes before sorting.\n\n\nsort_overflow_mode\n\n\nWhat to do if the number of rows received before sorting exceeds one of the limits: 'throw' or 'break'. By default, throw.\n\n\nmax_result_rows\n\n\nLimit on the number of rows in the result. Also checked for subqueries, and on remote servers when running parts of a distributed query.\n\n\nmax_result_bytes\n\n\nLimit on the number of bytes in the result. The same as the previous setting.\n\n\nresult_overflow_mode\n\n\nWhat to do if the volume of the result exceeds one of the limits: 'throw' or 'break'. By default, throw.\nUsing 'break' is similar to using LIMIT.\n\n\nmax_execution_time\n\n\nMaximum query execution time in seconds.\nAt this time, it is not checked for one of the sorting stages, or when merging and finalizing aggregate functions.\n\n\ntimeout_overflow_mode\n\n\nWhat to do if the query is run longer than 'max_execution_time': 'throw' or 'break'. By default, throw.\n\n\nmin_execution_speed\n\n\nMinimal execution speed in rows per second. Checked on every data block when 'timeout_before_checking_execution_speed' expires. If the execution speed is lower, an exception is thrown.\n\n\ntimeout_before_checking_execution_speed\n\n\nChecks that execution speed is not too slow (no less than 'min_execution_speed'), after the specified time in seconds has expired.\n\n\nmax_columns_to_read\n\n\nMaximum number of columns that can be read from a table in a single query. If a query requires reading a greater number of columns, it throws an exception.\n\n\nmax_temporary_columns\n\n\nMaximum number of temporary columns that must be kept in RAM at the same time when running a query, including constant columns. If there are more temporary columns than this, it throws an exception.\n\n\nmax_temporary_non_const_columns\n\n\nThe same thing as 'max_temporary_columns', but without counting constant columns.\nNote that constant columns are formed fairly often when running a query, but they require approximately zero computing resources.\n\n\nmax_subquery_depth\n\n\nMaximum nesting depth of subqueries. If subqueries are deeper, an exception is thrown. By default, 100.\n\n\nmax_pipeline_depth\n\n\nMaximum pipeline depth. Corresponds to the number of transformations that each data block goes through during query processing. Counted within the limits of a single server. If the pipeline depth is greater, an exception is thrown. By default, 1000.\n\n\nmax_ast_depth\n\n\nMaximum nesting depth of a query syntactic tree. If exceeded, an exception is thrown.\nAt this time, it isn't checked during parsing, but only after parsing the query. That is, a syntactic tree that is too deep can be created during parsing, but the query will fail. By default, 1000.\n\n\nmax_ast_elements\n\n\nMaximum number of elements in a query syntactic tree. If exceeded, an exception is thrown.\nIn the same way as the previous setting, it is checked only after parsing the query. By default, 10,000.\n\n\nmax_rows_in_set\n\n\nMaximum number of rows for a data set in the IN clause created from a subquery.\n\n\nmax_bytes_in_set\n\n\nMaximum number of bytes (uncompressed data) used by a set in the IN clause created from a subquery.\n\n\nset_overflow_mode\n\n\nWhat to do when the amount of data exceeds one of the limits: 'throw' or 'break'. By default, throw.\n\n\nmax_rows_in_distinct\n\n\nMaximum number of different rows when using DISTINCT.\n\n\nmax_bytes_in_distinct\n\n\nMaximum number of bytes used by a hash table when using DISTINCT.\n\n\ndistinct_overflow_mode\n\n\nWhat to do when the amount of data exceeds one of the limits: 'throw' or 'break'. By default, throw.\n\n\nmax_rows_to_transfer\n\n\nMaximum number of rows that can be passed to a remote server or saved in a temporary table when using GLOBAL IN.\n\n\nmax_bytes_to_transfer\n\n\nMaximum number of bytes (uncompressed data) that can be passed to a remote server or saved in a temporary table when using GLOBAL IN.\n\n\ntransfer_overflow_mode\n\n\nWhat to do when the amount of data exceeds one of the limits: 'throw' or 'break'. By default, throw.\n\n\nSettings\n\n\n\n\ndistributed_product_mode\n\n\nChanges the behavior of \ndistributed subqueries\n, i.e. in cases when the query contains the product of distributed tables.\n\n\nClickHouse applies the configuration if the subqueries on any level have a distributed table that exists on the local server and has more than one shard.\n\n\nRestrictions:\n\n\n\n\nOnly applied for IN and JOIN subqueries.\n\n\nUsed only if a distributed table is used in the FROM clause.\n\n\nNot used for a table-valued \n remote\n function.\n\n\n\n\nThe possible values \u200b\u200bare:\n\n\n\n\nfallback_to_stale_replicas_for_distributed_queries\n\n\nForces a query to an out-of-date replica if updated data is not available. See \"\nReplication\n\".\n\n\nClickHouse selects the most relevant from the outdated replicas of the table.\n\n\nUsed when performing \nSELECT\n  from a distributed table that points to replicated tables.\n\n\nBy default, 1 (enabled).\n\n\n\n\nforce_index_by_date\n\n\nDisables query execution if the index can't be used by date.\n\n\nWorks with tables in the MergeTree family.\n\n\nIf \nforce_index_by_date=1\n,  ClickHouse checks whether the query has a date key condition that can be used for restricting data ranges. If there is no suitable condition, it throws an exception. However, it does not check whether the condition actually reduces the amount of data to read. For example, the condition \nDate != ' 2000-01-01 '\n is acceptable even when it matches all the data in the table (i.e., running the query requires a full scan). For more information about ranges of data in MergeTree tables, see \"\nMergeTree\n\".\n\n\n\n\nforce_primary_key\n\n\nDisables query execution if indexing by the primary key is not possible.\n\n\nWorks with tables in the MergeTree family.\n\n\nIf \nforce_primary_key=1\n,  ClickHouse checks to see if the query has a primary key condition that can be used for restricting data ranges. If there is no suitable condition, it throws an exception. However, it does not check whether the condition actually reduces the amount of data to read. For more information about data ranges in MergeTree tables, see \"\nMergeTree\n\".\n\n\n\n\nfsync_metadata\n\n\nEnable or disable fsync when writing .sql files. By default, it is enabled.\n\n\nIt makes sense to disable it if the server has millions of tiny table chunks that are constantly being created and destroyed.\n\n\ninput_format_allow_errors_num\n\n\nSets the maximum number of acceptable errors when reading from text formats (CSV, TSV, etc.).\n\n\nThe default value is 0.\n\n\nAlways pair it with \ninput_format_allow_errors_ratio\n. To skip errors, both settings must be greater than 0.\n\n\nIf an error occurred while reading rows but the error counter is still less than \ninput_format_allow_errors_num\n, ClickHouse ignores the row and moves on to the next one.\n\n\nIf \ninput_format_allow_errors_num\nis exceeded, ClickHouse throws an exception.\n\n\ninput_format_allow_errors_ratio\n\n\nSets the maximum percentage of errors allowed when reading from text formats (CSV, TSV, etc.).\nThe percentage of errors is set as a floating-point number between 0 and 1.\n\n\nThe default value is 0.\n\n\nAlways pair it with \ninput_format_allow_errors_num\n. To skip errors, both settings must be greater than 0.\n\n\nIf an error occurred while reading rows but the error counter is still less than \ninput_format_allow_errors_ratio\n, ClickHouse ignores the row and moves on to the next one.\n\n\nIf \ninput_format_allow_errors_ratio\n is exceeded, ClickHouse throws an exception.\n\n\nmax_block_size\n\n\nIn ClickHouse, data is processed by blocks (sets of column parts). The internal processing cycles for a single block are efficient enough, but there are noticeable expenditures on each block. \nmax_block_size\n is a recommendation for what size of block (in number of rows) to load from tables. The block size shouldn't be too small, so that the expenditures on each block are still noticeable, but not too large, so that the query with LIMIT that is completed after the first block is processed quickly, so that too much memory isn't consumed when extracting a large number of columns in multiple threads, and so that at least some cache locality is preserved.\n\n\nBy default, 65,536.\n\n\nBlocks the size of \nmax_block_size\n are not always loaded from the table. If it is obvious that less data needs to be retrieved, a smaller block is processed.\n\n\npreferred_block_size_bytes\n\n\nUsed for the same purpose as \nmax_block_size\n, but it sets the recommended block size in bytes by adapting it to the number of rows in the block.\nHowever, the block size cannot be more than \nmax_block_size\n rows.\nDisabled by default (set to 0). It only works when reading from MergeTree engines.\n\n\n\n\nlog_queries\n\n\nSetting up query the logging.\n\n\nQueries sent to ClickHouse with this setup are logged according to the rules in the \nquery_log\n server configuration parameter.\n\n\nExample\n:\n\n\nlog_queries=1\n\n\n\n\n\n\n\nmax_insert_block_size\n\n\nThe size of blocks to form for insertion into a table.\nThis setting only applies in cases when the server forms the blocks.\nFor example, for an INSERT via the HTTP interface, the server parses the data format and forms blocks of the specified size.\nBut when using clickhouse-client, the client parses the data itself, and the 'max_insert_block_size' setting on the server doesn't affect the size of the inserted blocks.\nThe setting also doesn't have a purpose when using INSERT SELECT, since data is inserted using the same blocks that are formed after SELECT.\n\n\nBy default, it is 1,048,576.\n\n\nThis is slightly more than \nmax_block_size\n. The reason for this is because certain table engines (\n*MergeTree\n) form a data part on the disk for each inserted block, which is a fairly large entity. Similarly, \n*MergeTree\n tables sort data during insertion, and a large enough block size allows sorting more data in RAM.\n\n\n\n\nmax_replica_delay_for_distributed_queries\n\n\nDisables lagging replicas for distributed queries. See \"\nReplication\n\".\n\n\nSets the time in seconds. If a replica lags more than the set value, this replica is not used.\n\n\nDefault value: 0 (off).\n\n\nUsed when performing \nSELECT\n  from a distributed table that points to replicated tables.\n\n\nmax_threads\n\n\nThe maximum number of query processing threads\n\n\n\n\nexcluding threads for retrieving data from remote servers (see the 'max_distributed_connections' parameter).\n\n\n\n\nThis parameter applies to threads that perform the same stages of the query processing pipeline in parallel.\nFor example, if reading from a table, evaluating expressions with functions, filtering with WHERE and pre-aggregating for GROUP BY can all be done in parallel using at least 'max_threads' number of threads, then 'max_threads' are used.\n\n\nBy default, 8.\n\n\nIf less than one SELECT query is normally run on a server at a time, set this parameter to a value slightly less than the actual number of processor cores.\n\n\nFor queries that are completed quickly because of a LIMIT, you can set a lower 'max_threads'. For example, if the necessary number of entries are located in every block and max_threads = 8, 8 blocks are retrieved, although it would have been enough to read just one.\n\n\nThe smaller the \nmax_threads\n value, the less memory is consumed.\n\n\nmax_compress_block_size\n\n\nThe maximum size of blocks of uncompressed data before compressing for writing to a table. By default, 1,048,576 (1 MiB). If the size is reduced, the compression rate is significantly reduced, the compression and decompression speed increases slightly due to cache locality, and memory consumption is reduced. There usually isn't any reason to change this setting.\n\n\nDon't confuse blocks for compression (a chunk of memory consisting of bytes) and blocks for query processing (a set of rows from a table).\n\n\nmin_compress_block_size\n\n\nFor \nMergeTree\n\" tables. In order to reduce latency when processing queries, a block is compressed when writing the next mark if its size is at least 'min_compress_block_size'. By default, 65,536.\n\n\nThe actual size of the block, if the uncompressed data is less than 'max_compress_block_size', is no less than this value and no less than the volume of data for one mark.\n\n\nLet's look at an example. Assume that 'index_granularity' was set to 8192 during table creation.\n\n\nWe are writing a UInt32-type column (4 bytes per value). When writing 8192 rows, the total will be 32 KB of data. Since min_compress_block_size = 65,536, a compressed block will be formed for every two marks.\n\n\nWe are writing a URL column with the String type (average size of 60 bytes per value). When writing 8192 rows, the average will be slightly less than 500 KB of data. Since this is more than 65,536, a compressed block will be formed for each mark. In this case, when reading data from the disk in the range of a single mark, extra data won't be decompressed.\n\n\nThere usually isn't any reason to change this setting.\n\n\nmax_query_size\n\n\nThe maximum part of a query that can be taken to RAM for parsing with the SQL parser.\nThe INSERT query also contains data for INSERT that is processed by a separate stream parser (that consumes O(1) RAM), which is not included in this restriction.\n\n\nThe default is 256 KiB.\n\n\ninteractive_delay\n\n\nThe interval in microseconds for checking whether request execution has been canceled and sending the progress.\n\n\nBy default, 100,000 (check for canceling and send progress ten times per second).\n\n\nconnect_timeout\n\n\nreceive_timeout\n\n\nsend_timeout\n\n\nTimeouts in seconds on the socket used for communicating with the client.\n\n\nBy default, 10, 300, 300.\n\n\npoll_interval\n\n\nLock in a wait loop for the specified number of seconds.\n\n\nBy default, 10.\n\n\nmax_distributed_connections\n\n\nThe maximum number of simultaneous connections with remote servers for distributed processing of a single query to a single Distributed table. We recommend setting a value no less than the number of servers in the cluster.\n\n\nBy default, 100.\n\n\nThe following parameters are only used when creating Distributed tables (and when launching a server), so there is no reason to change them at runtime.\n\n\ndistributed_connections_pool_size\n\n\nThe maximum number of simultaneous connections with remote servers for distributed processing of all queries to a single Distributed table. We recommend setting a value no less than the number of servers in the cluster.\n\n\nBy default, 128.\n\n\nconnect_timeout_with_failover_ms\n\n\nThe timeout in milliseconds for connecting to a remote server for a Distributed table engine, if the 'shard' and 'replica' sections are used in the cluster definition.\nIf unsuccessful, several attempts are made to connect to various replicas.\n\n\nBy default, 50.\n\n\nconnections_with_failover_max_tries\n\n\nThe maximum number of connection attempts with each replica, for the Distributed table engine.\n\n\nBy default, 3.\n\n\nextremes\n\n\nWhether to count extreme values (the minimums and maximums in columns of a query result). Accepts 0 or 1. By default, 0 (disabled).\nFor more information, see the section \"Extreme values\".\n\n\n\n\nuse_uncompressed_cache\n\n\nWhether to use a cache of uncompressed blocks. Accepts 0 or 1. By default, 0 (disabled).\nThe uncompressed cache (only for tables in the MergeTree family) allows significantly reducing latency and increasing throughput when working with a large number of short queries. Enable this setting for users who send frequent short requests. Also pay attention to the 'uncompressed_cache_size' configuration parameter (only set in the config file) \u2013 the size of uncompressed cache blocks. By default, it is 8 GiB. The uncompressed cache is filled in as needed; the least-used data is automatically deleted.\n\n\nFor queries that read at least a somewhat large volume of data (one million rows or more), the uncompressed cache is disabled automatically in order to save space for truly small queries. So you can keep the 'use_uncompressed_cache' setting always set to 1.\n\n\nreplace_running_query\n\n\nWhen using the HTTP interface, the 'query_id' parameter can be passed. This is any string that serves as the query identifier.\nIf a query from the same user with the same 'query_id' already exists at this time, the behavior depends on the 'replace_running_query' parameter.\n\n\n0\n (default) \u2013 Throw an exception (don't allow the query to run if a query with the same 'query_id' is already running).\n\n\n1\n \u2013 Cancel the old query and start running the new one.\n\n\nYandex.Metrica uses this parameter set to 1 for implementing suggestions for segmentation conditions. After entering the next character, if the old query hasn't finished yet, it should be canceled.\n\n\nschema\n\n\nThis parameter is useful when you are using formats that require a schema definition, such as \nCap'n Proto\n. The value depends on the format.\n\n\n\n\nstream_flush_interval_ms\n\n\nWorks for tables with streaming in the case of a timeout, or when a thread generates\nmax_insert_block_size\n rows.\n\n\nThe default value is 7500.\n\n\nThe smaller the value, the more often data is flushed into the table. Setting the value too low leads to poor performance.\n\n\n\n\nload_balancing\n\n\nWhich replicas (among healthy replicas) to preferably send a query to (on the first attempt) for distributed processing.\n\n\nrandom (default)\n\n\nThe number of errors is counted for each replica. The query is sent to the replica with the fewest errors, and if there are several of these, to any one of them.\nDisadvantages: Server proximity is not accounted for; if the replicas have different data, you will also get different data.\n\n\nnearest_hostname\n\n\nThe number of errors is counted for each replica. Every 5 minutes, the number of errors is integrally divided by 2. Thus, the number of errors is calculated for a recent time with exponential smoothing. If there is one replica with a minimal number of errors (i.e. errors occurred recently on the other replicas), the query is sent to it. If there are multiple replicas with the same minimal number of errors, the query is sent to the replica with a host name that is most similar to the server's host name in the config file (for the number of different characters in identical positions, up to the minimum length of both host names).\n\n\nFor instance, example01-01-1 and example01-01-2.yandex.ru are different in one position, while example01-01-1 and example01-02-2 differ in two places.\nThis method might seem a little stupid, but it doesn't use external data about network topology, and it doesn't compare IP addresses, which would be complicated for our IPv6 addresses.\n\n\nThus, if there are equivalent replicas, the closest one by name is preferred.\nWe can also assume that when sending a query to the same server, in the absence of failures, a distributed query will also go to the same servers. So even if different data is placed on the replicas, the query will return mostly the same results.\n\n\nin_order\n\n\nReplicas are accessed in the same order as they are specified. The number of errors does not matter.\nThis method is appropriate when you know exactly which replica is preferable.\n\n\ntotals_mode\n\n\nHow to calculate TOTALS when HAVING is present, as well as when max_rows_to_group_by and group_by_overflow_mode = 'any' are present.\nSee the section \"WITH TOTALS modifier\".\n\n\ntotals_auto_threshold\n\n\nThe threshold for \ntotals_mode = 'auto'\n.\nSee the section \"WITH TOTALS modifier\".\n\n\ndefault_sample\n\n\nFloating-point number from 0 to 1. By default, 1.\nAllows you to set the default sampling ratio for all SELECT queries.\n(For tables that do not support sampling, it throws an exception.)\nIf set to 1, sampling is not performed by default.\n\n\nmax_parallel_replicas\n\n\nThe maximum number of replicas for each shard when executing a query.\nFor consistency (to get different parts of the same data split), this option only works when the sampling key is set.\nReplica lag is not controlled.\n\n\ncompile\n\n\nEnable compilation of queries. By default, 0 (disabled).\n\n\nCompilation is only used for part of the query-processing pipeline: for the first stage of aggregation (GROUP BY).\nIf this portion of the pipeline was compiled, the query may run faster due to  deployment of short cycles and inlining aggregate function calls. The maximum performance improvement (up to four times faster in rare cases) is seen for queries with multiple simple aggregate functions. Typically, the performance gain is insignificant. In very rare cases, it may slow down query execution.\n\n\nmin_count_to_compile\n\n\nHow many times to potentially use a compiled chunk of code before running compilation. By default, 3.\nIf the value is zero, then compilation runs synchronously and the query waits for the end of the compilation process before continuing execution. This can be used for testing; otherwise, use values \u200b\u200bstarting with 1. Compilation normally takes about 5-10 seconds.\nIf the value is 1 or more, compilation occurs asynchronously in a separate thread. The result will be used as soon as it is ready, including by queries that are currently running.\n\n\nCompiled code is required for each different combination of aggregate functions used in the query and the type of keys in the GROUP BY clause.\nThe results of compilation are saved in the build directory in the form of .so files. There is no restriction on the number of compilation results, since they don't use very much space. Old results will be used after server restarts, except in the case of a server upgrade \u2013 in this case, the old results are deleted.\n\n\ninput_format_skip_unknown_fields\n\n\nIf the value is true, running INSERT skips input data from columns with unknown names. Otherwise, this situation will generate an exception.\nIt works for JSONEachRow and TSKV formats.\n\n\noutput_format_json_quote_64bit_integers\n\n\nIf the value is true, integers appear in quotes when using JSON* Int64 and UInt64 formats  (for compatibility with most JavaScript implementations); otherwise, integers are output without the quotes.\n\n\n\n\nformat_csv_delimiter\n\n\nThe character to be considered as a delimiter in CSV data. By default, \n,\n.\n\n\nSettings profiles\n\n\nA settings profile is a collection of settings grouped under the same name. Each ClickHouse user has a profile.\nTo apply all the settings in a profile, set \nprofile\n.\n\n\nExample:\n\n\nSetting \nweb\n profile.\n\n\nSET\n \nprofile\n \n=\n \nweb\n\n\n\n\n\n\nSettings profiles are declared in the user config file. This is usually \nusers.xml\n.\n\n\nExample:\n\n\n!-- Settings profiles --\n\n\nprofiles\n\n    \n!-- Default settings --\n\n    \ndefault\n\n        \n!-- The maximum number of threads when running a single query. --\n\n        \nmax_threads\n8\n/max_threads\n\n    \n/default\n\n\n    \n!-- Settings for quries from the user interface --\n\n    \nweb\n\n        \nmax_rows_to_read\n1000000000\n/max_rows_to_read\n\n        \nmax_bytes_to_read\n100000000000\n/max_bytes_to_read\n\n\n        \nmax_rows_to_group_by\n1000000\n/max_rows_to_group_by\n\n        \ngroup_by_overflow_mode\nany\n/group_by_overflow_mode\n\n\n        \nmax_rows_to_sort\n1000000\n/max_rows_to_sort\n\n        \nmax_bytes_to_sort\n1000000000\n/max_bytes_to_sort\n\n\n        \nmax_result_rows\n100000\n/max_result_rows\n\n        \nmax_result_bytes\n100000000\n/max_result_bytes\n\n        \nresult_overflow_mode\nbreak\n/result_overflow_mode\n\n\n        \nmax_execution_time\n600\n/max_execution_time\n\n        \nmin_execution_speed\n1000000\n/min_execution_speed\n\n        \ntimeout_before_checking_execution_speed\n15\n/timeout_before_checking_execution_speed\n\n\n        \nmax_columns_to_read\n25\n/max_columns_to_read\n\n        \nmax_temporary_columns\n100\n/max_temporary_columns\n\n        \nmax_temporary_non_const_columns\n50\n/max_temporary_non_const_columns\n\n\n        \nmax_subquery_depth\n2\n/max_subquery_depth\n\n        \nmax_pipeline_depth\n25\n/max_pipeline_depth\n\n        \nmax_ast_depth\n50\n/max_ast_depth\n\n        \nmax_ast_elements\n100\n/max_ast_elements\n\n\n        \nreadonly\n1\n/readonly\n\n    \n/web\n\n\n/profiles\n\n\n\n\n\n\nThe example specifies two profiles: \ndefault\n  and \nweb\n. The \ndefault\n profile has a special purpose: it must always be present and is applied when starting the server. In other words, the \ndefault\n profile contains default settings. The \nweb\n profile is a regular profile that can be set using the \nSET\n query or using a URL parameter in an HTTP query.\n\n\nSettings profiles can inherit from each other. To use inheritance, indicate the \nprofile\n setting before the other settings that are listed in the profile.\n\n\nClickHouse utility\n\n\n\n\nclickhouse-local\n \u2014 Allows running SQL queries on data without stopping the ClickHouse server, similar to how \nawk\n does this.\n\n\nclickhouse-copier\n \u2014 Copies (and reshards) data from one cluster to another cluster.\n\n\n\n\n\n\nclickhouse-copier\n\n\nCopies data from the tables in one cluster to tables in another (or the same) cluster.\n\n\nYou can run multiple \nclickhouse-copier\n instances on different servers to perform the same job. ZooKeeper is used for syncing the processes.\n\n\nAfter starting, \nclickhouse-copier\n:\n\n\n\n\nConnects to ZooKeeper and receives:\n\n\nCopying jobs.\n\n\n\n\nThe state of the copying jobs.\n\n\n\n\n\n\nIt performs the jobs.\n\n\n\n\n\n\nEach running process chooses the \"closest\" shard of the source cluster and copies the data into the destination cluster, resharding the data if necessary.\n\n\nclickhouse-copier\n tracks the changes in ZooKeeper and applies them on the fly.\n\n\nTo reduce network traffic, we recommend running \nclickhouse-copier\n on the same server where the source data is located.\n\n\nRunning clickhouse-copier\n\n\nThe utility should be run manually:\n\n\nclickhouse-copier copier --daemon --config zookeeper.xml --task-path /task/path --base-dir /path/to/dir\n\n\n\n\n\nParameters:\n\n\n\n\ndaemon\n \u2014 Starts \nclickhouse-copier\n in daemon mode.\n\n\nconfig\n \u2014 The path to the \nzookeeper.xml\n file with the parameters for the connection to ZooKeeper.\n\n\ntask-path\n \u2014 The path to the ZooKeeper node. This node is used for syncing \nclickhouse-copier\n processes and storing tasks. Tasks are stored in \n$task-path/description\n.\n\n\nbase-dir\n \u2014 The path to logs and auxiliary files. When it starts, \nclickhouse-copier\n creates \nclickhouse-copier_YYYYMMHHSS_\nPID\n subdirectories in \n$base-dir\n. If this parameter is omitted, the directories are created in the directory where \nclickhouse-copier\n was launched.\n\n\n\n\nFormat of zookeeper.xml\n\n\nyandex\n\n    \nzookeeper\n\n        \nnode\n \nindex=\n1\n\n            \nhost\n127.0.0.1\n/host\n\n            \nport\n2181\n/port\n\n        \n/node\n\n    \n/zookeeper\n\n\n/yandex\n\n\n\n\n\n\nConfiguration of copying tasks\n\n\nyandex\n\n    \n!-- Configuration of clusters as in an ordinary server config --\n\n    \nremote_servers\n\n        \nsource_cluster\n\n            \nshard\n\n                \ninternal_replication\nfalse\n/internal_replication\n\n                    \nreplica\n\n                        \nhost\n127.0.0.1\n/host\n\n                        \nport\n9000\n/port\n\n                    \n/replica\n\n            \n/shard\n\n            ...\n        \n/source_cluster\n\n\n        \ndestination_cluster\n\n        ...\n        \n/destination_cluster\n\n    \n/remote_servers\n\n\n    \n!-- How many simultaneously active workers are possible. If you run more workers superfluous workers will sleep. --\n\n    \nmax_workers\n2\n/max_workers\n\n\n    \n!-- Setting used to fetch (pull) data from source cluster tables --\n\n    \nsettings_pull\n\n        \nreadonly\n1\n/readonly\n\n    \n/settings_pull\n\n\n    \n!-- Setting used to insert (push) data to destination cluster tables --\n\n    \nsettings_push\n\n        \nreadonly\n0\n/readonly\n\n    \n/settings_push\n\n\n    \n!-- Common setting for fetch (pull) and insert (push) operations. The copier process context also uses it.\n\n\n         They are overlaid by \nsettings_pull/\n and \nsettings_push/\n respectively. --\n\n    \nsettings\n\n        \nconnect_timeout\n3\n/connect_timeout\n\n        \n!-- Sync insert is set forcibly, leave it here just in case. --\n\n        \ninsert_distributed_sync\n1\n/insert_distributed_sync\n\n    \n/settings\n\n\n    \n!-- Copying description of tasks.\n\n\n         You can specify several table tasks in the same task description (in the same ZooKeeper node), and they will be performed         sequentially.\n\n\n    --\n\n    \ntables\n\n        \n!-- A table task that copies one table. --\n\n        \ntable_hits\n\n            \n!-- Source cluster name (from the \nremote_servers/\n section) and tables in it that should be copied --\n\n            \ncluster_pull\nsource_cluster\n/cluster_pull\n\n            \ndatabase_pull\ntest\n/database_pull\n\n            \ntable_pull\nhits\n/table_pull\n\n\n            \n!-- Destination cluster name and tables in which the data should be inserted --\n\n            \ncluster_push\ndestination_cluster\n/cluster_push\n\n            \ndatabase_push\ntest\n/database_push\n\n            \ntable_push\nhits2\n/table_push\n\n\n            \n!-- Engine of destination tables.\n\n\n                 If the destination tables have not been created yet, workers create them using column definitions from source tables and the engine                 definition from here.\n\n\n\n                 NOTE: If the first worker starts to insert data and detects that the destination partition is not empty, then the partition will\n\n\n                 be dropped and refilled. Take this into account if you already have some data in destination tables. You can directly \n\n\n                 specify partitions that should be copied in \nenabled_partitions/\n. They should be in quoted format like the partition column in the                 \n\n\n                 system.parts table.\n\n\n            --\n\n            \nengine\n\n            ENGINE=ReplicatedMergeTree(\n/clickhouse/tables/{cluster}/{shard}/hits2\n, \n{replica}\n)\n            PARTITION BY toMonday(date)\n            ORDER BY (CounterID, EventDate)\n            \n/engine\n\n\n            \n!-- Sharding key used to insert data to destination cluster --\n\n            \nsharding_key\njumpConsistentHash(intHash64(UserID), 2)\n/sharding_key\n\n\n            \n!-- Optional expression that filter data while pull them from source servers --\n\n            \nwhere_condition\nCounterID != 0\n/where_condition\n\n\n            \n!-- This section specifies partitions that should be copied, other partition will be ignored.\n\n\n                 Partition names should have the same format as\n\n\n                 partition column of system.parts table (i.e. a quoted text).\n\n\n                 Since partition key of source and destination cluster could be different,\n\n\n                 these partition names specify destination partitions.\n\n\n\n                 Note: Although this section is optional (if it omitted, all partitions will be copied), \n\n\n                 it is strongly recommended to specify the partitions explicitly.\n\n\n                 If you already have some partitions ready on the destination cluster, they                 \n\n\n                 will be removed at the start of the copying, because they will be interpreted                 \n\n\n                 as unfinished data from the previous copying.\n\n\n            --\n\n            \nenabled_partitions\n\n                \npartition\n2018-02-26\n/partition\n\n                \npartition\n2018-03-05\n/partition\n\n                ...\n            \n/enabled_partitions\n\n        \n/table_hits\n\n\n        \n!-- Next table to copy. It is not copied until the previous table is copying. --\n\n        \n/table_visits\n\n        ...\n        \n/table_visits\n\n        ...\n    \n/tables\n\n\n/yandex\n\n\n\n\n\n\nclickhouse-copier\n tracks the changes in \n/task/path/description\n and applies them on the fly. For instance, if you change the value of \nmax_workers\n, the number of processes running tasks will also change.\n\n\n\n\nclickhouse-local\n\n\nThe \nclickhouse-local\n  program enables you to perform fast processing on local files that store tables, without having to deploy and configure the ClickHouse server.\n\n\nClickHouse Development\n\n\nOverview of ClickHouse architecture\n\n\nClickHouse is a true column-oriented DBMS. Data is stored by columns, and during the execution of arrays (vectors or chunks of columns). Whenever possible, operations are dispatched on arrays, rather than on individual values. This is called \"vectorized query execution,\" and it helps lower the cost of actual data processing.\n\n\n\n\nThis idea is nothing new. It dates back to the \nAPL\n programming language and its descendants: \nA +\n, \nJ\n, \nK\n, and \nQ\n. Array programming is used in scientific data processing. Neither is this idea something new in relational databases: for example, it is used in the \nVectorwise\n system.\n\n\n\n\nThere are two different approaches for speeding up the query processing: vectorized query execution and runtime code generation. In the latter, the code is generated for every kind of query on the fly, removing all indirection and dynamic dispatch. Neither of these approaches is strictly better than the other. Runtime code generation can be better when it's fuses many operations together, thus fully utilizing CPU execution units and the pipeline. Vectorized query execution can be less practical, because it involves the temporary vectors that must be written to the cache and read back. If the temporary data does not fit in the L2 cache, this becomes an issue. But vectorized query execution more easily utilizes the SIMD capabilities of the CPU. A \nresearch paper\n written by our friends shows that it is better to combine both approaches. ClickHouse uses vectorized query execution and has limited initial support for runtime code.\n\n\nColumns\n\n\nTo represent columns in memory (actually, chunks of columns), the \nIColumn\n interface is used. This interface provides helper methods for implementation of various relational operators. Almost all operations are immutable: they do not modify the original column, but create a new modified one. For example, the \nIColumn :: filter\n method accepts a filter byte mask. It is used for the \nWHERE\n and \nHAVING\n relational operators. Additional examples: the \nIColumn :: permute\n method to support \nORDER BY\n, the \nIColumn :: cut\n method to support \nLIMIT\n, and so on.\n\n\nVarious \nIColumn\n implementations (\nColumnUInt8\n, \nColumnString\n and so on) are responsible for the memory layout of columns. Memory layout is usually a contiguous array. For the integer type of columns it is just one contiguous array, like \nstd :: vector\n. For \nString\n and \nArray\n columns, it is two vectors: one for all array elements, placed contiguously, and a second one for offsets to the beginning of each array. There is also \nColumnConst\n that stores just one value in memory, but looks like a column.\n\n\nField\n\n\nNevertheless, it is possible to work with individual values as well. To represent an individual value, the \nField\n is used. \nField\n is just a discriminated union of \nUInt64\n, \nInt64\n, \nFloat64\n, \nString\n and \nArray\n. \nIColumn\n has the \noperator[]\n method to get the n-th value as a \nField\n, and the \ninsert\n method to append a \nField\n to the end of a column. These methods are not very efficient, because they require dealing with temporary \nField\n objects representing an individual value. There are more efficient methods, such as \ninsertFrom\n, \ninsertRangeFrom\n, and so on.\n\n\nField\n doesn't have enough information about a specific data type for a table. For example, \nUInt8\n, \nUInt16\n, \nUInt32\n, and \nUInt64\n are all represented as \nUInt64\n in a \nField\n.\n\n\nLeaky abstractions\n\n\nIColumn\n has methods for common relational transformations of data, but they don't meet all needs. For example, \nColumnUInt64\n doesn't have a method to calculate the sum of two columns, and \nColumnString\n doesn't have a method to run a substring search. These countless routines are implemented outside of \nIColumn\n.\n\n\nVarious functions on columns can be implemented in a generic, non-efficient way using \nIColumn\n methods to extract \nField\n values, or in a specialized way using knowledge of inner memory layout of data in a specific \nIColumn\n implementation. To do this, functions are cast to a specific \nIColumn\n type and deal with internal representation directly. For example, \nColumnUInt64\n has the \ngetData\n method that returns a reference to an internal array, then a separate routine reads or fills that array directly. In fact, we have \"leaky abstractions\" to allow efficient specializations of various routines.\n\n\nData types\n\n\nIDataType\n is responsible for serialization and deserialization: for reading and writing chunks of columns or individual values in binary or text form.\n\nIDataType\n directly corresponds to data types in tables. For example, there are \nDataTypeUInt32\n, \nDataTypeDateTime\n, \nDataTypeString\n and so on.\n\n\nIDataType\n and \nIColumn\n are only loosely related to each other. Different data types can be represented in memory by the same \nIColumn\n implementations. For example, \nDataTypeUInt32\n and \nDataTypeDateTime\n are both represented by \nColumnUInt32\n or \nColumnConstUInt32\n. In addition, the same data type can be represented by different \nIColumn\n implementations. For example, \nDataTypeUInt8\n can be represented by \nColumnUInt8\n or \nColumnConstUInt8\n.\n\n\nIDataType\n only stores metadata. For instance, \nDataTypeUInt8\n doesn't store anything at all (except vptr) and \nDataTypeFixedString\n stores just \nN\n (the size of fixed-size strings).\n\n\nIDataType\n has helper methods for various data formats. Examples are methods to serialize a value with possible quoting, to serialize a value for JSON, and to serialize a value as part of XML format. There is no direct correspondence to data formats. For example, the different data formats \nPretty\n and \nTabSeparated\n can use the same \nserializeTextEscaped\n helper method from the \nIDataType\n interface.\n\n\nBlock\n\n\nA \nBlock\n is a container that represents a subset (chunk) of a table in memory. It is just a set of triples: \n(IColumn, IDataType, column name)\n. During query execution, data is processed by \nBlock\ns. If we have a \nBlock\n, we have data (in the \nIColumn\n object), we have information about its type (in \nIDataType\n) that tells us how to deal with that column, and we have the column name (either the original column name from the table, or some artificial name assigned for getting temporary results of calculations).\n\n\nWhen we calculate some function over columns in a block, we add another column with its result to the block, and we don't touch columns for arguments of the function because operations are immutable. Later, unneeded columns can be removed from the block, but not modified. This is convenient for elimination of common subexpressions.\n\n\nBlocks are created for every processed chunk of data. Note that for the same type of calculation, the column names and types remain the same for different blocks, and only column data changes. It is better to split block data from the block header, because small block sizes will have a high overhead of temporary strings for copying shared_ptrs and column names.\n\n\nBlock Streams\n\n\nBlock streams are for processing data. We use streams of blocks to read data from somewhere, perform data transformations, or write data to somewhere. \nIBlockInputStream\n has the \nread\n method to fetch the next block while available. \nIBlockOutputStream\n has the \nwrite\n method to push the block somewhere.\n\n\nStreams are responsible for:\n\n\n\n\nReading or writing to a table. The table just returns a stream for reading or writing blocks.\n\n\nImplementing data formats. For example, if you want to output data to a terminal in \nPretty\n format, you create a block output stream where you push blocks, and it formats them.\n\n\nPerforming data transformations. Let's say you have \nIBlockInputStream\n and want to create a filtered stream. You create \nFilterBlockInputStream\n and initialize it with your stream. Then when you pull a block from \nFilterBlockInputStream\n, it pulls a block from your stream, filters it, and returns the filtered block to you. Query execution pipelines are represented this way.\n\n\n\n\nThere are more sophisticated transformations. For example, when you pull from \nAggregatingBlockInputStream\n, it reads all data from its source, aggregates it, and then returns a stream of aggregated data for you. Another example: \nUnionBlockInputStream\n accepts many input sources in the constructor and also a number of threads. It launches multiple threads and reads from multiple sources in parallel.\n\n\n\n\nBlock streams use the \"pull\" approach to control flow: when you pull a block from the first stream, it consequently pulls the required blocks from nested streams, and the entire execution pipeline will work. Neither \"pull\" nor \"push\" is the best solution, because control flow is implicit, and that limits implementation of various features like simultaneous execution of multiple queries (merging many pipelines together). This limitation could be overcome with coroutines or just running extra threads that wait for each other. We may have more possibilities if we make control flow explicit: if we locate the logic for passing data from one calculation unit to another outside of those calculation units. Read this \narticle\n for more thoughts.\n\n\n\n\nWe should note that the query execution pipeline creates temporary data at each step. We try to keep block size small enough so that temporary data fits in the CPU cache. With that assumption, writing and reading temporary data is almost free in comparison with other calculations. We could consider an alternative, which is to fuse many operations in the pipeline together, to make the pipeline as short as possible and remove much of the temporary data. This could be an advantage, but it also has drawbacks. For example, a split pipeline makes it easy to implement caching intermediate data, stealing intermediate data from similar queries running at the same time, and merging pipelines for similar queries.\n\n\nFormats\n\n\nData formats are implemented with block streams. There are \"presentational\" formats only suitable for output of data to the client, such as \nPretty\n format, which provides only \nIBlockOutputStream\n. And there are input/output formats, such as \nTabSeparated\n or \nJSONEachRow\n.\n\n\nThere are also row streams: \nIRowInputStream\n and \nIRowOutputStream\n. They allow you to pull/push data by individual rows, not by blocks. And they are only needed to simplify implementation of row-oriented formats. The wrappers \nBlockInputStreamFromRowInputStream\n and \nBlockOutputStreamFromRowOutputStream\n allow you to convert row-oriented streams to regular block-oriented streams.\n\n\nI/O\n\n\nFor byte-oriented input/output, there are \nReadBuffer\n and \nWriteBuffer\n abstract classes. They are used instead of C++ \niostream\n's. Don't worry: every mature C++ project is using something other than \niostream\n's for good reasons.\n\n\nReadBuffer\n and \nWriteBuffer\n are just a contiguous buffer and a cursor pointing to the position in that buffer. Implementations may own or not own the memory for the buffer. There is a virtual method to fill the buffer with the following data (for \nReadBuffer\n) or to flush the buffer somewhere (for \nWriteBuffer\n). The virtual methods are rarely called.\n\n\nImplementations of \nReadBuffer\n/\nWriteBuffer\n are used for working with files and file descriptors and network sockets, for implementing compression (\nCompressedWriteBuffer\n is initialized with another WriteBuffer and performs compression before writing data to it), and for other purposes \u2013 the names \nConcatReadBuffer\n, \nLimitReadBuffer\n, and \nHashingWriteBuffer\n speak for themselves.\n\n\nRead/WriteBuffers only deal with bytes. To help with formatted input/output (for instance, to write a number in decimal format), there are functions from \nReadHelpers\n and \nWriteHelpers\n header files.\n\n\nLet's look at what happens when you want to write a result set in \nJSON\n format to stdout. You have a result set ready to be fetched from \nIBlockInputStream\n. You create \nWriteBufferFromFileDescriptor(STDOUT_FILENO)\n to write bytes to stdout. You create \nJSONRowOutputStream\n, initialized with that \nWriteBuffer\n, to write rows in \nJSON\n to stdout. You create \nBlockOutputStreamFromRowOutputStream\n on top of it, to represent it as \nIBlockOutputStream\n. Then you call \ncopyData\n to transfer data from \nIBlockInputStream\n to \nIBlockOutputStream\n, and everything works. Internally, \nJSONRowOutputStream\n will write various JSON delimiters and call the \nIDataType::serializeTextJSON\n method with a reference to \nIColumn\n and the row number as arguments. Consequently, \nIDataType::serializeTextJSON\n will call a method from \nWriteHelpers.h\n: for example, \nwriteText\n for numeric types and \nwriteJSONString\n for \nDataTypeString\n.\n\n\nTables\n\n\nTables are represented by the \nIStorage\n interface. Different implementations of that interface are different table engines. Examples are \nStorageMergeTree\n, \nStorageMemory\n, and so on. Instances of these classes are just tables.\n\n\nThe most important \nIStorage\n methods are \nread\n and \nwrite\n. There are also \nalter\n, \nrename\n, \ndrop\n, and so on. The \nread\n method accepts the following arguments: the set of columns to read from a table, the \nAST\n query to consider, and the desired number of streams to return. It returns one or multiple \nIBlockInputStream\n objects and information about the stage of data processing that was completed inside a table engine during query execution.\n\n\nIn most cases, the read method is only responsible for reading the specified columns from a table, not for any further data processing. All further data processing is done by the query interpreter and is outside the responsibility of \nIStorage\n.\n\n\nBut there are notable exceptions:\n\n\n\n\nThe AST query is passed to the \nread\n method and the table engine can use it to derive index usage and to read less data from a table.\n\n\nSometimes the table engine can process data itself to a specific stage. For example, \nStorageDistributed\n can send a query to remote servers, ask them to process data to a stage where data from different remote servers can be merged, and return that preprocessed data.\nThe query interpreter then finishes processing the data.\n\n\n\n\nThe table's \nread\n method can return multiple \nIBlockInputStream\n objects to allow parallel data processing. These multiple block input streams can read from a table in parallel. Then you can wrap these streams with various transformations (such as expression evaluation or filtering) that can be calculated independently and create a \nUnionBlockInputStream\n on top of them, to read from multiple streams in parallel.\n\n\nThere are also \nTableFunction\ns. These are functions that return a temporary \nIStorage\n object to use in the \nFROM\n clause of a query.\n\n\nTo get a quick idea of how to implement your own table engine, look at something simple, like \nStorageMemory\n or \nStorageTinyLog\n.\n\n\n\n\nAs the result of the \nread\n method, \nIStorage\n returns \nQueryProcessingStage\n \u2013 information about what parts of the query were already calculated inside storage. Currently we have only very coarse granularity for that information. There is no way for the storage to say \"I have already processed this part of the expression in WHERE, for this range of data\". We need to work on that.\n\n\n\n\nParsers\n\n\nA query is parsed by a hand-written recursive descent parser. For example, \nParserSelectQuery\n just recursively calls the underlying parsers for various parts of the query. Parsers create an \nAST\n. The \nAST\n is represented by nodes, which are instances of \nIAST\n.\n\n\n\n\nParser generators are not used for historical reasons.\n\n\n\n\nInterpreters\n\n\nInterpreters are responsible for creating the query execution pipeline from an \nAST\n. There are simple interpreters, such as \nInterpreterExistsQuery\nand \nInterpreterDropQuery\n, or the more sophisticated \nInterpreterSelectQuery\n. The query execution pipeline is a combination of block input or output streams. For example, the result of interpreting the \nSELECT\n query is the \nIBlockInputStream\n to read the result set from; the result of the INSERT query is the \nIBlockOutputStream\n to write data for insertion to; and the result of interpreting the \nINSERT SELECT\n query is the \nIBlockInputStream\n that returns an empty result set on the first read, but that copies data from \nSELECT\n to \nINSERT\n at the same time.\n\n\nInterpreterSelectQuery\n uses \nExpressionAnalyzer\n and \nExpressionActions\n machinery for query analysis and transformations. This is where most rule-based query optimizations are done. \nExpressionAnalyzer\n is quite messy and should be rewritten: various query transformations and optimizations should be extracted to separate classes to allow modular transformations or query.\n\n\nFunctions\n\n\nThere are ordinary functions and aggregate functions. For aggregate functions, see the next section.\n\n\nOrdinary functions don't change the number of rows \u2013 they work as if they are processing each row independently. In fact, functions are not called for individual rows, but for \nBlock\n's of data to implement vectorized query execution.\n\n\nThere are some miscellaneous functions, like \nblockSize\n, \nrowNumberInBlock\n, and \nrunningAccumulate\n, that exploit block processing and violate the independence of rows.\n\n\nClickHouse has strong typing, so implicit type conversion doesn't occur. If a function doesn't support a specific combination of types, an exception will be thrown. But functions can work (be overloaded) for many different combinations of types. For example, the \nplus\n function (to implement the \n+\n operator) works for any combination of numeric types: \nUInt8\n + \nFloat32\n, \nUInt16\n + \nInt8\n, and so on. Also, some variadic functions can accept any number of arguments, such as the \nconcat\n function.\n\n\nImplementing a function may be slightly inconvenient because a function explicitly dispatches supported data types and supported \nIColumns\n. For example, the \nplus\n function has code generated by instantiation of a C++ template for each combination of numeric types, and for constant or non-constant left and right arguments.\n\n\n\n\nThis is a nice place to implement runtime code generation to avoid template code bloat. Also, it will make it possible to add fused functions like fused multiply-add, or to make multiple comparisons in one loop iteration.\n\n\n\n\nDue to vectorized query execution, functions are not short-circuit. For example, if you write \nWHERE f(x) AND g(y)\n, both sides will be calculated, even for rows, when \nf(x)\n is zero (except when \nf(x)\n is a zero constant expression). But if selectivity of the \nf(x)\n condition is high, and calculation of \nf(x)\n is much cheaper than \ng(y)\n, it's better to implement multi-pass calculation: first calculate \nf(x)\n, then filter columns by the result, and then calculate \ng(y)\n only for smaller, filtered chunks of data.\n\n\nAggregate Functions\n\n\nAggregate functions are stateful functions. They accumulate passed values into some state, and allow you to get results from that state. They are managed with the \nIAggregateFunction\n interface. States can be rather simple (the state for \nAggregateFunctionCount\n is just a single \nUInt64\n value) or quite complex (the state of \nAggregateFunctionUniqCombined\n is a combination of a linear array, a hash table and a \nHyperLogLog\n probabilistic data structure).\n\n\nTo deal with multiple states while executing a high-cardinality \nGROUP BY\n query, states are allocated in \nArena\n (a memory pool), or they could be allocated in any suitable piece of memory. States can have a non-trivial constructor and destructor: for example, complex aggregation states can allocate additional memory themselves. This requires some attention to creating and destroying states and properly passing their ownership, to keep track of who and when will destroy states.\n\n\nAggregation states can be serialized and deserialized to pass over the network during distributed query execution or to write them on disk where there is not enough RAM. They can even be stored in a table with the \nDataTypeAggregateFunction\n to allow incremental aggregation of data.\n\n\n\n\nThe serialized data format for aggregate function states is not versioned right now. This is ok if aggregate states are only stored temporarily. But we have the \nAggregatingMergeTree\n table engine for incremental aggregation, and people are already using it in production. This is why we should add support for backward compatibility when changing the serialized format for any aggregate function in the future.\n\n\n\n\nServer\n\n\nThe server implements several different interfaces:\n\n\n\n\nAn HTTP interface for any foreign clients.\n\n\nA TCP interface for the native ClickHouse client and for cross-server communication during distributed query execution.\n\n\nAn interface for transferring data for replication.\n\n\n\n\nInternally, it is just a basic multithreaded server without coroutines, fibers, etc. Since the server is not designed to process a high rate of simple queries but is intended to process a relatively low rate of complex queries, each of them can process a vast amount of data for analytics.\n\n\nThe server initializes the \nContext\n class with the necessary environment for query execution: the list of available databases, users and access rights, settings, clusters, the process list, the query log, and so on. This environment is used by interpreters.\n\n\nWe maintain full backward and forward compatibility for the server TCP protocol: old clients can talk to new servers and new clients can talk to old servers. But we don't want to maintain it eternally, and we are removing support for old versions after about one year.\n\n\n\n\nFor all external applications, we recommend using the HTTP interface because it is simple and easy to use. The TCP protocol is more tightly linked to internal data structures: it uses an internal format for passing blocks of data and it uses custom framing for compressed data. We haven't released a C library for that protocol because it requires linking most of the ClickHouse codebase, which is not practical.\n\n\n\n\nDistributed query execution\n\n\nServers in a cluster setup are mostly independent. You can create a \nDistributed\n table on one or all servers in a cluster. The \nDistributed\n table does not store data itself \u2013 it only provides a \"view\" to all local tables on multiple nodes of a cluster. When you SELECT from a \nDistributed\n table, it rewrites that query, chooses remote nodes according to load balancing settings, and sends the query to them. The \nDistributed\n table requests remote servers to process a query just up to a stage where intermediate results from different servers can be merged. Then it receives the intermediate results and merges them. The distributed table tries to distribute as much work as possible to remote servers, and does not send much intermediate data over the network.\n\n\n\n\nThings become more complicated when you have subqueries in IN or JOIN clauses and each of them uses a \nDistributed\n table. We have different strategies for execution of these queries.\n\n\n\n\nThere is no global query plan for distributed query execution. Each node has its own local query plan for its part of the job. We only have simple one-pass distributed query execution: we send queries for remote nodes and then merge the results. But this is not feasible for difficult queries with high cardinality GROUP BYs or with a large amount of temporary data for JOIN: in such cases, we need to \"reshuffle\" data between servers, which requires additional coordination. ClickHouse does not support that kind of query execution, and we need to work on it.\n\n\nMerge Tree\n\n\nMergeTree\n is a family of storage engines that supports indexing by primary key. The primary key can be an arbitary tuple of columns or expressions. Data in a \nMergeTree\n table is stored in \"parts\". Each part stores data in the primary key order (data is ordered lexicographically by the primary key tuple). All the table columns are stored in separate \ncolumn.bin\n files in these parts. The files consist of compressed blocks. Each block is usually from 64 KB to 1 MB of uncompressed data, depending on the average value size. The blocks consist of column values placed contiguously one after the other. Column values are in the same order for each column (the order is defined by the primary key), so when you iterate by many columns, you get values for the corresponding rows.\n\n\nThe primary key itself is \"sparse\". It doesn't address each single row, but only some ranges of data. A separate \nprimary.idx\n file has the value of the primary key for each N-th row, where N is called \nindex_granularity\n (usually, N = 8192). Also, for each column, we have \ncolumn.mrk\n files with \"marks,\" which are offsets to each N-th row in the data file. Each mark is a pair: the offset in the file to the beginning of the compressed block, and the offset in the decompressed block to the beginning of data. Usually compressed blocks are aligned by marks, and the offset in the decompressed block is zero. Data for \nprimary.idx\n always resides in memory and data for \ncolumn.mrk\n files is cached.\n\n\nWhen we are going to read something from a part in \nMergeTree\n, we look at \nprimary.idx\n data and locate ranges that could possibly contain requested data, then look at \ncolumn.mrk\n data and calculate offsets for where to start reading those ranges. Because of sparseness, excess data may be read. ClickHouse is not suitable for a high load of simple point queries, because the entire range with \nindex_granularity\n rows must be read for each key, and the entire compressed block must be decompressed for each column. We made the index sparse because we must be able to maintain trillions of rows per single server without noticeable memory consumption for the index. Also, because the primary key is sparse, it is not unique: it cannot check the existence of the key in the table at INSERT time. You could have many rows with the same key in a table.\n\n\nWhen you \nINSERT\n a bunch of data into \nMergeTree\n, that bunch is sorted by primary key order and forms a new part. To keep the number of parts relatively low, there are background threads that periodically select some parts and merge them to a single sorted part. That's why it is called \nMergeTree\n. Of course, merging leads to \"write amplification\". All parts are immutable: they are only created and deleted, but not modified. When SELECT is run, it holds a snapshot of the table (a set of parts). After merging, we also keep old parts for some time to make recovery after failure easier, so if we see that some merged part is probably broken, we can replace it with its source parts.\n\n\nMergeTree\n is not an LSM tree because it doesn't contain \"memtable\" and \"log\": inserted data is written directly to the filesystem. This makes it suitable only to INSERT data in batches, not by individual row and not very frequently \u2013 about once per second is ok, but a thousand times a second is not. We did it this way for simplicity's sake, and because we are already inserting data in batches in our applications.\n\n\n\n\nMergeTree tables can only have one (primary) index: there aren't any secondary indices. It would be nice to allow multiple physical representations under one logical table, for example, to store data in more than one physical order or even to allow representations with pre-aggregated data along with original data.\n\n\n\n\nThere are MergeTree engines that are doing additional work during background merges. Examples are \nCollapsingMergeTree\n and \nAggregatingMergeTree\n. This could be treated as special support for updates. Keep in mind that these are not real updates because users usually have no control over the time when background merges will be executed, and data in a \nMergeTree\n table is almost always stored in more than one part, not in completely merged form.\n\n\nReplication\n\n\nReplication in ClickHouse is implemented on a per-table basis. You could have some replicated and some non-replicated tables on the same server. You could also have tables replicated in different ways, such as one table with two-factor replication and another with three-factor.\n\n\nReplication is implemented in the \nReplicatedMergeTree\n storage engine. The path in \nZooKeeper\n is specified as a parameter for the storage engine. All tables with the same path in \nZooKeeper\n become replicas of each other: they synchronize their data and maintain consistency. Replicas can be added and removed dynamically simply by creating or dropping a table.\n\n\nReplication uses an asynchronous multi-master scheme. You can insert data into any replica that has a session with \nZooKeeper\n, and data is replicated to all other replicas asynchronously. Because ClickHouse doesn't support UPDATEs, replication is conflict-free. As there is no quorum acknowledgment of inserts, just-inserted data might be lost if one node fails.\n\n\nMetadata for replication is stored in ZooKeeper. There is a replication log that lists what actions to do. Actions are: get part; merge parts; drop partition, etc. Each replica copies the replication log to its queue and then executes the actions from the queue. For example, on insertion, the \"get part\" action is created in the log, and every replica downloads that part. Merges are coordinated between replicas to get byte-identical results. All parts are merged in the same way on all replicas. To achieve this, one replica is elected as the leader, and that replica initiates merges and writes \"merge parts\" actions to the log.\n\n\nReplication is physical: only compressed parts are transferred between nodes, not queries. To lower the network cost (to avoid network amplification), merges are processed on each replica independently in most cases. Large merged parts are sent over the network only in cases of significant replication lag.\n\n\nIn addition, each replica stores its state in ZooKeeper as the set of parts and its checksums. When the state on the local filesystem diverges from the reference state in ZooKeeper, the replica restores its consistency by downloading missing and broken parts from other replicas. When there is some unexpected or broken data in the local filesystem, ClickHouse does not remove it, but moves it to a separate directory and forgets it.\n\n\n\n\nThe ClickHouse cluster consists of independent shards, and each shard consists of replicas. The cluster is not elastic, so after adding a new shard, data is not rebalanced between shards automatically. Instead, the cluster load will be uneven. This implementation gives you more control, and it is fine for relatively small clusters such as tens of nodes. But for clusters with hundreds of nodes that we are using in production, this approach becomes a significant drawback. We should implement a table engine that will span its data across the cluster with dynamically replicated regions that could be split and balanced between clusters automatically.\n\n\n\n\nHow to build ClickHouse on Linux\n\n\nBuild should work on Linux Ubuntu 12.04, 14.04 or newer.\nWith appropriate changes, it should also work on any other Linux distribution.\nThe build process is not intended to work on Mac OS X.\nOnly x86_64 with SSE 4.2 is supported. Support for AArch64 is experimental.\n\n\nTo test for SSE 4.2, do\n\n\ngrep -q sse4_2 /proc/cpuinfo \n \necho\n \nSSE 4.2 supported\n \n||\n \necho\n \nSSE 4.2 not supported\n\n\n\n\n\n\nInstall Git and CMake\n\n\nsudo apt-get install git cmake\n\n\n\n\n\nOr cmake3 instead of cmake on older systems.\n\n\nDetect the number of threads\n\n\nexport\n \nTHREADS\n=\n$(\ngrep -c ^processor /proc/cpuinfo\n)\n\n\n\n\n\n\nInstall GCC 7\n\n\nThere are several ways to do this.\n\n\nInstall from a PPA package\n\n\nsudo apt-get install software-properties-common\nsudo apt-add-repository ppa:ubuntu-toolchain-r/test\nsudo apt-get update\nsudo apt-get install gcc-7 g++-7\n\n\n\n\n\nInstall from sources\n\n\nLook at [https://github.com/yandex/ClickHouse/blob/master/utils/prepare-environment/install-gcc.sh]\n\n\nUse GCC 7 for builds\n\n\nexport\n \nCC\n=\ngcc-7\n\nexport\n \nCXX\n=\ng++-7\n\n\n\n\n\nInstall required libraries from packages\n\n\nsudo apt-get install libicu-dev libreadline-dev libmysqlclient-dev libssl-dev unixodbc-dev ninja-build\n\n\n\n\n\nCheckout ClickHouse sources\n\n\nTo get the latest stable version:\n\n\ngit clone -b stable --recursive git@github.com:yandex/ClickHouse.git\n\n## or: git clone -b stable --recursive https://github.com/yandex/ClickHouse.git\n\n\n\ncd\n ClickHouse\n\n\n\n\n\nFor development, switch to the \nmaster\n branch.\nFor the latest release candidate, switch to the \ntesting\n branch.\n\n\nBuild ClickHouse\n\n\nThere are two build variants.\n\n\nBuild release package\n\n\nInstall prerequisites to build Debian packages.\n\n\nsudo apt-get install devscripts dupload fakeroot debhelper\n\n\n\n\n\nInstall the most recent version of Clang.\n\n\nClang is embedded into the ClickHouse package and used at runtime. The minimum version is 5.0. It is optional.\n\n\nTo install clang, see \nutils/prepare-environment/install-clang.sh\n\n\nYou may also build ClickHouse with Clang for development purposes.\nFor production releases, GCC is used.\n\n\nRun the release script:\n\n\nrm -f ../clickhouse*.deb\n./release\n\n\n\n\n\nYou will find built packages in the parent directory:\n\n\nls -l ../clickhouse*.deb\n\n\n\n\n\nNote that usage of debian packages is not required.\nClickHouse has no runtime dependencies except libc, so it could work on almost any Linux.\n\n\nInstalling freshly built packages on a development server:\n\n\nsudo dpkg -i ../clickhouse*.deb\nsudo service clickhouse-server start\n\n\n\n\n\nBuild to work with code\n\n\nmkdir build\n\ncd\n build\ncmake ..\nmake -j \n$THREADS\n\n\ncd\n ..\n\n\n\n\n\nTo create an executable, run \nmake clickhouse\n.\nThis will create the \ndbms/src/Server/clickhouse\n executable, which can be used with \nclient\n or \nserver\n arguments.\n\n\nHow to build ClickHouse on Mac OS X\n\n\nBuild should work on Mac OS X 10.12. If you're using earlier version, you can try to build ClickHouse using Gentoo Prefix and clang sl in this instruction.\nWith appropriate changes, it should also work on any other Linux distribution.\n\n\nInstall Homebrew\n\n\n/usr/bin/ruby -e \n$(\ncurl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install\n)\n\n\n\n\n\n\nInstall required compilers, tools, and libraries\n\n\nbrew install cmake gcc icu4c mysql openssl unixodbc libtool gettext zlib readline boost --cc\n=\ngcc-7\n\n\n\n\n\nCheckout ClickHouse sources\n\n\nTo get the latest stable version:\n\n\ngit clone -b stable --recursive --depth\n=\n10\n git@github.com:yandex/ClickHouse.git\n\n## or: git clone -b stable --recursive --depth=10 https://github.com/yandex/ClickHouse.git\n\n\n\ncd\n ClickHouse\n\n\n\n\n\nFor development, switch to the \nmaster\n branch.\nFor the latest release candidate, switch to the \ntesting\n branch.\n\n\nBuild ClickHouse\n\n\nmkdir build\n\ncd\n build\ncmake .. -DCMAKE_CXX_COMPILER\n=\n`\nwhich g++-7\n`\n -DCMAKE_C_COMPILER\n=\n`\nwhich gcc-7\n`\n\nmake -j \n`\nsysctl -n hw.ncpu\n`\n\n\ncd\n ..\n\n\n\n\n\nCaveats\n\n\nIf you intend to run clickhouse-server, make sure to increase the system's maxfiles variable. See \nMacOS.md\n for more details.\n\n\nHow to write C++ code\n\n\nGeneral recommendations\n\n\n1.\n The following are recommendations, not requirements.\n\n\n2.\n If you are editing code, it makes sense to follow the formatting of the existing code.\n\n\n3.\n Code style is needed for consistency. Consistency makes it easier to read the code, and it also makes it easier to search the code.\n\n\n4.\n Many of the rules do not have logical reasons; they are dictated by established practices.\n\n\nFormatting\n\n\n1.\n Most of the formatting will be done automatically by \nclang-format\n.\n\n\n2.\n Indents are 4 spaces. Configure your development environment so that a tab adds four spaces.\n\n\n3.\n A left curly bracket must be separated on a new line. (And the right one, as well.)\n\n\ninline\n \nvoid\n \nreadBoolText\n(\nbool\n \n \nx\n,\n \nReadBuffer\n \n \nbuf\n)\n\n\n{\n\n    \nchar\n \ntmp\n \n=\n \n0\n;\n\n    \nreadChar\n(\ntmp\n,\n \nbuf\n);\n\n    \nx\n \n=\n \ntmp\n \n!=\n \n0\n;\n\n\n}\n\n\n\n\n\n\n4.\n\nBut if the entire function body is quite short (a single statement), you can place it entirely on one line if you wish. Place spaces around curly braces (besides the space at the end of the line).\n\n\ninline\n \nsize_t\n \nmask\n()\n \nconst\n                \n{\n \nreturn\n \nbuf_size\n()\n \n-\n \n1\n;\n \n}\n\n\ninline\n \nsize_t\n \nplace\n(\nHashValue\n \nx\n)\n \nconst\n    \n{\n \nreturn\n \nx\n \n \nmask\n();\n \n}\n\n\n\n\n\n\n5.\n For functions, don't put spaces around brackets.\n\n\nvoid\n \nreinsert\n(\nconst\n \nValue\n \n \nx\n)\n\n\nmemcpy\n(\nbuf\n[\nplace_value\n],\n \nx\n,\n \nsizeof\n(\nx\n));\n\n\n\n\n\n\n6.\n When using statements such as \nif\n, \nfor\n, and \nwhile\n (unlike function calls), put a space before the opening bracket.\n\n\ncpp\n for (size_t i = 0; i \n rows; i += storage.index_granularity)\n\n\n7.\n Put spaces around binary operators (\n+\n, \n-\n, \n*\n, \n/\n, \n%\n, ...), as well as the ternary operator \n?:\n.\n\n\nUInt16\n \nyear\n \n=\n \n(\ns\n[\n0\n]\n \n-\n \n0\n)\n \n*\n \n1000\n \n+\n \n(\ns\n[\n1\n]\n \n-\n \n0\n)\n \n*\n \n100\n \n+\n \n(\ns\n[\n2\n]\n \n-\n \n0\n)\n \n*\n \n10\n \n+\n \n(\ns\n[\n3\n]\n \n-\n \n0\n);\n\n\nUInt8\n \nmonth\n \n=\n \n(\ns\n[\n5\n]\n \n-\n \n0\n)\n \n*\n \n10\n \n+\n \n(\ns\n[\n6\n]\n \n-\n \n0\n);\n\n\nUInt8\n \nday\n \n=\n \n(\ns\n[\n8\n]\n \n-\n \n0\n)\n \n*\n \n10\n \n+\n \n(\ns\n[\n9\n]\n \n-\n \n0\n);\n\n\n\n\n\n\n8.\n If a line feed is entered, put the operator on a new line and increase the indent before it.\n\n\nif\n \n(\nelapsed_ns\n)\n\n    \nmessage\n \n \n (\n\n         \n \nrows_read_on_server\n \n*\n \n1000000000\n \n/\n \nelapsed_ns\n \n \n rows/s., \n\n        \n \nbytes_read_on_server\n \n*\n \n1000.0\n \n/\n \nelapsed_ns\n \n \n MB/s.) \n;\n\n\n\n\n\n\n9.\n You can use spaces for alignment within a line, if desired.\n\n\ndst\n.\nClickLogID\n         \n=\n \nclick\n.\nLogID\n;\n\n\ndst\n.\nClickEventID\n       \n=\n \nclick\n.\nEventID\n;\n\n\ndst\n.\nClickGoodEvent\n     \n=\n \nclick\n.\nGoodEvent\n;\n\n\n\n\n\n\n10.\n Don't use spaces around the operators \n.\n, \n-\n .\n\n\nIf necessary, the operator can be wrapped to the next line. In this case, the offset in front of it is increased.\n\n\n11.\n Do not use a space to separate unary operators (\n-\n, \n+\n, \n*\n, \n, ...) from the argument.\n\n\n12.\n Put a space after a comma, but not before it. The same rule goes for a semicolon inside a for expression.\n\n\n13.\n Do not use spaces to separate the \n[]\n operator.\n\n\n14.\n In a \ntemplate \n...\n expression, use a space between \ntemplate\n and \n. No spaces after \n or before \n.\n\n\ntemplate\n \ntypename\n \nTKey\n,\n \ntypename\n \nTValue\n\n\nstruct\n \nAggregatedStatElement\n\n\n{}\n\n\n\n\n\n\n15.\n In classes and structures, public, private, and protected are written on the same level as the \nclass/struct\n, but all other internal elements should be deeper.\n\n\ntemplate\n \ntypename\n \nT\n\n\nclass\n \nMultiVersion\n\n\n{\n\n\npublic\n:\n\n    \n/// Version of object for usage. shared_ptr manage lifetime of version.\n\n    \nusing\n \nVersion\n \n=\n \nstd\n::\nshared_ptr\nconst\n \nT\n;\n\n    \n...\n\n\n}\n\n\n\n\n\n\n16.\n If the same namespace is used for the entire file, and there isn't anything else significant, an offset is not necessary  inside namespace.\n\n\n17.\n If the block for \nif\n, \nfor\n, \nwhile\n... expressions consists of a single statement, you don't need to use curly brackets. Place the statement on a separate line, instead. The same is true for a nested if, for, while... statement. But if the inner statement contains curly brackets or else, the external block should be written in curly brackets.\n\n\n/// Finish write.\n\n\nfor\n \n(\nauto\n \n \nstream\n \n:\n \nstreams\n)\n\n    \nstream\n.\nsecond\n-\nfinalize\n();\n\n\n\n\n\n\n18.\n There should be any spaces at the ends of lines.\n\n\n19.\n Sources are UTF-8 encoded.\n\n\n20.\n Non-ASCII characters can be used in string literals.\n\n\n \n, \n \n \n(\ntimer\n.\nelapsed\n()\n \n/\n \nchunks_stats\n.\nhits\n)\n \n \n \u03bcsec/hit.\n;\n\n\n\n\n\n\n21.\n Do not write multiple expressions in a single line.\n\n\n22.\n Group sections of code inside functions and separate them with no more than one empty line.\n\n\n23.\n Separate functions, classes, and so on with one or two empty lines.\n\n\n24.\n A \nconst\n (related to a value) must be written before the type name.\n\n\n//correct\n\n\nconst\n \nchar\n \n*\n \npos\n\n\nconst\n \nstd\n::\nstring\n \n \ns\n\n\n//incorrect\n\n\nchar\n \nconst\n \n*\n \npos\n\n\n\n\n\n\n25.\n When declaring a pointer or reference, the \n*\n and \n symbols should be separated by spaces on both sides.\n\n\n//correct\n\n\nconst\n \nchar\n \n*\n \npos\n\n\n//incorrect\n\n\nconst\n \nchar\n*\n \npos\n\n\nconst\n \nchar\n \n*\npos\n\n\n\n\n\n\n26.\n When using template types, alias them with the \nusing\n keyword (except in the simplest cases).\n\n\nIn other words, the template parameters are specified only in \nusing\n and aren't repeated in the code.\n\n\nusing\n can be declared locally, such as inside a function.\n\n\n//correct\n\n\nusing\n \nFileStreams\n \n=\n \nstd\n::\nmap\nstd\n::\nstring\n,\n \nstd\n::\nshared_ptr\nStream\n;\n\n\nFileStreams\n \nstreams\n;\n\n\n//incorrect\n\n\nstd\n::\nmap\nstd\n::\nstring\n,\n \nstd\n::\nshared_ptr\nStream\n \nstreams\n;\n\n\n\n\n\n\n27.\n Do not declare several variables of different types in one statement.\n\n\n//incorrect\n\n\nint\n \nx\n,\n \n*\ny\n;\n\n\n\n\n\n\n28.\n Do not use C-style casts.\n\n\n//incorrect\n\n\nstd\n::\ncerr\n \n \n(\nint\n)\nc\n \n;\n \nstd\n::\nendl\n;\n\n\n//correct\n\n\nstd\n::\ncerr\n \n \nstatic_cast\nint\n(\nc\n)\n \n \nstd\n::\nendl\n;\n\n\n\n\n\n\n29.\n In classes and structs, group members and functions separately inside each visibility scope.\n\n\n30.\n For small classes and structs, it is not necessary to separate the method declaration from the implementation.\n\n\nThe same is true for small methods in any classes or structs.\n\n\nFor templated classes and structs, don't separate the method declarations from the implementation (because otherwise they must be defined in the same translation unit).\n\n\n31.\n You can wrap lines at 140 characters, instead of 80.\n\n\n32.\n Always use the prefix increment/decrement operators if postfix is not required.\n\n\nfor\n \n(\nNames\n::\nconst_iterator\n \nit\n \n=\n \ncolumn_names\n.\nbegin\n();\n \nit\n \n!=\n \ncolumn_names\n.\nend\n();\n \n++\nit\n)\n\n\n\n\n\n\nComments\n\n\n1.\n Be sure to add comments for all non-trivial parts of code.\n\n\nThis is very important. Writing the comment might help you realize that the code isn't necessary, or that it is designed wrong.\n\n\n/** Part of piece of memory, that can be used.\n\n\n  * For example, if internal_buffer is 1MB, and there was only 10 bytes loaded to buffer from file for reading,\n\n\n  * then working_buffer will have size of only 10 bytes\n\n\n  * (working_buffer.end() will point to the position right after those 10 bytes available for read).\n\n\n*/\n\n\n\n\n\n\n2.\n Comments can be as detailed as necessary.\n\n\n3.\n Place comments before the code they describe. In rare cases, comments can come after the code, on the same line.\n\n\n/** Parses and executes the query.\n\n\n*/\n\n\nvoid\n \nexecuteQuery\n(\n\n    \nReadBuffer\n \n \nistr\n,\n \n/// Where to read the query from (and data for INSERT, if applicable)\n\n    \nWriteBuffer\n \n \nostr\n,\n \n/// Where to write the result\n\n    \nContext\n \n \ncontext\n,\n \n/// DB, tables, data types, engines, functions, aggregate functions...\n\n    \nBlockInputStreamPtr\n \n \nquery_plan\n,\n \n/// A description of query processing can be included here\n\n    \nQueryProcessingStage\n::\nEnum\n \nstage\n \n=\n \nQueryProcessingStage\n::\nComplete\n \n/// The last stage to process the SELECT query to\n\n    \n)\n\n\n\n\n\n\n4.\n Comments should be written in English only.\n\n\n5.\n If you are writing a library, include detailed comments explaining it in the main header file.\n\n\n6.\n Do not add comments that do not provide additional information. In particular, do not leave empty comments like this:\n\n\n/*\n\n\n* Procedure Name:\n\n\n* Original procedure name:\n\n\n* Author:\n\n\n* Date of creation:\n\n\n* Dates of modification:\n\n\n* Modification authors:\n\n\n* Original file name:\n\n\n* Purpose:\n\n\n* Intent:\n\n\n* Designation:\n\n\n* Classes used:\n\n\n* Constants:\n\n\n* Local variables:\n\n\n* Parameters:\n\n\n* Date of creation:\n\n\n* Purpose:\n\n\n*/\n\n\n\n\n\n\nThe example is borrowed from  \nhttp://home.tamk.fi/~jaalto/course/coding-style/doc/unmaintainable-code/\n.\n\n\n7.\n Do not write garbage comments (author, creation date ..) at the beginning of each file.\n\n\n8.\n Single-line comments begin with three slashes: \n///\n  and multi-line comments begin with \n/**\n. These comments are considered \"documentation\".\n\n\nNote: You can use Doxygen to generate documentation from these comments. But Doxygen is not generally used because it is more convenient to navigate the code in the IDE.\n\n\n9.\n Multi-line comments must not have empty lines at the beginning and end (except the line that closes a multi-line comment).\n\n\n10.\n For commenting out code, use basic comments, not \"documenting\" comments.\n\n\n11.\n Delete the commented out parts of the code before commiting.\n\n\n12.\n Do not use profanity in comments or code.\n\n\n13.\n Do not use uppercase letters. Do not use excessive punctuation.\n\n\n/// WHAT THE FAIL???\n\n\n\n\n\n\n14.\n Do not make delimeters from comments.\n\n\n///******************************************************\n\n\n\n\n\n15.\n Do not start discussions in comments.\n\n\n/// Why did you do this stuff?\n\n\n\n\n\n16.\n There's no need to write a comment at the end of a block describing what it was about.\n\n\n/// for\n\n\n\n\n\nNames\n\n\n1.\n The names of variables and class members use lowercase letters with underscores.\n\n\nsize_t\n \nmax_block_size\n;\n\n\n\n\n\n\n2.\n The names of functions (methods) use camelCase beginning with a lowercase letter.\n\n\nstd\n::\nstring\n \ngetName\n()\n \nconst\n \noverride\n \n{\n \nreturn\n \nMemory\n;\n \n}\n\n\n\n\n\n\n3.\n The names of classes (structures) use CamelCase beginning with an uppercase letter. Prefixes other than I are not used for interfaces.\n\n\nclass\n \nStorageMemory\n \n:\n \npublic\n \nIStorage\n\n\n\n\n\n\n4.\n The names of usings follow the same rules as classes, or you can add _t at the end.\n\n\n5.\n Names of template type arguments for simple cases: T; T, U; T1, T2.\n\n\nFor more complex cases, either follow the rules for class names, or add the prefix T.\n\n\ntemplate\n \ntypename\n \nTKey\n,\n \ntypename\n \nTValue\n\n\nstruct\n \nAggregatedStatElement\n\n\n\n\n\n\n6.\n Names of template constant arguments: either follow the rules for variable names, or use N in simple cases.\n\n\ntemplate\n \nbool\n \nwithout_www\n\n\nstruct\n \nExtractDomain\n\n\n\n\n\n\n7.\n For abstract classes (interfaces) you can add the I prefix.\n\n\nclass\n \nIBlockInputStream\n\n\n\n\n\n\n8.\n If you use a variable locally, you can use the short name.\n\n\nIn other cases, use a descriptive name that conveys the meaning.\n\n\nbool\n \ninfo_successfully_loaded\n \n=\n \nfalse\n;\n\n\n\n\n\n\n9.\n \ndefine\n\u2018s should be in ALL_CAPS with underscores. The same is true for global constants.\n\n\n##define MAX_SRC_TABLE_NAMES_TO_STORE 1000\n\n\n\n\n\n\n10.\n File names should use the same style as their contents.\n\n\nIf a file contains a single class, name the file the same way as the class, in CamelCase.\n\n\nIf the file contains a single function, name the file the same way as the function, in camelCase.\n\n\n11.\n If the name contains an abbreviation, then:\n\n\n\n\nFor variable names, the abbreviation should use lowercase letters \nmysql_connection\n (not \nmySQL_connection\n).\n\n\nFor names of classes and functions, keep the uppercase letters in the abbreviation \nMySQLConnection\n (not \nMySqlConnection\n).\n\n\n\n\n12.\n Constructor arguments that are used just to initialize the class members should be named the same way as the class members, but with an underscore at the end.\n\n\nFileQueueProcessor\n(\n\n    \nconst\n \nstd\n::\nstring\n \n \npath_\n,\n\n    \nconst\n \nstd\n::\nstring\n \n \nprefix_\n,\n\n    \nstd\n::\nshared_ptr\nFileHandler\n \nhandler_\n)\n\n    \n:\n \npath\n(\npath_\n),\n\n    \nprefix\n(\nprefix_\n),\n\n    \nhandler\n(\nhandler_\n),\n\n    \nlog\n(\nLogger\n::\nget\n(\nFileQueueProcessor\n))\n\n\n{\n\n\n}\n\n\n\n\n\n\nThe underscore suffix can be omitted if the argument is not used in the constructor body.\n\n\n13.\n There is no difference in the names of local variables and class members (no prefixes required).\n\n\ntimer\n \n(\nnot\n \nm_timer\n)\n\n\n\n\n\n\n14.\n Constants in enums use CamelCase beginning with an uppercase letter. ALL_CAPS is also allowed. If the enum is not local, use enum class.\n\n\nenum\n \nclass\n \nCompressionMethod\n\n\n{\n\n    \nQuickLZ\n \n=\n \n0\n,\n\n    \nLZ4\n     \n=\n \n1\n,\n\n\n};\n\n\n\n\n\n\n15.\n All names must be in English. Transliteration of Russian words is not allowed.\n\n\nnot\n \nStroka\n\n\n\n\n\n\n16.\n Abbreviations are acceptable if they are well known (when you can easily find the meaning of the abbreviation in Wikipedia or in a search engine).\n\n\n`AST`, `SQL`.\n\nNot `NVDH` (some random letters)\n\n\n\n\n\nIncomplete words are acceptable if the shortened version is common use.\n\n\nYou can also use an abbreviation if the full name is included next to it in the comments.\n\n\n17.\n File names with C++ source code must have the \n.cpp\n extension. Header files must have the \n.h\n extension.\n\n\nHow to write code\n\n\n1.\n Memory management.\n\n\nManual memory deallocation (delete) can only be used in library code.\n\n\nIn library code, the delete operator can only be used in destructors.\n\n\nIn application code, memory must be freed by the object that owns it.\n\n\nExamples:\n\n\n\n\nThe easiest way is to place an object on the stack, or make it a member of another class.\n\n\nFor a large number of small objects, use containers.\n\n\nFor automatic deallocation of a small number of objects that reside in the heap, use shared_ptr/unique_ptr.\n\n\n\n\n2.\n Resource management.\n\n\nUse RAII and see the previous point.\n\n\n3.\n Error handling.\n\n\nUse exceptions. In most cases, you only need to throw an exception, and don't need to catch it (because of RAII).\n\n\nIn offline data processing applications, it's often acceptable to not catch exceptions.\n\n\nIn servers that handle user requests, it's usually enough to catch exceptions at the top level of the connection handler.\n\n\n/// If there were no other calculations yet, do it synchronously\n\n\nif\n \n(\n!\nstarted\n)\n\n\n{\n\n    \ncalculate\n();\n\n    \nstarted\n \n=\n \ntrue\n;\n\n\n}\n\n\nelse\n    \n/// If the calculations are already in progress, wait for results\n\n    \npool\n.\nwait\n();\n\n\n\nif\n \n(\nexception\n)\n\n    \nexception\n-\nrethrow\n();\n\n\n\n\n\n\nNever hide exceptions without handling. Never just blindly put all exceptions to log.\n\n\nNot \ncatch (...) {}\n.\n\n\nIf you need to ignore some exceptions, do so only for specific ones and rethrow the rest.\n\n\ncatch\n \n(\nconst\n \nDB\n::\nException\n \n \ne\n)\n\n\n{\n\n    \nif\n \n(\ne\n.\ncode\n()\n \n==\n \nErrorCodes\n::\nUNKNOWN_AGGREGATE_FUNCTION\n)\n\n        \nreturn\n \nnullptr\n;\n\n    \nelse\n\n        \nthrow\n;\n\n\n}\n\n\n\n\n\n\nWhen using functions with response codes or errno, always check the result and throw an exception in case of error.\n\n\nif\n \n(\n0\n \n!=\n \nclose\n(\nfd\n))\n\n    \nthrowFromErrno\n(\nCannot close file \n \n+\n \nfile_name\n,\n \nErrorCodes\n::\nCANNOT_CLOSE_FILE\n);\n\n\n\n\n\n\nAsserts are not used.\n\n\n4.\n Exception types.\n\n\nThere is no need to use complex exception hierarchy in application code. The exception text should be understandable to a system administrator.\n\n\n5.\n Throwing exceptions from destructors.\n\n\nThis is not recommended, but it is allowed.\n\n\nUse the following options:\n\n\n\n\nCreate a (done() or finalize()) function that will do all the work in advance that might lead to an exception. If that function was called, there should be no exceptions in the destructor later.\n\n\nTasks that are too complex (such as sending messages over the network) can be put in separate method that the class user will have to call before destruction.\n\n\nIf there is an exception in the destructor, it\u2019s better to log it than to hide it (if the logger is available).\n\n\nIn simple applications, it is acceptable to rely on std::terminate (for cases of noexcept by default in C++11) to handle exceptions.\n\n\n\n\n6.\n Anonymous code blocks.\n\n\nYou can create a separate code block inside a single function in order to make certain variables local, so that the destructors are called when exiting the block.\n\n\nBlock\n \nblock\n \n=\n \ndata\n.\nin\n-\nread\n();\n\n\n\n{\n\n    \nstd\n::\nlock_guard\nstd\n::\nmutex\n \nlock\n(\nmutex\n);\n\n    \ndata\n.\nready\n \n=\n \ntrue\n;\n\n    \ndata\n.\nblock\n \n=\n \nblock\n;\n\n\n}\n\n\n\nready_any\n.\nset\n();\n\n\n\n\n\n\n7.\n Multithreading.\n\n\nFor offline data processing applications:\n\n\n\n\nTry to get the best possible performance on a single CPU core. You can then parallelize your code if necessary.\n\n\n\n\nIn server applications:\n\n\n\n\nUse the thread pool to process requests. At this point, we haven't had any tasks that required userspace context switching.\n\n\n\n\nFork is not used for parallelization.\n\n\n8.\n Synchronizing threads.\n\n\nOften it is possible to make different threads use different memory cells (even better: different cache lines,) and to not use any thread synchronization (except joinAll).\n\n\nIf synchronization is required, in most cases, it is sufficient to use mutex under lock_guard.\n\n\nIn other cases use system synchronization primitives. Do not use busy wait.\n\n\nAtomic operations should be used only in the simplest cases.\n\n\nDo not try to implement lock-free data structures unless it is your primary area of expertise.\n\n\n9.\n Pointers vs references.\n\n\nIn most cases, prefer references.\n\n\n10.\n const.\n\n\nUse constant references, pointers to constants, \nconst_iterator\n, \nconst\n methods.\n\n\nConsider \nconst\n to be default and use non-const only when necessary.\n\n\nWhen passing variable by value, using \nconst\n usually does not make sense.\n\n\n11.\n unsigned.\n\n\nUse \nunsigned\n, if needed.\n\n\n12.\n Numeric types\n\n\nUse \nUInt8\n, \nUInt16\n, \nUInt32\n, \nUInt64\n, \nInt8\n, \nInt16\n, \nInt32\n, \nInt64\n, and \nsize_t\n, \nssize_t\n, \nptrdiff_t\n.\n\n\nDon't use \nsigned/unsigned long\n, \nlong long\n, \nshort\n, \nsigned char\n, \nunsigned char\n, or \nchar\n types for numbers.\n\n\n13.\n Passing arguments.\n\n\nPass complex values by reference (including \nstd::string\n).\n\n\nIf a function captures ownership of an objected created in the heap, make the argument type \nshared_ptr\n or \nunique_ptr\n.\n\n\n14.\n Returning values.\n\n\nIn most cases, just use return. Do not write \n[return std::move(res)]{.strike}\n.\n\n\nIf the function allocates an object on heap and returns it, use \nshared_ptr\n or \nunique_ptr\n.\n\n\nIn rare cases you might need to return the value via an argument. In this case, the argument should be a reference.\n\n\nusing\n \nAggregateFunctionPtr\n \n=\n \nstd\n::\nshared_ptr\nIAggregateFunction\n;\n\n\n\n/** Creates an aggregate function by name.\n\n\n */\n\n\nclass\n \nAggregateFunctionFactory\n\n\n{\n\n\npublic\n:\n\n   \nAggregateFunctionFactory\n();\n\n   \nAggregateFunctionPtr\n \nget\n(\nconst\n \nString\n \n \nname\n,\n \nconst\n \nDataTypes\n \n \nargument_types\n)\n \nconst\n;\n\n\n\n\n\n\n15.\n namespace.\n\n\nThere is no need to use a separate namespace for application code or small libraries.\n\n\nor small libraries.\n\n\nFor medium to large libraries, put everything in the namespace.\n\n\nYou can use the additional detail namespace in a library's \n.h\n file to hide implementation details.\n\n\nIn a \n.cpp\n file, you can use the static or anonymous namespace to hide symbols.\n\n\nYou can also use namespace for enums to prevent its names from polluting the outer namespace, but it\u2019s better to use the enum class.\n\n\n16.\n Delayed initialization.\n\n\nIf arguments are required for initialization then do not write a default constructor.\n\n\nIf later you\u2019ll need to delay initialization, you can add a default constructor that will create an invalid object. Or, for a small number of objects, you can use \nshared_ptr/unique_ptr\n.\n\n\nLoader\n(\nDB\n::\nConnection\n \n*\n \nconnection_\n,\n \nconst\n \nstd\n::\nstring\n \n \nquery\n,\n \nsize_t\n \nmax_block_size_\n);\n\n\n\n/// For delayed initialization\n\n\nLoader\n()\n \n{}\n\n\n\n\n\n\n17.\n Virtual functions.\n\n\nIf the class is not intended for polymorphic use, you do not need to make functions virtual. This also applies to the destructor.\n\n\n18.\n Encodings.\n\n\nUse UTF-8 everywhere. Use \nstd::string\nand\nchar *\n. Do not use \nstd::wstring\nand\nwchar_t\n.\n\n\n19.\n Logging.\n\n\nSee the examples everywhere in the code.\n\n\nBefore committing, delete all meaningless and debug logging, and any other types of debug output.\n\n\nLogging in cycles should be avoided, even on the Trace level.\n\n\nLogs must be readable at any logging level.\n\n\nLogging should only be used in application code, for the most part.\n\n\nLog messages must be written in English.\n\n\nThe log should preferably be understandable for the system administrator.\n\n\nDo not use profanity in the log.\n\n\nUse UTF-8 encoding in the log. In rare cases you can use non-ASCII characters in the log.\n\n\n20.\n I/O.\n\n\nDon't use iostreams in internal cycles that are critical for application performance (and never use stringstream).\n\n\nUse the DB/IO library instead.\n\n\n21.\n Date and time.\n\n\nSee the \nDateLUT\n library.\n\n\n22.\n include.\n\n\nAlways use \n#pragma once\n instead of include guards.\n\n\n23.\n using.\n\n\nThe \nusing namespace\n is not used.\n\n\nIt's fine if you are 'using' something specific, but make it local inside a class or function.\n\n\n24.\n Do not use trailing return type for functions unless necessary.\n\n\n[auto f() -\ngt; void;]{.strike}\n\n\n\n\n\n25.\n Do not declare and init variables like this:\n\n\nauto\n \ns\n \n=\n \nstd\n::\nstring\n{\nHello\n};\n\n\n\n\n\n\nDo it like this:\n\n\nstd\n::\nstring\n \ns\n \n=\n \nHello\n;\n\n\nstd\n::\nstring\n \ns\n{\nHello\n};\n\n\n\n\n\n\n26.\n For virtual functions, write \nvirtual\n in the base class, but write \noverride\n in descendent classes.\n\n\nUnused features of C++\n\n\n1.\n Virtual inheritance is not used.\n\n\n2.\n Exception specifiers from C++03 are not used.\n\n\n3.\n Function try block is not used, except for the main function in tests.\n\n\nPlatform\n\n\n1.\n We write code for a specific platform.\n\n\nBut other things being equal, cross-platform or portable code is preferred.\n\n\n2.\n The language is C++17.\n\n\n3.\n The compiler is \ngcc\n. At this time (December 2017), the code is compiled using version 7.2. (It can also be compiled using clang 5.)\n\n\nThe standard library is used (implementation of \nlibstdc++\n or \nlibc++\n).\n\n\n4.\n OS: Linux Ubuntu, not older than Precise.\n\n\n5.\n Code is written for x86_64 CPU architecture.\n\n\nThe CPU instruction set is the minimum supported set among our servers. Currently, it is SSE 4.2.\n\n\n6.\n Use \n-Wall -Wextra -Werror\n compilation flags.\n\n\n7.\n Use static linking with all libraries except those that are difficult to connect to statically (see the output of the \nldd\n command).\n\n\n8.\n Code is developed and debugged with release settings.\n\n\nTools\n\n\n1.\n \nKDevelop\n is a good IDE.\n\n\n2.\n For debugging, use \ngdb\n, \nvalgrind\n (\nmemcheck\n), \nstrace\n, \n-fsanitize=\n, ..., \ntcmalloc_minimal_debug\n.\n\n\n3.\n For profiling, use Linux Perf \nvalgrind\n (\ncallgrind\n), \nstrace-cf\n.\n\n\n4.\n Sources are in Git.\n\n\n5.\n Compilation is managed by \nCMake\n.\n\n\n6.\n Releases are in \ndeb\n packages.\n\n\n7.\n Commits to master must not break the build.\n\n\nThough only selected revisions are considered workable.\n\n\n8.\n Make commits as often as possible, even if the code is only partially ready.\n\n\nUse branches for this purpose.\n\n\nIf your code is not buildable yet, exclude it from the build before pushing to master. You'll need to finish it or remove it from master within a few days.\n\n\n9.\n For non-trivial changes, used branches and publish them on the server.\n\n\n10.\n Unused code is removed from the repository.\n\n\nLibraries\n\n\n1.\n The C++14 standard library is used (experimental extensions are fine), as well as boost and Poco frameworks.\n\n\n2.\n If necessary, you can use any well-known libraries available in the OS package.\n\n\nIf there is a good solution already available, then use it, even if it means you have to install another library.\n\n\n(But be prepared to remove bad libraries from code.)\n\n\n3.\n You can install a library that isn't in the packages, if the packages don't have what you need or have an outdated version or the wrong type of compilation.\n\n\n4.\n If the library is small and doesn't have its own complex build system, put the source files in the contrib folder.\n\n\n5.\n Preference is always given to libraries that are  already used.\n\n\nGeneral recommendations\n\n\n1.\n Write as little code as possible.\n\n\n2.\n Try the simplest solution.\n\n\n3.\n Don't write code until you know how it's going to work and how the inner loop will function.\n\n\n4.\n In the simplest cases, use 'using' instead of classes or structs.\n\n\n5.\n If possible, do not write copy constructors, assignment operators, destructors (other than a virtual one, if the class contains at least one virtual function), mpve-constructors and move assignment operators. In other words, the compiler-generated functions must work correctly. You can use 'default'.\n\n\n6.\n Code simplification is encouraged. Reduce the size of your code where possible.\n\n\nAdditional recommendations\n\n\n1.\n Explicit \nstd::\n for types from \nstddef.h\n is not recommended.\n\n\nWe recommend writing \nsize_t\n instead \nstd::size_t\n because it's shorter.\n\n\nBut if you prefer, \nstd::\n is acceptable.\n\n\n2.\n Explicit \nstd::\n for functions from the standard C library is not recommended.\n\n\nWrite \nmemcpy\n instead of \nstd::memcpy\n.\n\n\nThe reason is that there are similar non-standard functions, such as \nmemmem\n. We do use these functions on occasion. These functions do not exist in namespace \nstd\n.\n\n\nIf you write \nstd::memcpy\n instead of \nmemcpy\n everywhere, then \nmemmem\n without \nstd::\n will look awkward.\n\n\nNevertheless, \nstd::\n is allowed if you prefer it.\n\n\n3.\n Using functions from C when the ones are available in the standard C++ library.\n\n\nThis is acceptable if it is more efficient.\n\n\nFor example, use \nmemcpy\n instead of \nstd::copy\n for copying large chunks of memory.\n\n\n4.\n Multiline function arguments.\n\n\nAny of the following wrapping styles are allowed:\n\n\nfunction\n(\n\n    \nT1\n \nx1\n,\n\n    \nT2\n \nx2\n)\n\n\n\n\n\n\nfunction\n(\n\n    \nsize_t\n \nleft\n,\n \nsize_t\n \nright\n,\n\n    \nconst\n \n \nRangesInDataParts\n \nranges\n,\n\n    \nsize_t\n \nlimit\n)\n\n\n\n\n\n\nfunction\n(\nsize_t\n \nleft\n,\n \nsize_t\n \nright\n,\n\n    \nconst\n \n \nRangesInDataParts\n \nranges\n,\n\n    \nsize_t\n \nlimit\n)\n\n\n\n\n\n\nfunction\n(\nsize_t\n \nleft\n,\n \nsize_t\n \nright\n,\n\n        \nconst\n \n \nRangesInDataParts\n \nranges\n,\n\n        \nsize_t\n \nlimit\n)\n\n\n\n\n\n\nfunction\n(\n\n        \nsize_t\n \nleft\n,\n\n        \nsize_t\n \nright\n,\n\n        \nconst\n \n \nRangesInDataParts\n \nranges\n,\n\n        \nsize_t\n \nlimit\n)\n\n\n\n\n\n\nHow to run ClickHouse tests\n\n\nThe \nclickhouse-test\n utility that is used for functional testing is written using Python 2.x.It also requires you to have some third-party packages:\n\n\n$ pip install lxml termcolor\n\n\n\n\n\nIn a nutshell:\n\n\n\n\nPut the \nclickhouse\n program to \n/usr/bin\n (or \nPATH\n)\n\n\nCreate a \nclickhouse-client\n symlink in \n/usr/bin\n pointing to \nclickhouse\n\n\nStart the \nclickhouse\n server\n\n\ncd dbms/tests/\n\n\nRun \n./clickhouse-test\n\n\n\n\nExample usage\n\n\nRun \n./clickhouse-test --help\n to see available options.\n\n\nTo run tests without having to create a symlink or mess with \nPATH\n:\n\n\n./clickhouse-test -c \n../../build/dbms/src/Server/clickhouse --client\n\n\n\n\n\n\nTo run a single test, i.e. \n00395_nullable\n:\n\n\n./clickhouse-test \n00395\n\n\n\n\n\n\nRoadmap\n\n\nQ1 2018\n\n\nNew fuctionality\n\n\n\n\n\n\nSupport for \nUPDATE\n and \nDELETE\n.\n\n\n\n\n\n\nMultidimensional and nested arrays.\n\n\n\n\n\n\nIt can look something like this:\n\n\nCREATE\n \nTABLE\n \nt\n\n\n(\n\n    \nx\n \nArray\n(\nArray\n(\nString\n)),\n\n    \nz\n \nNested\n(\n\n        \nx\n \nArray\n(\nString\n),\n\n        \ny\n \nNested\n(...))\n\n\n)\n\n\nENGINE\n \n=\n \nMergeTree\n \nORDER\n \nBY\n \nx\n\n\n\n\n\n\n\n\nExternal MySQL and ODBC tables.\n\n\n\n\nExternal tables can be integrated into ClickHouse using external dictionaries. This new functionality is a convenient alternative to connecting external tables.\n\n\nSELECT\n \n...\n\n\nFROM\n \nmysql\n(\nhost:port\n,\n \ndb\n,\n \ntable\n,\n \nuser\n,\n \npassword\n)\n`\n\n\n\n\n\n\nImprovements\n\n\n\n\nEffective data copying between ClickHouse clusters.\n\n\n\n\nNow you can copy data with the remote() function. For example: \nINSERT INTO t SELECT * FROM remote(...)\n.\n\n\nThis operation will have improved performance.\n\n\n\n\nO_DIRECT for merges.\n\n\n\n\nThis will improve the performance of the OS cache and \"hot\" queries.\n\n\nQ2 2018\n\n\nNew functionality\n\n\n\n\n\n\nUPDATE/DELETE conform to the EU GDPR.\n\n\n\n\n\n\nProtobuf and Parquet input and output formats.\n\n\n\n\n\n\nCreating dictionaries using DDL queries.\n\n\n\n\n\n\nCurrently, dictionaries that are part of the database schema are defined in external XML files. This is inconvenient and counter-intuitive. The new approach should fix it.\n\n\n\n\n\n\nIntegration with LDAP.\n\n\n\n\n\n\nWITH ROLLUP and WITH CUBE for GROUP BY.\n\n\n\n\n\n\nCustom encoding and compression for each column individually.\n\n\n\n\n\n\nAs of now, ClickHouse supports LZ4 and ZSTD compression of columns, and compression settings are global (see the article \nCompression in ClickHouse\n). Per-column compression and encoding will provide more efficient data storage, which in turn will speed up queries.\n\n\n\n\nStoring data on multiple disks on the same server.\n\n\n\n\nThis functionality will make it easier to extend the disk space, since different disk systems can be used for different databases or tables. Currently, users are forced to use symbolic links if the databases and tables must be stored on a different disk.\n\n\nImprovements\n\n\nMany improvements and fixes are planned for the query execution system. For example:\n\n\n\n\nUsing an index for \nin (subquery)\n.\n\n\n\n\nThe index is not used right now, which reduces performance.\n\n\n\n\nPassing predicates from \nwhere\n to subqueries, and passing predicates to views.\n\n\n\n\nThe predicates must be passed, since the view is changed by the subquery. Performance is still low for view filters, and views can't use the primary key of the original table, which makes views useless for large tables.\n\n\n\n\nOptimizing branching operations (ternary operator, if, multiIf).\n\n\n\n\nClickHouse currently performs all branches, even if they aren't necessary.\n\n\n\n\nUsing a primary key for GROUP BY and ORDER BY.\n\n\n\n\nThis will speed up certain types of queries with partially sorted data.\n\n\nQ3-Q4 2018\n\n\nWe don't have any set plans yet, but the main projects will be:\n\n\n\n\nResource pools for executing queries.\n\n\n\n\nThis will make load management more efficient.\n\n\n\n\nANSI SQL JOIN syntax.\n\n\n\n\nImprove ClickHouse compatibility with many SQL tools.", 
            "title": "Documentation"
        }, 
        {
            "location": "/index.html#what-is-clickhouse", 
            "text": "ClickHouse is a columnar DBMS for OLAP.  In a \"normal\" row-oriented DBMS, data is stored in this order:  5123456789123456789     1       Eurobasket - Greece - Bosnia and Herzegovina - example.com      1       2011-09-01 01:03:02     6274717   1294101174      11409   612345678912345678      0       33      6       http://www.example.com/basketball/team/123/match/456789.html http://www.example.com/basketball/team/123/match/987654.html       0       1366    768     32      10      3183      0       0       13      0\\0     1       1       0       0                       2011142 -1      0               0       01321     613     660     2011-09-01 08:01:17     0       0       0       0       utf-8   1466    0       0       0       5678901234567890123               277789954       0       0       0       0       0\n5234985259563631958     0       Consulting, Tax assessment, Accounting, Law       1       2011-09-01 01:03:02     6320881   2111222333      213     6458937489576391093     0       3       2       http://www.example.ru/         0       800     600       16      10      2       153.1   0       0       10      63      1       1       0       0                       2111678 000       0       588     368     240     2011-09-01 01:03:17     4       0       60310   0       windows-1251    1466    0       000               778899001       0       0       0       0       0\n...  In order words, all the values related to a row are stored next to each other.\nExamples of a row-oriented DBMS are MySQL, Postgres, MS SQL Server, and others.  In a column-oriented DBMS, data is stored like this:  WatchID:    5385521489354350662     5385521490329509958     5385521489953706054     5385521490476781638     5385521490583269446     5385521490218868806     5385521491437850694   5385521491090174022      5385521490792669254     5385521490420695110     5385521491532181574     5385521491559694406     5385521491459625030     5385521492275175494   5385521492781318214      5385521492710027334     5385521492955615302     5385521493708759110     5385521494506434630     5385521493104611398\nJavaEnable: 1       0       1       0       0       0       1       0       1       1       1       1       1       1       0       1       0       0       1       1\nTitle:      Yandex  Announcements - Investor Relations - Yandex     Yandex \u2014 Contact us \u2014 Moscow    Yandex \u2014 Mission        Ru      Yandex \u2014 History \u2014 History of Yandex    Yandex Financial Releases - Investor Relations - Yandex Yandex \u2014 Locations      Yandex Board of Directors - Corporate Governance - Yandex       Yandex \u2014 Technologies\nGoodEvent:  1       1       1       1       1       1       1       1       1       1       1       1       1       1       1       1       1       1       1       1\nEventTime:  2016-05-18 05:19:20     2016-05-18 08:10:20     2016-05-18 07:38:00     2016-05-18 01:13:08     2016-05-18 00:04:06     2016-05-18 04:21:30     2016-05-18 00:34:16     2016-05-18 07:35:49     2016-05-18 11:41:59     2016-05-18 01:13:32  These examples only show the order that data is arranged in.\nThe values from different columns are stored separately, and data from the same column is stored together.  Examples of column-oriented DBMSs:  Vertica ,  Paraccel (Actian Matrix) (Amazon Redshift) ,  Sybase IQ ,  Exasol ,  Infobright ,  InfiniDB ,  MonetDB (VectorWise) (Actian Vector) ,  LucidDB ,  SAP HANA ,  Google Dremel ,  Google PowerDrill ,  Druid ,  kdb+ , and so on.  Different orders for storing data are better suited to different scenarios.\nThe data access scenario refers to what queries are made, how often, and in what proportion; how much data is read for each type of query \u2013 rows, columns, and bytes; the relationship between reading and updating data; the working size of the data and how locally it is used; whether transactions are used, and how isolated they are; requirements for data replication and logical integrity; requirements for latency and throughput for each type of query, and so on.  The higher the load on the system, the more important it is to customize the system to the scenario, and the more specific this customization becomes. There is no system that is equally well-suited to significantly different scenarios. If a system is adaptable to a wide set of scenarios, under a high load, the system will handle all the scenarios equally poorly, or will work well for just one of the scenarios.  We'll say that the following is true for the OLAP (online analytical processing) scenario:   The vast majority of requests are for read access.  Data is updated in fairly large batches (  1000 rows), not by single rows; or it is not updated at all.  Data is added to the DB but is not modified.  For reads, quite a large number of rows are extracted from the DB, but only a small subset of columns.  Tables are \"wide,\" meaning they contain a large number of columns.  Queries are relatively rare (usually hundreds of queries per server or less per second).  For simple queries, latencies around 50 ms are allowed.  Column values are fairly small: numbers and short strings (for example, 60 bytes per URL).  Requires high throughput when processing a single query (up to billions of rows per second per server).  There are no transactions.  Low requirements for data consistency.  There is one large table per query. All tables are small, except for one.  A query result is significantly smaller than the source data. In other words, data is filtered or aggregated. The result fits in a single server's RAM.   It is easy to see that the OLAP scenario is very different from other popular scenarios (such as OLTP or Key-Value access). So it doesn't make sense to try to use OLTP or a Key-Value DB for processing analytical queries if you want to get decent performance. For example, if you try to use MongoDB or Elliptics for analytics, you will get very poor performance compared to OLAP databases.  Columnar-oriented databases are better suited to OLAP scenarios (at least 100 times better in processing speed for most queries), for the following reasons:   For I/O.  For an analytical query, only a small number of table columns need to be read. In a column-oriented database, you can read just the data you need. For example, if you need 5 columns out of 100, you can expect a 20-fold reduction in I/O.  Since data is read in packets, it is easier to compress. Data in columns is also easier to compress. This further reduces the I/O volume.  Due to the reduced I/O, more data fits in the system cache.   For example, the query \"count the number of records for each advertising platform\" requires reading one \"advertising platform ID\" column, which takes up 1 byte uncompressed. If most of the traffic was not from advertising platforms, you can expect at least 10-fold compression of this column. When using a quick compression algorithm, data decompression is possible at a speed of at least several gigabytes of uncompressed data per second. In other words, this query can be processed at a speed of approximately several billion rows per second on a single server. This speed is actually achieved in practice.  Example:  milovidov@hostname:~$ clickhouse-client\nClickHouse client version  0 .0.52053.\nConnecting to localhost:9000.\nConnected to ClickHouse server version  0 .0.52053.\n\n: )  SELECT CounterID, count ()  FROM hits GROUP BY CounterID ORDER BY count ()  DESC LIMIT  20 \n\nSELECT\n    CounterID,\n    count () \nFROM hits\nGROUP BY CounterID\nORDER BY count ()  DESC\nLIMIT  20 \n\n\u250c\u2500CounterID\u2500\u252c\u2500\u2500count () \u2500\u2510\n\u2502     114208  \u2502  56057344  \u2502\n\u2502     115080  \u2502  51619590  \u2502\n\u2502       3228  \u2502  44658301  \u2502\n\u2502      38230  \u2502  42045932  \u2502\n\u2502     145263  \u2502  42042158  \u2502\n\u2502      91244  \u2502  38297270  \u2502\n\u2502     154139  \u2502  26647572  \u2502\n\u2502     150748  \u2502  24112755  \u2502\n\u2502     242232  \u2502  21302571  \u2502\n\u2502     338158  \u2502  13507087  \u2502\n\u2502      62180  \u2502  12229491  \u2502\n\u2502      82264  \u2502  12187441  \u2502\n\u2502     232261  \u2502  12148031  \u2502\n\u2502     146272  \u2502  11438516  \u2502\n\u2502     168777  \u2502  11403636  \u2502\n\u2502    4120072  \u2502  11227824  \u2502\n\u2502   10938808  \u2502  10519739  \u2502\n\u2502      74088  \u2502   9047015  \u2502\n\u2502     115079  \u2502   8837972  \u2502\n\u2502     337234  \u2502   8205961  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 20  rows in set. Elapsed:  0 .153 sec. Processed  1 .00 billion rows,  4 .00 GB  ( 6 .53 billion rows/s.,  26 .10 GB/s. ) \n\n: )    For CPU.   Since executing a query requires processing a large number of rows, it helps to dispatch all operations for entire vectors instead of for separate rows, or to implement the query engine so that there is almost no dispatching cost. If you don't do this, with any half-decent disk subsystem, the query interpreter inevitably stalls the CPU.\nIt makes sense to both store data in columns and process it, when possible, by columns.  There are two ways to do this:    A vector engine. All operations are written for vectors, instead of for separate values. This means you don't need to call operations very often, and dispatching costs are negligible. Operation code contains an optimized internal cycle.    Code generation. The code generated for the query has all the indirect calls in it.    This is not done in \"normal\" databases, because it doesn't make sense when running simple queries. However, there are exceptions. For example, MemSQL uses code generation to reduce latency when processing SQL queries. (For comparison, analytical DBMSs require optimization of throughput, not latency.)  Note that for CPU efficiency, the query language must be declarative (SQL or MDX), or at least a vector (J, K). The query should only contain implicit loops, allowing for optimization.", 
            "title": "What is ClickHouse?"
        }, 
        {
            "location": "/index.html#introduction", 
            "text": "", 
            "title": "Introduction"
        }, 
        {
            "location": "/index.html#distinctive-features-of-clickhouse", 
            "text": "", 
            "title": "Distinctive features of ClickHouse"
        }, 
        {
            "location": "/index.html#true-column-oriented-dbms", 
            "text": "In a true column-oriented DBMS, there isn't any \"garbage\" stored with the values. Among other things, this means that constant-length values must be supported, to avoid storing their length \"number\" next to the values. As an example, a billion UInt8-type values should actually consume around 1 GB uncompressed, or this will strongly affect the CPU use. It is very important to store data compactly (without any \"garbage\") even when uncompressed, since the speed of decompression (CPU usage) depends mainly on the volume of uncompressed data.  This is worth noting because there are systems that can store values of separate columns separately, but that can't effectively process analytical queries due to their optimization for other scenarios. Examples are HBase, BigTable, Cassandra, and HyperTable. In these systems, you will get throughput around a hundred thousand rows per second, but not hundreds of millions of rows per second.  Also note that ClickHouse is a DBMS, not a single database. ClickHouse allows creating tables and databases in runtime, loading data, and running queries without reconfiguring and restarting the server.", 
            "title": "True column-oriented DBMS"
        }, 
        {
            "location": "/index.html#data-compression", 
            "text": "Some column-oriented DBMSs (InfiniDB CE and MonetDB) do not use data compression. However, data compression really improves performance.", 
            "title": "Data compression"
        }, 
        {
            "location": "/index.html#disk-storage-of-data", 
            "text": "Many column-oriented DBMSs (such as SAP HANA and Google PowerDrill) can only work in RAM. But even on thousands of servers, the RAM is too small for storing all the pageviews and sessions in Yandex.Metrica.", 
            "title": "Disk storage of data"
        }, 
        {
            "location": "/index.html#parallel-processing-on-multiple-cores", 
            "text": "Large queries are parallelized in a natural way.", 
            "title": "Parallel processing on multiple cores"
        }, 
        {
            "location": "/index.html#distributed-processing-on-multiple-servers", 
            "text": "Almost none of the columnar DBMSs listed above have support for distributed processing.\nIn ClickHouse, data can reside on different shards. Each shard can be a group of replicas that are used for fault tolerance. The query is processed on all the shards in parallel. This is transparent for the user.", 
            "title": "Distributed processing on multiple servers"
        }, 
        {
            "location": "/index.html#sql-support", 
            "text": "If you are familiar with standard SQL, we can't really talk about SQL support.\nAll the functions have different names.\nHowever, this is a declarative query language based on SQL that can't be differentiated from SQL in many instances.\nJOINs are supported. Subqueries are supported in FROM, IN, and JOIN clauses, as well as scalar subqueries.\nDependent subqueries are not supported.", 
            "title": "SQL support"
        }, 
        {
            "location": "/index.html#vector-engine", 
            "text": "Data is not only stored by columns, but is processed by vectors (parts of columns). This allows us to achieve high CPU performance.", 
            "title": "Vector engine"
        }, 
        {
            "location": "/index.html#real-time-data-updates", 
            "text": "ClickHouse supports primary key tables. In order to quickly perform queries on the range of the primary key, the data is sorted incrementally using the merge tree. Due to this, data can continually be added to the table. There is no locking when adding data.", 
            "title": "Real-time data updates"
        }, 
        {
            "location": "/index.html#indexes", 
            "text": "Having a primary key makes it possible to extract data for specific clients (for instance, Yandex.Metrica tracking tags) for a specific time range, with low latency less than several dozen milliseconds.", 
            "title": "Indexes"
        }, 
        {
            "location": "/index.html#suitable-for-online-queries", 
            "text": "This lets us use the system as the back-end for a web interface. Low latency means queries can be processed without delay, while the Yandex.Metrica interface page is loading. In other words, in online mode.", 
            "title": "Suitable for online queries"
        }, 
        {
            "location": "/index.html#support-for-approximated-calculations", 
            "text": "The system contains aggregate functions for approximated calculation of the number of various values, medians, and quantiles.  Supports running a query based on a part (sample) of data and getting an approximated result. In this case, proportionally less data is retrieved from the disk.  Supports running an aggregation for a limited number of random keys, instead of for all keys. Under certain conditions for key distribution in the data, this provides a reasonably accurate result while using fewer resources.", 
            "title": "Support for approximated calculations"
        }, 
        {
            "location": "/index.html#data-replication-and-support-for-data-integrity-on-replicas", 
            "text": "Uses asynchronous multimaster replication. After being written to any available replica, data is distributed to all the remaining replicas. The system maintains identical data on different replicas. Data is restored automatically after a failure, or using a \"button\" for complex cases.\nFor more information, see the section  Data replication .", 
            "title": "Data replication and support for data integrity on replicas"
        }, 
        {
            "location": "/index.html#clickhouse-features-that-can-be-considered-disadvantages", 
            "text": "No transactions.  For aggregation, query results must fit in the RAM on a single server. However, the volume of source data for a query may be indefinitely large.  Lack of full-fledged UPDATE/DELETE implementation.", 
            "title": "ClickHouse features that can be considered disadvantages"
        }, 
        {
            "location": "/index.html#yandexmetrica-use-case", 
            "text": "ClickHouse currently powers  Yandex.Metrica ,  the second largest web analytics platform in the world . With more than 13 trillion records in the database and more than 20 billion events daily, ClickHouse allows you generating custom reports on the fly directly from non-aggregated data.  We need to get custom reports based on hits and sessions, with custom segments set by the user. Data for the reports is updated in real-time. Queries must be run immediately (in online mode). We must be able to build reports for any time period. Complex aggregates must be calculated, such as the number of unique visitors.\nAt this time (April 2014), Yandex.Metrica receives approximately 12 billion events (pageviews and mouse clicks) daily. All these events must be stored in order to build custom reports. A single query may require scanning hundreds of millions of rows over a few seconds, or millions of rows in no more than a few hundred milliseconds.", 
            "title": "Yandex.Metrica use case"
        }, 
        {
            "location": "/index.html#usage-in-yandexmetrica-and-other-yandex-services", 
            "text": "ClickHouse is used for multiple purposes in Yandex.Metrica.\nIts main task is to build reports in online mode using non-aggregated data. It uses a cluster of 374 servers, which store over 20.3 trillion rows in the database. The volume of compressed data, without counting duplication and replication, is about 2 PB. The volume of uncompressed data (in TSV format) would be approximately 17 PB.  ClickHouse is also used for:   Storing data for Session Replay from Yandex.Metrica.  Processing intermediate data.  Building global reports with Analytics.  Running queries for debugging the Yandex.Metrica engine.  Analyzing logs from the API and the user interface.   ClickHouse has at least a dozen installations in other Yandex services: in search verticals, Market, Direct, business analytics, mobile development, AdFox, personal services, and others.", 
            "title": "Usage in Yandex.Metrica and other Yandex services"
        }, 
        {
            "location": "/index.html#aggregated-and-non-aggregated-data", 
            "text": "There is a popular opinion that in order to effectively calculate statistics, you must aggregate data, since this reduces the volume of data.  But data aggregation is a very limited solution, for the following reasons:   You must have a pre-defined list of reports the user will need.  The user can't make custom reports.  When aggregating a large quantity of keys, the volume of data is not reduced, and aggregation is useless.  For a large number of reports, there are too many aggregation variations (combinatorial explosion).  When aggregating keys with high cardinality (such as URLs), the volume of data is not reduced by much (less than twofold).  For this reason, the volume of data with aggregation might grow instead of shrink.  Users do not view all the reports we generate for them. A large portion of calculations are useless.  The logical integrity of data may be violated for various aggregations.   If we do not aggregate anything and work with non-aggregated data, this might actually reduce the volume of calculations.  However, with aggregation, a significant part of the work is taken offline and completed relatively calmly. In contrast, online calculations require calculating as fast as possible, since the user is waiting for the result.  Yandex.Metrica has a specialized system for aggregating data called Metrage, which is used for the majority of reports.\nStarting in 2009, Yandex.Metrica also used a specialized OLAP database for non-aggregated data called OLAPServer, which was previously used for the report builder.\nOLAPServer worked well for non-aggregated data, but it had many restrictions that did not allow it to be used for all reports as desired. These included the lack of support for data types (only numbers), and the inability to incrementally update data in real-time (it could only be done by rewriting data daily). OLAPServer is not a DBMS, but a specialized DB.  To remove the limitations of OLAPServer and solve the problem of working with non-aggregated data for all reports, we developed the ClickHouse DBMS.", 
            "title": "Aggregated and non-aggregated data"
        }, 
        {
            "location": "/index.html#questions-you-were-afraid-to-ask", 
            "text": "", 
            "title": "Questions you were afraid to ask"
        }, 
        {
            "location": "/index.html#why-not-use-something-like-mapreduce", 
            "text": "We can refer to systems like map-reduce as distributed computing systems in which the reduce operation is based on distributed sorting. In this sense, they include Hadoop, and YT (YT is developed at Yandex for internal use).  These systems aren't appropriate for online queries due to their high latency. In other words, they can't be used as the back-end for a web interface.\nThese types of systems aren't useful for real-time data updates.\nDistributed sorting isn't the best way to perform reduce operations if the result of the operation and all the intermediate results (if there are any) are located in the RAM of a single server, which is usually the case for online queries. In such a case, a hash table is the optimal way to perform reduce operations. A common approach to optimizing map-reduce tasks is pre-aggregation (partial reduce) using a hash table in RAM. The user performs this optimization manually.\nDistributed sorting is one of the main causes of reduced performance when running simple map-reduce tasks.  Systems like map-reduce allow executing any code on the cluster. But a declarative query language is better suited to OLAP in order to run experiments quickly. For example, Hadoop has Hive and Pig. Also consider Cloudera Impala, Shark (outdated) for Spark, and Spark SQL, Presto, and Apache Drill. Performance when running such tasks is highly sub-optimal compared to specialized systems, but relatively high latency makes it unrealistic to use these systems as the backend for a web interface.  YT allows storing groups of columns separately. But YT can't be considered a true column-based system because it doesn't have fixed-length data types (for efficiently storing numbers without extra \"garbage\"), and also due to its lack of a vector engine. Tasks are performed  in YT using custom code in streaming mode, so they cannot be optimized enough (up to hundreds of millions of rows per second per server). \"Dynamic table sorting\" is under development in YT using MergeTree, strict value typing, and a query language similar to SQL. Dynamically sorted tables are not appropriate for OLAP tasks because the data is stored by row. The YT query language is still under development, so we can't yet rely on this functionality. YT developers are considering using dynamically sorted tables in OLTP and Key-Value scenarios.", 
            "title": "Why not use something like MapReduce?"
        }, 
        {
            "location": "/index.html#performance", 
            "text": "According to internal testing results, ClickHouse shows the best performance for comparable operating scenarios among systems of its class that were available for testing. This includes the highest throughput for long queries, and the lowest latency on short queries. Testing results are shown on a separate page.", 
            "title": "Performance"
        }, 
        {
            "location": "/index.html#throughput-for-a-single-large-query", 
            "text": "Throughput can be measured in rows per second or in megabytes per second. If the data is placed in the page cache, a query that is not too complex is processed on modern hardware at a speed of approximately 2-10 GB/s of uncompressed data on a single server (for the simplest cases, the speed may reach 30 GB/s). If data is not placed in the page cache, the speed depends on the disk subsystem and the data compression rate. For example, if the disk subsystem allows reading data at 400 MB/s, and the data compression rate is 3, the speed will be around 1.2 GB/s. To get the speed in rows per second, divide the speed in bytes per second by the total size of the columns used in the query. For example, if 10 bytes of columns are extracted, the speed will be around 100-200 million rows per second.  The processing speed increases almost linearly for distributed processing, but only if the number of rows resulting from aggregation or sorting is not too large.", 
            "title": "Throughput for a single large query"
        }, 
        {
            "location": "/index.html#latency-when-processing-short-queries", 
            "text": "If a query uses a primary key and does not select too many rows to process (hundreds of thousands), and does not use too many columns, we can expect less than 50 milliseconds of latency (single digits of milliseconds in the best case) if data is placed in the page cache. Otherwise, latency is calculated from the number of seeks. If you use rotating drives, for a system that is not overloaded, the latency is calculated by this formula: seek time (10 ms) * number of columns queried * number of data parts.", 
            "title": "Latency when processing short queries"
        }, 
        {
            "location": "/index.html#throughput-when-processing-a-large-quantity-of-short-queries", 
            "text": "Under the same conditions, ClickHouse can handle several hundred queries per second on a single server (up to several thousand in the best case). Since this scenario is not typical for analytical DBMSs, we recommend expecting a maximum of 100 queries per second.", 
            "title": "Throughput when processing a large quantity of short queries"
        }, 
        {
            "location": "/index.html#performance-when-inserting-data", 
            "text": "We recommend inserting data in packets of at least 1000 rows, or no more than a single request per second. When inserting to a MergeTree table from a tab-separated dump, the insertion speed will be from 50 to 200 MB/s. If the inserted rows are around 1 Kb in size, the speed will be from 50,000 to 200,000 rows per second. If the rows are small, the performance will be higher in rows per second (on Banner System data -  500,000 rows per second; on Graphite data -  1,000,000 rows per second). To improve performance, you can make multiple INSERT queries in parallel, and performance will increase linearly.", 
            "title": "Performance when inserting data"
        }, 
        {
            "location": "/index.html#getting-started", 
            "text": "", 
            "title": "Getting started"
        }, 
        {
            "location": "/index.html#system-requirements", 
            "text": "This is not a cross-platform system. It requires Linux Ubuntu Precise (12.04) or newer, with x86_64 architecture and support for the SSE 4.2 instruction set.\nTo check for SSE 4.2:  grep -q sse4_2 /proc/cpuinfo    echo   SSE 4.2 supported   ||   echo   SSE 4.2 not supported   We recommend using Ubuntu Trusty, Ubuntu Xenial, or Ubuntu Precise.\nThe terminal must use UTF-8 encoding (the default in Ubuntu).", 
            "title": "System requirements"
        }, 
        {
            "location": "/index.html#installation", 
            "text": "For testing and development, the system can be installed on a single server or on a desktop computer.", 
            "title": "Installation"
        }, 
        {
            "location": "/index.html#installing-from-packages-for-debianubuntu", 
            "text": "In  /etc/apt/sources.list  (or in a separate  /etc/apt/sources.list.d/clickhouse.list  file), add the repository:  deb http://repo.yandex.ru/clickhouse/deb/stable/ main/  If you want to use the most recent test version, replace 'stable' with 'testing'.  Then run:  sudo apt-key adv --keyserver keyserver.ubuntu.com --recv E0C56BD4     # optional \nsudo apt-get update\nsudo apt-get install clickhouse-client clickhouse-server  You can also download and install packages manually from here:  https://repo.yandex.ru/clickhouse/deb/stable/main/ .  ClickHouse contains access restriction settings. They are located in the 'users.xml' file (next to 'config.xml').\nBy default, access is allowed from anywhere for the 'default' user, without a password. See 'user/default/networks'.\nFor more information, see the section \"Configuration files\".", 
            "title": "Installing from packages for Debian/Ubuntu"
        }, 
        {
            "location": "/index.html#installing-from-sources", 
            "text": "To compile, follow the instructions: build.md  You can compile packages and install them.\nYou can also use programs without installing packages.  Client: dbms/src/Client/\nServer: dbms/src/Server/  For the server, create a catalog with data, such as:  /opt/clickhouse/data/default/\n/opt/clickhouse/metadata/default/  (Configurable in the server config.)\nRun 'chown' for the desired user.  Note the path to logs in the server config (src/dbms/src/Server/config.xml).", 
            "title": "Installing from sources"
        }, 
        {
            "location": "/index.html#other-installation-methods", 
            "text": "Docker image:  https://hub.docker.com/r/yandex/clickhouse-server/  RPM packages for CentOS or RHEL:  https://github.com/Altinity/clickhouse-rpm-install  Gentoo overlay:  https://github.com/kmeaw/clickhouse-overlay", 
            "title": "Other installation methods"
        }, 
        {
            "location": "/index.html#launch", 
            "text": "To start the server (as a daemon), run:  sudo service clickhouse-server start  See the logs in the  /var/log/clickhouse-server/ directory.  If the server doesn't start, check the configurations in the file  /etc/clickhouse-server/config.xml.  You can also launch the server from the console:  clickhouse-server --config-file = /etc/clickhouse-server/config.xml  In this case, the log will be printed to the console, which is convenient during development.\nIf the configuration file is in the current directory, you don't need to specify the '--config-file' parameter. By default, it uses './config.xml'.  You can use the command-line client to connect to the server:  clickhouse-client  The default parameters indicate connecting with localhost:9000 on behalf of the user 'default' without a password.\nThe client can be used for connecting to a remote server. Example:  clickhouse-client --host = example.com  For more information, see the section \"Command-line client\".  Checking the system:  milovidov@hostname:~/work/metrica/src/dbms/src/Client$ ./clickhouse-client\nClickHouse client version  0 .0.18749.\nConnecting to localhost:9000.\nConnected to ClickHouse server version  0 .0.18749.\n\n: )  SELECT  1 \n\nSELECT  1 \n\n\u250c\u25001\u2500\u2510\n\u2502  1  \u2502\n\u2514\u2500\u2500\u2500\u2518 1  rows in set. Elapsed:  0 .003 sec.\n\n: )   Congratulations, the system works!  To continue experimenting, you can try to download from the test data sets.", 
            "title": "Launch"
        }, 
        {
            "location": "/index.html#ontime", 
            "text": "This performance test was created by Vadim Tkachenko. See:   https://www.percona.com/blog/2009/10/02/analyzing-air-traffic-performance-with-infobright-and-monetdb/  https://www.percona.com/blog/2009/10/26/air-traffic-queries-in-luciddb/  https://www.percona.com/blog/2009/11/02/air-traffic-queries-in-infinidb-early-alpha/  https://www.percona.com/blog/2014/04/21/using-apache-hadoop-and-impala-together-with-mysql-for-data-analysis/  https://www.percona.com/blog/2016/01/07/apache-spark-with-air-ontime-performance-data/  http://nickmakos.blogspot.ru/2012/08/analyzing-air-traffic-performance-with.html   Downloading data:  for  s in  ` seq  1987   2017 `  do  for  m in  ` seq  1   12 `  do \nwget http://transtats.bts.gov/PREZIP/On_Time_On_Time_Performance_ ${ s } _ ${ m } .zip done  done   (from  https://github.com/Percona-Lab/ontime-airline-performance/blob/master/download.sh  )  Creating a table:  CREATE   TABLE   ` ontime `   ( \n   ` Year `   UInt16 , \n   ` Quarter `   UInt8 , \n   ` Month `   UInt8 , \n   ` DayofMonth `   UInt8 , \n   ` DayOfWeek `   UInt8 , \n   ` FlightDate `   Date , \n   ` UniqueCarrier `   FixedString ( 7 ), \n   ` AirlineID `   Int32 , \n   ` Carrier `   FixedString ( 2 ), \n   ` TailNum `   String , \n   ` FlightNum `   String , \n   ` OriginAirportID `   Int32 , \n   ` OriginAirportSeqID `   Int32 , \n   ` OriginCityMarketID `   Int32 , \n   ` Origin `   FixedString ( 5 ), \n   ` OriginCityName `   String , \n   ` OriginState `   FixedString ( 2 ), \n   ` OriginStateFips `   String , \n   ` OriginStateName `   String , \n   ` OriginWac `   Int32 , \n   ` DestAirportID `   Int32 , \n   ` DestAirportSeqID `   Int32 , \n   ` DestCityMarketID `   Int32 , \n   ` Dest `   FixedString ( 5 ), \n   ` DestCityName `   String , \n   ` DestState `   FixedString ( 2 ), \n   ` DestStateFips `   String , \n   ` DestStateName `   String , \n   ` DestWac `   Int32 , \n   ` CRSDepTime `   Int32 , \n   ` DepTime `   Int32 , \n   ` DepDelay `   Int32 , \n   ` DepDelayMinutes `   Int32 , \n   ` DepDel15 `   Int32 , \n   ` DepartureDelayGroups `   String , \n   ` DepTimeBlk `   String , \n   ` TaxiOut `   Int32 , \n   ` WheelsOff `   Int32 , \n   ` WheelsOn `   Int32 , \n   ` TaxiIn `   Int32 , \n   ` CRSArrTime `   Int32 , \n   ` ArrTime `   Int32 , \n   ` ArrDelay `   Int32 , \n   ` ArrDelayMinutes `   Int32 , \n   ` ArrDel15 `   Int32 , \n   ` ArrivalDelayGroups `   Int32 , \n   ` ArrTimeBlk `   String , \n   ` Cancelled `   UInt8 , \n   ` CancellationCode `   FixedString ( 1 ), \n   ` Diverted `   UInt8 , \n   ` CRSElapsedTime `   Int32 , \n   ` ActualElapsedTime `   Int32 , \n   ` AirTime `   Int32 , \n   ` Flights `   Int32 , \n   ` Distance `   Int32 , \n   ` DistanceGroup `   UInt8 , \n   ` CarrierDelay `   Int32 , \n   ` WeatherDelay `   Int32 , \n   ` NASDelay `   Int32 , \n   ` SecurityDelay `   Int32 , \n   ` LateAircraftDelay `   Int32 , \n   ` FirstDepTime `   String , \n   ` TotalAddGTime `   String , \n   ` LongestAddGTime `   String , \n   ` DivAirportLandings `   String , \n   ` DivReachedDest `   String , \n   ` DivActualElapsedTime `   String , \n   ` DivArrDelay `   String , \n   ` DivDistance `   String , \n   ` Div1Airport `   String , \n   ` Div1AirportID `   Int32 , \n   ` Div1AirportSeqID `   Int32 , \n   ` Div1WheelsOn `   String , \n   ` Div1TotalGTime `   String , \n   ` Div1LongestGTime `   String , \n   ` Div1WheelsOff `   String , \n   ` Div1TailNum `   String , \n   ` Div2Airport `   String , \n   ` Div2AirportID `   Int32 , \n   ` Div2AirportSeqID `   Int32 , \n   ` Div2WheelsOn `   String , \n   ` Div2TotalGTime `   String , \n   ` Div2LongestGTime `   String , \n   ` Div2WheelsOff `   String , \n   ` Div2TailNum `   String , \n   ` Div3Airport `   String , \n   ` Div3AirportID `   Int32 , \n   ` Div3AirportSeqID `   Int32 , \n   ` Div3WheelsOn `   String , \n   ` Div3TotalGTime `   String , \n   ` Div3LongestGTime `   String , \n   ` Div3WheelsOff `   String , \n   ` Div3TailNum `   String , \n   ` Div4Airport `   String , \n   ` Div4AirportID `   Int32 , \n   ` Div4AirportSeqID `   Int32 , \n   ` Div4WheelsOn `   String , \n   ` Div4TotalGTime `   String , \n   ` Div4LongestGTime `   String , \n   ` Div4WheelsOff `   String , \n   ` Div4TailNum `   String , \n   ` Div5Airport `   String , \n   ` Div5AirportID `   Int32 , \n   ` Div5AirportSeqID `   Int32 , \n   ` Div5WheelsOn `   String , \n   ` Div5TotalGTime `   String , \n   ` Div5LongestGTime `   String , \n   ` Div5WheelsOff `   String , \n   ` Div5TailNum `   String  )   ENGINE   =   MergeTree ( FlightDate ,   ( Year ,   FlightDate ),   8192 )   Loading data:  for  i in *.zip ;   do   echo   $i ;  unzip -cq  $i   *.csv   |  sed  s/\\.00//g   |  clickhouse-client --host = example-perftest01j --query = INSERT INTO ontime FORMAT CSVWithNames ;   done   Queries:  Q0.  select   avg ( c1 )   from   ( select   Year ,   Month ,   count ( * )   as   c1   from   ontime   group   by   Year ,   Month );   Q1. The number of flights per day from the year 2000 to 2008  SELECT   DayOfWeek ,   count ( * )   AS   c   FROM   ontime   WHERE   Year   =   2000   AND   Year   =   2008   GROUP   BY   DayOfWeek   ORDER   BY   c   DESC ;   Q2. The number of flights delayed by more than 10 minutes, grouped by the day of the week, for 2000-2008  SELECT   DayOfWeek ,   count ( * )   AS   c   FROM   ontime   WHERE   DepDelay 10   AND   Year   =   2000   AND   Year   =   2008   GROUP   BY   DayOfWeek   ORDER   BY   c   DESC   Q3. The number of delays by airport for 2000-2008  SELECT   Origin ,   count ( * )   AS   c   FROM   ontime   WHERE   DepDelay 10   AND   Year   =   2000   AND   Year   =   2008   GROUP   BY   Origin   ORDER   BY   c   DESC   LIMIT   10   Q4. The number of delays by carrier for 2007  SELECT   Carrier ,   count ( * )   FROM   ontime   WHERE   DepDelay 10    AND   Year   =   2007   GROUP   BY   Carrier   ORDER   BY   count ( * )   DESC   Q5. The percentage of delays by carrier for 2007  SELECT   Carrier ,   c ,   c2 ,   c * 1000 / c2   as   c3  FROM  ( \n     SELECT \n         Carrier , \n         count ( * )   AS   c \n     FROM   ontime \n     WHERE   DepDelay 10 \n         AND   Year = 2007 \n     GROUP   BY   Carrier  )  ANY   INNER   JOIN  ( \n     SELECT \n         Carrier , \n         count ( * )   AS   c2 \n     FROM   ontime \n     WHERE   Year = 2007 \n     GROUP   BY   Carrier  )   USING   Carrier  ORDER   BY   c3   DESC ;   Better version of the same query:  SELECT   Carrier ,   avg ( DepDelay     10 )   *   1000   AS   c3   FROM   ontime   WHERE   Year   =   2007   GROUP   BY   Carrier   ORDER   BY   Carrier   Q6. The previous request for a broader range of years, 2000-2008  SELECT   Carrier ,   c ,   c2 ,   c * 1000 / c2   as   c3  FROM  ( \n     SELECT \n         Carrier , \n         count ( * )   AS   c \n     FROM   ontime \n     WHERE   DepDelay 10 \n         AND   Year   =   2000   AND   Year   =   2008 \n     GROUP   BY   Carrier  )  ANY   INNER   JOIN  ( \n     SELECT \n         Carrier , \n         count ( * )   AS   c2 \n     FROM   ontime \n     WHERE   Year   =   2000   AND   Year   =   2008 \n     GROUP   BY   Carrier  )   USING   Carrier  ORDER   BY   c3   DESC ;   Better version of the same query:  SELECT   Carrier ,   avg ( DepDelay     10 )   *   1000   AS   c3   FROM   ontime   WHERE   Year   =   2000   AND   Year   =   2008   GROUP   BY   Carrier   ORDER   BY   Carrier   Q7. Percentage of flights delayed for more than 10 minutes, by year  SELECT   Year ,   c1 / c2  FROM  ( \n     select \n         Year , \n         count ( * ) * 1000   as   c1 \n     from   ontime \n     WHERE   DepDelay 10 \n     GROUP   BY   Year  )  ANY   INNER   JOIN  ( \n     select \n         Year , \n         count ( * )   as   c2 \n     from   ontime \n     GROUP   BY   Year  )   USING   ( Year )  ORDER   BY   Year   Better version of the same query:  SELECT   Year ,   avg ( DepDelay     10 )   FROM   ontime   GROUP   BY   Year   ORDER   BY   Year   Q8. The most popular destinations by the number of directly connected cities for various year ranges  SELECT   DestCityName ,   uniqExact ( OriginCityName )   AS   u   FROM   ontime   WHERE   Year   =   2000   and   Year   =   2010   GROUP   BY   DestCityName   ORDER   BY   u   DESC   LIMIT   10 ;   Q9.  select   Year ,   count ( * )   as   c1   from   ontime   group   by   Year ;   Q10.  select \n    min ( Year ),   max ( Year ),   Carrier ,   count ( * )   as   cnt , \n    sum ( ArrDelayMinutes 30 )   as   flights_delayed , \n    round ( sum ( ArrDelayMinutes 30 ) / count ( * ), 2 )   as   rate  FROM   ontime  WHERE \n    DayOfWeek   not   in   ( 6 , 7 )   and   OriginState   not   in   ( AK ,   HI ,   PR ,   VI ) \n    and   DestState   not   in   ( AK ,   HI ,   PR ,   VI ) \n    and   FlightDate     2010-01-01  GROUP   by   Carrier  HAVING   cnt     100000   and   max ( Year )     1990  ORDER   by   rate   DESC  LIMIT   1000 ;   Bonus:  SELECT   avg ( cnt )   FROM   ( SELECT   Year , Month , count ( * )   AS   cnt   FROM   ontime   WHERE   DepDel15 = 1   GROUP   BY   Year , Month )  select   avg ( c1 )   from   ( select   Year , Month , count ( * )   as   c1   from   ontime   group   by   Year , Month )  SELECT   DestCityName ,   uniqExact ( OriginCityName )   AS   u   FROM   ontime   GROUP   BY   DestCityName   ORDER   BY   u   DESC   LIMIT   10 ;  SELECT   OriginCityName ,   DestCityName ,   count ()   AS   c   FROM   ontime   GROUP   BY   OriginCityName ,   DestCityName   ORDER   BY   c   DESC   LIMIT   10 ;  SELECT   OriginCityName ,   count ()   AS   c   FROM   ontime   GROUP   BY   OriginCityName   ORDER   BY   c   DESC   LIMIT   10 ;", 
            "title": "OnTime"
        }, 
        {
            "location": "/index.html#new-york-taxi-data", 
            "text": "", 
            "title": "New York Taxi data"
        }, 
        {
            "location": "/index.html#how-to-import-the-raw-data", 
            "text": "See  https://github.com/toddwschneider/nyc-taxi-data  and  http://tech.marksblogg.com/billion-nyc-taxi-rides-redshift.html  for the description of the dataset and instructions for downloading.  Downloading will result in about 227 GB of uncompressed data in CSV files. The download takes about an hour over a 1 Gbit connection (parallel downloading from s3.amazonaws.com recovers at least half of a 1 Gbit channel).\nSome of the files might not download fully. Check the file sizes and re-download any that seem doubtful.  Some of the files might contain invalid rows. You can fix them as follows:  sed -E  /(.*,){18,}/d  data/yellow_tripdata_2010-02.csv   data/yellow_tripdata_2010-02.csv_\nsed -E  /(.*,){18,}/d  data/yellow_tripdata_2010-03.csv   data/yellow_tripdata_2010-03.csv_\nmv data/yellow_tripdata_2010-02.csv_ data/yellow_tripdata_2010-02.csv\nmv data/yellow_tripdata_2010-03.csv_ data/yellow_tripdata_2010-03.csv  Then the data must be pre-processed in PostgreSQL. This will create selections of points in the polygons (to match points on the map with the boroughs of New York City) and combine all the data into a single denormalized flat table by using a JOIN. To do this, you will need to install PostgreSQL with PostGIS support.  Be careful when running  initialize_database.sh  and manually re-check that all the tables were created correctly.  It takes about 20-30 minutes to process each month's worth of data in PostgreSQL, for a total of about 48 hours.  You can check the number of downloaded rows as follows:  time psql nyc-taxi-data -c  SELECT count(*) FROM trips; \n###    count\n 1298979494\n(1 row)\n\nreal    7m9.164s  (This is slightly more than 1.1 billion rows reported by Mark Litwintschik in a series of blog posts.)  The data in PostgreSQL uses 370 GB of space.  Exporting the data from PostgreSQL:  COPY  ( \n     SELECT   trips . id , \n            trips . vendor_id , \n            trips . pickup_datetime , \n            trips . dropoff_datetime , \n            trips . store_and_fwd_flag , \n            trips . rate_code_id , \n            trips . pickup_longitude , \n            trips . pickup_latitude , \n            trips . dropoff_longitude , \n            trips . dropoff_latitude , \n            trips . passenger_count , \n            trips . trip_distance , \n            trips . fare_amount , \n            trips . extra , \n            trips . mta_tax , \n            trips . tip_amount , \n            trips . tolls_amount , \n            trips . ehail_fee , \n            trips . improvement_surcharge , \n            trips . total_amount , \n            trips . payment_type , \n            trips . trip_type , \n            trips . pickup , \n            trips . dropoff , \n\n            cab_types . type   cab_type , \n\n            weather . precipitation_tenths_of_mm   rain , \n            weather . snow_depth_mm , \n            weather . snowfall_mm , \n            weather . max_temperature_tenths_degrees_celsius   max_temp , \n            weather . min_temperature_tenths_degrees_celsius   min_temp , \n            weather . average_wind_speed_tenths_of_meters_per_second   wind , \n\n            pick_up . gid   pickup_nyct2010_gid , \n            pick_up . ctlabel   pickup_ctlabel , \n            pick_up . borocode   pickup_borocode , \n            pick_up . boroname   pickup_boroname , \n            pick_up . ct2010   pickup_ct2010 , \n            pick_up . boroct2010   pickup_boroct2010 , \n            pick_up . cdeligibil   pickup_cdeligibil , \n            pick_up . ntacode   pickup_ntacode , \n            pick_up . ntaname   pickup_ntaname , \n            pick_up . puma   pickup_puma , \n\n            drop_off . gid   dropoff_nyct2010_gid , \n            drop_off . ctlabel   dropoff_ctlabel , \n            drop_off . borocode   dropoff_borocode , \n            drop_off . boroname   dropoff_boroname , \n            drop_off . ct2010   dropoff_ct2010 , \n            drop_off . boroct2010   dropoff_boroct2010 , \n            drop_off . cdeligibil   dropoff_cdeligibil , \n            drop_off . ntacode   dropoff_ntacode , \n            drop_off . ntaname   dropoff_ntaname , \n            drop_off . puma   dropoff_puma \n     FROM   trips \n     LEFT   JOIN   cab_types \n         ON   trips . cab_type_id   =   cab_types . id \n     LEFT   JOIN   central_park_weather_observations_raw   weather \n         ON   weather . date   =   trips . pickup_datetime :: date \n     LEFT   JOIN   nyct2010   pick_up \n         ON   pick_up . gid   =   trips . pickup_nyct2010_gid \n     LEFT   JOIN   nyct2010   drop_off \n         ON   drop_off . gid   =   trips . dropoff_nyct2010_gid  )   TO   /opt/milovidov/nyc-taxi-data/trips.tsv ;   The data snapshot is created at a speed of about 50 MB per second. While creating the snapshot, PostgreSQL reads from the disk at a speed of about 28 MB per second.\nThis takes about 5 hours. The resulting TSV file is 590612904969 bytes.  Create a temporary table in ClickHouse:  CREATE   TABLE   trips  (  trip_id                   UInt32 ,  vendor_id                 String ,  pickup_datetime           DateTime ,  dropoff_datetime          Nullable ( DateTime ),  store_and_fwd_flag        Nullable ( FixedString ( 1 )),  rate_code_id              Nullable ( UInt8 ),  pickup_longitude          Nullable ( Float64 ),  pickup_latitude           Nullable ( Float64 ),  dropoff_longitude         Nullable ( Float64 ),  dropoff_latitude          Nullable ( Float64 ),  passenger_count           Nullable ( UInt8 ),  trip_distance             Nullable ( Float64 ),  fare_amount               Nullable ( Float32 ),  extra                     Nullable ( Float32 ),  mta_tax                   Nullable ( Float32 ),  tip_amount                Nullable ( Float32 ),  tolls_amount              Nullable ( Float32 ),  ehail_fee                 Nullable ( Float32 ),  improvement_surcharge     Nullable ( Float32 ),  total_amount              Nullable ( Float32 ),  payment_type              Nullable ( String ),  trip_type                 Nullable ( UInt8 ),  pickup                    Nullable ( String ),  dropoff                   Nullable ( String ),  cab_type                  Nullable ( String ),  precipitation             Nullable ( UInt8 ),  snow_depth                Nullable ( UInt8 ),  snowfall                  Nullable ( UInt8 ),  max_temperature           Nullable ( UInt8 ),  min_temperature           Nullable ( UInt8 ),  average_wind_speed        Nullable ( UInt8 ),  pickup_nyct2010_gid       Nullable ( UInt8 ),  pickup_ctlabel            Nullable ( String ),  pickup_borocode           Nullable ( UInt8 ),  pickup_boroname           Nullable ( String ),  pickup_ct2010             Nullable ( String ),  pickup_boroct2010         Nullable ( String ),  pickup_cdeligibil         Nullable ( FixedString ( 1 )),  pickup_ntacode            Nullable ( String ),  pickup_ntaname            Nullable ( String ),  pickup_puma               Nullable ( String ),  dropoff_nyct2010_gid      Nullable ( UInt8 ),  dropoff_ctlabel           Nullable ( String ),  dropoff_borocode          Nullable ( UInt8 ),  dropoff_boroname          Nullable ( String ),  dropoff_ct2010            Nullable ( String ),  dropoff_boroct2010        Nullable ( String ),  dropoff_cdeligibil        Nullable ( String ),  dropoff_ntacode           Nullable ( String ),  dropoff_ntaname           Nullable ( String ),  dropoff_puma              Nullable ( String )  )   ENGINE   =   Log ;   It is needed for converting fields to more correct data types and, if possible, to eliminate NULLs.  time clickhouse-client --query= INSERT INTO trips FORMAT TabSeparated    trips.tsv\n\nreal    75m56.214s  Data is read at a speed of 112-140 Mb/second.\nLoading data into a Log type table in one stream took 76 minutes.\nThe data in this table uses 142 GB.  (Importing data directly from Postgres is also possible using  COPY ... TO PROGRAM .)  Unfortunately, all the fields associated with the weather (precipitation...average_wind_speed) were filled with NULL. Because of this, we will remove them from the final data set.  To start, we'll create a table on a single server. Later we will make the table distributed.  Create and populate a summary table:  CREATE TABLE trips_mergetree\nENGINE = MergeTree(pickup_date, pickup_datetime, 8192)\nAS SELECT\n\ntrip_id,\nCAST(vendor_id AS Enum8( 1  = 1,  2  = 2,  CMT  = 3,  VTS  = 4,  DDS  = 5,  B02512  = 10,  B02598  = 11,  B02617  = 12,  B02682  = 13,  B02764  = 14)) AS vendor_id,\ntoDate(pickup_datetime) AS pickup_date,\nifNull(pickup_datetime, toDateTime(0)) AS pickup_datetime,\ntoDate(dropoff_datetime) AS dropoff_date,\nifNull(dropoff_datetime, toDateTime(0)) AS dropoff_datetime,\nassumeNotNull(store_and_fwd_flag) IN ( Y ,  1 ,  2 ) AS store_and_fwd_flag,\nassumeNotNull(rate_code_id) AS rate_code_id,\nassumeNotNull(pickup_longitude) AS pickup_longitude,\nassumeNotNull(pickup_latitude) AS pickup_latitude,\nassumeNotNull(dropoff_longitude) AS dropoff_longitude,\nassumeNotNull(dropoff_latitude) AS dropoff_latitude,\nassumeNotNull(passenger_count) AS passenger_count,\nassumeNotNull(trip_distance) AS trip_distance,\nassumeNotNull(fare_amount) AS fare_amount,\nassumeNotNull(extra) AS extra,\nassumeNotNull(mta_tax) AS mta_tax,\nassumeNotNull(tip_amount) AS tip_amount,\nassumeNotNull(tolls_amount) AS tolls_amount,\nassumeNotNull(ehail_fee) AS ehail_fee,\nassumeNotNull(improvement_surcharge) AS improvement_surcharge,\nassumeNotNull(total_amount) AS total_amount,\nCAST((assumeNotNull(payment_type) AS pt) IN ( CSH ,  CASH ,  Cash ,  CAS ,  Cas ,  1 ) ?  CSH  : (pt IN ( CRD ,  Credit ,  Cre ,  CRE ,  CREDIT ,  2 ) ?  CRE  : (pt IN ( NOC ,  No Charge ,  No ,  3 ) ?  NOC  : (pt IN ( DIS ,  Dispute ,  Dis ,  4 ) ?  DIS  :  UNK ))) AS Enum8( CSH  = 1,  CRE  = 2,  UNK  = 0,  NOC  = 3,  DIS  = 4)) AS payment_type_,\nassumeNotNull(trip_type) AS trip_type,\nifNull(toFixedString(unhex(pickup), 25), toFixedString( , 25)) AS pickup,\nifNull(toFixedString(unhex(dropoff), 25), toFixedString( , 25)) AS dropoff,\nCAST(assumeNotNull(cab_type) AS Enum8( yellow  = 1,  green  = 2,  uber  = 3)) AS cab_type,\n\nassumeNotNull(pickup_nyct2010_gid) AS pickup_nyct2010_gid,\ntoFloat32(ifNull(pickup_ctlabel,  0 )) AS pickup_ctlabel,\nassumeNotNull(pickup_borocode) AS pickup_borocode,\nCAST(assumeNotNull(pickup_boroname) AS Enum8( Manhattan  = 1,  Queens  = 4,  Brooklyn  = 3,   = 0,  Bronx  = 2,  Staten Island  = 5)) AS pickup_boroname,\ntoFixedString(ifNull(pickup_ct2010,  000000 ), 6) AS pickup_ct2010,\ntoFixedString(ifNull(pickup_boroct2010,  0000000 ), 7) AS pickup_boroct2010,\nCAST(assumeNotNull(ifNull(pickup_cdeligibil,    )) AS Enum8(    = 0,  E  = 1,  I  = 2)) AS pickup_cdeligibil,\ntoFixedString(ifNull(pickup_ntacode,  0000 ), 4) AS pickup_ntacode,\n\nCAST(assumeNotNull(pickup_ntaname) AS Enum16(  = 0,  Airport  = 1,  Allerton-Pelham Gardens  = 2,  Annadale-Huguenot-Prince\\ s Bay-Eltingville  = 3,  Arden Heights  = 4,  Astoria  = 5,  Auburndale  = 6,  Baisley Park  = 7,  Bath Beach  = 8,  Battery Park City-Lower Manhattan  = 9,  Bay Ridge  = 10,  Bayside-Bayside Hills  = 11,  Bedford  = 12,  Bedford Park-Fordham North  = 13,  Bellerose  = 14,  Belmont  = 15,  Bensonhurst East  = 16,  Bensonhurst West  = 17,  Borough Park  = 18,  Breezy Point-Belle Harbor-Rockaway Park-Broad Channel  = 19,  Briarwood-Jamaica Hills  = 20,  Brighton Beach  = 21,  Bronxdale  = 22,  Brooklyn Heights-Cobble Hill  = 23,  Brownsville  = 24,  Bushwick North  = 25,  Bushwick South  = 26,  Cambria Heights  = 27,  Canarsie  = 28,  Carroll Gardens-Columbia Street-Red Hook  = 29,  Central Harlem North-Polo Grounds  = 30,  Central Harlem South  = 31,  Charleston-Richmond Valley-Tottenville  = 32,  Chinatown  = 33,  Claremont-Bathgate  = 34,  Clinton  = 35,  Clinton Hill  = 36,  Co-op City  = 37,  College Point  = 38,  Corona  = 39,  Crotona Park East  = 40,  Crown Heights North  = 41,  Crown Heights South  = 42,  Cypress Hills-City Line  = 43,  DUMBO-Vinegar Hill-Downtown Brooklyn-Boerum Hill  = 44,  Douglas Manor-Douglaston-Little Neck  = 45,  Dyker Heights  = 46,  East Concourse-Concourse Village  = 47,  East Elmhurst  = 48,  East Flatbush-Farragut  = 49,  East Flushing  = 50,  East Harlem North  = 51,  East Harlem South  = 52,  East New York  = 53,  East New York (Pennsylvania Ave)  = 54,  East Tremont  = 55,  East Village  = 56,  East Williamsburg  = 57,  Eastchester-Edenwald-Baychester  = 58,  Elmhurst  = 59,  Elmhurst-Maspeth  = 60,  Erasmus  = 61,  Far Rockaway-Bayswater  = 62,  Flatbush  = 63,  Flatlands  = 64,  Flushing  = 65,  Fordham South  = 66,  Forest Hills  = 67,  Fort Greene  = 68,  Fresh Meadows-Utopia  = 69,  Ft. Totten-Bay Terrace-Clearview  = 70,  Georgetown-Marine Park-Bergen Beach-Mill Basin  = 71,  Glen Oaks-Floral Park-New Hyde Park  = 72,  Glendale  = 73,  Gramercy  = 74,  Grasmere-Arrochar-Ft. Wadsworth  = 75,  Gravesend  = 76,  Great Kills  = 77,  Greenpoint  = 78,  Grymes Hill-Clifton-Fox Hills  = 79,  Hamilton Heights  = 80,  Hammels-Arverne-Edgemere  = 81,  Highbridge  = 82,  Hollis  = 83,  Homecrest  = 84,  Hudson Yards-Chelsea-Flatiron-Union Square  = 85,  Hunters Point-Sunnyside-West Maspeth  = 86,  Hunts Point  = 87,  Jackson Heights  = 88,  Jamaica  = 89,  Jamaica Estates-Holliswood  = 90,  Kensington-Ocean Parkway  = 91,  Kew Gardens  = 92,  Kew Gardens Hills  = 93,  Kingsbridge Heights  = 94,  Laurelton  = 95,  Lenox Hill-Roosevelt Island  = 96,  Lincoln Square  = 97,  Lindenwood-Howard Beach  = 98,  Longwood  = 99,  Lower East Side  = 100,  Madison  = 101,  Manhattanville  = 102,  Marble Hill-Inwood  = 103,  Mariner\\ s Harbor-Arlington-Port Ivory-Graniteville  = 104,  Maspeth  = 105,  Melrose South-Mott Haven North  = 106,  Middle Village  = 107,  Midtown-Midtown South  = 108,  Midwood  = 109,  Morningside Heights  = 110,  Morrisania-Melrose  = 111,  Mott Haven-Port Morris  = 112,  Mount Hope  = 113,  Murray Hill  = 114,  Murray Hill-Kips Bay  = 115,  New Brighton-Silver Lake  = 116,  New Dorp-Midland Beach  = 117,  New Springville-Bloomfield-Travis  = 118,  North Corona  = 119,  North Riverdale-Fieldston-Riverdale  = 120,  North Side-South Side  = 121,  Norwood  = 122,  Oakland Gardens  = 123,  Oakwood-Oakwood Beach  = 124,  Ocean Hill  = 125,  Ocean Parkway South  = 126,  Old Astoria  = 127,  Old Town-Dongan Hills-South Beach  = 128,  Ozone Park  = 129,  Park Slope-Gowanus  = 130,  Parkchester  = 131,  Pelham Bay-Country Club-City Island  = 132,  Pelham Parkway  = 133,  Pomonok-Flushing Heights-Hillcrest  = 134,  Port Richmond  = 135,  Prospect Heights  = 136,  Prospect Lefferts Gardens-Wingate  = 137,  Queens Village  = 138,  Queensboro Hill  = 139,  Queensbridge-Ravenswood-Long Island City  = 140,  Rego Park  = 141,  Richmond Hill  = 142,  Ridgewood  = 143,  Rikers Island  = 144,  Rosedale  = 145,  Rossville-Woodrow  = 146,  Rugby-Remsen Village  = 147,  Schuylerville-Throgs Neck-Edgewater Park  = 148,  Seagate-Coney Island  = 149,  Sheepshead Bay-Gerritsen Beach-Manhattan Beach  = 150,  SoHo-TriBeCa-Civic Center-Little Italy  = 151,  Soundview-Bruckner  = 152,  Soundview-Castle Hill-Clason Point-Harding Park  = 153,  South Jamaica  = 154,  South Ozone Park  = 155,  Springfield Gardens North  = 156,  Springfield Gardens South-Brookville  = 157,  Spuyten Duyvil-Kingsbridge  = 158,  St. Albans  = 159,  Stapleton-Rosebank  = 160,  Starrett City  = 161,  Steinway  = 162,  Stuyvesant Heights  = 163,  Stuyvesant Town-Cooper Village  = 164,  Sunset Park East  = 165,  Sunset Park West  = 166,  Todt Hill-Emerson Hill-Heartland Village-Lighthouse Hill  = 167,  Turtle Bay-East Midtown  = 168,  University Heights-Morris Heights  = 169,  Upper East Side-Carnegie Hill  = 170,  Upper West Side  = 171,  Van Cortlandt Village  = 172,  Van Nest-Morris Park-Westchester Square  = 173,  Washington Heights North  = 174,  Washington Heights South  = 175,  West Brighton  = 176,  West Concourse  = 177,  West Farms-Bronx River  = 178,  West New Brighton-New Brighton-St. George  = 179,  West Village  = 180,  Westchester-Unionport  = 181,  Westerleigh  = 182,  Whitestone  = 183,  Williamsbridge-Olinville  = 184,  Williamsburg  = 185,  Windsor Terrace  = 186,  Woodhaven  = 187,  Woodlawn-Wakefield  = 188,  Woodside  = 189,  Yorkville  = 190,  park-cemetery-etc-Bronx  = 191,  park-cemetery-etc-Brooklyn  = 192,  park-cemetery-etc-Manhattan  = 193,  park-cemetery-etc-Queens  = 194,  park-cemetery-etc-Staten Island  = 195)) AS pickup_ntaname,\n\ntoUInt16(ifNull(pickup_puma,  0 )) AS pickup_puma,\n\nassumeNotNull(dropoff_nyct2010_gid) AS dropoff_nyct2010_gid,\ntoFloat32(ifNull(dropoff_ctlabel,  0 )) AS dropoff_ctlabel,\nassumeNotNull(dropoff_borocode) AS dropoff_borocode,\nCAST(assumeNotNull(dropoff_boroname) AS Enum8( Manhattan  = 1,  Queens  = 4,  Brooklyn  = 3,   = 0,  Bronx  = 2,  Staten Island  = 5)) AS dropoff_boroname,\ntoFixedString(ifNull(dropoff_ct2010,  000000 ), 6) AS dropoff_ct2010,\ntoFixedString(ifNull(dropoff_boroct2010,  0000000 ), 7) AS dropoff_boroct2010,\nCAST(assumeNotNull(ifNull(dropoff_cdeligibil,    )) AS Enum8(    = 0,  E  = 1,  I  = 2)) AS dropoff_cdeligibil,\ntoFixedString(ifNull(dropoff_ntacode,  0000 ), 4) AS dropoff_ntacode,\n\nCAST(assumeNotNull(dropoff_ntaname) AS Enum16(  = 0,  Airport  = 1,  Allerton-Pelham Gardens  = 2,  Annadale-Huguenot-Prince\\ s Bay-Eltingville  = 3,  Arden Heights  = 4,  Astoria  = 5,  Auburndale  = 6,  Baisley Park  = 7,  Bath Beach  = 8,  Battery Park City-Lower Manhattan  = 9,  Bay Ridge  = 10,  Bayside-Bayside Hills  = 11,  Bedford  = 12,  Bedford Park-Fordham North  = 13,  Bellerose  = 14,  Belmont  = 15,  Bensonhurst East  = 16,  Bensonhurst West  = 17,  Borough Park  = 18,  Breezy Point-Belle Harbor-Rockaway Park-Broad Channel  = 19,  Briarwood-Jamaica Hills  = 20,  Brighton Beach  = 21,  Bronxdale  = 22,  Brooklyn Heights-Cobble Hill  = 23,  Brownsville  = 24,  Bushwick North  = 25,  Bushwick South  = 26,  Cambria Heights  = 27,  Canarsie  = 28,  Carroll Gardens-Columbia Street-Red Hook  = 29,  Central Harlem North-Polo Grounds  = 30,  Central Harlem South  = 31,  Charleston-Richmond Valley-Tottenville  = 32,  Chinatown  = 33,  Claremont-Bathgate  = 34,  Clinton  = 35,  Clinton Hill  = 36,  Co-op City  = 37,  College Point  = 38,  Corona  = 39,  Crotona Park East  = 40,  Crown Heights North  = 41,  Crown Heights South  = 42,  Cypress Hills-City Line  = 43,  DUMBO-Vinegar Hill-Downtown Brooklyn-Boerum Hill  = 44,  Douglas Manor-Douglaston-Little Neck  = 45,  Dyker Heights  = 46,  East Concourse-Concourse Village  = 47,  East Elmhurst  = 48,  East Flatbush-Farragut  = 49,  East Flushing  = 50,  East Harlem North  = 51,  East Harlem South  = 52,  East New York  = 53,  East New York (Pennsylvania Ave)  = 54,  East Tremont  = 55,  East Village  = 56,  East Williamsburg  = 57,  Eastchester-Edenwald-Baychester  = 58,  Elmhurst  = 59,  Elmhurst-Maspeth  = 60,  Erasmus  = 61,  Far Rockaway-Bayswater  = 62,  Flatbush  = 63,  Flatlands  = 64,  Flushing  = 65,  Fordham South  = 66,  Forest Hills  = 67,  Fort Greene  = 68,  Fresh Meadows-Utopia  = 69,  Ft. Totten-Bay Terrace-Clearview  = 70,  Georgetown-Marine Park-Bergen Beach-Mill Basin  = 71,  Glen Oaks-Floral Park-New Hyde Park  = 72,  Glendale  = 73,  Gramercy  = 74,  Grasmere-Arrochar-Ft. Wadsworth  = 75,  Gravesend  = 76,  Great Kills  = 77,  Greenpoint  = 78,  Grymes Hill-Clifton-Fox Hills  = 79,  Hamilton Heights  = 80,  Hammels-Arverne-Edgemere  = 81,  Highbridge  = 82,  Hollis  = 83,  Homecrest  = 84,  Hudson Yards-Chelsea-Flatiron-Union Square  = 85,  Hunters Point-Sunnyside-West Maspeth  = 86,  Hunts Point  = 87,  Jackson Heights  = 88,  Jamaica  = 89,  Jamaica Estates-Holliswood  = 90,  Kensington-Ocean Parkway  = 91,  Kew Gardens  = 92,  Kew Gardens Hills  = 93,  Kingsbridge Heights  = 94,  Laurelton  = 95,  Lenox Hill-Roosevelt Island  = 96,  Lincoln Square  = 97,  Lindenwood-Howard Beach  = 98,  Longwood  = 99,  Lower East Side  = 100,  Madison  = 101,  Manhattanville  = 102,  Marble Hill-Inwood  = 103,  Mariner\\ s Harbor-Arlington-Port Ivory-Graniteville  = 104,  Maspeth  = 105,  Melrose South-Mott Haven North  = 106,  Middle Village  = 107,  Midtown-Midtown South  = 108,  Midwood  = 109,  Morningside Heights  = 110,  Morrisania-Melrose  = 111,  Mott Haven-Port Morris  = 112,  Mount Hope  = 113,  Murray Hill  = 114,  Murray Hill-Kips Bay  = 115,  New Brighton-Silver Lake  = 116,  New Dorp-Midland Beach  = 117,  New Springville-Bloomfield-Travis  = 118,  North Corona  = 119,  North Riverdale-Fieldston-Riverdale  = 120,  North Side-South Side  = 121,  Norwood  = 122,  Oakland Gardens  = 123,  Oakwood-Oakwood Beach  = 124,  Ocean Hill  = 125,  Ocean Parkway South  = 126,  Old Astoria  = 127,  Old Town-Dongan Hills-South Beach  = 128,  Ozone Park  = 129,  Park Slope-Gowanus  = 130,  Parkchester  = 131,  Pelham Bay-Country Club-City Island  = 132,  Pelham Parkway  = 133,  Pomonok-Flushing Heights-Hillcrest  = 134,  Port Richmond  = 135,  Prospect Heights  = 136,  Prospect Lefferts Gardens-Wingate  = 137,  Queens Village  = 138,  Queensboro Hill  = 139,  Queensbridge-Ravenswood-Long Island City  = 140,  Rego Park  = 141,  Richmond Hill  = 142,  Ridgewood  = 143,  Rikers Island  = 144,  Rosedale  = 145,  Rossville-Woodrow  = 146,  Rugby-Remsen Village  = 147,  Schuylerville-Throgs Neck-Edgewater Park  = 148,  Seagate-Coney Island  = 149,  Sheepshead Bay-Gerritsen Beach-Manhattan Beach  = 150,  SoHo-TriBeCa-Civic Center-Little Italy  = 151,  Soundview-Bruckner  = 152,  Soundview-Castle Hill-Clason Point-Harding Park  = 153,  South Jamaica  = 154,  South Ozone Park  = 155,  Springfield Gardens North  = 156,  Springfield Gardens South-Brookville  = 157,  Spuyten Duyvil-Kingsbridge  = 158,  St. Albans  = 159,  Stapleton-Rosebank  = 160,  Starrett City  = 161,  Steinway  = 162,  Stuyvesant Heights  = 163,  Stuyvesant Town-Cooper Village  = 164,  Sunset Park East  = 165,  Sunset Park West  = 166,  Todt Hill-Emerson Hill-Heartland Village-Lighthouse Hill  = 167,  Turtle Bay-East Midtown  = 168,  University Heights-Morris Heights  = 169,  Upper East Side-Carnegie Hill  = 170,  Upper West Side  = 171,  Van Cortlandt Village  = 172,  Van Nest-Morris Park-Westchester Square  = 173,  Washington Heights North  = 174,  Washington Heights South  = 175,  West Brighton  = 176,  West Concourse  = 177,  West Farms-Bronx River  = 178,  West New Brighton-New Brighton-St. George  = 179,  West Village  = 180,  Westchester-Unionport  = 181,  Westerleigh  = 182,  Whitestone  = 183,  Williamsbridge-Olinville  = 184,  Williamsburg  = 185,  Windsor Terrace  = 186,  Woodhaven  = 187,  Woodlawn-Wakefield  = 188,  Woodside  = 189,  Yorkville  = 190,  park-cemetery-etc-Bronx  = 191,  park-cemetery-etc-Brooklyn  = 192,  park-cemetery-etc-Manhattan  = 193,  park-cemetery-etc-Queens  = 194,  park-cemetery-etc-Staten Island  = 195)) AS dropoff_ntaname,\n\ntoUInt16(ifNull(dropoff_puma,  0 )) AS dropoff_puma\n\nFROM trips  This takes 3030 seconds at a speed of about 428,000 rows per second.\nTo load it faster, you can create the table with the  Log  engine instead of  MergeTree . In this case, the download works faster than 200 seconds.  The table uses 126 GB of disk space.  :) SELECT formatReadableSize(sum(bytes)) FROM system.parts WHERE table =  trips_mergetree  AND active\n\nSELECT formatReadableSize(sum(bytes))\nFROM system.parts\nWHERE (table =  trips_mergetree ) AND active\n\n\u250c\u2500formatReadableSize(sum(bytes))\u2500\u2510\n\u2502 126.18 GiB                     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  Among other things, you can run the OPTIMIZE query on MergeTree. But it's not required, since everything will be fine without it.", 
            "title": "How to import the raw data"
        }, 
        {
            "location": "/index.html#results-on-single-server", 
            "text": "Q1:  SELECT   cab_type ,   count ( * )   FROM   trips_mergetree   GROUP   BY   cab_type   0.490 seconds.  Q2:  SELECT   passenger_count ,   avg ( total_amount )   FROM   trips_mergetree   GROUP   BY   passenger_count   1.224 seconds.  Q3:  SELECT   passenger_count ,   toYear ( pickup_date )   AS   year ,   count ( * )   FROM   trips_mergetree   GROUP   BY   passenger_count ,   year   2.104 seconds.  Q4:  SELECT   passenger_count ,   toYear ( pickup_date )   AS   year ,   round ( trip_distance )   AS   distance ,   count ( * )  FROM   trips_mergetree  GROUP   BY   passenger_count ,   year ,   distance  ORDER   BY   year ,   count ( * )   DESC   3.593 seconds.  The following server was used:  Two Intel(R) Xeon(R) CPU E5-2650 v2 @ 2.60GHz, 16 physical kernels total,\n128 GiB RAM,\n8x6 TB HD on hardware RAID-5  Execution time is the best of three runsBut starting from the second run, queries read data from the file system cache. No further caching occurs: the data is read out and processed in each run.  Creating a table on three servers:  On each server:  CREATE TABLE default.trips_mergetree_third ( trip_id UInt32,  vendor_id Enum8( 1  = 1,  2  = 2,  CMT  = 3,  VTS  = 4,  DDS  = 5,  B02512  = 10,  B02598  = 11,  B02617  = 12,  B02682  = 13,  B02764  = 14),  pickup_date Date,  pickup_datetime DateTime,  dropoff_date Date,  dropoff_datetime DateTime,  store_and_fwd_flag UInt8,  rate_code_id UInt8,  pickup_longitude Float64,  pickup_latitude Float64,  dropoff_longitude Float64,  dropoff_latitude Float64,  passenger_count UInt8,  trip_distance Float64,  fare_amount Float32,  extra Float32,  mta_tax Float32,  tip_amount Float32,  tolls_amount Float32,  ehail_fee Float32,  improvement_surcharge Float32,  total_amount Float32,  payment_type_ Enum8( UNK  = 0,  CSH  = 1,  CRE  = 2,  NOC  = 3,  DIS  = 4),  trip_type UInt8,  pickup FixedString(25),  dropoff FixedString(25),  cab_type Enum8( yellow  = 1,  green  = 2,  uber  = 3),  pickup_nyct2010_gid UInt8,  pickup_ctlabel Float32,  pickup_borocode UInt8,  pickup_boroname Enum8(  = 0,  Manhattan  = 1,  Bronx  = 2,  Brooklyn  = 3,  Queens  = 4,  Staten Island  = 5),  pickup_ct2010 FixedString(6),  pickup_boroct2010 FixedString(7),  pickup_cdeligibil Enum8(    = 0,  E  = 1,  I  = 2),  pickup_ntacode FixedString(4),  pickup_ntaname Enum16(  = 0,  Airport  = 1,  Allerton-Pelham Gardens  = 2,  Annadale-Huguenot-Prince\\ s Bay-Eltingville  = 3,  Arden Heights  = 4,  Astoria  = 5,  Auburndale  = 6,  Baisley Park  = 7,  Bath Beach  = 8,  Battery Park City-Lower Manhattan  = 9,  Bay Ridge  = 10,  Bayside-Bayside Hills  = 11,  Bedford  = 12,  Bedford Park-Fordham North  = 13,  Bellerose  = 14,  Belmont  = 15,  Bensonhurst East  = 16,  Bensonhurst West  = 17,  Borough Park  = 18,  Breezy Point-Belle Harbor-Rockaway Park-Broad Channel  = 19,  Briarwood-Jamaica Hills  = 20,  Brighton Beach  = 21,  Bronxdale  = 22,  Brooklyn Heights-Cobble Hill  = 23,  Brownsville  = 24,  Bushwick North  = 25,  Bushwick South  = 26,  Cambria Heights  = 27,  Canarsie  = 28,  Carroll Gardens-Columbia Street-Red Hook  = 29,  Central Harlem North-Polo Grounds  = 30,  Central Harlem South  = 31,  Charleston-Richmond Valley-Tottenville  = 32,  Chinatown  = 33,  Claremont-Bathgate  = 34,  Clinton  = 35,  Clinton Hill  = 36,  Co-op City  = 37,  College Point  = 38,  Corona  = 39,  Crotona Park East  = 40,  Crown Heights North  = 41,  Crown Heights South  = 42,  Cypress Hills-City Line  = 43,  DUMBO-Vinegar Hill-Downtown Brooklyn-Boerum Hill  = 44,  Douglas Manor-Douglaston-Little Neck  = 45,  Dyker Heights  = 46,  East Concourse-Concourse Village  = 47,  East Elmhurst  = 48,  East Flatbush-Farragut  = 49,  East Flushing  = 50,  East Harlem North  = 51,  East Harlem South  = 52,  East New York  = 53,  East New York (Pennsylvania Ave)  = 54,  East Tremont  = 55,  East Village  = 56,  East Williamsburg  = 57,  Eastchester-Edenwald-Baychester  = 58,  Elmhurst  = 59,  Elmhurst-Maspeth  = 60,  Erasmus  = 61,  Far Rockaway-Bayswater  = 62,  Flatbush  = 63,  Flatlands  = 64,  Flushing  = 65,  Fordham South  = 66,  Forest Hills  = 67,  Fort Greene  = 68,  Fresh Meadows-Utopia  = 69,  Ft. Totten-Bay Terrace-Clearview  = 70,  Georgetown-Marine Park-Bergen Beach-Mill Basin  = 71,  Glen Oaks-Floral Park-New Hyde Park  = 72,  Glendale  = 73,  Gramercy  = 74,  Grasmere-Arrochar-Ft. Wadsworth  = 75,  Gravesend  = 76,  Great Kills  = 77,  Greenpoint  = 78,  Grymes Hill-Clifton-Fox Hills  = 79,  Hamilton Heights  = 80,  Hammels-Arverne-Edgemere  = 81,  Highbridge  = 82,  Hollis  = 83,  Homecrest  = 84,  Hudson Yards-Chelsea-Flatiron-Union Square  = 85,  Hunters Point-Sunnyside-West Maspeth  = 86,  Hunts Point  = 87,  Jackson Heights  = 88,  Jamaica  = 89,  Jamaica Estates-Holliswood  = 90,  Kensington-Ocean Parkway  = 91,  Kew Gardens  = 92,  Kew Gardens Hills  = 93,  Kingsbridge Heights  = 94,  Laurelton  = 95,  Lenox Hill-Roosevelt Island  = 96,  Lincoln Square  = 97,  Lindenwood-Howard Beach  = 98,  Longwood  = 99,  Lower East Side  = 100,  Madison  = 101,  Manhattanville  = 102,  Marble Hill-Inwood  = 103,  Mariner\\ s Harbor-Arlington-Port Ivory-Graniteville  = 104,  Maspeth  = 105,  Melrose South-Mott Haven North  = 106,  Middle Village  = 107,  Midtown-Midtown South  = 108,  Midwood  = 109,  Morningside Heights  = 110,  Morrisania-Melrose  = 111,  Mott Haven-Port Morris  = 112,  Mount Hope  = 113,  Murray Hill  = 114,  Murray Hill-Kips Bay  = 115,  New Brighton-Silver Lake  = 116,  New Dorp-Midland Beach  = 117,  New Springville-Bloomfield-Travis  = 118,  North Corona  = 119,  North Riverdale-Fieldston-Riverdale  = 120,  North Side-South Side  = 121,  Norwood  = 122,  Oakland Gardens  = 123,  Oakwood-Oakwood Beach  = 124,  Ocean Hill  = 125,  Ocean Parkway South  = 126,  Old Astoria  = 127,  Old Town-Dongan Hills-South Beach  = 128,  Ozone Park  = 129,  Park Slope-Gowanus  = 130,  Parkchester  = 131,  Pelham Bay-Country Club-City Island  = 132,  Pelham Parkway  = 133,  Pomonok-Flushing Heights-Hillcrest  = 134,  Port Richmond  = 135,  Prospect Heights  = 136,  Prospect Lefferts Gardens-Wingate  = 137,  Queens Village  = 138,  Queensboro Hill  = 139,  Queensbridge-Ravenswood-Long Island City  = 140,  Rego Park  = 141,  Richmond Hill  = 142,  Ridgewood  = 143,  Rikers Island  = 144,  Rosedale  = 145,  Rossville-Woodrow  = 146,  Rugby-Remsen Village  = 147,  Schuylerville-Throgs Neck-Edgewater Park  = 148,  Seagate-Coney Island  = 149,  Sheepshead Bay-Gerritsen Beach-Manhattan Beach  = 150,  SoHo-TriBeCa-Civic Center-Little Italy  = 151,  Soundview-Bruckner  = 152,  Soundview-Castle Hill-Clason Point-Harding Park  = 153,  South Jamaica  = 154,  South Ozone Park  = 155,  Springfield Gardens North  = 156,  Springfield Gardens South-Brookville  = 157,  Spuyten Duyvil-Kingsbridge  = 158,  St. Albans  = 159,  Stapleton-Rosebank  = 160,  Starrett City  = 161,  Steinway  = 162,  Stuyvesant Heights  = 163,  Stuyvesant Town-Cooper Village  = 164,  Sunset Park East  = 165,  Sunset Park West  = 166,  Todt Hill-Emerson Hill-Heartland Village-Lighthouse Hill  = 167,  Turtle Bay-East Midtown  = 168,  University Heights-Morris Heights  = 169,  Upper East Side-Carnegie Hill  = 170,  Upper West Side  = 171,  Van Cortlandt Village  = 172,  Van Nest-Morris Park-Westchester Square  = 173,  Washington Heights North  = 174,  Washington Heights South  = 175,  West Brighton  = 176,  West Concourse  = 177,  West Farms-Bronx River  = 178,  West New Brighton-New Brighton-St. George  = 179,  West Village  = 180,  Westchester-Unionport  = 181,  Westerleigh  = 182,  Whitestone  = 183,  Williamsbridge-Olinville  = 184,  Williamsburg  = 185,  Windsor Terrace  = 186,  Woodhaven  = 187,  Woodlawn-Wakefield  = 188,  Woodside  = 189,  Yorkville  = 190,  park-cemetery-etc-Bronx  = 191,  park-cemetery-etc-Brooklyn  = 192,  park-cemetery-etc-Manhattan  = 193,  park-cemetery-etc-Queens  = 194,  park-cemetery-etc-Staten Island  = 195),  pickup_puma UInt16,  dropoff_nyct2010_gid UInt8,  dropoff_ctlabel Float32,  dropoff_borocode UInt8,  dropoff_boroname Enum8(  = 0,  Manhattan  = 1,  Bronx  = 2,  Brooklyn  = 3,  Queens  = 4,  Staten Island  = 5),  dropoff_ct2010 FixedString(6),  dropoff_boroct2010 FixedString(7),  dropoff_cdeligibil Enum8(    = 0,  E  = 1,  I  = 2),  dropoff_ntacode FixedString(4),  dropoff_ntaname Enum16(  = 0,  Airport  = 1,  Allerton-Pelham Gardens  = 2,  Annadale-Huguenot-Prince\\ s Bay-Eltingville  = 3,  Arden Heights  = 4,  Astoria  = 5,  Auburndale  = 6,  Baisley Park  = 7,  Bath Beach  = 8,  Battery Park City-Lower Manhattan  = 9,  Bay Ridge  = 10,  Bayside-Bayside Hills  = 11,  Bedford  = 12,  Bedford Park-Fordham North  = 13,  Bellerose  = 14,  Belmont  = 15,  Bensonhurst East  = 16,  Bensonhurst West  = 17,  Borough Park  = 18,  Breezy Point-Belle Harbor-Rockaway Park-Broad Channel  = 19,  Briarwood-Jamaica Hills  = 20,  Brighton Beach  = 21,  Bronxdale  = 22,  Brooklyn Heights-Cobble Hill  = 23,  Brownsville  = 24,  Bushwick North  = 25,  Bushwick South  = 26,  Cambria Heights  = 27,  Canarsie  = 28,  Carroll Gardens-Columbia Street-Red Hook  = 29,  Central Harlem North-Polo Grounds  = 30,  Central Harlem South  = 31,  Charleston-Richmond Valley-Tottenville  = 32,  Chinatown  = 33,  Claremont-Bathgate  = 34,  Clinton  = 35,  Clinton Hill  = 36,  Co-op City  = 37,  College Point  = 38,  Corona  = 39,  Crotona Park East  = 40,  Crown Heights North  = 41,  Crown Heights South  = 42,  Cypress Hills-City Line  = 43,  DUMBO-Vinegar Hill-Downtown Brooklyn-Boerum Hill  = 44,  Douglas Manor-Douglaston-Little Neck  = 45,  Dyker Heights  = 46,  East Concourse-Concourse Village  = 47,  East Elmhurst  = 48,  East Flatbush-Farragut  = 49,  East Flushing  = 50,  East Harlem North  = 51,  East Harlem South  = 52,  East New York  = 53,  East New York (Pennsylvania Ave)  = 54,  East Tremont  = 55,  East Village  = 56,  East Williamsburg  = 57,  Eastchester-Edenwald-Baychester  = 58,  Elmhurst  = 59,  Elmhurst-Maspeth  = 60,  Erasmus  = 61,  Far Rockaway-Bayswater  = 62,  Flatbush  = 63,  Flatlands  = 64,  Flushing  = 65,  Fordham South  = 66,  Forest Hills  = 67,  Fort Greene  = 68,  Fresh Meadows-Utopia  = 69,  Ft. Totten-Bay Terrace-Clearview  = 70,  Georgetown-Marine Park-Bergen Beach-Mill Basin  = 71,  Glen Oaks-Floral Park-New Hyde Park  = 72,  Glendale  = 73,  Gramercy  = 74,  Grasmere-Arrochar-Ft. Wadsworth  = 75,  Gravesend  = 76,  Great Kills  = 77,  Greenpoint  = 78,  Grymes Hill-Clifton-Fox Hills  = 79,  Hamilton Heights  = 80,  Hammels-Arverne-Edgemere  = 81,  Highbridge  = 82,  Hollis  = 83,  Homecrest  = 84,  Hudson Yards-Chelsea-Flatiron-Union Square  = 85,  Hunters Point-Sunnyside-West Maspeth  = 86,  Hunts Point  = 87,  Jackson Heights  = 88,  Jamaica  = 89,  Jamaica Estates-Holliswood  = 90,  Kensington-Ocean Parkway  = 91,  Kew Gardens  = 92,  Kew Gardens Hills  = 93,  Kingsbridge Heights  = 94,  Laurelton  = 95,  Lenox Hill-Roosevelt Island  = 96,  Lincoln Square  = 97,  Lindenwood-Howard Beach  = 98,  Longwood  = 99,  Lower East Side  = 100,  Madison  = 101,  Manhattanville  = 102,  Marble Hill-Inwood  = 103,  Mariner\\ s Harbor-Arlington-Port Ivory-Graniteville  = 104,  Maspeth  = 105,  Melrose South-Mott Haven North  = 106,  Middle Village  = 107,  Midtown-Midtown South  = 108,  Midwood  = 109,  Morningside Heights  = 110,  Morrisania-Melrose  = 111,  Mott Haven-Port Morris  = 112,  Mount Hope  = 113,  Murray Hill  = 114,  Murray Hill-Kips Bay  = 115,  New Brighton-Silver Lake  = 116,  New Dorp-Midland Beach  = 117,  New Springville-Bloomfield-Travis  = 118,  North Corona  = 119,  North Riverdale-Fieldston-Riverdale  = 120,  North Side-South Side  = 121,  Norwood  = 122,  Oakland Gardens  = 123,  Oakwood-Oakwood Beach  = 124,  Ocean Hill  = 125,  Ocean Parkway South  = 126,  Old Astoria  = 127,  Old Town-Dongan Hills-South Beach  = 128,  Ozone Park  = 129,  Park Slope-Gowanus  = 130,  Parkchester  = 131,  Pelham Bay-Country Club-City Island  = 132,  Pelham Parkway  = 133,  Pomonok-Flushing Heights-Hillcrest  = 134,  Port Richmond  = 135,  Prospect Heights  = 136,  Prospect Lefferts Gardens-Wingate  = 137,  Queens Village  = 138,  Queensboro Hill  = 139,  Queensbridge-Ravenswood-Long Island City  = 140,  Rego Park  = 141,  Richmond Hill  = 142,  Ridgewood  = 143,  Rikers Island  = 144,  Rosedale  = 145,  Rossville-Woodrow  = 146,  Rugby-Remsen Village  = 147,  Schuylerville-Throgs Neck-Edgewater Park  = 148,  Seagate-Coney Island  = 149,  Sheepshead Bay-Gerritsen Beach-Manhattan Beach  = 150,  SoHo-TriBeCa-Civic Center-Little Italy  = 151,  Soundview-Bruckner  = 152,  Soundview-Castle Hill-Clason Point-Harding Park  = 153,  South Jamaica  = 154,  South Ozone Park  = 155,  Springfield Gardens North  = 156,  Springfield Gardens South-Brookville  = 157,  Spuyten Duyvil-Kingsbridge  = 158,  St. Albans  = 159,  Stapleton-Rosebank  = 160,  Starrett City  = 161,  Steinway  = 162,  Stuyvesant Heights  = 163,  Stuyvesant Town-Cooper Village  = 164,  Sunset Park East  = 165,  Sunset Park West  = 166,  Todt Hill-Emerson Hill-Heartland Village-Lighthouse Hill  = 167,  Turtle Bay-East Midtown  = 168,  University Heights-Morris Heights  = 169,  Upper East Side-Carnegie Hill  = 170,  Upper West Side  = 171,  Van Cortlandt Village  = 172,  Van Nest-Morris Park-Westchester Square  = 173,  Washington Heights North  = 174,  Washington Heights South  = 175,  West Brighton  = 176,  West Concourse  = 177,  West Farms-Bronx River  = 178,  West New Brighton-New Brighton-St. George  = 179,  West Village  = 180,  Westchester-Unionport  = 181,  Westerleigh  = 182,  Whitestone  = 183,  Williamsbridge-Olinville  = 184,  Williamsburg  = 185,  Windsor Terrace  = 186,  Woodhaven  = 187,  Woodlawn-Wakefield  = 188,  Woodside  = 189,  Yorkville  = 190,  park-cemetery-etc-Bronx  = 191,  park-cemetery-etc-Brooklyn  = 192,  park-cemetery-etc-Manhattan  = 193,  park-cemetery-etc-Queens  = 194,  park-cemetery-etc-Staten Island  = 195),  dropoff_puma UInt16) ENGINE = MergeTree(pickup_date, pickup_datetime, 8192)  On the source server:  CREATE   TABLE   trips_mergetree_x3   AS   trips_mergetree_third   ENGINE   =   Distributed ( perftest ,   default ,   trips_mergetree_third ,   rand ())   The following query redistributes data:  INSERT   INTO   trips_mergetree_x3   SELECT   *   FROM   trips_mergetree   This takes 2454 seconds.  On three servers:  Q1: 0.212 seconds.\nQ2: 0.438 seconds.\nQ3: 0.733 seconds.\nQ4: 1.241 seconds.  No surprises here, since the queries are scaled linearly.  We also have results from a cluster of 140 servers:  Q1: 0.028 sec.\nQ2: 0.043 sec.\nQ3: 0.051 sec.\nQ4: 0.072 sec.  In this case, the query processing time is determined above all by network latency.\nWe ran queries using a client located in a Yandex datacenter in Finland on a cluster in Russia, which added about 20 ms of latency.", 
            "title": "Results on single server"
        }, 
        {
            "location": "/index.html#summary", 
            "text": "nodes   Q1     Q2     Q3     Q4\n  1  0.490  1.224  2.104  3.593\n  3  0.212  0.438  0.733  1.241\n140  0.028  0.043  0.051  0.072", 
            "title": "Summary"
        }, 
        {
            "location": "/index.html#amplab-big-data-benchmark", 
            "text": "See  https://amplab.cs.berkeley.edu/benchmark/  Sign up for a free account at  https://aws.amazon.com . You will need a credit card, email and phone number.Get a new access key at  https://console.aws.amazon.com/iam/home?nc2=h_m_sc#security_credential  Run the following in the console:  sudo apt-get install s3cmd\nmkdir tiny ;   cd  tiny ; \ns3cmd sync s3://big-data-benchmark/pavlo/text-deflate/tiny/ . cd  ..\nmkdir 1node ;   cd  1node ; \ns3cmd sync s3://big-data-benchmark/pavlo/text-deflate/1node/ . cd  ..\nmkdir 5nodes ;   cd  5nodes ; \ns3cmd sync s3://big-data-benchmark/pavlo/text-deflate/5nodes/ . cd  ..  Run the following ClickHouse queries:  CREATE   TABLE   rankings_tiny  ( \n     pageURL   String , \n     pageRank   UInt32 , \n     avgDuration   UInt32  )   ENGINE   =   Log ;  CREATE   TABLE   uservisits_tiny  ( \n     sourceIP   String , \n     destinationURL   String , \n     visitDate   Date , \n     adRevenue   Float32 , \n     UserAgent   String , \n     cCode   FixedString ( 3 ), \n     lCode   FixedString ( 6 ), \n     searchWord   String , \n     duration   UInt32  )   ENGINE   =   MergeTree ( visitDate ,   visitDate ,   8192 );  CREATE   TABLE   rankings_1node  ( \n     pageURL   String , \n     pageRank   UInt32 , \n     avgDuration   UInt32  )   ENGINE   =   Log ;  CREATE   TABLE   uservisits_1node  ( \n     sourceIP   String , \n     destinationURL   String , \n     visitDate   Date , \n     adRevenue   Float32 , \n     UserAgent   String , \n     cCode   FixedString ( 3 ), \n     lCode   FixedString ( 6 ), \n     searchWord   String , \n     duration   UInt32  )   ENGINE   =   MergeTree ( visitDate ,   visitDate ,   8192 );  CREATE   TABLE   rankings_5nodes_on_single  ( \n     pageURL   String , \n     pageRank   UInt32 , \n     avgDuration   UInt32  )   ENGINE   =   Log ;  CREATE   TABLE   uservisits_5nodes_on_single  ( \n     sourceIP   String , \n     destinationURL   String , \n     visitDate   Date , \n     adRevenue   Float32 , \n     UserAgent   String , \n     cCode   FixedString ( 3 ), \n     lCode   FixedString ( 6 ), \n     searchWord   String , \n     duration   UInt32  )   ENGINE   =   MergeTree ( visitDate ,   visitDate ,   8192 );   Go back to the console:  for  i in tiny/rankings/*.deflate ;   do   echo   $i ;  zlib-flate -uncompress    $i   |  clickhouse-client --host = example-perftest01j --query = INSERT INTO rankings_tiny FORMAT CSV ;   done  for  i in tiny/uservisits/*.deflate ;   do   echo   $i ;  zlib-flate -uncompress    $i   |  clickhouse-client --host = example-perftest01j --query = INSERT INTO uservisits_tiny FORMAT CSV ;   done  for  i in 1node/rankings/*.deflate ;   do   echo   $i ;  zlib-flate -uncompress    $i   |  clickhouse-client --host = example-perftest01j --query = INSERT INTO rankings_1node FORMAT CSV ;   done  for  i in 1node/uservisits/*.deflate ;   do   echo   $i ;  zlib-flate -uncompress    $i   |  clickhouse-client --host = example-perftest01j --query = INSERT INTO uservisits_1node FORMAT CSV ;   done  for  i in 5nodes/rankings/*.deflate ;   do   echo   $i ;  zlib-flate -uncompress    $i   |  clickhouse-client --host = example-perftest01j --query = INSERT INTO rankings_5nodes_on_single FORMAT CSV ;   done  for  i in 5nodes/uservisits/*.deflate ;   do   echo   $i ;  zlib-flate -uncompress    $i   |  clickhouse-client --host = example-perftest01j --query = INSERT INTO uservisits_5nodes_on_single FORMAT CSV ;   done   Queries for obtaining data samples:  SELECT   pageURL ,   pageRank   FROM   rankings_1node   WHERE   pageRank     1000  SELECT   substring ( sourceIP ,   1 ,   8 ),   sum ( adRevenue )   FROM   uservisits_1node   GROUP   BY   substring ( sourceIP ,   1 ,   8 )  SELECT \n     sourceIP , \n     sum ( adRevenue )   AS   totalRevenue , \n     avg ( pageRank )   AS   pageRank  FROM   rankings_1node   ALL   INNER   JOIN  ( \n     SELECT \n         sourceIP , \n         destinationURL   AS   pageURL , \n         adRevenue \n     FROM   uservisits_1node \n     WHERE   ( visitDate     1980-01-01 )   AND   ( visitDate     1980-04-01 )  )   USING   pageURL  GROUP   BY   sourceIP  ORDER   BY   totalRevenue   DESC  LIMIT   1", 
            "title": "AMPLab Big Data Benchmark"
        }, 
        {
            "location": "/index.html#wikistat", 
            "text": "See:  http://dumps.wikimedia.org/other/pagecounts-raw/  Creating a table:  CREATE   TABLE   wikistat  ( \n     date   Date , \n     time   DateTime , \n     project   String , \n     subproject   String , \n     path   String , \n     hits   UInt64 , \n     size   UInt64  )   ENGINE   =   MergeTree ( date ,   ( path ,   time ),   8192 );   Loading data:  for  i in  { 2007 ..2016 } ;   do   for  j in  { 01 ..12 } ;   do   echo   $i - $j   2 ;  curl -sSL  http://dumps.wikimedia.org/other/pagecounts-raw/ $i / $i - $j /   |  grep -oE  pagecounts-[0-9]+-[0-9]+\\.gz ;   done ;   done   |  sort  |  uniq  |  tee links.txt\ncat links.txt  |   while   read  link ;   do  wget http://dumps.wikimedia.org/other/pagecounts-raw/ $( echo   $link   |  sed -r  s/pagecounts-([0-9]{4})([0-9]{2})[0-9]{2}-[0-9]+\\.gz/\\1/ ) / $( echo   $link   |  sed -r  s/pagecounts-([0-9]{4})([0-9]{2})[0-9]{2}-[0-9]+\\.gz/\\1-\\2/ ) / $link ;   done \nls -1 /opt/wikistat/  |  grep gz  |   while   read  i ;   do   echo   $i ;  gzip -cd /opt/wikistat/ $i   |  ./wikistat-loader --time = $( echo  -n  $i   |  sed -r  s/pagecounts-([0-9]{4})([0-9]{2})([0-9]{2})-([0-9]{2})([0-9]{2})([0-9]{2})\\.gz/\\1-\\2-\\3 \\4-00-00/ )   |  clickhouse-client --query = INSERT INTO wikistat FORMAT TabSeparated ;   done", 
            "title": "WikiStat"
        }, 
        {
            "location": "/index.html#terabyte-of-click-logs-from-criteo", 
            "text": "Download the data from  http://labs.criteo.com/downloads/download-terabyte-click-logs/  Create a table to import the log to:  CREATE   TABLE   criteo_log   ( date   Date ,   clicked   UInt8 ,   int1   Int32 ,   int2   Int32 ,   int3   Int32 ,   int4   Int32 ,   int5   Int32 ,   int6   Int32 ,   int7   Int32 ,   int8   Int32 ,   int9   Int32 ,   int10   Int32 ,   int11   Int32 ,   int12   Int32 ,   int13   Int32 ,   cat1   String ,   cat2   String ,   cat3   String ,   cat4   String ,   cat5   String ,   cat6   String ,   cat7   String ,   cat8   String ,   cat9   String ,   cat10   String ,   cat11   String ,   cat12   String ,   cat13   String ,   cat14   String ,   cat15   String ,   cat16   String ,   cat17   String ,   cat18   String ,   cat19   String ,   cat20   String ,   cat21   String ,   cat22   String ,   cat23   String ,   cat24   String ,   cat25   String ,   cat26   String )   ENGINE   =   Log   Download the data:  for  i in  { 00 ..23 } ;   do   echo   $i ;  zcat datasets/criteo/day_ ${ i #0 } .gz  |  sed -r  s/^/2000-01- ${ i /00/24 } \\t/   |  clickhouse-client --host = example-perftest01j --query = INSERT INTO criteo_log FORMAT TabSeparated ;   done   Create a table for the converted data:  CREATE   TABLE   criteo  ( \n     date   Date , \n     clicked   UInt8 , \n     int1   Int32 , \n     int2   Int32 , \n     int3   Int32 , \n     int4   Int32 , \n     int5   Int32 , \n     int6   Int32 , \n     int7   Int32 , \n     int8   Int32 , \n     int9   Int32 , \n     int10   Int32 , \n     int11   Int32 , \n     int12   Int32 , \n     int13   Int32 , \n     icat1   UInt32 , \n     icat2   UInt32 , \n     icat3   UInt32 , \n     icat4   UInt32 , \n     icat5   UInt32 , \n     icat6   UInt32 , \n     icat7   UInt32 , \n     icat8   UInt32 , \n     icat9   UInt32 , \n     icat10   UInt32 , \n     icat11   UInt32 , \n     icat12   UInt32 , \n     icat13   UInt32 , \n     icat14   UInt32 , \n     icat15   UInt32 , \n     icat16   UInt32 , \n     icat17   UInt32 , \n     icat18   UInt32 , \n     icat19   UInt32 , \n     icat20   UInt32 , \n     icat21   UInt32 , \n     icat22   UInt32 , \n     icat23   UInt32 , \n     icat24   UInt32 , \n     icat25   UInt32 , \n     icat26   UInt32  )   ENGINE   =   MergeTree ( date ,   intHash32 ( icat1 ),   ( date ,   intHash32 ( icat1 )),   8192 )   Transform data from the raw log and put it in the second table:  INSERT   INTO   criteo   SELECT   date ,   clicked ,   int1 ,   int2 ,   int3 ,   int4 ,   int5 ,   int6 ,   int7 ,   int8 ,   int9 ,   int10 ,   int11 ,   int12 ,   int13 ,   reinterpretAsUInt32 ( unhex ( cat1 ))   AS   icat1 ,   reinterpretAsUInt32 ( unhex ( cat2 ))   AS   icat2 ,   reinterpretAsUInt32 ( unhex ( cat3 ))   AS   icat3 ,   reinterpretAsUInt32 ( unhex ( cat4 ))   AS   icat4 ,   reinterpretAsUInt32 ( unhex ( cat5 ))   AS   icat5 ,   reinterpretAsUInt32 ( unhex ( cat6 ))   AS   icat6 ,   reinterpretAsUInt32 ( unhex ( cat7 ))   AS   icat7 ,   reinterpretAsUInt32 ( unhex ( cat8 ))   AS   icat8 ,   reinterpretAsUInt32 ( unhex ( cat9 ))   AS   icat9 ,   reinterpretAsUInt32 ( unhex ( cat10 ))   AS   icat10 ,   reinterpretAsUInt32 ( unhex ( cat11 ))   AS   icat11 ,   reinterpretAsUInt32 ( unhex ( cat12 ))   AS   icat12 ,   reinterpretAsUInt32 ( unhex ( cat13 ))   AS   icat13 ,   reinterpretAsUInt32 ( unhex ( cat14 ))   AS   icat14 ,   reinterpretAsUInt32 ( unhex ( cat15 ))   AS   icat15 ,   reinterpretAsUInt32 ( unhex ( cat16 ))   AS   icat16 ,   reinterpretAsUInt32 ( unhex ( cat17 ))   AS   icat17 ,   reinterpretAsUInt32 ( unhex ( cat18 ))   AS   icat18 ,   reinterpretAsUInt32 ( unhex ( cat19 ))   AS   icat19 ,   reinterpretAsUInt32 ( unhex ( cat20 ))   AS   icat20 ,   reinterpretAsUInt32 ( unhex ( cat21 ))   AS   icat21 ,   reinterpretAsUInt32 ( unhex ( cat22 ))   AS   icat22 ,   reinterpretAsUInt32 ( unhex ( cat23 ))   AS   icat23 ,   reinterpretAsUInt32 ( unhex ( cat24 ))   AS   icat24 ,   reinterpretAsUInt32 ( unhex ( cat25 ))   AS   icat25 ,   reinterpretAsUInt32 ( unhex ( cat26 ))   AS   icat26   FROM   criteo_log ;  DROP   TABLE   criteo_log ;", 
            "title": "Terabyte of click logs from Criteo"
        }, 
        {
            "location": "/index.html#star-schema-benchmark", 
            "text": "Compiling dbgen:  https://github.com/vadimtk/ssb-dbgen  git clone git@github.com:vadimtk/ssb-dbgen.git cd  ssb-dbgen\nmake  There will be some warnings during the process, but this is normal.  Place  dbgen   and  dists.dss   in any location with 800 GB of free disk space.  Generating data:  ./dbgen -s  1000  -T c\n./dbgen -s  1000  -T l  Creating tables in ClickHouse:  CREATE   TABLE   lineorder   ( \n         LO_ORDERKEY               UInt32 , \n         LO_LINENUMBER             UInt8 , \n         LO_CUSTKEY                UInt32 , \n         LO_PARTKEY                UInt32 , \n         LO_SUPPKEY                UInt32 , \n         LO_ORDERDATE              Date , \n         LO_ORDERPRIORITY          String , \n         LO_SHIPPRIORITY           UInt8 , \n         LO_QUANTITY               UInt8 , \n         LO_EXTENDEDPRICE          UInt32 , \n         LO_ORDTOTALPRICE          UInt32 , \n         LO_DISCOUNT               UInt8 , \n         LO_REVENUE                UInt32 , \n         LO_SUPPLYCOST             UInt32 , \n         LO_TAX                    UInt8 , \n         LO_COMMITDATE             Date , \n         LO_SHIPMODE               String  ) Engine = MergeTree ( LO_ORDERDATE ,( LO_ORDERKEY , LO_LINENUMBER , LO_ORDERDATE ), 8192 );  CREATE   TABLE   customer   ( \n         C_CUSTKEY         UInt32 , \n         C_NAME            String , \n         C_ADDRESS         String , \n         C_CITY            String , \n         C_NATION          String , \n         C_REGION          String , \n         C_PHONE           String , \n         C_MKTSEGMENT      String , \n         C_FAKEDATE        Date  ) Engine = MergeTree ( C_FAKEDATE ,( C_CUSTKEY , C_FAKEDATE ), 8192 );  CREATE   TABLE   part   ( \n         P_PARTKEY         UInt32 , \n         P_NAME            String , \n         P_MFGR            String , \n         P_CATEGORY        String , \n         P_BRAND           String , \n         P_COLOR           String , \n         P_TYPE            String , \n         P_SIZE            UInt8 , \n         P_CONTAINER       String , \n         P_FAKEDATE        Date  ) Engine = MergeTree ( P_FAKEDATE ,( P_PARTKEY , P_FAKEDATE ), 8192 );  CREATE   TABLE   lineorderd   AS   lineorder   ENGINE   =   Distributed ( perftest_3shards_1replicas ,   default ,   lineorder ,   rand ());  CREATE   TABLE   customerd   AS   customer   ENGINE   =   Distributed ( perftest_3shards_1replicas ,   default ,   customer ,   rand ());  CREATE   TABLE   partd   AS   part   ENGINE   =   Distributed ( perftest_3shards_1replicas ,   default ,   part ,   rand ());   For testing on a single server, just use MergeTree tables.\nFor distributed testing, you need to configure the  perftest_3shards_1replicas   cluster in the config file.\nNext, create MergeTree tables on each server and a Distributed above them.  Downloading data (change 'customer' to 'customerd' in the distributed version):  cat customer.tbl  |  sed  s/$/2000-01-01/   |  clickhouse-client --query  INSERT INTO customer FORMAT CSV \ncat lineorder.tbl  |  clickhouse-client --query  INSERT INTO lineorder FORMAT CSV", 
            "title": "Star Schema Benchmark"
        }, 
        {
            "location": "/index.html#interfaces", 
            "text": "To explore the system's capabilities, download data to tables, or make manual queries, use the clickhouse-client program.", 
            "title": "Interfaces"
        }, 
        {
            "location": "/index.html#command-line-client", 
            "text": "To work from the command line, you can use  clickhouse-client :  $ clickhouse-client\nClickHouse client version  0 .0.26176.\nConnecting to localhost:9000.\nConnected to ClickHouse server version  0 .0.26176.\n\n: )   The client supports command-line options and configuration files. For more information, see \" Configuring \".", 
            "title": "Command-line client"
        }, 
        {
            "location": "/index.html#usage", 
            "text": "The client can be used in interactive and non-interactive (batch) mode.\nTo use batch mode, specify the 'query' parameter, or send data to 'stdin' (it verifies that 'stdin' is not a terminal), or both.\nSimilar to the HTTP interface, when using the 'query' parameter and sending data to 'stdin', the request is a concatenation of the 'query' parameter, a line feed, and the data in 'stdin'. This is convenient for large INSERT queries.  Example of using the client to insert data:  echo  -ne  1,  some text ,  2016-08-14 00:00:00 \\n2,  some more text ,  2016-08-14 00:00:01   |  clickhouse-client --database = test  --query = INSERT INTO test FORMAT CSV ; \n\ncat  _EOF | clickhouse-client --database=test --query= INSERT INTO test FORMAT CSV ;  3,  some text ,  2016-08-14 00:00:00  4,  some more text ,  2016-08-14 00:00:01  _EOF \n\ncat file.csv  |  clickhouse-client --database = test  --query = INSERT INTO test FORMAT CSV ;   In batch mode, the default data format is TabSeparated. You can set the format in the FORMAT clause of the query.  By default, you can only process a single query in batch mode. To make multiple queries from a \"script,\" use the --multiquery parameter. This works for all queries except INSERT. Query results are output consecutively without additional separators.\nSimilarly, to process a large number of queries, you can run 'clickhouse-client' for each query. Note that it may take tens of milliseconds to launch the 'clickhouse-client' program.  In interactive mode, you get a command line where you can enter queries.  If 'multiline' is not specified (the default):To run the query, press Enter. The semicolon is not necessary at the end of the query. To enter a multiline query, enter a backslash  \\  before the line feed. After you press Enter, you will be asked to enter the next line of the query.  If multiline is specified:To run a query, end it with a semicolon and press Enter. If the semicolon was omitted at the end of the entered line, you will be asked to enter the next line of the query.  Only a single query is run, so everything after the semicolon is ignored.  You can specify  \\G  instead of or after the semicolon. This indicates Vertical format. In this format, each value is printed on a separate line, which is convenient for wide tables. This unusual feature was added for compatibility with the MySQL CLI.  The command line is based on 'readline' (and 'history' or 'libedit', or without a library, depending on the build). In other words, it uses the familiar keyboard shortcuts and keeps a history.\nThe history is written to  ~/.clickhouse-client-history .  By default, the format used is PrettyCompact. You can change the format in the FORMAT clause of the query, or by specifying  \\G  at the end of the query, using the  --format  or  --vertical  argument in the command line, or using the client configuration file.  To exit the client, press Ctrl+D (or Ctrl+C), or enter one of the following instead of a query:\"exit\", \"quit\", \"logout\", \"\u0443\u0447\u0448\u0435\", \"\u0439\u0433\u0448\u0435\", \"\u0434\u0449\u043f\u0449\u0433\u0435\", \"exit;\", \"quit;\", \"logout;\", \"\u0443\u0447\u0448\u0435\u0436\", \"\u0439\u0433\u0448\u0435\u0436\", \"\u0434\u0449\u043f\u0449\u0433\u0435\u0436\", \"q\", \"\u0439\", \"q\", \"Q\", \":q\", \"\u0439\", \"\u0419\", \"\u0416\u0439\"  When processing a query, the client shows:   Progress, which is updated no more than 10 times per second (by default). For quick queries, the progress might not have time to be displayed.  The formatted query after parsing, for debugging.  The result in the specified format.  The number of lines in the result, the time passed, and the average speed of query processing.   You can cancel a long query by pressing Ctrl+C. However, you will still need to wait a little for the server to abort the request. It is not possible to cancel a query at certain stages. If you don't wait and press Ctrl+C a second time, the client will exit.  The command-line client allows passing external data (external temporary tables) for querying. For more information, see the section \"External data for query processing\".", 
            "title": "Usage"
        }, 
        {
            "location": "/index.html#configuring", 
            "text": "You can pass parameters to  clickhouse-client  (all parameters have a default value) using:   From the Command Line   Command-line options override the default values and settings in configuration files.   Configuration files.   Settings in the configuration files override the default values.", 
            "title": "Configuring"
        }, 
        {
            "location": "/index.html#command-line-options", 
            "text": "--host, -h  -\u2013 The server name, 'localhost' by default.  You can use either the name or the IPv4 or IPv6 address.  --port  \u2013 The port to connect to. Default value: 9000. Note that the HTTP interface and the native interface use different ports.  --user, -u  \u2013 The username. Default value: default.  --password  \u2013 The password. Default value: empty string.  --query, -q  \u2013 The query to process when using non-interactive mode.  --database, -d  \u2013 Select the current default database. Default value: the current database from the server settings ('default' by default).  --multiline, -m  \u2013 If specified, allow multiline queries (do not send the query on Enter).  --multiquery, -n  \u2013 If specified, allow processing multiple queries separated by commas. Only works in non-interactive mode.  --format, -f  \u2013 Use the specified default format to output the result.  --vertical, -E  \u2013 If specified, use the Vertical format by default to output the result. This is the same as '--format=Vertical'. In this format, each value is printed on a separate line, which is helpful when displaying wide tables.  --time, -t  \u2013 If specified, print the query execution time to 'stderr' in non-interactive mode.  --stacktrace  \u2013 If specified, also print the stack trace if an exception occurs.  -config-file  \u2013 The name of the configuration file.", 
            "title": "Command line options"
        }, 
        {
            "location": "/index.html#configuration-files", 
            "text": "clickhouse-client   uses the first existing file of the following:   Defined in the  -config-file  parameter.  ./clickhouse-client.xml  \\~/.clickhouse-client/config.xml  /etc/clickhouse-client/config.xml   Example of a config file:  config \n     user username /user \n     password password /password  /config", 
            "title": "Configuration files"
        }, 
        {
            "location": "/index.html#http-interface", 
            "text": "The HTTP interface lets you use ClickHouse on any platform from any programming language. We use it for working from Java and Perl, as well as shell scripts. In other departments, the HTTP interface is used from Perl, Python, and Go. The HTTP interface is more limited than the native interface, but it has better compatibility.  By default, clickhouse-server listens for HTTP on port 8123 (this can be changed in the config).\nIf you make a GET / request without parameters, it returns the string \"Ok\" (with a line feed at the end). You can use this in health-check scripts.  $ curl  http://localhost:8123/ \nOk.  Send the request as a URL 'query' parameter, or as a POST. Or send the beginning of the query in the 'query' parameter, and the rest in the POST (we'll explain later why this is necessary). The size of the URL is limited to 16 KB, so keep this in mind when sending large queries.  If successful, you receive the 200 response code and the result in the response body.\nIf an error occurs, you receive the 500 response code and an error description text in the response body.  When using the GET method, 'readonly' is set. In other words, for queries that modify data, you can only use the POST method. You can send the query itself either in the POST body, or in the URL parameter.  Examples:  $ curl  http://localhost:8123/?query=SELECT%201  1 \n\n$ wget -O- -q  http://localhost:8123/?query=SELECT 1  1 \n\n$ GET  http://localhost:8123/?query=SELECT 1  1 \n\n$  echo  -ne  GET /?query=SELECT%201 HTTP/1.0\\r\\n\\r\\n   |  nc localhost  8123 \nHTTP/1.0  200  OK\nConnection: Close\nDate: Fri,  16  Nov  2012   19 :21:50 GMT 1   As you can see, curl is somewhat inconvenient in that spaces must be URL escaped.Although wget escapes everything itself, we don't recommend using it because it doesn't work well over HTTP 1.1 when using keep-alive and Transfer-Encoding: chunked.  $  echo   SELECT 1   |  curl  http://localhost:8123/  --data-binary @- 1 \n\n$  echo   SELECT 1   |  curl  http://localhost:8123/?query=  --data-binary @- 1 \n\n$  echo   1   |  curl  http://localhost:8123/?query=SELECT  --data-binary @- 1   If part of the query is sent in the parameter, and part in the POST, a line feed is inserted between these two data parts.\nExample (this won't work):  $  echo   ECT 1   |  curl  http://localhost:8123/?query=SEL  --data-binary @-\nCode:  59 , e.displayText ()   =  DB::Exception: Syntax error: failed at position  0 : SEL\nECT  1 \n, expected One of: SHOW TABLES, SHOW DATABASES, SELECT, INSERT, CREATE, ATTACH, RENAME, DROP, DETACH, USE, SET, OPTIMIZE., e.what ()   =  DB::Exception  By default, data is returned in TabSeparated format (for more information, see the \"Formats\" section).\nYou use the FORMAT clause of the query to request any other format.  $  echo   SELECT 1 FORMAT Pretty   |  curl  http://localhost:8123/?  --data-binary @-\n\u250f\u2501\u2501\u2501\u2513\n\u2503  1  \u2503\n\u2521\u2501\u2501\u2501\u2529\n\u2502  1  \u2502\n\u2514\u2500\u2500\u2500\u2518  The POST method of transmitting data is necessary for INSERT queries. In this case, you can write the beginning of the query in the URL parameter, and use POST to pass the data to insert. The data to insert could be, for example, a tab-separated dump from MySQL. In this way, the INSERT query replaces LOAD DATA LOCAL INFILE from MySQL.  Examples: Creating a table:  echo   CREATE TABLE t (a UInt8) ENGINE = Memory   |  POST  http://localhost:8123/   Using the familiar INSERT query for data insertion:  echo   INSERT INTO t VALUES (1),(2),(3)   |  POST  http://localhost:8123/   Data can be sent separately from the query:  echo   (4),(5),(6)   |  POST  http://localhost:8123/?query=INSERT INTO t VALUES   You can specify any data format. The 'Values' format is the same as what is used when writing INSERT INTO t VALUES:  echo   (7),(8),(9)   |  POST  http://localhost:8123/?query=INSERT INTO t FORMAT Values   To insert data from a tab-separated dump, specify the corresponding format:  echo  -ne  10\\n11\\n12\\n   |  POST  http://localhost:8123/?query=INSERT INTO t FORMAT TabSeparated   Reading the table contents. Data is output in random order due to parallel query processing:  $ GET  http://localhost:8123/?query=SELECT a FROM t  7  8  9  10  11  12  1  2  3  4  5  6   Deleting the table.  POST  http://localhost:8123/?query=DROP TABLE t   For successful requests that don't return a data table, an empty response body is returned.  You can use the internal ClickHouse compression format when transmitting data. The compressed data has a non-standard format, and you will need to use the special clickhouse-compressor program to work with it (it is installed with the clickhouse-client package).  If you specified 'compress=1' in the URL, the server will compress the data it sends you.\nIf you specified 'decompress=1' in the URL, the server will decompress the same data that you pass in the POST method.  It is also possible to use the standard gzip-based HTTP compression. To send a POST request compressed using gzip, append the request header  Content-Encoding: gzip .\nIn order for ClickHouse to compress the response using gzip, you must append  Accept-Encoding: gzip  to the request headers, and enable the ClickHouse setting  enable_http_compression .  You can use this to reduce network traffic when transmitting a large amount of data, or for creating dumps that are immediately compressed.  You can use the 'database' URL parameter to specify the default database.  $  echo   SELECT number FROM numbers LIMIT 10   |  curl  http://localhost:8123/?database=system  --data-binary @- 0  1  2  3  4  5  6  7  8  9   By default, the database that is registered in the server settings is used as the default database. By default, this is the database called 'default'. Alternatively, you can always specify the database using a dot before the table name.  The username and password can be indicated in one of two ways:   Using HTTP Basic Authentication. Example:   echo   SELECT 1   |  curl  http://user:password@localhost:8123/  -d @-   In the 'user' and 'password' URL parameters. Example:   echo   SELECT 1   |  curl  http://localhost:8123/?user=user password=password  -d @-  If the user name is not indicated, the username 'default' is used. If the password is not indicated, an empty password is used.\nYou can also use the URL parameters to specify any settings for processing a single query, or entire profiles of settings. Example:\nhttp://localhost:8123/?profile=web max_rows_to_read=1000000000 query=SELECT+1  For more information, see the section \"Settings\".  $  echo   SELECT number FROM system.numbers LIMIT 10   |  curl  http://localhost:8123/?  --data-binary @- 0  1  2  3  4  5  6  7  8  9   For information about other parameters, see the section \"SET\".  Similarly, you can use ClickHouse sessions in the HTTP protocol. To do this, you need to add the  session_id  GET parameter to the request. You can use any string as the session ID. By default, the session is terminated after 60 seconds of inactivity. To change this timeout, modify the  default_session_timeout  setting in the server configuration, or add the  session_timeout  GET parameter to the request. To check the session status, use the  session_check=1  parameter. Only one query at a time can be executed within a single session.  You have the option to receive information about the progress of query execution in X-ClickHouse-Progress headers. To do this, enable the setting send_progress_in_http_headers.  Running requests don't stop automatically if the HTTP connection is lost. Parsing and data formatting are performed on the server side, and using the network might be ineffective.\nThe optional 'query_id' parameter can be passed as the query ID (any string). For more information, see the section \"Settings, replace_running_query\".  The optional 'quota_key' parameter can be passed as the quota key (any string). For more information, see the section \"Quotas\".  The HTTP interface allows passing external data (external temporary tables) for querying. For more information, see the section \"External data for query processing\".", 
            "title": "HTTP interface"
        }, 
        {
            "location": "/index.html#response-buffering", 
            "text": "You can enable response buffering on the server side. The  buffer_size  and  wait_end_of_query  URL parameters are provided for this purpose.  buffer_size  determines the number of bytes in the result to buffer in the server memory. If the result body is larger than this threshold, the buffer is written to the HTTP channel, and the remaining data is sent directly to the HTTP channel.  To ensure that the entire response is buffered, set  wait_end_of_query=1 . In this case, the data that is not stored in memory will be buffered in a temporary server file.  Example:  curl -sS  http://localhost:8123/?max_result_bytes=4000000 buffer_size=3000000 wait_end_of_query=1  -d  SELECT toUInt8(number) FROM system.numbers LIMIT 9000000 FORMAT RowBinary   Use buffering to avoid situations where a query processing error occurred after the response code and HTTP headers were sent to the client. In this situation, an error message is written at the end of the response body, and on the client side, the error can only be detected at the parsing stage.", 
            "title": "Response buffering"
        }, 
        {
            "location": "/index.html#jdbc-driver", 
            "text": "There is an official JDBC driver for ClickHouse. See  here  .", 
            "title": "JDBC driver"
        }, 
        {
            "location": "/index.html#native-interface-tcp", 
            "text": "The native interface is used in the \"clickhouse-client\" command-line client for interaction between servers with distributed query processing, and also in C++ programs. We will only cover the command-line client.", 
            "title": "Native interface (TCP)"
        }, 
        {
            "location": "/index.html#libraries-from-third-party-developers", 
            "text": "There are libraries for working with ClickHouse for:   Python  infi.clickhouse_orm  sqlalchemy-clickhouse  clickhouse-driver  clickhouse-client    PHP  clickhouse-php-client  PhpClickHouseClient  phpClickHouse  clickhouse-client    Go  clickhouse  go-clickhouse  mailrugo-clickhouse  golang-clickhouse    NodeJs  clickhouse (NodeJs)  node-clickhouse    Perl  perl-DBD-ClickHouse  HTTP-ClickHouse  AnyEvent-ClickHouse    Ruby  clickhouse (Ruby)    R  clickhouse-r  RClickhouse    .NET  ClickHouse-Net    C++  clickhouse-cpp    Elixir  clickhousex  clickhouse_ecto    Java  clickhouse-client-java     We have not tested these libraries. They are listed in random order.", 
            "title": "Libraries from third-party developers"
        }, 
        {
            "location": "/index.html#visual-interfaces-from-third-party-developers", 
            "text": "", 
            "title": "Visual interfaces from third-party developers"
        }, 
        {
            "location": "/index.html#tabix", 
            "text": "Web interface for ClickHouse in the  Tabix  project.", 
            "title": "Tabix"
        }, 
        {
            "location": "/index.html#features", 
            "text": "Works with ClickHouse directly from the browser, without the need to install additional software.  Query editor with syntax highlighting.  Auto-completion of commands.  Tools for graphical analysis of query execution.  Color scheme options.   Tabix documentation .", 
            "title": "Features:"
        }, 
        {
            "location": "/index.html#houseops", 
            "text": "HouseOps  is a unique Desktop ClickHouse Ops UI / IDE for OSX, Linux and Windows.", 
            "title": "HouseOps"
        }, 
        {
            "location": "/index.html#features_1", 
            "text": "Query builder;  Database manangement (soon);  Users manangement (soon);  Real-Time Data Analytics (soon);  Cluster/Infra monitoring (soon);  Cluster manangement (soon);  Kafka and Replicated tables monitoring (soon);  And a lot of others features (soon) for you take a beautiful implementation of ClickHouse.", 
            "title": "Features:"
        }, 
        {
            "location": "/index.html#query-language", 
            "text": "", 
            "title": "Query language"
        }, 
        {
            "location": "/index.html#queries", 
            "text": "", 
            "title": "Queries"
        }, 
        {
            "location": "/index.html#create-database", 
            "text": "Creating db_name databases  CREATE   DATABASE   [ IF   NOT   EXISTS ]   db_name   A database  is just a directory for tables.\nIf  IF NOT EXISTS  is included, the query won't return an error if the database already exists.", 
            "title": "CREATE DATABASE"
        }, 
        {
            "location": "/index.html#create-table", 
            "text": "The  CREATE TABLE  query can have several forms.  CREATE   [ TEMPORARY ]   TABLE   [ IF   NOT   EXISTS ]   [ db .] name   [ ON   CLUSTER   cluster ]  ( \n     name1   [ type1 ]   [ DEFAULT | MATERIALIZED | ALIAS   expr1 ], \n     name2   [ type2 ]   [ DEFAULT | MATERIALIZED | ALIAS   expr2 ], \n     ...  )   ENGINE   =   engine   Creates a table named 'name' in the 'db' database or the current database if 'db' is not set, with the structure specified in brackets and the 'engine' engine.\nThe structure of the table is a list of column descriptions. If indexes are supported by the engine, they are indicated as parameters for the table engine.  A column description is  name type  in the simplest case. Example:  RegionID UInt32 .\nExpressions can also be defined for default values (see below).  CREATE   [ TEMPORARY ]   TABLE   [ IF   NOT   EXISTS ]   [ db .] name   AS   [ db2 .] name2   [ ENGINE   =   engine ]   Creates a table with the same structure as another table. You can specify a different engine for the table. If the engine is not specified, the same engine will be used as for the  db2.name2  table.  CREATE   [ TEMPORARY ]   TABLE   [ IF   NOT   EXISTS ]   [ db .] name   ENGINE   =   engine   AS   SELECT   ...   Creates a table with a structure like the result of the  SELECT  query, with the 'engine' engine, and fills it with data from SELECT.  In all cases, if  IF NOT EXISTS  is specified, the query won't return an error if the table already exists. In this case, the query won't do anything.", 
            "title": "CREATE TABLE"
        }, 
        {
            "location": "/index.html#default-values", 
            "text": "The column description can specify an expression for a default value, in one of the following ways: DEFAULT expr ,  MATERIALIZED expr ,  ALIAS expr .\nExample:  URLDomain String DEFAULT domain(URL) .  If an expression for the default value is not defined, the default values will be set to zeros for numbers, empty strings for strings, empty arrays for arrays, and  0000-00-00  for dates or  0000-00-00 00:00:00  for dates with time. NULLs are not supported.  If the default expression is defined, the column type is optional. If there isn't an explicitly defined type, the default expression type is used. Example:  EventDate DEFAULT toDate(EventTime)  \u2013 the 'Date' type will be used for the 'EventDate' column.  If the data type and default expression are defined explicitly, this expression will be cast to the specified type using type casting functions. Example:  Hits UInt32 DEFAULT 0  means the same thing as  Hits UInt32 DEFAULT toUInt32(0) .  Default expressions may be defined as an arbitrary expression from table constants and columns. When creating and changing the table structure, it checks that expressions don't contain loops. For INSERT, it checks that expressions are resolvable \u2013 that all columns they can be calculated from have been passed.  DEFAULT expr  Normal default value. If the INSERT query doesn't specify the corresponding column, it will be filled in by computing the corresponding expression.  MATERIALIZED expr  Materialized expression. Such a column can't be specified for INSERT, because it is always calculated.\nFor an INSERT without a list of columns, these columns are not considered.\nIn addition, this column is not substituted when using an asterisk in a SELECT query. This is to preserve the invariant that the dump obtained using  SELECT *  can be inserted back into the table using INSERT without specifying the list of columns.  ALIAS expr  Synonym. Such a column isn't stored in the table at all.\nIts values can't be inserted in a table, and it is not substituted when using an asterisk in a SELECT query.\nIt can be used in SELECTs if the alias is expanded during query parsing.  When using the ALTER query to add new columns, old data for these columns is not written. Instead, when reading old data that does not have values for the new columns, expressions are computed on the fly by default. However, if running the expressions requires different columns that are not indicated in the query, these columns will additionally be read, but only for the blocks of data that need it.  If you add a new column to a table but later change its default expression, the values used for old data will change (for data where values were not stored on the disk). Note that when running background merges, data for columns that are missing in one of the merging parts is written to the merged part.  It is not possible to set default values for elements in nested data structures.", 
            "title": "Default values"
        }, 
        {
            "location": "/index.html#temporary-tables", 
            "text": "In all cases, if  TEMPORARY  is specified, a temporary table will be created. Temporary tables have the following characteristics:   Temporary tables disappear when the session ends, including if the connection is lost.  A temporary table is created with the Memory engine. The other table engines are not supported.  The DB can't be specified for a temporary table. It is created outside of databases.  If a temporary table has the same name as another one and a query specifies the table name without specifying the DB, the temporary table will be used.  For distributed query processing, temporary tables used in a query are passed to remote servers.   In most cases, temporary tables are not created manually, but when using external data for a query, or for distributed  (GLOBAL) IN . For more information, see the appropriate sections", 
            "title": "Temporary tables"
        }, 
        {
            "location": "/index.html#distributed-ddl-queries-on-cluster-clause", 
            "text": "The  CREATE ,  DROP ,  ALTER , and  RENAME  queries support distributed execution on a cluster.\nFor example, the following query creates the  all_hits   Distributed  table on each host in  cluster :  CREATE   TABLE   IF   NOT   EXISTS   all_hits   ON   CLUSTER   cluster   ( p   Date ,   i   Int32 )   ENGINE   =   Distributed ( cluster ,   default ,   hits )   In order to run these queries correctly, each host must have the same cluster definition (to simplify syncing configs, you can use substitutions from ZooKeeper). They must also connect to the ZooKeeper servers.\nThe local version of the query will eventually be implemented on each host in the cluster, even if some hosts are currently not available. The order for executing queries within a single host is guaranteed. ALTER  queries are not yet supported for replicated tables.", 
            "title": "Distributed DDL queries (ON CLUSTER clause)"
        }, 
        {
            "location": "/index.html#create-view", 
            "text": "CREATE   [ MATERIALIZED ]   VIEW   [ IF   NOT   EXISTS ]   [ db .] name   [ TO [ db .] name ]   [ ENGINE   =   engine ]   [ POPULATE ]   AS   SELECT   ...   Creates a view. There are two types of views: normal and MATERIALIZED.  When creating a materialized view, you must specify ENGINE \u2013 the table engine for storing data.  A materialized view works as follows: when inserting data to the table specified in SELECT, part of the inserted data is converted by this SELECT query, and the result is inserted in the view.  Normal views don't store any data, but just perform a read from another table. In other words, a normal view is nothing more than a saved query. When reading from a view, this saved query is used as a subquery in the FROM clause.  As an example, assume you've created a view:  CREATE   VIEW   view   AS   SELECT   ...   and written a query:  SELECT   a ,   b ,   c   FROM   view   This query is fully equivalent to using the subquery:  SELECT   a ,   b ,   c   FROM   ( SELECT   ...)   Materialized views store data transformed by the corresponding SELECT query.  When creating a materialized view, you must specify ENGINE \u2013 the table engine for storing data.  A materialized view is arranged as follows: when inserting data to the table specified in SELECT, part of the inserted data is converted by this SELECT query, and the result is inserted in the view.  If you specify POPULATE, the existing table data is inserted in the view when creating it, as if making a  CREATE TABLE ... AS SELECT ...  . Otherwise, the query contains only the data inserted in the table after creating the view. We don't recommend using POPULATE, since data inserted in the table during the view creation will not be inserted in it.  A  SELECT  query can contain  DISTINCT ,  GROUP BY ,  ORDER BY ,  LIMIT ... Note that the corresponding conversions are performed independently on each block of inserted data. For example, if  GROUP BY  is set, data is aggregated during insertion, but only within a single packet of inserted data. The data won't be further aggregated. The exception is when using an ENGINE that independently performs data aggregation, such as  SummingMergeTree .  The execution of  ALTER  queries on materialized views has not been fully developed, so they might be inconvenient. If the materialized view uses the construction  TO [db.]name , you can  DETACH  the view, run  ALTER  for the target table, and then  ATTACH  the previously detached ( DETACH ) view.  Views look the same as normal tables. For example, they are listed in the result of the  SHOW TABLES  query.  There isn't a separate query for deleting views. To delete a view, use  DROP TABLE .", 
            "title": "CREATE VIEW"
        }, 
        {
            "location": "/index.html#attach", 
            "text": "This query is exactly the same as  CREATE , but   instead of the word  CREATE  it uses the word  ATTACH .  The query doesn't create data on the disk, but assumes that data is already in the appropriate places, and just adds information about the table to the server.\nAfter executing an ATTACH query, the server will know about the existence of the table.   If the table was previously detached ( DETACH ), meaning that its structure is known, you can use shorthand without defining the structure.  ATTACH   TABLE   [ IF   NOT   EXISTS ]   [ db .] name   This query is used when starting the server. The server stores table metadata as files with  ATTACH  queries, which it simply runs at launch (with the exception of system tables, which are explicitly created on the server).", 
            "title": "ATTACH"
        }, 
        {
            "location": "/index.html#drop", 
            "text": "This query has two types:  DROP DATABASE   and  DROP TABLE .  DROP   DATABASE   [ IF   EXISTS ]   db   [ ON   CLUSTER   cluster ]   Deletes all tables inside the 'db' database, then deletes the 'db' database itself.\nIf  IF EXISTS  is specified, it doesn't return an error if the database doesn't exist.  DROP   [ TEMPORARY ]   TABLE   [ IF   EXISTS ]   [ db .] name   [ ON   CLUSTER   cluster ]   Deletes the table.\nIf  IF EXISTS  is specified, it doesn't return an error if the table doesn't exist or the database doesn't exist.", 
            "title": "DROP"
        }, 
        {
            "location": "/index.html#detach", 
            "text": "Deletes information about the 'name' table from the server. The server stops knowing about the table's existence.  DETACH   TABLE   [ IF   EXISTS ]   [ db .] name   This does not delete the table's data or metadata. On the next server launch, the server will read the metadata and find out about the table again.\nSimilarly, a \"detached\" table can be re-attached using the  ATTACH  query (with the exception of system tables, which do not have metadata stored for them).  There is no  DETACH DATABASE  query.", 
            "title": "DETACH"
        }, 
        {
            "location": "/index.html#rename", 
            "text": "Renames one or more tables.  RENAME   TABLE   [ db11 .] name11   TO   [ db12 .] name12 ,   [ db21 .] name21   TO   [ db22 .] name22 ,   ...   [ ON   CLUSTER   cluster ]   All tables are renamed under global locking. Renaming tables is a light operation. If you indicated another database after TO, the table will be moved to this database. However, the directories with databases must reside in the same file system (otherwise, an error is returned).", 
            "title": "RENAME"
        }, 
        {
            "location": "/index.html#alter", 
            "text": "The  ALTER  query is only supported for  *MergeTree  tables, as well as  Merge and Distributed . The query has several variations.", 
            "title": "ALTER"
        }, 
        {
            "location": "/index.html#column-manipulations", 
            "text": "Changing the table structure.  ALTER   TABLE   [ db ]. name   [ ON   CLUSTER   cluster ]   ADD | DROP | MODIFY   COLUMN   ...   In the query, specify a list of one or more comma-separated actions.\nEach action is an operation on a column.  The following actions are supported:  ADD   COLUMN   name   [ type ]   [ default_expr ]   [ AFTER   name_after ]   Adds a new column to the table with the specified name, type, and  default_expr  (see the section \"Default expressions\"). If you specify  AFTER name_after  (the name of another column), the column is added after the specified one in the list of table columns. Otherwise, the column is added to the end of the table. Note that there is no way to add a column to the beginning of a table. For a chain of actions, 'name_after' can be the name of a column that is added in one of the previous actions.  Adding a column just changes the table structure, without performing any actions with data. The data doesn't appear on the disk after ALTER. If the data is missing for a column when reading from the table, it is filled in with default values (by performing the default expression if there is one, or using zeros or empty strings). If the data is missing for a column when reading from the table, it is filled in with default values (by performing the default expression if there is one, or using zeros or empty strings). The column appears on the disk after merging data parts (see MergeTree).  This approach allows us to complete the ALTER query instantly, without increasing the volume of old data.  DROP   COLUMN   name   Deletes the column with the name 'name'.\nDeletes data from the file system. Since this deletes entire files, the query is completed almost instantly.  MODIFY   COLUMN   name   [ type ]   [ default_expr ]   Changes the 'name' column's type to 'type' and/or the default expression to 'default_expr'. When changing the type, values are converted as if the 'toType' function were applied to them.  If only the default expression is changed, the query doesn't do anything complex, and is completed almost instantly.  Changing the column type is the only complex action \u2013 it changes the contents of files with data. For large tables, this may take a long time.  There are several processing stages:   Preparing temporary (new) files with modified data.  Renaming old files.  Renaming the temporary (new) files to the old names.  Deleting the old files.   Only the first stage takes time. If there is a failure at this stage, the data is not changed.\nIf there is a failure during one of the successive stages, data can be restored manually. The exception is if the old files were deleted from the file system but the data for the new files did not get written to the disk and was lost.  There is no support for changing the column type in arrays and nested data structures.  The  ALTER  query lets you create and delete separate elements (columns) in nested data structures, but not whole nested data structures. To add a nested data structure, you can add columns with a name like  name.nested_name  and the type  Array(T) . A nested data structure is equivalent to multiple array columns with a name that has the same prefix before the dot.  There is no support for deleting columns in the primary key or the sampling key (columns that are in the  ENGINE  expression). Changing the type for columns that are included in the primary key is only possible if this change does not cause the data to be modified (for example, it is allowed to add values to an Enum or change a type with  DateTime   to  UInt32 ).  If the  ALTER  query is not sufficient for making the table changes you need, you can create a new table, copy the data to it using the  INSERT SELECT  query, then switch the tables using the  RENAME  query and delete the old table.  The  ALTER  query blocks all reads and writes for the table. In other words, if a long  SELECT  is running at the time of the  ALTER  query, the  ALTER  query will wait for it to complete. At the same time, all new queries to the same table will wait while this  ALTER  is running.  For tables that don't store data themselves (such as  Merge  and  Distributed ),  ALTER  just changes the table structure, and does not change the structure of subordinate tables. For example, when running ALTER for a  Distributed  table, you will also need to run  ALTER  for the tables on all remote servers.  The  ALTER  query for changing columns is replicated. The instructions are saved in ZooKeeper, then each replica applies them. All  ALTER  queries are run in the same order. The query waits for the appropriate actions to be completed on the other replicas. However, a query to change columns in a replicated table can be interrupted, and all actions will be performed asynchronously.", 
            "title": "Column manipulations"
        }, 
        {
            "location": "/index.html#manipulations-with-partitions-and-parts", 
            "text": "It only works for tables in the  MergeTree  family. The following operations are available:   DETACH PARTITION  \u2013 Move a partition to the 'detached' directory and forget it.  DROP PARTITION  \u2013 Delete a partition.  ATTACH PART|PARTITION  \u2013 Add a new part or partition from the  detached  directory to the table.  FREEZE PARTITION  \u2013 Create a backup of a partition.  FETCH PARTITION  \u2013 Download a partition from another server.   Each type of query is covered separately below.  A partition in a table is data for a single calendar month. This is determined by the values of the date key specified in the table engine parameters. Each month's data is stored separately in order to simplify manipulations with this data.  A \"part\" in the table is part of the data from a single partition, sorted by the primary key.  You can use the  system.parts  table to view the set of table parts and partitions:  SELECT   *   FROM   system . parts   WHERE   active   active  \u2013 Only count active parts. Inactive parts are, for example, source parts remaining after merging to a larger part \u2013 these parts are deleted approximately 10 minutes after merging.  Another way to view a set of parts and partitions is to go into the directory with table data.\nData directory:  /var/lib/clickhouse/data/database/table/ ,where  /var/lib/clickhouse/  is the path to the ClickHouse data, 'database' is the database name, and 'table' is the table name. Example:  $ ls -l /var/lib/clickhouse/data/test/visits/\ntotal  48 \ndrwxrwxrwx  2  clickhouse clickhouse  20480  May   5   02 :58 20140317_20140323_2_2_0\ndrwxrwxrwx  2  clickhouse clickhouse  20480  May   5   02 :58 20140317_20140323_4_4_0\ndrwxrwxrwx  2  clickhouse clickhouse   4096  May   5   02 :55 detached\n-rw-rw-rw-  1  clickhouse clickhouse      2  May   5   02 :58 increment.txt  Here,  20140317_20140323_2_2_0  and  20140317_20140323_4_4_0  are the directories of data parts.  Let's break down the name of the first part:  20140317_20140323_2_2_0 .   20140317  is the minimum date of the data in the chunk.  20140323  is the maximum date of the data in the chunk.  2  is the minimum number of the data block.  2  is the maximum number of the data block.  0  is the chunk level (the depth of the merge tree it is formed from).   Each piece relates to a single partition and contains data for just one month. 201403  is the name of the partition. A partition is a set of parts for a single month.  On an operating server, you can't manually change the set of parts or their data on the file system, since the server won't know about it.\nFor non-replicated tables, you can do this when the server is stopped, but we don't recommended it.\nFor replicated tables, the set of parts can't be changed in any case.  The  detached  directory contains parts that are not used by the server - detached from the table using the  ALTER ... DETACH  query. Parts that are damaged are also moved to this directory, instead of deleting them. You can add, delete, or modify the data in the 'detached' directory at any time \u2013 the server won't know about this until you make the  ALTER TABLE ... ATTACH  query.  ALTER   TABLE   [ db .] table   DETACH   PARTITION   name   Move all data for partitions named 'name' to the 'detached' directory and forget about them.\nThe partition name is specified in YYYYMM format. It can be indicated in single quotes or without them.  After the query is executed, you can do whatever you want with the data in the 'detached' directory \u2014 delete it from the file system, or just leave it.  The query is replicated \u2013 data will be moved to the 'detached' directory and forgotten on all replicas. The query can only be sent to a leader replica. To find out if a replica is a leader, perform SELECT to the 'system.replicas' system table. Alternatively, it is easier to make a query on all replicas, and all except one will throw an exception.  ALTER   TABLE   [ db .] table   DROP   PARTITION   name   The same as the  DETACH  operation. Deletes data from the table. Data parts will be tagged as inactive and will be completely deleted in approximately 10 minutes. The query is replicated \u2013 data will be deleted on all replicas.  ALTER   TABLE   [ db .] table   ATTACH   PARTITION | PART   name   Adds data to the table from the 'detached' directory.  It is possible to add data for an entire partition or a separate part. For a part, specify the full name of the part in single quotes.  The query is replicated. Each replica checks whether there is data in the 'detached' directory. If there is data, it checks the integrity, verifies that it matches the data on the server that initiated the query, and then adds it if everything is correct. If not, it downloads data from the query requestor replica, or from another replica where the data has already been added.  So you can put data in the 'detached' directory on one replica, and use the ALTER ... ATTACH query to add it to the table on all replicas.  ALTER   TABLE   [ db .] table   FREEZE   PARTITION   name   Creates a local backup of one or multiple partitions. The name can be the full name of the partition (for example, 201403), or its prefix (for example, 2014): then the backup will be created for all the corresponding partitions.  The query does the following: for a data snapshot at the time of execution, it creates hardlinks to table data in the directory  /var/lib/clickhouse/shadow/N/...  /var/lib/clickhouse/  is the working ClickHouse directory from the config. N  is the incremental number of the backup.  The same structure of directories is created inside the backup as inside  /var/lib/clickhouse/ .\nIt also performs 'chmod' for all files, forbidding writes to them.  The backup is created almost instantly (but first it waits for current queries to the corresponding table to finish running). At first, the backup doesn't take any space on the disk. As the system works, the backup can take disk space, as data is modified. If the backup is made for old enough data, it won't take space on the disk.  After creating the backup, data from  /var/lib/clickhouse/shadow/  can be copied to the remote server and then deleted on the local server.\nThe entire backup process is performed without stopping the server.  The  ALTER ... FREEZE PARTITION  query is not replicated. A local backup is only created on the local server.  As an alternative, you can manually copy data from the  /var/lib/clickhouse/data/database/table  directory.\nBut if you do this while the server is running, race conditions are possible when copying directories with files being added or changed, and the backup may be inconsistent. You can do this if the server isn't running \u2013 then the resulting data will be the same as after the  ALTER TABLE t FREEZE PARTITION  query.  ALTER TABLE ... FREEZE PARTITION  only copies data, not table metadata. To make a backup of table metadata, copy the file   /var/lib/clickhouse/metadata/database/table.sql  To restore from a backup:    Use the CREATE query to create the table if it doesn't exist. The query can be taken from an .sql file (replace  ATTACH  in it with  CREATE ).  Copy the data from the data/database/table/ directory inside the backup to the  /var/lib/clickhouse/data/database/table/detached/ directory.  Run  ALTER TABLE ... ATTACH PARTITION YYYYMM  queries, where  YYYYMM  is the month, for every month.    In this way, data from the backup will be added to the table.\nRestoring from a backup doesn't require stopping the server.", 
            "title": "Manipulations with partitions and parts"
        }, 
        {
            "location": "/index.html#backups-and-replication", 
            "text": "Replication provides protection from device failures. If all data disappeared on one of your replicas, follow the instructions in the \"Restoration after failure\" section to restore it.  For protection from device failures, you must use replication. For more information about replication, see the section \"Data replication\".  Backups protect against human error (accidentally deleting data, deleting the wrong data or in the wrong cluster, or corrupting data).\nFor high-volume databases, it can be difficult to copy backups to remote servers. In such cases, to protect from human error, you can keep a backup on the same server (it will reside in  /var/lib/clickhouse/shadow/ ).  ALTER   TABLE   [ db .] table   FETCH   PARTITION   name   FROM   path-in-zookeeper   This query only works for replicatable tables.  It downloads the specified partition from the shard that has its  ZooKeeper path  specified in the  FROM  clause, then puts it in the  detached  directory for the specified table.  Although the query is called  ALTER TABLE , it does not change the table structure, and does not immediately change the data available in the table.  Data is placed in the  detached  directory. You can use the  ALTER TABLE ... ATTACH  query to attach the data.  The  FROM   clause specifies the path in  ZooKeeper . For example,  /clickhouse/tables/01-01/visits .\nBefore downloading, the system checks that the partition exists and the table structure matches. The most appropriate replica is selected automatically from the healthy replicas.  The  ALTER ... FETCH PARTITION  query is not replicated. The partition will be downloaded to the 'detached' directory only on the local server. Note that if after this you use the  ALTER TABLE ... ATTACH  query to add data to the table, the data will be added on all replicas (on one of the replicas it will be added from the 'detached' directory, and on the rest it will be loaded from neighboring replicas).", 
            "title": "Backups and replication"
        }, 
        {
            "location": "/index.html#synchronicity-of-alter-queries", 
            "text": "For non-replicatable tables, all  ALTER  queries are performed synchronously. For replicatable tables, the query just adds instructions for the appropriate actions to  ZooKeeper , and the actions themselves are performed as soon as possible. However, the query can wait for these actions to be completed on all the replicas.  For  ALTER ... ATTACH|DETACH|DROP  queries, you can use the  replication_alter_partitions_sync  setting to set up waiting.\nPossible values:  0  \u2013 do not wait;  1  \u2013 only wait for own execution (default);  2  \u2013 wait for all.", 
            "title": "Synchronicity of ALTER queries"
        }, 
        {
            "location": "/index.html#show-databases", 
            "text": "SHOW   DATABASES   [ INTO   OUTFILE   filename ]   [ FORMAT   format ]   Prints a list of all databases.\nThis query is identical to  SELECT name FROM system.databases [INTO OUTFILE filename] [FORMAT format] .  See also the section \"Formats\".", 
            "title": "SHOW DATABASES"
        }, 
        {
            "location": "/index.html#show-tables", 
            "text": "SHOW   [ TEMPORARY ]   TABLES   [ FROM   db ]   [ LIKE   pattern ]   [ INTO   OUTFILE   filename ]   [ FORMAT   format ]   Displays a list of tables   tables from the current database, or from the 'db' database if \"FROM db\" is specified.  all tables, or tables whose name matches the pattern, if \"LIKE 'pattern'\" is specified.   This query is identical to:  SELECT name FROM system.tables WHERE database = 'db' [AND name LIKE 'pattern'] [INTO OUTFILE filename] [FORMAT format] .  See also the section \"LIKE operator\".", 
            "title": "SHOW TABLES"
        }, 
        {
            "location": "/index.html#show-processlist", 
            "text": "SHOW   PROCESSLIST   [ INTO   OUTFILE   filename ]   [ FORMAT   format ]   Outputs a list of queries currently being processed, other than  SHOW PROCESSLIST  queries.  Prints a table containing the columns:  user  \u2013 The user who made the query. Keep in mind that for distributed processing, queries are sent to remote servers under the 'default' user. SHOW PROCESSLIST shows the username for a specific query, not for a query that this query initiated.  address  \u2013 The name of the host that the query was sent from. For distributed processing, on remote servers, this is the name of the query requestor host. To track where a distributed query was originally made from, look at SHOW PROCESSLIST on the query requestor server.  elapsed  \u2013 The execution time, in seconds. Queries are output in order of decreasing execution time.  rows_read ,  bytes_read  \u2013 How many rows and bytes of uncompressed data were read when processing the query. For distributed processing, data is totaled from all the remote servers. This is the data used for restrictions and quotas.  memory_usage  \u2013 Current RAM usage in bytes. See the setting 'max_memory_usage'.  query  \u2013 The query itself. In INSERT queries, the data for insertion is not output.  query_id  \u2013 The query identifier. Non-empty only if it was explicitly defined by the user. For distributed processing, the query ID is not passed to remote servers.  This query is identical to:  SELECT * FROM system.processes [INTO OUTFILE filename] [FORMAT format] .  Tip (execute in the console):  watch -n1  clickhouse-client --query= SHOW PROCESSLIST", 
            "title": "SHOW PROCESSLIST"
        }, 
        {
            "location": "/index.html#show-create-table", 
            "text": "SHOW   CREATE   [ TEMPORARY ]   TABLE   [ db .] table   [ INTO   OUTFILE   filename ]   [ FORMAT   format ]   Returns a single  String -type 'statement' column, which contains a single value \u2013 the  CREATE  query used for creating the specified table.", 
            "title": "SHOW CREATE TABLE"
        }, 
        {
            "location": "/index.html#describe-table", 
            "text": "DESC | DESCRIBE   TABLE   [ db .] table   [ INTO   OUTFILE   filename ]   [ FORMAT   format ]   Returns two  String -type columns:  name  and  type , which indicate the names and types of columns in the specified table.  Nested data structures are output in \"expanded\" format. Each column is shown separately, with the name after a dot.", 
            "title": "DESCRIBE TABLE"
        }, 
        {
            "location": "/index.html#exists", 
            "text": "EXISTS   [ TEMPORARY ]   TABLE   [ db .] name   [ INTO   OUTFILE   filename ]   [ FORMAT   format ]   Returns a single  UInt8 -type column, which contains the single value  0  if the table or database doesn't exist, or  1  if the table exists in the specified database.", 
            "title": "EXISTS"
        }, 
        {
            "location": "/index.html#use", 
            "text": "USE   db   Lets you set the current database for the session.\nThe current database is used for searching for tables if the database is not explicitly defined in the query with a dot before the table name.\nThis query can't be made when using the HTTP protocol, since there is no concept of a session.", 
            "title": "USE"
        }, 
        {
            "location": "/index.html#set", 
            "text": "SET   param   =   value   Allows you to set  param  to  value . You can also make all the settings from the specified settings profile in a single query. To do this, specify 'profile' as the setting name. For more information, see the section \"Settings\".\nThe setting is made for the session, or for the server (globally) if  GLOBAL  is specified.\nWhen making a global setting, the setting is not applied to sessions already running, including the current session. It will only be used for new sessions.  When the server is restarted, global settings made using  SET  are lost.\nTo make settings that persist after a server restart, you can only use the server's config file.", 
            "title": "SET"
        }, 
        {
            "location": "/index.html#optimize", 
            "text": "OPTIMIZE   TABLE   [ db .] name   [ PARTITION   partition ]   [ FINAL ]   Asks the table engine to do something for optimization.\nSupported only by  *MergeTree  engines, in which this query initializes a non-scheduled merge of data parts.\nIf you specify a  PARTITION , only the specified partition will be optimized.\nIf you specify  FINAL , optimization will be performed even when all the data is already in one part.", 
            "title": "OPTIMIZE"
        }, 
        {
            "location": "/index.html#insert", 
            "text": "Adding data.  Basic query format:  INSERT   INTO   [ db .] table   [( c1 ,   c2 ,   c3 )]   VALUES   ( v11 ,   v12 ,   v13 ),   ( v21 ,   v22 ,   v23 ),   ...   The query can specify a list of columns to insert  [(c1, c2, c3)] . In this case, the rest of the columns are filled with:   The values calculated from the  DEFAULT   expressions specified in the table definition.  Zeros and empty strings, if  DEFAULT  expressions are not defined.   If  strict_insert_defaults=1 , columns that do not have  DEFAULT  defined must be listed in the query.  Data can be passed to the INSERT in any  format  supported by ClickHouse. The format must be specified explicitly in the query:  INSERT   INTO   [ db .] table   [( c1 ,   c2 ,   c3 )]   FORMAT   format_name   data_set   For example, the following query format is identical to the basic version of INSERT ... VALUES:  INSERT   INTO   [ db .] table   [( c1 ,   c2 ,   c3 )]   FORMAT   Values   ( v11 ,   v12 ,   v13 ),   ( v21 ,   v22 ,   v23 ),   ...   ClickHouse removes all spaces and one line feed (if there is one) before the data. When forming a query, we recommend putting the data on a new line after the query operators (this is important if the data begins with spaces).  Example:  INSERT   INTO   t   FORMAT   TabSeparated  11    Hello ,   world !  22    Qwerty   You can insert data separately from the query by using the command-line client or the HTTP interface. For more information, see the section \" Interfaces \".", 
            "title": "INSERT"
        }, 
        {
            "location": "/index.html#inserting-the-results-of-select", 
            "text": "INSERT   INTO   [ db .] table   [( c1 ,   c2 ,   c3 )]   SELECT   ...   Columns are mapped according to their position in the SELECT clause. However, their names in the SELECT expression and the table for INSERT may differ. If necessary, type casting is performed.  None of the data formats except Values allow setting values to expressions such as  now() ,  1 + 2 ,  and so on. The Values format allows limited use of expressions, but this is not recommended, because in this case inefficient code is used for their execution.  Other queries for modifying data parts are not supported:  UPDATE ,  DELETE ,  REPLACE ,  MERGE ,  UPSERT ,  INSERT UPDATE .\nHowever, you can delete old data using  ALTER TABLE ... DROP PARTITION .", 
            "title": "Inserting the results of SELECT"
        }, 
        {
            "location": "/index.html#performance-considerations", 
            "text": "INSERT  sorts the input data by primary key and splits them into partitions by month. If you insert data for mixed months, it can significantly reduce the performance of the  INSERT  query. To avoid this:   Add data in fairly large batches, such as 100,000 rows at a time.  Group data by month before uploading it to ClickHouse.   Performance will not decrease if:   Data is added in real time.  You upload data that is usually sorted by time.", 
            "title": "Performance considerations"
        }, 
        {
            "location": "/index.html#select", 
            "text": "Data sampling.  SELECT   [ DISTINCT ]   expr_list \n     [ FROM   [ db .] table   |   ( subquery )   |   table_function ]   [ FINAL ] \n     [ SAMPLE   sample_coeff ] \n     [ ARRAY   JOIN   ...] \n     [ GLOBAL ]   ANY | ALL   INNER | LEFT   JOIN   ( subquery ) | table   USING   columns_list \n     [ PREWHERE   expr ] \n     [ WHERE   expr ] \n     [ GROUP   BY   expr_list ]   [ WITH   TOTALS ] \n     [ HAVING   expr ] \n     [ ORDER   BY   expr_list ] \n     [ LIMIT   [ n ,   ] m ] \n     [ UNION   ALL   ...] \n     [ INTO   OUTFILE   filename ] \n     [ FORMAT   format ] \n     [ LIMIT   n   BY   columns ]   All the clauses are optional, except for the required list of expressions immediately after SELECT.\nThe clauses below are described in almost the same order as in the query execution conveyor.  If the query omits the  DISTINCT ,  GROUP BY  and  ORDER BY  clauses and the  IN  and  JOIN  subqueries, the query will be completely stream processed, using O(1) amount of RAM.\nOtherwise, the query might consume a lot of RAM if the appropriate restrictions are not specified:  max_memory_usage ,  max_rows_to_group_by ,  max_rows_to_sort ,  max_rows_in_distinct ,  max_bytes_in_distinct ,  max_rows_in_set ,  max_bytes_in_set ,  max_rows_in_join ,  max_bytes_in_join ,  max_bytes_before_external_sort ,  max_bytes_before_external_group_by . For more information, see the section \"Settings\". It is possible to use external sorting (saving temporary tables to a disk) and external aggregation.  The system does not have \"merge join\" .", 
            "title": "SELECT"
        }, 
        {
            "location": "/index.html#from-clause", 
            "text": "If the FROM clause is omitted, data will be read from the  system.one  table.\nThe 'system.one' table contains exactly one row (this table fulfills the same purpose as the DUAL table found in other DBMSs).  The FROM clause specifies the table to read data from, or a subquery, or a table function; ARRAY JOIN and the regular JOIN may also be included (see below).  Instead of a table, the SELECT subquery may be specified in brackets.\nIn this case, the subquery processing pipeline will be built into the processing pipeline of an external query.\nIn contrast to standard SQL, a synonym does not need to be specified after a subquery. For compatibility, it is possible to write 'AS name' after a subquery, but the specified name isn't used anywhere.  A table function may be specified instead of a table. For more information, see the section \"Table functions\".  To execute a query, all the columns listed in the query are extracted from the appropriate table. Any columns not needed for the external query are thrown out of the subqueries.\nIf a query does not list any columns (for example, SELECT count() FROM t), some column is extracted from the table anyway (the smallest one is preferred), in order to calculate the number of rows.  The FINAL modifier can be used only for a SELECT from a CollapsingMergeTree table. When you specify FINAL, data is selected fully \"collapsed\". Keep in mind that using FINAL leads to a selection that includes columns related to the primary key, in addition to the columns specified in the SELECT. Additionally, the query will be executed in a single stream, and data will be merged during query execution. This means that when using FINAL, the query is processed more slowly. In most cases, you should avoid using FINAL. For more information, see the section \"CollapsingMergeTree engine\".", 
            "title": "FROM clause"
        }, 
        {
            "location": "/index.html#sample-clause", 
            "text": "The SAMPLE clause allows for approximated query processing. Approximated query processing is only supported by MergeTree* type tables, and only if the sampling expression was specified during table creation (see the section \"MergeTree engine\").  SAMPLE  has the  format SAMPLE k , where  k  is a decimal number from 0 to 1, or  SAMPLE n , where 'n' is a sufficiently large integer.  In the first case, the query will be executed on 'k' percent of data. For example,  SAMPLE 0.1  runs the query on 10% of data.\nIn the second case, the query will be executed on a sample of no more than 'n' rows. For example,  SAMPLE 10000000  runs the query on a maximum of 10,000,000 rows.  Example:  SELECT \n     Title , \n     count ()   *   10   AS   PageViews  FROM   hits_distributed  SAMPLE   0 . 1  WHERE \n     CounterID   =   34 \n     AND   toDate ( EventDate )   =   toDate ( 2013-01-29 ) \n     AND   toDate ( EventDate )   =   toDate ( 2013-02-04 ) \n     AND   NOT   DontCountHits \n     AND   NOT   Refresh \n     AND   Title   !=    GROUP   BY   Title  ORDER   BY   PageViews   DESC   LIMIT   1000   In this example, the query is executed on a sample from 0.1 (10%) of data. Values of aggregate functions are not corrected automatically, so to get an approximate result, the value 'count()' is manually multiplied by 10.  When using something like  SAMPLE 10000000 , there isn't any information about which relative percent of data was processed or what the aggregate functions should be multiplied by, so this method of writing is not always appropriate to the situation.  A sample with a relative coefficient is \"consistent\": if we look at all possible data that could be in the table, a sample (when using a single sampling expression specified during table creation) with the same coefficient always selects the same subset of possible data. In other words, a sample from different tables on different servers at different times is made the same way.  For example, a sample of user IDs takes rows with the same subset of all the possible user IDs from different tables. This allows using the sample in subqueries in the IN clause, as well as for manually correlating results of different queries with samples.", 
            "title": "SAMPLE clause"
        }, 
        {
            "location": "/index.html#array-join-clause", 
            "text": "Allows executing JOIN with an array or nested data structure. The intent is similar to the 'arrayJoin' function, but its functionality is broader.  ARRAY JOIN  is essentially  INNER JOIN  with an array. Example:  :) CREATE TABLE arrays_test (s String, arr Array(UInt8)) ENGINE = Memory\n\nCREATE TABLE arrays_test\n(\n    s String,\n    arr Array(UInt8)\n) ENGINE = Memory\n\nOk.\n\n0 rows in set. Elapsed: 0.001 sec.\n\n:) INSERT INTO arrays_test VALUES ( Hello , [1,2]), ( World , [3,4,5]), ( Goodbye , [])\n\nINSERT INTO arrays_test VALUES\n\nOk.\n\n3 rows in set. Elapsed: 0.001 sec.\n\n:) SELECT * FROM arrays_test\n\nSELECT *\nFROM arrays_test\n\n\u250c\u2500s\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500arr\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Hello   \u2502 [1,2]   \u2502\n\u2502 World   \u2502 [3,4,5] \u2502\n\u2502 Goodbye \u2502 []      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n3 rows in set. Elapsed: 0.001 sec.\n\n:) SELECT s, arr FROM arrays_test ARRAY JOIN arr\n\nSELECT s, arr\nFROM arrays_test\nARRAY JOIN arr\n\n\u250c\u2500s\u2500\u2500\u2500\u2500\u2500\u252c\u2500arr\u2500\u2510\n\u2502 Hello \u2502   1 \u2502\n\u2502 Hello \u2502   2 \u2502\n\u2502 World \u2502   3 \u2502\n\u2502 World \u2502   4 \u2502\n\u2502 World \u2502   5 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n\n5 rows in set. Elapsed: 0.001 sec.  An alias can be specified for an array in the ARRAY JOIN clause. In this case, an array item can be accessed by this alias, but the array itself by the original name. Example:  :) SELECT s, arr, a FROM arrays_test ARRAY JOIN arr AS a\n\nSELECT s, arr, a\nFROM arrays_test\nARRAY JOIN arr AS a\n\n\u250c\u2500s\u2500\u2500\u2500\u2500\u2500\u252c\u2500arr\u2500\u2500\u2500\u2500\u2500\u252c\u2500a\u2500\u2510\n\u2502 Hello \u2502 [1,2]   \u2502 1 \u2502\n\u2502 Hello \u2502 [1,2]   \u2502 2 \u2502\n\u2502 World \u2502 [3,4,5] \u2502 3 \u2502\n\u2502 World \u2502 [3,4,5] \u2502 4 \u2502\n\u2502 World \u2502 [3,4,5] \u2502 5 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\n\n5 rows in set. Elapsed: 0.001 sec.  Multiple arrays of the same size can be comma-separated in the ARRAY JOIN clause. In this case, JOIN is performed with them simultaneously (the direct sum, not the direct product). Example:  :) SELECT s, arr, a, num, mapped FROM arrays_test ARRAY JOIN arr AS a, arrayEnumerate(arr) AS num, arrayMap(x -  x + 1, arr) AS mapped\n\nSELECT s, arr, a, num, mapped\nFROM arrays_test\nARRAY JOIN arr AS a, arrayEnumerate(arr) AS num, arrayMap(lambda(tuple(x), plus(x, 1)), arr) AS mapped\n\n\u250c\u2500s\u2500\u2500\u2500\u2500\u2500\u252c\u2500arr\u2500\u2500\u2500\u2500\u2500\u252c\u2500a\u2500\u252c\u2500num\u2500\u252c\u2500mapped\u2500\u2510\n\u2502 Hello \u2502 [1,2]   \u2502 1 \u2502   1 \u2502      2 \u2502\n\u2502 Hello \u2502 [1,2]   \u2502 2 \u2502   2 \u2502      3 \u2502\n\u2502 World \u2502 [3,4,5] \u2502 3 \u2502   1 \u2502      4 \u2502\n\u2502 World \u2502 [3,4,5] \u2502 4 \u2502   2 \u2502      5 \u2502\n\u2502 World \u2502 [3,4,5] \u2502 5 \u2502   3 \u2502      6 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n5 rows in set. Elapsed: 0.002 sec.\n\n:) SELECT s, arr, a, num, arrayEnumerate(arr) FROM arrays_test ARRAY JOIN arr AS a, arrayEnumerate(arr) AS num\n\nSELECT s, arr, a, num, arrayEnumerate(arr)\nFROM arrays_test\nARRAY JOIN arr AS a, arrayEnumerate(arr) AS num\n\n\u250c\u2500s\u2500\u2500\u2500\u2500\u2500\u252c\u2500arr\u2500\u2500\u2500\u2500\u2500\u252c\u2500a\u2500\u252c\u2500num\u2500\u252c\u2500arrayEnumerate(arr)\u2500\u2510\n\u2502 Hello \u2502 [1,2]   \u2502 1 \u2502   1 \u2502 [1,2]               \u2502\n\u2502 Hello \u2502 [1,2]   \u2502 2 \u2502   2 \u2502 [1,2]               \u2502\n\u2502 World \u2502 [3,4,5] \u2502 3 \u2502   1 \u2502 [1,2,3]             \u2502\n\u2502 World \u2502 [3,4,5] \u2502 4 \u2502   2 \u2502 [1,2,3]             \u2502\n\u2502 World \u2502 [3,4,5] \u2502 5 \u2502   3 \u2502 [1,2,3]             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n5 rows in set. Elapsed: 0.002 sec.  ARRAY JOIN also works with nested data structures. Example:  :) CREATE TABLE nested_test (s String, nest Nested(x UInt8, y UInt32)) ENGINE = Memory\n\nCREATE TABLE nested_test\n(\n    s String,\n    nest Nested(\n    x UInt8,\n    y UInt32)\n) ENGINE = Memory\n\nOk.\n\n0 rows in set. Elapsed: 0.006 sec.\n\n:) INSERT INTO nested_test VALUES ( Hello , [1,2], [10,20]), ( World , [3,4,5], [30,40,50]), ( Goodbye , [], [])\n\nINSERT INTO nested_test VALUES\n\nOk.\n\n3 rows in set. Elapsed: 0.001 sec.\n\n:) SELECT * FROM nested_test\n\nSELECT *\nFROM nested_test\n\n\u250c\u2500s\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500nest.x\u2500\u2500\u252c\u2500nest.y\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Hello   \u2502 [1,2]   \u2502 [10,20]    \u2502\n\u2502 World   \u2502 [3,4,5] \u2502 [30,40,50] \u2502\n\u2502 Goodbye \u2502 []      \u2502 []         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n3 rows in set. Elapsed: 0.001 sec.\n\n:) SELECT s, nest.x, nest.y FROM nested_test ARRAY JOIN nest\n\nSELECT s, `nest.x`, `nest.y`\nFROM nested_test\nARRAY JOIN nest\n\n\u250c\u2500s\u2500\u2500\u2500\u2500\u2500\u252c\u2500nest.x\u2500\u252c\u2500nest.y\u2500\u2510\n\u2502 Hello \u2502      1 \u2502     10 \u2502\n\u2502 Hello \u2502      2 \u2502     20 \u2502\n\u2502 World \u2502      3 \u2502     30 \u2502\n\u2502 World \u2502      4 \u2502     40 \u2502\n\u2502 World \u2502      5 \u2502     50 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n5 rows in set. Elapsed: 0.001 sec.  When specifying names of nested data structures in ARRAY JOIN, the meaning is the same as ARRAY JOIN with all the array elements that it consists of. Example:  :) SELECT s, nest.x, nest.y FROM nested_test ARRAY JOIN nest.x, nest.y\n\nSELECT s, `nest.x`, `nest.y`\nFROM nested_test\nARRAY JOIN `nest.x`, `nest.y`\n\n\u250c\u2500s\u2500\u2500\u2500\u2500\u2500\u252c\u2500nest.x\u2500\u252c\u2500nest.y\u2500\u2510\n\u2502 Hello \u2502      1 \u2502     10 \u2502\n\u2502 Hello \u2502      2 \u2502     20 \u2502\n\u2502 World \u2502      3 \u2502     30 \u2502\n\u2502 World \u2502      4 \u2502     40 \u2502\n\u2502 World \u2502      5 \u2502     50 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n5 rows in set. Elapsed: 0.001 sec.  This variation also makes sense:  :) SELECT s, nest.x, nest.y FROM nested_test ARRAY JOIN nest.x\n\nSELECT s, `nest.x`, `nest.y`\nFROM nested_test\nARRAY JOIN `nest.x`\n\n\u250c\u2500s\u2500\u2500\u2500\u2500\u2500\u252c\u2500nest.x\u2500\u252c\u2500nest.y\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Hello \u2502      1 \u2502 [10,20]    \u2502\n\u2502 Hello \u2502      2 \u2502 [10,20]    \u2502\n\u2502 World \u2502      3 \u2502 [30,40,50] \u2502\n\u2502 World \u2502      4 \u2502 [30,40,50] \u2502\n\u2502 World \u2502      5 \u2502 [30,40,50] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n5 rows in set. Elapsed: 0.001 sec.  An alias may be used for a nested data structure, in order to select either the JOIN result or the source array. Example:  :) SELECT s, n.x, n.y, nest.x, nest.y FROM nested_test ARRAY JOIN nest AS n\n\nSELECT s, `n.x`, `n.y`, `nest.x`, `nest.y`\nFROM nested_test\nARRAY JOIN nest AS n\n\n\u250c\u2500s\u2500\u2500\u2500\u2500\u2500\u252c\u2500n.x\u2500\u252c\u2500n.y\u2500\u252c\u2500nest.x\u2500\u2500\u252c\u2500nest.y\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Hello \u2502   1 \u2502  10 \u2502 [1,2]   \u2502 [10,20]    \u2502\n\u2502 Hello \u2502   2 \u2502  20 \u2502 [1,2]   \u2502 [10,20]    \u2502\n\u2502 World \u2502   3 \u2502  30 \u2502 [3,4,5] \u2502 [30,40,50] \u2502\n\u2502 World \u2502   4 \u2502  40 \u2502 [3,4,5] \u2502 [30,40,50] \u2502\n\u2502 World \u2502   5 \u2502  50 \u2502 [3,4,5] \u2502 [30,40,50] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n5 rows in set. Elapsed: 0.001 sec.  Example of using the arrayEnumerate function:  :) SELECT s, n.x, n.y, nest.x, nest.y, num FROM nested_test ARRAY JOIN nest AS n, arrayEnumerate(nest.x) AS num\n\nSELECT s, `n.x`, `n.y`, `nest.x`, `nest.y`, num\nFROM nested_test\nARRAY JOIN nest AS n, arrayEnumerate(`nest.x`) AS num\n\n\u250c\u2500s\u2500\u2500\u2500\u2500\u2500\u252c\u2500n.x\u2500\u252c\u2500n.y\u2500\u252c\u2500nest.x\u2500\u2500\u252c\u2500nest.y\u2500\u2500\u2500\u2500\u2500\u252c\u2500num\u2500\u2510\n\u2502 Hello \u2502   1 \u2502  10 \u2502 [1,2]   \u2502 [10,20]    \u2502   1 \u2502\n\u2502 Hello \u2502   2 \u2502  20 \u2502 [1,2]   \u2502 [10,20]    \u2502   2 \u2502\n\u2502 World \u2502   3 \u2502  30 \u2502 [3,4,5] \u2502 [30,40,50] \u2502   1 \u2502\n\u2502 World \u2502   4 \u2502  40 \u2502 [3,4,5] \u2502 [30,40,50] \u2502   2 \u2502\n\u2502 World \u2502   5 \u2502  50 \u2502 [3,4,5] \u2502 [30,40,50] \u2502   3 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n\n5 rows in set. Elapsed: 0.002 sec.  The query can only specify a single ARRAY JOIN clause.  The corresponding conversion can be performed before the WHERE/PREWHERE clause (if its result is needed in this clause), or after completing WHERE/PREWHERE (to reduce the volume of calculations).", 
            "title": "ARRAY JOIN clause"
        }, 
        {
            "location": "/index.html#join-clause", 
            "text": "The normal JOIN, which is not related to ARRAY JOIN described above.  [ GLOBAL ]   ANY | ALL   INNER | LEFT   [ OUTER ]   JOIN   ( subquery ) | table   USING   columns_list   Performs joins with data from the subquery. At the beginning of query processing, the subquery specified after JOIN is run, and its result is saved in memory. Then it is read from the \"left\" table specified in the FROM clause, and while it is being read, for each of the read rows from the \"left\" table, rows are selected from the subquery results table (the \"right\" table) that meet the condition for matching the values of the columns specified in USING.  The table name can be specified instead of a subquery. This is equivalent to the  SELECT * FROM table  subquery, except in a special case when the table has the Join engine \u2013 an array prepared for joining.  All columns that are not needed for the JOIN are deleted from the subquery.  There are several types of JOINs:  INNER  or  LEFT  type:If INNER is specified, the result will contain only those rows that have a matching row in the right table.\nIf LEFT is specified, any rows in the left table that don't have matching rows in the right table will be assigned the default value - zeros or empty rows. LEFT OUTER may be written instead of LEFT; the word OUTER does not affect anything.  ANY  or  ALL  stringency:If  ANY  is specified and the right table has several matching rows, only the first one found is joined.\nIf  ALL  is specified and the right table has several matching rows, the data will be multiplied by the number of these rows.  Using ALL corresponds to the normal JOIN semantic from standard SQL.\nUsing ANY is optimal. If the right table has only one matching row, the results of ANY and ALL are the same. You must specify either ANY or ALL (neither of them is selected by default).  GLOBAL  distribution:  When using a normal JOIN, the query is sent to remote servers. Subqueries are run on each of them in order to make the right table, and the join is performed with this table. In other words, the right table is formed on each server separately.  When using  GLOBAL ... JOIN , first the requestor server runs a subquery to calculate the right table. This temporary table is passed to each remote server, and queries are run on them using the temporary data that was transmitted.  Be careful when using GLOBAL JOINs. For more information, see the section \"Distributed subqueries\".  Any combination of JOINs is possible. For example,  GLOBAL ANY LEFT OUTER JOIN .  When running a JOIN, there is no optimization of the order of execution in relation to other stages of the query. The join (a search in the right table) is run before filtering in WHERE and before aggregation. In order to explicitly set the processing order, we recommend running a JOIN subquery with a subquery.  Example:  SELECT \n     CounterID , \n     hits , \n     visits  FROM  ( \n     SELECT \n         CounterID , \n         count ()   AS   hits \n     FROM   test . hits \n     GROUP   BY   CounterID  )   ANY   LEFT   JOIN  ( \n     SELECT \n         CounterID , \n         sum ( Sign )   AS   visits \n     FROM   test . visits \n     GROUP   BY   CounterID  )   USING   CounterID  ORDER   BY   hits   DESC  LIMIT   10   \u250c\u2500CounterID\u2500\u252c\u2500\u2500\u2500hits\u2500\u252c\u2500visits\u2500\u2510\n\u2502   1143050 \u2502 523264 \u2502  13665 \u2502\n\u2502    731962 \u2502 475698 \u2502 102716 \u2502\n\u2502    722545 \u2502 337212 \u2502 108187 \u2502\n\u2502    722889 \u2502 252197 \u2502  10547 \u2502\n\u2502   2237260 \u2502 196036 \u2502   9522 \u2502\n\u2502  23057320 \u2502 147211 \u2502   7689 \u2502\n\u2502    722818 \u2502  90109 \u2502  17847 \u2502\n\u2502     48221 \u2502  85379 \u2502   4652 \u2502\n\u2502  19762435 \u2502  77807 \u2502   7026 \u2502\n\u2502    722884 \u2502  77492 \u2502  11056 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  Subqueries don't allow you to set names or use them for referencing a column from a specific subquery.\nThe columns specified in USING must have the same names in both subqueries, and the other columns must be named differently. You can use aliases to change the names of columns in subqueries (the example uses the aliases 'hits' and 'visits').  The USING clause specifies one or more columns to join, which establishes the equality of these columns. The list of columns is set without brackets. More complex join conditions are not supported.  The right table (the subquery result) resides in RAM. If there isn't enough memory, you can't run a JOIN.  Only one JOIN can be specified in a query (on a single level). To run multiple JOINs, you can put them in subqueries.  Each time a query is run with the same JOIN, the subquery is run again \u2013 the result is not cached. To avoid this, use the special 'Join' table engine, which is a prepared array for joining that is always in RAM. For more information, see the section \"Table engines, Join\".  In some cases, it is more efficient to use IN instead of JOIN.\nAmong the various types of JOINs, the most efficient is ANY LEFT JOIN, then ANY INNER JOIN. The least efficient are ALL LEFT JOIN and ALL INNER JOIN.  If you need a JOIN for joining with dimension tables (these are relatively small tables that contain dimension properties, such as names for advertising campaigns), a JOIN might not be very convenient due to the bulky syntax and the fact that the right table is re-accessed for every query. For such cases, there is an \"external dictionaries\" feature that you should use instead of JOIN. For more information, see the section \"External dictionaries\".", 
            "title": "JOIN clause"
        }, 
        {
            "location": "/index.html#where-clause", 
            "text": "If there is a WHERE clause, it must contain an expression with the UInt8 type. This is usually an expression with comparison and logical operators.\nThis expression will be used for filtering data before all other transformations.  If indexes are supported by the database table engine, the expression is evaluated on the ability to use indexes.", 
            "title": "WHERE clause"
        }, 
        {
            "location": "/index.html#prewhere-clause", 
            "text": "This clause has the same meaning as the WHERE clause. The difference is in which data is read from the table.\nWhen using PREWHERE, first only the columns necessary for executing PREWHERE are read. Then the other columns are read that are needed for running the query, but only those blocks where the PREWHERE expression is true.  It makes sense to use PREWHERE if there are filtration conditions that are not suitable for indexes that are used by a minority of the columns in the query, but that provide strong data filtration. This reduces the volume of data to read.  For example, it is useful to write PREWHERE for queries that extract a large number of columns, but that only have filtration for a few columns.  PREWHERE is only supported by tables from the  *MergeTree  family.  A query may simultaneously specify PREWHERE and WHERE. In this case, PREWHERE precedes WHERE.  Keep in mind that it does not make much sense for PREWHERE to only specify those columns that have an index, because when using an index, only the data blocks that match the index are read.  If the 'optimize_move_to_prewhere' setting is set to 1 and PREWHERE is omitted, the system uses heuristics to automatically move parts of expressions from WHERE to PREWHERE.", 
            "title": "PREWHERE clause"
        }, 
        {
            "location": "/index.html#group-by-clause", 
            "text": "This is one of the most important parts of a column-oriented DBMS.  If there is a GROUP BY clause, it must contain a list of expressions. Each expression will be referred to here as a \"key\".\nAll the expressions in the SELECT, HAVING, and ORDER BY clauses must be calculated from keys or from aggregate functions. In other words, each column selected from the table must be used either in keys or inside aggregate functions.  If a query contains only table columns inside aggregate functions, the GROUP BY clause can be omitted, and aggregation by an empty set of keys is assumed.  Example:  SELECT \n     count (), \n     median ( FetchTiming     60   ?   60   :   FetchTiming ), \n     count ()   -   sum ( Refresh )  FROM   hits   However, in contrast to standard SQL, if the table doesn't have any rows (either there aren't any at all, or there aren't any after using WHERE to filter), an empty result is returned, and not the result from one of the rows containing the initial values of aggregate functions.  As opposed to MySQL (and conforming to standard SQL), you can't get some value of some column that is not in a key or aggregate function (except constant expressions). To work around this, you can use the 'any' aggregate function (get the first encountered value) or 'min/max'.  Example:  SELECT \n     domainWithoutWWW ( URL )   AS   domain , \n     count (), \n     any ( Title )   AS   title   -- getting the first occurred page header for each domain.  FROM   hits  GROUP   BY   domain   For every different key value encountered, GROUP BY calculates a set of aggregate function values.  GROUP BY is not supported for array columns.  A constant can't be specified as arguments for aggregate functions. Example: sum(1). Instead of this, you can get rid of the constant. Example:  count() .", 
            "title": "GROUP BY clause"
        }, 
        {
            "location": "/index.html#with-totals-modifier", 
            "text": "If the WITH TOTALS modifier is specified, another row will be calculated. This row will have key columns containing default values (zeros or empty lines), and columns of aggregate functions with the values calculated across all the rows (the \"total\" values).  This extra row is output in JSON*, TabSeparated*, and Pretty* formats, separately from the other rows. In the other formats, this row is not output.  In JSON* formats, this row is output as a separate 'totals' field. In TabSeparated* formats, the row comes after the main result, preceded by an empty row (after the other data). In Pretty* formats, the row is output as a separate table after the main result.  WITH TOTALS  can be run in different ways when HAVING is present. The behavior depends on the 'totals_mode' setting.\nBy default,  totals_mode = 'before_having' . In this case, 'totals' is calculated across all rows, including the ones that don't pass through HAVING and 'max_rows_to_group_by'.  The other alternatives include only the rows that pass through HAVING in 'totals', and behave differently with the setting  max_rows_to_group_by  and  group_by_overflow_mode = 'any' .  after_having_exclusive  \u2013 Don't include rows that didn't pass through  max_rows_to_group_by . In other words, 'totals' will have less than or the same number of rows as it would if  max_rows_to_group_by  were omitted.  after_having_inclusive  \u2013 Include all the rows that didn't pass through 'max_rows_to_group_by' in 'totals'. In other words, 'totals' will have more than or the same number of rows as it would if  max_rows_to_group_by  were omitted.  after_having_auto  \u2013 Count the number of rows that passed through HAVING. If it is more than a certain amount (by default, 50%), include all the rows that didn't pass through 'max_rows_to_group_by' in 'totals'. Otherwise, do not include them.  totals_auto_threshold  \u2013 By default, 0.5. The coefficient for  after_having_auto .  If  max_rows_to_group_by  and  group_by_overflow_mode = 'any'  are not used, all variations of  after_having  are the same, and you can use any of them (for example,  after_having_auto ).  You can use WITH TOTALS in subqueries, including subqueries in the JOIN clause (in this case, the respective total values are combined).", 
            "title": "WITH TOTALS modifier"
        }, 
        {
            "location": "/index.html#group-by-in-external-memory", 
            "text": "You can enable dumping temporary data to the disk to restrict memory usage during GROUP BY.\nThe  max_bytes_before_external_group_by  setting determines the threshold RAM consumption for dumping GROUP BY temporary data to the file system. If set to 0 (the default), it is disabled.  When using  max_bytes_before_external_group_by , we recommend that you set max_memory_usage about twice as high. This is necessary because there are two stages to aggregation: reading the date and forming intermediate data (1) and merging the intermediate data (2). Dumping data to the file system can only occur during stage 1. If the temporary data wasn't dumped, then stage 2 might require up to the same amount of memory as in stage 1.  For example, if  max_memory_usage  was set to 10000000000 and you want to use external aggregation, it makes sense to set  max_bytes_before_external_group_by  to 10000000000, and max_memory_usage to 20000000000. When external aggregation is triggered (if there was at least one dump of temporary data), maximum consumption of RAM is only slightly more than  max_bytes_before_external_group_by .  With distributed query processing, external aggregation is performed on remote servers. In order for the requestor server to use only a small amount of RAM, set  distributed_aggregation_memory_efficient   to 1.  When merging data flushed to the disk, as well as when merging results from remote servers when the  distributed_aggregation_memory_efficient  setting is enabled, consumes up to 1/256 * the number of threads from the total amount of RAM.  When external aggregation is enabled, if there was less than  max_bytes_before_external_group_by   of data (i.e. data was not flushed), the query runs just as fast as without external aggregation. If any temporary data was flushed, the run time will be several times longer (approximately three times).  If you have an ORDER BY with a small LIMIT after GROUP BY, then the ORDER BY CLAUSE will not use significant amounts of RAM.\nBut if the ORDER BY doesn't have LIMIT, don't forget to enable external sorting ( max_bytes_before_external_sort ).", 
            "title": "GROUP BY in external memory"
        }, 
        {
            "location": "/index.html#limit-n-by-clause", 
            "text": "LIMIT N BY COLUMNS selects the top N rows for each group of COLUMNS. LIMIT N BY is not related to LIMIT; they can both be used in the same query. The key for LIMIT N BY can contain any number of columns or expressions.  Example:  SELECT \n     domainWithoutWWW ( URL )   AS   domain , \n     domainWithoutWWW ( REFERRER_URL )   AS   referrer , \n     device_type , \n     count ()   cnt  FROM   hits  GROUP   BY   domain ,   referrer ,   device_type  ORDER   BY   cnt   DESC  LIMIT   5   BY   domain ,   device_type  LIMIT   100   The query will select the top 5 referrers for each  domain, device_type  pair, but not more than 100 rows ( LIMIT n BY + LIMIT ).", 
            "title": "LIMIT N BY clause"
        }, 
        {
            "location": "/index.html#having-clause", 
            "text": "Allows filtering the result received after GROUP BY, similar to the WHERE clause.\nWHERE and HAVING differ in that WHERE is performed before aggregation (GROUP BY), while HAVING is performed after it.\nIf aggregation is not performed, HAVING can't be used.", 
            "title": "HAVING clause"
        }, 
        {
            "location": "/index.html#order-by-clause", 
            "text": "The ORDER BY clause contains a list of expressions, which can each be assigned DESC or ASC (the sorting direction). If the direction is not specified, ASC is assumed. ASC is sorted in ascending order, and DESC in descending order. The sorting direction applies to a single expression, not to the entire list. Example:  ORDER BY Visits DESC, SearchPhrase  For sorting by String values, you can specify collation (comparison). Example:  ORDER BY SearchPhrase COLLATE 'tr'  - for sorting by keyword in ascending order, using the Turkish alphabet, case insensitive, assuming that strings are UTF-8 encoded. COLLATE can be specified or not for each expression in ORDER BY independently. If ASC or DESC is specified, COLLATE is specified after it. When using COLLATE, sorting is always case-insensitive.  We only recommend using COLLATE for final sorting of a small number of rows, since sorting with COLLATE is less efficient than normal sorting by bytes.  Rows that have identical values for the list of sorting expressions are output in an arbitrary order, which can also be nondeterministic (different each time).\nIf the ORDER BY clause is omitted, the order of the rows is also undefined, and may be nondeterministic as well.  When floating point numbers are sorted, NaNs are separate from the other values. Regardless of the sorting order, NaNs come at the end. In other words, for ascending sorting they are placed as if they are larger than all the other numbers, while for descending sorting they are placed as if they are smaller than the rest.  Less RAM is used if a small enough LIMIT is specified in addition to ORDER BY. Otherwise, the amount of memory spent is proportional to the volume of data for sorting. For distributed query processing, if GROUP BY is omitted, sorting is partially done on remote servers, and the results are merged on the requestor server. This means that for distributed sorting, the volume of data to sort can be greater than the amount of memory on a single server.  If there is not enough RAM, it is possible to perform sorting in external memory (creating temporary files on a disk). Use the setting  max_bytes_before_external_sort  for this purpose. If it is set to 0 (the default), external sorting is disabled. If it is enabled, when the volume of data to sort reaches the specified number of bytes, the collected data is sorted and dumped into a temporary file. After all data is read, all the sorted files are merged and the results are output. Files are written to the /var/lib/clickhouse/tmp/ directory in the config (by default, but you can use the 'tmp_path' parameter to change this setting).  Running a query may use more memory than 'max_bytes_before_external_sort'. For this reason, this setting must have a value significantly smaller than 'max_memory_usage'. As an example, if your server has 128 GB of RAM and you need to run a single query, set 'max_memory_usage' to 100 GB, and 'max_bytes_before_external_sort' to 80 GB.  External sorting works much less effectively than sorting in RAM.", 
            "title": "ORDER BY clause"
        }, 
        {
            "location": "/index.html#select-clause", 
            "text": "The expressions specified in the SELECT clause are analyzed after the calculations for all the clauses listed above are completed.\nMore specifically, expressions are analyzed that are above the aggregate functions, if there are any aggregate functions.\nThe aggregate functions and everything below them are calculated during aggregation (GROUP BY).\nThese expressions work as if they are applied to separate rows in the result.", 
            "title": "SELECT clause"
        }, 
        {
            "location": "/index.html#distinct-clause", 
            "text": "If DISTINCT is specified, only a single row will remain out of all the sets of fully matching rows in the result.\nThe result will be the same as if GROUP BY were specified across all the fields specified in SELECT without aggregate functions. But there are several differences from GROUP BY:   DISTINCT can be applied together with GROUP BY.  When ORDER BY is omitted and LIMIT is defined, the query stops running immediately after the required number of different rows has been read.  Data blocks are output as they are processed, without waiting for the entire query to finish running.   DISTINCT is not supported if SELECT has at least one array column.", 
            "title": "DISTINCT clause"
        }, 
        {
            "location": "/index.html#limit-clause", 
            "text": "LIMIT m allows you to select the first 'm' rows from the result.\nLIMIT n, m allows you to select the first 'm' rows from the result after skipping the first 'n' rows.  'n' and 'm' must be non-negative integers.  If there isn't an ORDER BY clause that explicitly sorts results, the result may be arbitrary and nondeterministic.", 
            "title": "LIMIT clause"
        }, 
        {
            "location": "/index.html#union-all-clause", 
            "text": "You can use UNION ALL to combine any number of queries. Example:  SELECT   CounterID ,   1   AS   table ,   toInt64 ( count ())   AS   c \n     FROM   test . hits \n     GROUP   BY   CounterID  UNION   ALL  SELECT   CounterID ,   2   AS   table ,   sum ( Sign )   AS   c \n     FROM   test . visits \n     GROUP   BY   CounterID \n     HAVING   c     0   Only UNION ALL is supported. The regular UNION (UNION DISTINCT) is not supported. If you need UNION DISTINCT, you can write SELECT DISTINCT from a subquery containing UNION ALL.  Queries that are parts of UNION ALL can be run simultaneously, and their results can be mixed together.  The structure of results (the number and type of columns) must match for the queries. But the column names can differ. In this case, the column names for the final result will be taken from the first query.  Queries that are parts of UNION ALL can't be enclosed in brackets. ORDER BY and LIMIT are applied to separate queries, not to the final result. If you need to apply a conversion to the final result, you can put all the queries with UNION ALL in a subquery in the FROM clause.", 
            "title": "UNION ALL clause"
        }, 
        {
            "location": "/index.html#into-outfile-clause", 
            "text": "Add the  INTO OUTFILE filename  clause (where filename is a string literal) to redirect query output to the specified file.\nIn contrast to MySQL, the file is created on the client side. The query will fail if a file with the same filename already exists.\nThis functionality is available in the command-line client and clickhouse-local (a query sent via HTTP interface will fail).  The default output format is TabSeparated (the same as in the command-line client batch mode).", 
            "title": "INTO OUTFILE clause"
        }, 
        {
            "location": "/index.html#format-clause", 
            "text": "Specify 'FORMAT format' to get data in any specified format.\nYou can use this for convenience, or for creating dumps.\nFor more information, see the section \"Formats\".\nIf the FORMAT clause is omitted, the default format is used, which depends on both the settings and the interface used for accessing the DB. For the HTTP interface and the command-line client in batch mode, the default format is TabSeparated. For the command-line client in interactive mode, the default format is PrettyCompact (it has attractive and compact tables).  When using the command-line client, data is passed to the client in an internal efficient format. The client independently interprets the FORMAT clause of the query and formats the data itself (thus relieving the network and the server from the load).", 
            "title": "FORMAT clause"
        }, 
        {
            "location": "/index.html#in-operators", 
            "text": "The  IN ,  NOT IN ,  GLOBAL IN , and  GLOBAL NOT IN  operators are covered separately, since their functionality is quite rich.  The left side of the operator is either a single column or a tuple.  Examples:  SELECT   UserID   IN   ( 123 ,   456 )   FROM   ...  SELECT   ( CounterID ,   UserID )   IN   (( 34 ,   123 ),   ( 101500 ,   456 ))   FROM   ...   If the left side is a single column that is in the index, and the right side is a set of constants, the system uses the index for processing the query.  Don't list too many values explicitly (i.e. millions). If a data set is large, put it in a temporary table (for example, see the section \"External data for query processing\"), then use a subquery.  The right side of the operator can be a set of constant expressions, a set of tuples with constant expressions (shown in the examples above), or the name of a database table or SELECT subquery in brackets.  If the right side of the operator is the name of a table (for example,  UserID IN users ), this is equivalent to the subquery  UserID IN (SELECT * FROM users) . Use this when working with external data that is sent along with the query. For example, the query can be sent together with a set of user IDs loaded to the 'users' temporary table, which should be filtered.  If the right side of the operator is a table name that has the Set engine (a prepared data set that is always in RAM), the data set will not be created over again for each query.  The subquery may specify more than one column for filtering tuples.\nExample:  SELECT   ( CounterID ,   UserID )   IN   ( SELECT   CounterID ,   UserID   FROM   ...)   FROM   ...   The columns to the left and right of the IN operator should have the same type.  The IN operator and subquery may occur in any part of the query, including in aggregate functions and lambda functions.\nExample:  SELECT \n     EventDate , \n     avg ( UserID   IN \n     ( \n         SELECT   UserID \n         FROM   test . hits \n         WHERE   EventDate   =   toDate ( 2014-03-17 ) \n     ))   AS   ratio  FROM   test . hits  GROUP   BY   EventDate  ORDER   BY   EventDate   ASC   \u250c\u2500\u2500EventDate\u2500\u252c\u2500\u2500\u2500\u2500ratio\u2500\u2510\n\u2502 2014-03-17 \u2502        1 \u2502\n\u2502 2014-03-18 \u2502 0.807696 \u2502\n\u2502 2014-03-19 \u2502 0.755406 \u2502\n\u2502 2014-03-20 \u2502 0.723218 \u2502\n\u2502 2014-03-21 \u2502 0.697021 \u2502\n\u2502 2014-03-22 \u2502 0.647851 \u2502\n\u2502 2014-03-23 \u2502 0.648416 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  For each day after March 17th, count the percentage of pageviews made by users who visited the site on March 17th.\nA subquery in the IN clause is always run just one time on a single server. There are no dependent subqueries.", 
            "title": "IN operators"
        }, 
        {
            "location": "/index.html#distributed-subqueries", 
            "text": "There are two options for IN-s with subqueries (similar to JOINs): normal  IN   /  OIN   and  IN GLOBAL   /  GLOBAL JOIN . They differ in how they are run for distributed query processing.  \n\nRemember that the algorithms described below may work differently depending on the [settings](#settings-distributed_product_mode) `distributed_product_mode` setting.  When using the regular IN, the query is sent to remote servers, and each of them runs the subqueries in the  IN  or  JOIN  clause.  When using  GLOBAL IN   /  GLOBAL JOINs , first all the subqueries are run for  GLOBAL IN   /  GLOBAL JOINs , and the results are collected in temporary tables. Then the temporary tables are sent to each remote server, where the queries are run using this temporary data.  For a non-distributed query, use the regular  IN  /  JOIN .  Be careful when using subqueries in the   IN  /  JOIN  clauses for distributed query processing.  Let's look at some examples. Assume that each server in the cluster has a normal  local_table . Each server also has a  distributed_table  table with the  Distributed  type, which looks at all the servers in the cluster.  For a query to the  distributed_table , the query will be sent to all the remote servers and run on them using the  local_table .  For example, the query  SELECT   uniq ( UserID )   FROM   distributed_table   will be sent to all remote servers as  SELECT   uniq ( UserID )   FROM   local_table   and run on each of them in parallel, until it reaches the stage where intermediate results can be combined. Then the intermediate results will be returned to the requestor server and merged on it, and the final result will be sent to the client.  Now let's examine a query with IN:  SELECT   uniq ( UserID )   FROM   distributed_table   WHERE   CounterID   =   101500   AND   UserID   IN   ( SELECT   UserID   FROM   local_table   WHERE   CounterID   =   34 )    Calculation of the intersection of audiences of two sites.   This query will be sent to all remote servers as  SELECT   uniq ( UserID )   FROM   local_table   WHERE   CounterID   =   101500   AND   UserID   IN   ( SELECT   UserID   FROM   local_table   WHERE   CounterID   =   34 )   In other words, the data set in the IN clause will be collected on each server independently, only across the data that is stored locally on each of the servers.  This will work correctly and optimally if you are prepared for this case and have spread data across the cluster servers such that the data for a single UserID resides entirely on a single server. In this case, all the necessary data will be available locally on each server. Otherwise, the result will be inaccurate. We refer to this variation of the query as \"local IN\".  To correct how the query works when data is spread randomly across the cluster servers, you could specify  distributed_table  inside a subquery. The query would look like this:  SELECT   uniq ( UserID )   FROM   distributed_table   WHERE   CounterID   =   101500   AND   UserID   IN   ( SELECT   UserID   FROM   distributed_table   WHERE   CounterID   =   34 )   This query will be sent to all remote servers as  SELECT   uniq ( UserID )   FROM   local_table   WHERE   CounterID   =   101500   AND   UserID   IN   ( SELECT   UserID   FROM   distributed_table   WHERE   CounterID   =   34 )   The subquery will begin running on each remote server. Since the subquery uses a distributed table, the subquery that is on each remote server will be resent to every remote server as  SELECT   UserID   FROM   local_table   WHERE   CounterID   =   34   For example, if you have a cluster of 100 servers, executing the entire query will require 10,000 elementary requests, which is generally considered unacceptable.  In such cases, you should always use GLOBAL IN instead of IN. Let's look at how it works for the query  SELECT   uniq ( UserID )   FROM   distributed_table   WHERE   CounterID   =   101500   AND   UserID   GLOBAL   IN   ( SELECT   UserID   FROM   distributed_table   WHERE   CounterID   =   34 )   The requestor server will run the subquery  SELECT   UserID   FROM   distributed_table   WHERE   CounterID   =   34   and the result will be put in a temporary table in RAM. Then the request will be sent to each remote server as  SELECT   uniq ( UserID )   FROM   local_table   WHERE   CounterID   =   101500   AND   UserID   GLOBAL   IN   _data1   and the temporary table  _data1  will be sent to every remote server with the query (the name of the temporary table is implementation-defined).  This is more optimal than using the normal IN. However, keep the following points in mind:   When creating a temporary table, data is not made unique. To reduce the volume of data transmitted over the network, specify DISTINCT in the subquery. (You don't need to do this for a normal IN.)  The temporary table will be sent to all the remote servers. Transmission does not account for network topology. For example, if 10 remote servers reside in a datacenter that is very remote in relation to the requestor server, the data will be sent 10 times over the channel to the remote datacenter. Try to avoid large data sets when using GLOBAL IN.  When transmitting data to remote servers, restrictions on network bandwidth are not configurable. You might overload the network.  Try to distribute data across servers so that you don't need to use GLOBAL IN on a regular basis.  If you need to use GLOBAL IN often, plan the location of the ClickHouse cluster so that a single group of replicas resides in no more than one data center with a fast network between them, so that a query can be processed entirely within a single data center.   It also makes sense to specify a local table in the  GLOBAL IN  clause, in case this local table is only available on the requestor server and you want to use data from it on remote servers.", 
            "title": "Distributed subqueries"
        }, 
        {
            "location": "/index.html#extreme-values", 
            "text": "In addition to results, you can also get minimum and maximum values for the results columns. To do this, set the  extremes  setting to 1. Minimums and maximums are calculated for numeric types, dates, and dates with times. For other columns, the default values are output.  An extra two rows are calculated \u2013 the minimums and maximums, respectively. These extra two rows are output in JSON*, TabSeparated*, and Pretty* formats, separate from the other rows. They are not output for other formats.  In JSON* formats, the extreme values are output in a separate 'extremes' field. In TabSeparated* formats, the row comes after the main result, and after 'totals' if present. It is preceded by an empty row (after the other data). In Pretty* formats, the row is output as a separate table after the main result, and after 'totals' if present.  Extreme values are calculated for rows that have passed through LIMIT. However, when using 'LIMIT offset, size', the rows before 'offset' are included in 'extremes'. In stream requests, the result may also include a small number of rows that passed through LIMIT.", 
            "title": "Extreme values"
        }, 
        {
            "location": "/index.html#notes", 
            "text": "The  GROUP BY  and  ORDER BY  clauses do not support positional arguments. This contradicts MySQL, but conforms to standard SQL.\nFor example,  GROUP BY 1, 2  will be interpreted as grouping by constants (i.e. aggregation of all rows into one).  You can use synonyms ( AS  aliases) in any part of a query.  You can put an asterisk in any part of a query instead of an expression. When the query is analyzed, the asterisk is expanded to a list of all table columns (excluding the  MATERIALIZED  and  ALIAS  columns). There are only a few cases when using an asterisk is justified:   When creating a table dump.  For tables containing just a few columns, such as system tables.  For getting information about what columns are in a table. In this case, set  LIMIT 1 . But it is better to use the  DESC TABLE  query.  When there is strong filtration on a small number of columns using  PREWHERE .  In subqueries (since columns that aren't needed for the external query are excluded from subqueries).   In all other cases, we don't recommend using the asterisk, since it only gives you the drawbacks of a columnar DBMS instead of the advantages. In other words using the asterisk is not recommended.", 
            "title": "Notes"
        }, 
        {
            "location": "/index.html#kill-query", 
            "text": "KILL   QUERY \n   WHERE   where   expression   to   SELECT   FROM   system . processes   query \n   [ SYNC | ASYNC | TEST ] \n   [ FORMAT   format ]   Attempts to forcibly terminate the currently running queries.\nThe queries to terminate are selected from the system.processes table using the criteria defined in the  WHERE  clause of the  KILL  query.  Examples:  -- Forcibly terminates all queries with the specified query_id:  KILL   QUERY   WHERE   query_id = 2-857d-4a57-9ee0-327da5d60a90  -- Synchronously terminates all queries run by  username :  KILL   QUERY   WHERE   user = username   SYNC   Read-only users can only stop their own queries.  By default, the asynchronous version of queries is used ( ASYNC ), which doesn't wait for confirmation that queries have stopped.  The synchronous version ( SYNC ) waits for all queries to stop and displays information about each process as it stops.\nThe response contains the  kill_status  column, which can take the following values:   'finished' \u2013 The query was terminated successfully.  'waiting' \u2013 Waiting for the query to end after sending it a signal to terminate.  The other values \u200b\u200bexplain why the query can't be stopped.   A test query ( TEST ) only checks the user's rights and displays a list of queries to stop.", 
            "title": "KILL QUERY"
        }, 
        {
            "location": "/index.html#syntax", 
            "text": "There are two types of parsers in the system: the full SQL parser (a recursive descent parser), and the data format parser (a fast stream parser).\nIn all cases except the INSERT query, only the full SQL parser is used.\nThe INSERT query uses both parsers:  INSERT   INTO   t   VALUES   ( 1 ,   Hello, world ),   ( 2 ,   abc ),   ( 3 ,   def )   The  INSERT INTO t VALUES  fragment is parsed by the full parser, and the data  (1, 'Hello, world'), (2, 'abc'), (3, 'def')  is parsed by the fast stream parser.\nData can have any format. When a query is received, the server calculates no more than  max_query_size  bytes of the request in RAM (by default, 1 MB), and the rest is stream parsed.\nThis means the system doesn't have problems with large INSERT queries, like MySQL does.  When using the Values format in an INSERT query, it may seem that data is parsed the same as expressions in a SELECT query, but this is not true. The Values format is much more limited.  Next we will cover the full parser. For more information about format parsers, see the section \"Formats\".", 
            "title": "Syntax"
        }, 
        {
            "location": "/index.html#spaces", 
            "text": "There may be any number of space symbols between syntactical constructions (including the beginning and end of a query). Space symbols include the space, tab, line feed, CR, and form feed.", 
            "title": "Spaces"
        }, 
        {
            "location": "/index.html#comments", 
            "text": "SQL-style and C-style comments are supported.\nSQL-style comments: from  --  to the end of the line. The space after  --  can be omitted.\nComments in C-style: from  /*   to  */ . These comments can be multiline. Spaces are not required here, either.", 
            "title": "Comments"
        }, 
        {
            "location": "/index.html#keywords", 
            "text": "Keywords (such as  SELECT ) are not case-sensitive. Everything else (column names, functions, and so on), in contrast to standard SQL, is case-sensitive. Keywords are not reserved (they are just parsed as keywords in the corresponding context).", 
            "title": "Keywords"
        }, 
        {
            "location": "/index.html#identifiers", 
            "text": "Identifiers (column names, functions, and data types) can be quoted or non-quoted.\nNon-quoted identifiers start with a Latin letter or underscore, and continue with a Latin letter, underscore, or number. In other words, they must match the regex  ^[a-zA-Z_][0-9a-zA-Z_]*$ . Examples:  x, _1, X_y__Z123_.  Quoted identifiers are placed in reversed quotation marks  `id`  (the same as in MySQL), and can indicate any set of bytes (non-empty). In addition, symbols (for example, the reverse quotation mark) inside this type of identifier can be backslash-escaped. Escaping rules are the same as for string literals (see below).\nWe recommend using identifiers that do not need to be quoted.", 
            "title": "Identifiers"
        }, 
        {
            "location": "/index.html#literals", 
            "text": "There are numeric literals, string literals, and compound literals.", 
            "title": "Literals"
        }, 
        {
            "location": "/index.html#numeric-literals", 
            "text": "A numeric literal tries to be parsed:   First as a 64-bit signed number, using the 'strtoull' function.  If unsuccessful, as a 64-bit unsigned number, using the 'strtoll' function.  If unsuccessful, as a floating-point number using the 'strtod' function.  Otherwise, an error is returned.   The corresponding value will have the smallest type that the value fits in.\nFor example, 1 is parsed as UInt8, but 256 is parsed as UInt16. For more information, see \"Data types\".  Examples:  1 ,  18446744073709551615 ,  0xDEADBEEF ,  01 ,  0.1 ,  1e100 ,  -1e-100 ,  inf ,  nan .", 
            "title": "Numeric literals"
        }, 
        {
            "location": "/index.html#string-literals", 
            "text": "Only string literals in single quotes are supported. The enclosed characters can be backslash-escaped. The following escape sequences have a corresponding special value:  \\b ,  \\f ,  \\r ,  \\n ,  \\t ,  \\0 ,  \\a ,  \\v ,  \\xHH . In all other cases, escape sequences in the format  \\c , where \"c\" is any character, are converted to \"c\". This means that you can use the sequences  \\' and \\\\ . The value will have the String type.  The minimum set of characters that you need to escape in string literals:  '  and  \\ .", 
            "title": "String literals"
        }, 
        {
            "location": "/index.html#compound-literals", 
            "text": "Constructions are supported for arrays:  [1, 2, 3]  and tuples:  (1, 'Hello, world!', 2) ..\nActually, these are not literals, but expressions with the array creation operator and the tuple creation operator, respectively.\nFor more information, see the section \"Operators2\".\nAn array must consist of at least one item, and a tuple must have at least two items.\nTuples have a special purpose for use in the IN clause of a SELECT query. Tuples can be obtained as the result of a query, but they can't be saved to a database (with the exception of Memory-type tables).", 
            "title": "Compound literals"
        }, 
        {
            "location": "/index.html#functions", 
            "text": "Functions are written like an identifier with a list of arguments (possibly empty) in brackets. In contrast to standard SQL, the brackets are required, even for an empty arguments list. Example:  now() .\nThere are regular and aggregate functions (see the section \"Aggregate functions\"). Some aggregate functions can contain two lists of arguments in brackets. Example:  quantile (0.9) (x) . These aggregate functions are called \"parametric\" functions, and the arguments in the first list are called \"parameters\". The syntax of aggregate functions without parameters is the same as for regular functions.", 
            "title": "Functions"
        }, 
        {
            "location": "/index.html#operators", 
            "text": "Operators are converted to their corresponding functions during query parsing, taking their priority and associativity into account.\nFor example, the expression  1 + 2 * 3 + 4  is transformed to  plus(plus(1, multiply(2, 3)), 4) .\nFor more information, see the section \"Operators\" below.", 
            "title": "Operators"
        }, 
        {
            "location": "/index.html#data-types-and-database-table-engines", 
            "text": "Data types and table engines in the  CREATE  query are written the same way as identifiers or functions. In other words, they may or may not contain an arguments list in brackets. For more information, see the sections \"Data types,\" \"Table engines,\" and \"CREATE\".", 
            "title": "Data types and database table engines"
        }, 
        {
            "location": "/index.html#synonyms", 
            "text": "In the SELECT query, expressions can specify synonyms using the AS keyword. Any expression is placed to the left of AS. The identifier name for the synonym is placed to the right of AS. As opposed to standard SQL, synonyms are not only declared on the top level of expressions:  SELECT   ( 1   AS   n )   +   2 ,   n   In contrast to standard SQL, synonyms can be used in all parts of a query, not just  SELECT .", 
            "title": "Synonyms"
        }, 
        {
            "location": "/index.html#asterisk", 
            "text": "In a  SELECT  query, an asterisk can replace the expression. For more information, see the section \"SELECT\".", 
            "title": "Asterisk"
        }, 
        {
            "location": "/index.html#expressions", 
            "text": "An expression is a function, identifier, literal, application of an operator, expression in brackets, subquery, or asterisk. It can also contain a synonym.\nA list of expressions is one or more expressions separated by commas.\nFunctions and operators, in turn, can have expressions as arguments.", 
            "title": "Expressions"
        }, 
        {
            "location": "/index.html#table-engines", 
            "text": "The table engine (type of table) determines:   How and where data is stored: where to write it to, and where to read it from.  Which queries are supported, and how.  Concurrent data access.  Use of indexes, if present.  Whether multithreaded request execution is possible.  Data replication.   When reading data, the engine is only required to extract the necessary set of columns. However, in some cases, the query may be partially processed inside the table engine.  Note that for most serious tasks, you should use engines from the  MergeTree  family.", 
            "title": "Table engines"
        }, 
        {
            "location": "/index.html#tinylog", 
            "text": "The simplest table engine, which stores data on a disk.\nEach column is stored in a separate compressed file.\nWhen writing, data is appended to the end of files.  Concurrent data access is not restricted in any way:   If you are simultaneously reading from a table and writing to it in a different query, the read operation will complete with an error.  If you are writing to a table in multiple queries simultaneously, the data will be broken.   The typical way to use this table is write-once: first just write the data one time, then read it as many times as needed.\nQueries are executed in a single stream. In other words, this engine is intended for relatively small tables (recommended up to 1,000,000 rows).\nIt makes sense to use this table engine if you have many small tables, since it is simpler than the Log engine (fewer files need to be opened).\nThe situation when you have a large number of small tables guarantees poor productivity, but may already be used when working with another DBMS, and you may find it easier to switch to using TinyLog types of tables. Indexes are not supported.  In Yandex.Metrica, TinyLog tables are used for intermediary data that is processed in small batches.", 
            "title": "TinyLog"
        }, 
        {
            "location": "/index.html#log", 
            "text": "Log differs from TinyLog in that a small file of \"marks\" resides with the column files. These marks are written on every data block and contain offsets that indicate where to start reading the file in order to skip the specified number of rows. This makes it possible to read table data in multiple threads.\nFor concurrent data access, the read operations can be performed simultaneously, while write operations block reads and each other.\nThe Log engine does not support indexes. Similarly, if writing to a table failed, the table is broken, and reading from it returns an error. The Log engine is appropriate for temporary data, write-once tables, and for testing or demonstration purposes.", 
            "title": "Log"
        }, 
        {
            "location": "/index.html#memory", 
            "text": "The Memory engine stores data in RAM, in uncompressed form. Data is stored in exactly the same form as it is received when read. In other words, reading from this table is completely free.\nConcurrent data access is synchronized. Locks are short: read and write operations don't block each other.\nIndexes are not supported. Reading is parallelized.\nMaximal productivity (over 10 GB/sec) is reached on simple queries, because there is no reading from the disk, decompressing, or deserializing data. (We should note that in many cases, the productivity of the MergeTree engine is almost as high.)\nWhen restarting a server, data disappears from the table and the table becomes empty.\nNormally, using this table engine is not justified. However, it can be used for tests, and for tasks where maximum speed is required on a relatively small number of rows (up to approximately 100,000,000).  The Memory engine is used by the system for temporary tables with external query data (see the section \"External data for processing a query\"), and for implementing GLOBAL IN (see the section \"IN operators\").", 
            "title": "Memory"
        }, 
        {
            "location": "/index.html#mergetree", 
            "text": "The MergeTree engine supports an index by primary key and by date, and provides the possibility to update data in real time.\nThis is the most advanced table engine in ClickHouse. Don't confuse it with the Merge engine.  The engine accepts parameters: the name of a Date type column containing the date, a sampling expression (optional), a tuple that defines the table's primary key, and the index granularity.  Example without sampling support.  MergeTree(EventDate, (CounterID, EventDate), 8192)  Example with sampling support.  MergeTree(EventDate, intHash32(UserID), (CounterID, EventDate, intHash32(UserID)), 8192)  A MergeTree table must have a separate column containing the date. Here, it is the EventDate column. The date column must have the 'Date' type (not 'DateTime').  The primary key may be a tuple from any expressions (usually this is just a tuple of columns), or a single expression.  The sampling expression (optional) can be any expression. It must also be present in the primary key. The example uses a hash of user IDs to pseudo-randomly disperse data in the table for each CounterID and EventDate. In other words, when using the SAMPLE clause in a query, you get an evenly pseudo-random sample of data for a subset of users.  The table is implemented as a set of parts. Each part is sorted by the primary key. In addition, each part has the minimum and maximum date assigned. When inserting in the table, a new sorted part is created. The merge process is periodically initiated in the background. When merging, several parts are selected (usually the smallest ones) and then merged into one large sorted part.  In other words, incremental sorting occurs when inserting to the table. Merging is implemented so that the table always consists of a small number of sorted parts, and the merge itself doesn't do too much work.  During insertion, data belonging to different months is separated into different parts. The parts that correspond to different months are never combined. The purpose of this is to provide local data modification (for ease in backups).  Parts are combined up to a certain size threshold, so there aren't any merges that are too long.  For each part, an index file is also written. The index file contains the primary key value for every 'index_granularity' row in the table. In other words, this is an abbreviated index of sorted data.  For columns, \"marks\" are also written to each 'index_granularity' row so that data can be read in a specific range.  When reading from a table, the SELECT query is analyzed for whether indexes can be used.\nAn index can be used if the WHERE or PREWHERE clause has an expression (as one of the conjunction elements, or entirely) that represents an equality or inequality comparison operation, or if it has IN or LIKE with a fixed prefix on columns or expressions that are in the primary key or partitioning key, or on certain partially repetitive functions of these columns, or logical relationships of these expressions.  Thus, it is possible to quickly run queries on one or many ranges of the primary key. In this example, queries will be fast when run for a specific tracking tag; for a specific tag and date range; for a specific tag and date; for multiple tags with a date range, and so on.  SELECT   count ()   FROM   table   WHERE   EventDate   =   toDate ( now ())   AND   CounterID   =   34  SELECT   count ()   FROM   table   WHERE   EventDate   =   toDate ( now ())   AND   ( CounterID   =   34   OR   CounterID   =   42 )  SELECT   count ()   FROM   table   WHERE   (( EventDate   =   toDate ( 2014-01-01 )   AND   EventDate   =   toDate ( 2014-01-31 ))   OR   EventDate   =   toDate ( 2014-05-01 ))   AND   CounterID   IN   ( 101500 ,   731962 ,   160656 )   AND   ( CounterID   =   101500   OR   EventDate   !=   toDate ( 2014-05-01 ))   All of these cases will use the index by date and by primary key. The index is used even for complex expressions. Reading from the table is organized so that using the index can't be slower than a full scan.  In this example, the index can't be used.  SELECT   count ()   FROM   table   WHERE   CounterID   =   34   OR   URL   LIKE   %upyachka%   To check whether ClickHouse can use the index when executing the query, use the settings   force_index_by_date and force_primary_key .  The index by date only allows reading those parts that contain dates from the desired range. However, a data part may contain data for many dates (up to an entire month), while within a single part the data is ordered by the primary key, which might not contain the date as the first column. Because of this, using a query with only a date condition that does not specify the primary key prefix will cause more data to be read than for a single date.  For concurrent table access, we use multi-versioning. In other words, when a table is simultaneously read and updated, data is read from a set of parts that is current at the time of the query. There are no lengthy locks. Inserts do not get in the way of read operations.  Reading from a table is automatically parallelized.  The  OPTIMIZE  query is supported, which calls an extra merge step.  You can use a single large table and continually add data to it in small chunks \u2013 this is what MergeTree is intended for.  Data replication is possible for all types of tables in the MergeTree family (see the section \"Data replication\").", 
            "title": "MergeTree"
        }, 
        {
            "location": "/index.html#custom-partitioning-key", 
            "text": "Starting with version 1.1.54310, you can create tables in the MergeTree family with any partitioning expression (not only partitioning by month).  The partition key can be an expression from the table columns, or a tuple of such expressions (similar to the primary key). The partition key can be omitted. When creating a table, specify the partition key in the ENGINE description with the new syntax:  ENGINE [=] Name(...) [PARTITION BY expr] [ORDER BY expr] [SAMPLE BY expr] [SETTINGS name=value, ...]  For MergeTree tables, the partition expression is specified after  PARTITION BY , the primary key after  ORDER BY , the sampling key after  SAMPLE BY , and  SETTINGS  can specify  index_granularity  (optional; the default value is 8192), as well as other settings from  MergeTreeSettings.h . The other engine parameters are specified in parentheses after the engine name, as previously. Example:  ENGINE   =   ReplicatedCollapsingMergeTree ( /clickhouse/tables/name ,   replica1 ,   Sign ) \n     PARTITION   BY   ( toMonday ( StartDate ),   EventType ) \n     ORDER   BY   ( CounterID ,   StartDate ,   intHash32 ( UserID )) \n     SAMPLE   BY   intHash32 ( UserID )   The traditional partitioning by month is expressed as  toYYYYMM(date_column) .  You can't convert an old-style table to a table with custom partitions (only via INSERT SELECT).  After this table is created, merge will only work for data parts that have the same value for the partitioning expression. Note: This means that you shouldn't make overly granular partitions (more than about a thousand partitions), or SELECT will perform poorly.  To specify a partition in ALTER PARTITION commands, specify the value of the partition expression (or a tuple). Constants and constant expressions are supported. Example:  ALTER   TABLE   table   DROP   PARTITION   ( toMonday ( today ()),   1 )   Deletes the partition for the current week with event type 1. The same is true for the OPTIMIZE query. To specify the only partition in a non-partitioned table, specify  PARTITION tuple() .  Note: For old-style tables, the partition can be specified either as a number  201710  or a string  '201710' . The syntax for the new style of tables is stricter with types (similar to the parser for the VALUES input format). In addition, ALTER TABLE FREEZE PARTITION uses exact match for new-style tables (not prefix match).  In the  system.parts  table, the  partition  column specifies the value of the partition expression to use in ALTER queries (if quotas are removed). The  name  column should specify the name of the data part that has a new format.  Was:  20140317_20140323_2_2_0  (minimum date - maximum date - minimum block number - maximum block number - level).  Now:  201403_2_2_0   (partition ID -  minimum block number - maximum block number - level).  The partition ID is its string identifier (human-readable, if possible) that is used for the names of data parts in the file system and in ZooKeeper. You can specify it in ALTER queries in place of the partition key. Example: Partition key  toYYYYMM(EventDate) ; ALTER can specify either  PARTITION 201710  or  PARTITION ID '201710' .  For more examples, see the tests  00502_custom_partitioning_local  and  00502_custom_partitioning_replicated_zookeeper .", 
            "title": "Custom partitioning key"
        }, 
        {
            "location": "/index.html#replacingmergetree", 
            "text": "This engine table differs from  MergeTree  in that it removes duplicate entries with the same primary key value.  The last optional parameter for the table engine is the version column. When merging, it reduces all rows with the same primary key value to just one row. If the version column is specified, it leaves the row with the highest version; otherwise, it leaves the last row.  The version column must have a type from the  UInt  family,  Date , or  DateTime .  ReplacingMergeTree ( EventDate ,   ( OrderID ,   EventDate ,   BannerID ,   ...),   8192 ,   ver )   Note that data is only deduplicated during merges. Merging occurs in the background at an unknown time, so you can't plan for it. Some of the data may remain unprocessed. Although you can run an unscheduled merge using the OPTIMIZE query, don't count on using it, because the OPTIMIZE query will read and write a large amount of data.  Thus,  ReplacingMergeTree  is suitable for clearing out duplicate data  in the background in order to save space, but it doesn't guarantee the absence of duplicates.  This engine is not used in Yandex.Metrica, but it has been applied in other Yandex projects.", 
            "title": "ReplacingMergeTree"
        }, 
        {
            "location": "/index.html#summingmergetree", 
            "text": "This engine differs from  MergeTree  in that it totals data while merging.  SummingMergeTree ( EventDate ,   ( OrderID ,   EventDate ,   BannerID ,   ...),   8192 )   The columns to total are implicit. When merging, all rows with the same primary key value (in the example, OrderId, EventDate, BannerID, ...) have their values totaled in numeric columns that are not part of the primary key.  SummingMergeTree ( EventDate ,   ( OrderID ,   EventDate ,   BannerID ,   ...),   8192 ,   ( Shows ,   Clicks ,   Cost ,   ...))   The columns to total are set explicitly (the last parameter \u2013 Shows, Clicks, Cost, ...). When merging, all rows with the same primary key value have their values totaled in the specified columns. The specified columns also must be numeric and must not be part of the primary key.  If the values were null in all of these columns, the row is deleted. (The exception is cases when the data part would not have any rows left in it.)  For the other rows that are not part of the primary key, the first value that occurs is selected when merging.  Summation is not performed for a read operation. If it is necessary, write the appropriate GROUP BY.  In addition, a table can have nested data structures that are processed in a special way.\nIf the name of a nested table ends in 'Map' and it contains at least two columns that meet the following criteria:   The first table is numeric ((U)IntN, Date, DateTime), which we'll refer to as the 'key'.  The other columns are arithmetic ((U)IntN, Float32/64), which we'll refer to as '(values...)'. Then this nested table is interpreted as a mapping of key =  (values...), and when merging its rows, the elements of two data sets are merged by 'key' with a summation of the corresponding (values...).   Examples:  [(1, 100)] + [(2, 150)] -  [(1, 100), (2, 150)]\n[(1, 100)] + [(1, 150)] -  [(1, 250)]\n[(1, 100)] + [(1, 150), (2, 150)] -  [(1, 250), (2, 150)]\n[(1, 100), (2, 150)] + [(1, -100)] -  [(2, 150)]  For aggregation of Map, use the function sumMap(key, value).  For nested data structures, you don't need to specify the columns as a list of columns for totaling.  This table engine is not particularly useful. Remember that when saving just pre-aggregated data, you lose some of the system's advantages.", 
            "title": "SummingMergeTree"
        }, 
        {
            "location": "/index.html#aggregatingmergetree", 
            "text": "This engine differs from  MergeTree  in that the merge combines the states of aggregate functions stored in the table for rows with the same primary key value.  For this to work, it uses the  AggregateFunction  data type, as well as  -State  and  -Merge  modifiers for aggregate functions. Let's examine it more closely.  There is an  AggregateFunction  data type. It is a parametric data type. As parameters, the name of the aggregate function is passed, then the types of its arguments.  Examples:  CREATE   TABLE   t  ( \n     column1   AggregateFunction ( uniq ,   UInt64 ), \n     column2   AggregateFunction ( anyIf ,   String ,   UInt8 ), \n     column3   AggregateFunction ( quantiles ( 0 . 5 ,   0 . 9 ),   UInt64 )  )   ENGINE   =   ...   This type of column stores the state of an aggregate function.  To get this type of value, use aggregate functions with the  State  suffix.  Example: uniqState(UserID), quantilesState(0.5, 0.9)(SendTiming)  In contrast to the corresponding  uniq  and  quantiles  functions, these functions return the state, rather than the prepared value. In other words, they return an  AggregateFunction  type value.  An  AggregateFunction  type value can't be output in Pretty formats. In other formats, these types of values are output as implementation-specific binary data. The  AggregateFunction  type values are not intended for output or saving in a dump.  The only useful thing you can do with  AggregateFunction  type values is combine the states and get a result, which essentially means to finish aggregation. Aggregate functions with the 'Merge' suffix are used for this purpose.\nExample:  uniqMerge(UserIDState), where UserIDState has the AggregateFunction  type.  In other words, an aggregate function with the 'Merge' suffix takes a set of states, combines them, and returns the result.\nAs an example, these two queries return the same result:  SELECT   uniq ( UserID )   FROM   table  SELECT   uniqMerge ( state )   FROM   ( SELECT   uniqState ( UserID )   AS   state   FROM   table   GROUP   BY   RegionID )   There is an  AggregatingMergeTree  engine. Its job during a merge is to combine the states of aggregate functions from different table rows with the same primary key value.  You can't use a normal INSERT to insert a row in a table containing  AggregateFunction  columns, because you can't explicitly define the  AggregateFunction  value. Instead, use  INSERT SELECT  with  -State  aggregate functions for inserting data.  With SELECT from an  AggregatingMergeTree  table, use GROUP BY and aggregate functions with the '-Merge' modifier in order to complete data aggregation.  You can use  AggregatingMergeTree  tables for incremental data aggregation, including for aggregated materialized views.  Example:  Create an  AggregatingMergeTree  materialized view that watches the  test.visits  table:  CREATE   MATERIALIZED   VIEW   test . basic  ENGINE   =   AggregatingMergeTree ( StartDate ,   ( CounterID ,   StartDate ),   8192 )  AS   SELECT \n     CounterID , \n     StartDate , \n     sumState ( Sign )      AS   Visits , \n     uniqState ( UserID )   AS   Users  FROM   test . visits  GROUP   BY   CounterID ,   StartDate ;   Insert data in the  test.visits  table. Data will also be inserted in the view, where it will be aggregated:  INSERT   INTO   test . visits   ...   Perform  SELECT  from the view using  GROUP BY  in order to complete data aggregation:  SELECT \n     StartDate , \n     sumMerge ( Visits )   AS   Visits , \n     uniqMerge ( Users )   AS   Users  FROM   test . basic  GROUP   BY   StartDate  ORDER   BY   StartDate ;   You can create a materialized view like this and assign a normal view to it that finishes data aggregation.  Note that in most cases, using  AggregatingMergeTree  is not justified, since queries can be run efficiently enough on non-aggregated data.", 
            "title": "AggregatingMergeTree"
        }, 
        {
            "location": "/index.html#collapsingmergetree", 
            "text": "This engine is used specifically for Yandex.Metrica.  It differs from  MergeTree  in that it allows automatic deletion, or \"collapsing\" certain pairs of rows when merging.  Yandex.Metrica has normal logs (such as hit logs) and change logs. Change logs are used for incrementally calculating statistics on data that is constantly changing. Examples are the log of session changes, or logs of changes to user histories. Sessions are constantly changing in Yandex.Metrica. For example, the number of hits per session increases. We refer to changes in any object as a pair (?old values, ?new values). Old values may be missing if the object was created. New values may be missing if the object was deleted. If the object was changed, but existed previously and was not deleted, both values are present. In the change log, one or two entries are made for each change. Each entry contains all the attributes that the object has, plus a special attribute for differentiating between the old and new values. When objects change, only the new entries are added to the change log, and the existing ones are not touched.  The change log makes it possible to incrementally calculate almost any statistics. To do this, we need to consider \"new\" rows with a plus sign, and \"old\" rows with a minus sign. In other words, incremental calculation is possible for all statistics whose algebraic structure contains an operation for taking the inverse of an element. This is true of most statistics. We can also calculate \"idempotent\" statistics, such as the number of unique visitors, since the unique visitors are not deleted when making changes to sessions.  This is the main concept that allows Yandex.Metrica to work in real time.  CollapsingMergeTree accepts an additional parameter - the name of an Int8-type column that contains the row's \"sign\". Example:  CollapsingMergeTree ( EventDate ,   ( CounterID ,   EventDate ,   intHash32 ( UniqID ),   VisitID ),   8192 ,   Sign )   Here,  Sign  is a column containing -1 for \"old\" values and 1 for \"new\" values.  When merging, each group of consecutive identical primary key values (columns for sorting data) is reduced to no more than one row with the column value 'sign_column = -1' (the \"negative row\") and no more than one row with the column value 'sign_column = 1' (the \"positive row\"). In other words, entries from the change log are collapsed.  If the number of positive and negative rows matches, the first negative row and the last positive row are written.\nIf there is one more positive row than negative rows, only the last positive row is written.\nIf there is one more negative row than positive rows, only the first negative row is written.\nOtherwise, there will be a logical error and none of the rows will be written. (A logical error can occur if the same section of the log was accidentally inserted more than once. The error is just recorded in the server log, and the merge continues.)  Thus, collapsing should not change the results of calculating statistics.\nChanges are gradually collapsed so that in the end only the last value of almost every object is left.\nCompared to MergeTree, the CollapsingMergeTree engine allows a multifold reduction of data volume.  There are several ways to get completely \"collapsed\" data from a  CollapsingMergeTree  table:   Write a query with GROUP BY and aggregate functions that accounts for the sign. For example, to calculate quantity, write 'sum(Sign)' instead of 'count()'. To calculate the sum of something, write 'sum(Sign * x)' instead of 'sum(x)', and so on, and also add 'HAVING sum(Sign)   0'. Not all amounts can be calculated this way. For example, the aggregate functions 'min' and 'max' can't be rewritten.  If you must extract data without aggregation (for example, to check whether rows are present whose newest values match certain conditions), you can use the FINAL modifier for the FROM clause. This approach is significantly less efficient.", 
            "title": "CollapsingMergeTree"
        }, 
        {
            "location": "/index.html#graphitemergetree", 
            "text": "This engine is designed for rollup (thinning and aggregating/averaging)  Graphite  data. It may be helpful to developers who want to use ClickHouse as a data store for Graphite.  Graphite stores full data in ClickHouse, and data can be retrieved in the following ways:   Without thinning.   Uses the  MergeTree  engine.   With thinning.   Using the  GraphiteMergeTree  engine.  The engine inherits properties from MergeTree. The settings for thinning data are defined by the  graphite_rollup  parameter in the server configuration.", 
            "title": "GraphiteMergeTree"
        }, 
        {
            "location": "/index.html#using-the-engine", 
            "text": "The Graphite data table must contain the following fields at minimum:   Path  \u2013 The metric name (Graphite sensor).  Time  \u2013 The time for measuring the metric.  Value  \u2013 The value of the metric at the time set in Time.  Version  \u2013 Determines which value of the metric with the same Path and Time will remain in the database.   Rollup pattern:  pattern\n    regexp\n    function\n    age -  precision\n    ...\npattern\n    ...\ndefault\n    function\n       age -  precision\n    ...  When processing a record, ClickHouse will check the rules in the  pattern clause. If the metric name matches the  regexp , the rules from  pattern  are applied; otherwise, the rules from  default  are used.  Fields in the pattern.   age  \u2013 The minimum age of the data in seconds.  function  \u2013 The name of the aggregating function to apply to data whose age falls within the range  [age, age + precision] .  precision \u2013 How precisely to define the age of the data in seconds.  regexp \u2013 A pattern for the metric name.   Example of settings:  graphite_rollup \n     pattern \n         regexp click_cost /regexp \n         function any /function \n         retention \n             age 0 /age \n             precision 5 /precision \n         /retention \n         retention \n             age 86400 /age \n             precision 60 /precision \n         /retention \n     /pattern \n     default \n         function max /function \n         retention \n             age 0 /age \n             precision 60 /precision \n         /retention \n         retention \n             age 3600 /age \n             precision 300 /precision \n         /retention \n         retention \n             age 86400 /age \n             precision 3600 /precision \n         /retention \n     /default  /graphite_rollup", 
            "title": "Using the engine"
        }, 
        {
            "location": "/index.html#data-replication", 
            "text": "Replication is only supported for tables in the MergeTree family:   ReplicatedMergeTree  ReplicatedSummingMergeTree  ReplicatedReplacingMergeTree  ReplicatedAggregatingMergeTree  ReplicatedCollapsingMergeTree  ReplicatedGraphiteMergeTree   Replication works at the level of an individual table, not the entire server. A server can store both replicated and non-replicated tables at the same time.  Replication does not depend on sharding. Each shard has its own independent replication.  Compressed data is replicated for  INSERT  and  ALTER  queries (see the description of the  ALTER  query).  CREATE ,  DROP ,  ATTACH ,  DETACH  and  RENAME  queries are executed on a single server and are not replicated:   The CREATE TABLE  query creates a new replicatable table on the server where the query is run. If this table already exists on other servers, it adds a new replica.  The DROP TABLE  query deletes the replica located on the server where the query is run.  The RENAME  query renames the table on one of the replicas. In other words, replicated tables can have different names on different replicas.   To use replication, set the addresses of the ZooKeeper cluster in the config file. Example:  zookeeper \n     node   index= 1 \n         host example1 /host \n         port 2181 /port \n     /node \n     node   index= 2 \n         host example2 /host \n         port 2181 /port \n     /node \n     node   index= 3 \n         host example3 /host \n         port 2181 /port \n     /node  /zookeeper   Use ZooKeeper version 3.4.5 or later.  You can specify any existing ZooKeeper cluster and the system will use a directory on it for its own data (the directory is specified when creating a replicatable table).  If ZooKeeper isn't set in the config file, you can't create replicated tables, and any existing replicated tables will be read-only.  ZooKeeper is not used in  SELECT  queries because replication does not affect the performance of  SELECT  and queries run just as fast as they do for non-replicated tables. When querying distributed replicated tables, ClickHouse behavior is controlled by the settings  max_replica_delay_for_distributed_queries  and  fallback_to_stale_replicas_for_distributed_queries .  For each  INSERT  query, approximately ten entries are added to ZooKeeper through several transactions. (To be more precise, this is for each inserted block of data; an INSERT query contains one block or one block per  max_insert_block_size = 1048576  rows.) This leads to slightly longer latencies for  INSERT  compared to non-replicated tables. But if you follow the recommendations to insert data in batches of no more than one  INSERT  per second, it doesn't create any problems. The entire ClickHouse cluster used for coordinating one ZooKeeper cluster has a total of several hundred  INSERTs  per second. The throughput on data inserts (the number of rows per second) is just as high as for non-replicated data.  For very large clusters, you can use different ZooKeeper clusters for different shards. However, this hasn't proven necessary on the Yandex.Metrica cluster (approximately 300 servers).  Replication is asynchronous and multi-master.  INSERT  queries (as well as  ALTER ) can be sent to any available server. Data is inserted on the server where the query is run, and then it is copied to the other servers. Because it is asynchronous, recently inserted data appears on the other replicas with some latency. If part of the replicas are not available, the data is written when they become available. If a replica is available, the latency is the amount of time it takes to transfer the block of compressed data over the network.  By default, an INSERT query waits for confirmation of writing the data from only one replica. If the data was successfully written to only one replica and the server with this replica ceases to exist, the stored data will be lost. Tp enable getting confirmation of data writes from multiple replicas, use the  insert_quorum  option.  Each block of data is written atomically. The INSERT query is divided into blocks up to  max_insert_block_size = 1048576  rows. In other words, if the  INSERT  query has less than 1048576 rows, it is made atomically.  Data blocks are deduplicated. For multiple writes of the same data block (data blocks of the same size containing the same rows in the same order), the block is only written once. The reason for this is in case of network failures when the client application doesn't know if the data was written to the DB, so the  INSERT  query can simply be repeated. It doesn't matter which replica INSERTs were sent to with identical data.  INSERTs  are idempotent. Deduplication parameters are controlled by  merge_tree  server settings.  During replication, only the source data to insert is transferred over the network. Further data transformation (merging) is coordinated and performed on all the replicas in the same way. This minimizes network usage, which means that replication works well when replicas reside in different datacenters. (Note that duplicating data in different datacenters is the main goal of replication.)  You can have any number of replicas of the same data. Yandex.Metrica uses double replication in production. Each server uses RAID-5 or RAID-6, and RAID-10 in some cases. This is a relatively reliable and convenient solution.  The system monitors data synchronicity on replicas and is able to recover after a failure. Failover is automatic (for small differences in data) or semi-automatic (when data differs too much, which may indicate a configuration error).", 
            "title": "Data replication"
        }, 
        {
            "location": "/index.html#creating-replicated-tables", 
            "text": "The  Replicated  prefix is added to the table engine name. For example: ReplicatedMergeTree .  Two parameters are also added in the beginning of the parameters list \u2013 the path to the table in ZooKeeper, and the replica name in ZooKeeper.  Example:  ReplicatedMergeTree( /clickhouse/tables/{layer}-{shard}/hits ,  {replica} , EventDate, intHash32(UserID), (CounterID, EventDate, intHash32(UserID), EventTime), 8192)  As the example shows, these parameters can contain substitutions in curly brackets. The substituted values are taken from the 'macros' section of the config file. Example:  macros \n     layer 05 /layer \n     shard 02 /shard \n     replica example05-02-1.yandex.ru /replica  /macros   The path to the table in ZooKeeper should be unique for each replicated table. Tables on different shards should have different paths.\nIn this case, the path consists of the following parts:  /clickhouse/tables/  is the common prefix. We recommend using exactly this one.  {layer}-{shard}  is the shard identifier. In this example it consists of two parts, since the Yandex.Metrica cluster uses bi-level sharding. For most tasks, you can leave just the {shard} substitution, which will be expanded to the shard identifier.  hits  is the name of the node for the table in ZooKeeper. It is a good idea to make it the same as the table name. It is defined explicitly, because in contrast to the table name, it doesn't change after a RENAME query.  The replica name identifies different replicas of the same table. You can use the server name for this, as in the example. The name only needs to be unique within each shard.  You can define the parameters explicitly instead of using substitutions. This might be convenient for testing and for configuring small clusters. However, you can't use distributed DDL queries ( ON CLUSTER ) in this case.  When working with large clusters, we recommend using substitutions because they reduce the probability of error.  Run the  CREATE TABLE  query on each replica. This query creates a new replicated table, or adds a new replica to an existing one.  If you add a new replica after the table already contains some data on other replicas, the data will be copied from the other replicas to the new one after running the query. In other words, the new replica syncs itself with the others.  To delete a replica, run  DROP TABLE . However, only one replica is deleted \u2013 the one that resides on the server where you run the query.", 
            "title": "Creating replicated tables"
        }, 
        {
            "location": "/index.html#recovery-after-failures", 
            "text": "If ZooKeeper is unavailable when a server starts, replicated tables switch to read-only mode. The system periodically attempts to connect to ZooKeeper.  If ZooKeeper is unavailable during an  INSERT , or an error occurs when interacting with ZooKeeper, an exception is thrown.  After connecting to ZooKeeper, the system checks whether the set of data in the local file system matches the expected set of data (ZooKeeper stores this information). If there are minor inconsistencies, the system resolves them by syncing data with the replicas.  If the system detects broken data parts (with the wrong size of files) or unrecognized parts (parts written to the file system but not recorded in ZooKeeper), it moves them to the 'detached' subdirectory (they are not deleted). Any missing parts are copied from the replicas.  Note that ClickHouse does not perform any destructive actions such as automatically deleting a large amount of data.  When the server starts (or establishes a new session with ZooKeeper), it only checks the quantity and sizes of all files. If the file sizes match but bytes have been changed somewhere in the middle, this is not detected immediately, but only when attempting to read the data for a  SELECT  query. The query throws an exception about a non-matching checksum or size of a compressed block. In this case, data parts are added to the verification queue and copied from the replicas if necessary.  If the local set of data differs too much from the expected one, a safety mechanism is triggered. The server enters this in the log and refuses to launch. The reason for this is that this case may indicate a configuration error, such as if a replica on a shard was accidentally configured like a replica on a different shard. However, the thresholds for this mechanism are set fairly low, and this situation might occur during normal failure recovery. In this case, data is restored semi-automatically - by \"pushing a button\".  To start recovery, create the node  /path_to_table/replica_name/flags/force_restore_data  in ZooKeeper with any content, or run the command to restore all replicated tables:  sudo -u clickhouse touch /var/lib/clickhouse/flags/force_restore_data  Then restart the server. On start, the server deletes these flags and starts recovery.", 
            "title": "Recovery after failures"
        }, 
        {
            "location": "/index.html#recovery-after-complete-data-loss", 
            "text": "If all data and metadata disappeared from one of the servers, follow these steps for recovery:   Install ClickHouse on the server. Define substitutions correctly in the config file that contains the shard identifier and replicas, if you use them.  If you had unreplicated tables that must be manually duplicated on the servers, copy their data from a replica (in the directory  /var/lib/clickhouse/data/db_name/table_name/ ).  Copy table definitions located in  /var/lib/clickhouse/metadata/  from a replica. If a shard or replica identifier is defined explicitly in the table definitions, correct it so that it corresponds to this replica. (Alternatively, start the server and make all the  ATTACH TABLE  queries that should have been in the .sql files in  /var/lib/clickhouse/metadata/ .)  To start recovery, create the ZooKeeper node  /path_to_table/replica_name/flags/force_restore_data  with any content, or run the command to restore all replicated tables:  sudo -u clickhouse touch /var/lib/clickhouse/flags/force_restore_data   Then start the server (restart, if it is already running). Data will be downloaded from replicas.  An alternative recovery option is to delete information about the lost replica from ZooKeeper ( /path_to_table/replica_name ), then create the replica again as described in \" Creating replicatable tables \".  There is no restriction on network bandwidth during recovery. Keep this in mind if you are restoring many replicas at once.", 
            "title": "Recovery after complete data loss"
        }, 
        {
            "location": "/index.html#converting-from-mergetree-to-replicatedmergetree", 
            "text": "We use the term  MergeTree  to refer to all table engines in the  MergeTree family , the same as for  ReplicatedMergeTree .  If you had a  MergeTree  table that was manually replicated, you can convert it to a replicatable table. You might need to do this if you have already collected a large amount of data in a  MergeTree  table and now you want to enable replication.  If the data differs on various replicas, first sync it, or delete this data on all the replicas except one.  Rename the existing MergeTree table, then create a  ReplicatedMergeTree  table with the old name.\nMove the data from the old table to the 'detached' subdirectory inside the directory with the new table data ( /var/lib/clickhouse/data/db_name/table_name/ ).\nThen run  ALTER TABLE ATTACH PARTITION  on one of the replicas to add these data parts to the working set.", 
            "title": "Converting from MergeTree to ReplicatedMergeTree"
        }, 
        {
            "location": "/index.html#converting-from-replicatedmergetree-to-mergetree", 
            "text": "Create a MergeTree table with a different name. Move all the data from the directory with the  ReplicatedMergeTree  table data to the new table's data directory. Then delete the  ReplicatedMergeTree  table and restart the server.  If you want to get rid of a  ReplicatedMergeTree  table without launching the server:   Delete the corresponding  .sql  file in the metadata directory ( /var/lib/clickhouse/metadata/ ).  Delete the corresponding path in ZooKeeper ( /path_to_table/replica_name ).   After this, you can launch the server, create a  MergeTree  table, move the data to its directory, and then restart the server.", 
            "title": "Converting from ReplicatedMergeTree to MergeTree"
        }, 
        {
            "location": "/index.html#recovery-when-metadata-in-the-zookeeper-cluster-is-lost-or-damaged", 
            "text": "If the data in ZooKeeper was lost or damaged, you can save data by moving it to an unreplicated table as described above.  If exactly the same parts exist on the other replicas, they are added to the working set on them. If not, the parts are downloaded from the replica that has them.", 
            "title": "Recovery when metadata in the ZooKeeper cluster is lost or damaged"
        }, 
        {
            "location": "/index.html#distributed", 
            "text": "The Distributed engine does not store data itself , but allows distributed query processing on multiple servers.\nReading is automatically parallelized. During a read, the table indexes on remote servers are used, if there are any.\nThe Distributed engine accepts parameters: the cluster name in the server's config file, the name of a remote database, the name of a remote table, and (optionally) a sharding key.\nExample:  Distributed(logs, default, hits[, sharding_key])  Data will be read from all servers in the 'logs' cluster, from the default.hits table located on every server in the cluster.\nData is not only read, but is partially processed on the remote servers (to the extent that this is possible).\nFor example, for a query with GROUP BY, data will be aggregated on remote servers, and the intermediate states of aggregate functions will be sent to the requestor server. Then data will be further aggregated.  Instead of the database name, you can use a constant expression that returns a string. For example: currentDatabase().  logs \u2013 The cluster name in the server's config file.  Clusters are set like this:  remote_servers \n     logs \n         shard \n             !-- Optional. Shard weight when writing data. Default: 1. -- \n             weight 1 /weight \n             !-- Optional. Whether to write data to just one of the replicas. Default: false (write data to all replicas). -- \n             internal_replication false /internal_replication \n             replica \n                 host example01-01-1 /host \n                 port 9000 /port \n             /replica \n             replica \n                 host example01-01-2 /host \n                 port 9000 /port \n             /replica \n         /shard \n         shard \n             weight 2 /weight \n             internal_replication false /internal_replication \n             replica \n                 host example01-02-1 /host \n                 port 9000 /port \n             /replica \n             replica \n                 host example01-02-2 /host \n                 port 9000 /port \n             /replica \n         /shard \n     /logs  /remote_servers   Here a cluster is defined with the name 'logs' that consists of two shards, each of which contains two replicas.\nShards refer to the servers that contain different parts of the data (in order to read all the data, you must access all the shards).\nReplicas are duplicating servers (in order to read all the data, you can access the data on any one of the replicas).  The parameters  host ,  port , and optionally  user  and  password  are specified for each server:  :   -    host  \u2013 The address of the remote server. You can use either the domain or the IPv4 or IPv6 address. If you specify the domain, the server makes a DNS request when it starts, and the result is stored as long as the server is running. If the DNS request fails, the server doesn't start. If you change the DNS record, restart the server.\n-    port \u2013 The TCP port for messenger activity ('tcp_port' in the config, usually set to 9000). Do not confuse it with http_port.\n-    user \u2013 Name of the user for connecting to a remote server. Default value: default. This user must have access to connect to the specified server. Access is configured in the users.xml file. For more information, see the section \"Access rights\".\n-  password  \u2013 The password for connecting to a remote server (not masked). Default value: empty string.  When specifying replicas, one of the available replicas will be selected for each of the shards when reading. You can configure the algorithm for load balancing (the preference for which replica to access) \u2013 see the 'load_balancing' setting.\nIf the connection with the server is not established, there will be an attempt to connect with a short timeout. If the connection failed, the next replica will be selected, and so on for all the replicas. If the connection attempt failed for all the replicas, the attempt will be repeated the same way, several times.\nThis works in favor of resiliency, but does not provide complete fault tolerance: a remote server might accept the connection, but might not work, or work poorly.  You can specify just one of the shards (in this case, query processing should be called remote, rather than distributed) or up to any number of shards. In each shard, you can specify from one to any number of replicas. You can specify a different number of replicas for each shard.  You can specify as many clusters as you wish in the configuration.  To view your clusters, use the 'system.clusters' table.  The Distributed engine allows working with a cluster like a local server. However, the cluster is inextensible: you must write its configuration in the server config file (even better, for all the cluster's servers).  There is no support for Distributed tables that look at other Distributed tables (except in cases when a Distributed table only has one shard). As an alternative, make the Distributed table look at the \"final\" tables.  The Distributed engine requires writing clusters to the config file. Clusters from the config file are updated on the fly, without restarting the server. If you need to send a query to an unknown set of shards and replicas each time, you don't need to create a Distributed table \u2013 use the 'remote' table function instead. See the section \"Table functions\".  There are two methods for writing data to a cluster:  First, you can define which servers to write which data to, and perform the write directly on each shard. In other words, perform INSERT in the tables that the distributed table \"looks at\".\nThis is the most flexible solution \u2013 you can use any sharding scheme, which could be non-trivial due to the requirements of the subject area.\nThis is also the most optimal solution, since data can be written to different shards completely independently.  Second, you can perform INSERT in a Distributed table. In this case, the table will distribute the inserted data across servers itself.\nIn order to write to a Distributed table, it must have a sharding key set (the last parameter). In addition, if there is only one shard, the write operation works without specifying the sharding key, since it doesn't have any meaning in this case.  Each shard can have a weight defined in the config file. By default, the weight is equal to one. Data is distributed across shards in the amount proportional to the shard weight. For example, if there are two shards and the first has a weight of 9 while the second has a weight of 10, the first will be sent 9 / 19 parts of the rows, and the second will be sent 10 / 19.  Each shard can have the 'internal_replication' parameter defined in the config file.  If this parameter is set to 'true', the write operation selects the first healthy replica and writes data to it. Use this alternative if the Distributed table \"looks at\" replicated tables. In other words, if the table where data will be written is going to replicate them itself.  If it is set to 'false' (the default), data is written to all replicas. In essence, this means that the Distributed table replicates data itself. This is worse than using replicated tables, because the consistency of replicas is not checked, and over time they will contain slightly different data.  To select the shard that a row of data is sent to, the sharding expression is analyzed, and its remainder is taken from dividing it by the total weight of the shards. The row is sent to the shard that corresponds to the half-interval of the remainders from 'prev_weight' to 'prev_weights + weight', where 'prev_weights' is the total weight of the shards with the smallest number, and 'weight' is the weight of this shard. For example, if there are two shards, and the first has a weight of 9 while the second has a weight of 10, the row will be sent to the first shard for the remainders from the range [0, 9), and to the second for the remainders from the range [9, 19).  The sharding expression can be any expression from constants and table columns that returns an integer. For example, you can use the expression 'rand()' for random distribution of data, or 'UserID' for distribution by the remainder from dividing the user's ID (then the data of a single user will reside on a single shard, which simplifies running IN and JOIN by users). If one of the columns is not distributed evenly enough, you can wrap it in a hash function: intHash64(UserID).  A simple remainder from division is a limited solution for sharding and isn't always appropriate. It works for medium and large volumes of data (dozens of servers), but not for very large volumes of data (hundreds of servers or more). In the latter case, use the sharding scheme required by the subject area, rather than using entries in Distributed tables.  SELECT queries are sent to all the shards, and work regardless of how data is distributed across the shards (they can be distributed completely randomly). When you add a new shard, you don't have to transfer the old data to it. You can write new data with a heavier weight \u2013 the data will be distributed slightly unevenly, but queries will work correctly and efficiently.  You should be concerned about the sharding scheme in the following cases:   Queries are used that require joining data (IN or JOIN) by a specific key. If data is sharded by this key, you can use local IN or JOIN instead of GLOBAL IN or GLOBAL JOIN, which is much more efficient.  A large number of servers is used (hundreds or more) with a large number of small queries (queries of individual clients - websites, advertisers, or partners). In order for the small queries to not affect the entire cluster, it makes sense to locate data for a single client on a single shard. Alternatively, as we've done in Yandex.Metrica, you can set up bi-level sharding: divide the entire cluster into \"layers\", where a layer may consist of multiple shards. Data for a single client is located on a single layer, but shards can be added to a layer as necessary, and data is randomly distributed within them. Distributed tables are created for each layer, and a single shared distributed table is created for global queries.   Data is written asynchronously. For an INSERT to a Distributed table, the data block is just written to the local file system. The data is sent to the remote servers in the background as soon as possible. You should check whether data is sent successfully by checking the list of files (data waiting to be sent) in the table directory: /var/lib/clickhouse/data/database/table/.  If the server ceased to exist or had a rough restart (for example, after a device failure) after an INSERT to a Distributed table, the inserted data might be lost. If a damaged data part is detected in the table directory, it is transferred to the 'broken' subdirectory and no longer used.  When the max_parallel_replicas option is enabled, query processing is parallelized across all replicas within a single shard. For more information, see the section \"Settings, max_parallel_replicas\".", 
            "title": "Distributed"
        }, 
        {
            "location": "/index.html#dictionary", 
            "text": "The  Dictionary  engine displays the dictionary data as a ClickHouse table.  As an example, consider a dictionary of  products  with the following configuration:  dictionaries  dictionary \n         name products /name \n         source \n             odbc \n                 table products /table \n                 connection_string DSN=some-db-server /connection_string \n             /odbc \n         /source \n         lifetime \n             min 300 /min \n             max 360 /max \n         /lifetime \n         layout \n             flat/ \n         /layout \n         structure \n             id \n                 name product_id /name \n             /id \n             attribute \n                 name title /name \n                 type String /type \n                 null_value /null_value \n             /attribute \n         /structure  /dictionary  /dictionaries   Query the dictionary data:  select   name ,   type ,   key ,   attribute . names ,   attribute . types ,   bytes_allocated ,   element_count , source   from   system . dictionaries   where   name   =   products ;                       SELECT \n     name , \n     type , \n     key , \n     attribute . names , \n     attribute . types , \n     bytes_allocated , \n     element_count , \n     source  FROM   system . dictionaries  WHERE   name   =   products   \u250c\u2500name\u2500\u2500\u2500\u2500\u2500\u252c\u2500type\u2500\u252c\u2500key\u2500\u2500\u2500\u2500\u252c\u2500attribute.names\u2500\u252c\u2500attribute.types\u2500\u252c\u2500bytes_allocated\u2500\u252c\u2500element_count\u2500\u252c\u2500source\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 products \u2502 Flat \u2502 UInt64 \u2502 [ title ]       \u2502 [ String ]      \u2502        23065376 \u2502        175032 \u2502 ODBC: .products \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  You can use the  dictGet*  function to get the dictionary data in this format.  This view isn't helpful when you need to get raw data, or when performing a  JOIN  operation. For these cases, you can use the  Dictionary  engine, which displays the dictionary data in a table.  Syntax:  CREATE TABLE %table_name% (%fields%) engine = Dictionary(%dictionary_name%)`  Usage example:  create   table   products   ( product_id   UInt64 ,   title   String )   Engine   =   Dictionary ( products );  CREATE   TABLE   products  ( \n     product_id   UInt64 , \n     title   String ,  )  ENGINE   =   Dictionary ( products )   Ok.\n\n0 rows in set. Elapsed: 0.004 sec.  Take a look at what's in the table.  select   *   from   products   limit   1 ;  SELECT   *  FROM   products  LIMIT   1   \u250c\u2500\u2500\u2500\u2500product_id\u2500\u252c\u2500title\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502        152689 \u2502 Some item       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n1 rows in set. Elapsed: 0.006 sec.", 
            "title": "Dictionary"
        }, 
        {
            "location": "/index.html#merge", 
            "text": "The Merge engine (not to be confused with  MergeTree ) does not store data itself, but allows reading from any number of other tables simultaneously.\nReading is automatically parallelized. Writing to a table is not supported. When reading, the indexes of tables that are actually being read are used, if they exist.\nThe Merge engine accepts parameters: the database name and a regular expression for tables.  Example:  Merge(hits,  ^WatchLog )  Data will be read from the tables in the 'hits' database that have names that match the regular expression ' ^WatchLog '.  Instead of the database name, you can use a constant expression that returns a string. For example,  currentDatabase() .  Regular expressions \u2014  re2  (supports a subset of PCRE), case-sensitive.\nSee the notes about escaping symbols in regular expressions in the \"match\" section.  When selecting tables to read, the Merge table itself will not be selected, even if it matches the regex. This is to avoid loops.\nIt is possible to create two Merge tables that will endlessly try to read each others' data, but this is not a good idea.  The typical way to use the Merge engine is for working with a large number of TinyLog tables as if with a single table.", 
            "title": "Merge"
        }, 
        {
            "location": "/index.html#virtual-columns", 
            "text": "Virtual columns are columns that are provided by the table engine, regardless of the table definition. In other words, these columns are not specified in CREATE TABLE, but they are accessible for SELECT.  Virtual columns differ from normal columns in the following ways:   They are not specified in table definitions.  Data can't be added to them with INSERT.  When using INSERT without specifying the list of columns, virtual columns are ignored.  They are not selected when using the asterisk ( SELECT * ).  Virtual columns are not shown in  SHOW CREATE TABLE  and  DESC TABLE  queries.   A Merge type table contains a virtual _table column with the String type. (If the table already has a _table column, the virtual column is named _table1, and if it already has _table1, it is named _table2, and so on.) It contains the name of the table that data was read from.  If the WHERE or PREWHERE clause contains conditions for the '_table' column that do not depend on other table columns (as one of the conjunction elements, or as an entire expression), these conditions are used as an index. The conditions are performed on a data set of table names to read data from, and the read operation will be performed from only those tables that the condition was triggered on.", 
            "title": "Virtual columns"
        }, 
        {
            "location": "/index.html#buffer", 
            "text": "Buffers the data to write in RAM, periodically flushing it to another table. During the read operation, data is read from the buffer and the other table simultaneously.  Buffer(database, table, num_layers, min_time, max_time, min_rows, max_rows, min_bytes, max_bytes)  Engine parameters:database, table \u2013 The table to flush data to. Instead of the database name, you can use a constant expression that returns a string.num_layers \u2013 Parallelism layer. Physically, the table will be represented as 'num_layers' of independent buffers. Recommended value: 16.min_time, max_time, min_rows, max_rows, min_bytes, and max_bytes are conditions for flushing data from the buffer.  Data is flushed from the buffer and written to the destination table if all the 'min' conditions or at least one 'max' condition are met.min_time, max_time \u2013 Condition for the time in seconds from the moment of the first write to the buffer.min_rows, max_rows \u2013 Condition for the number of rows in the buffer.min_bytes, max_bytes \u2013 Condition for the number of bytes in the buffer.  During the write operation, data is inserted to a 'num_layers' number of random buffers. Or, if the data part to insert is large enough (greater than 'max_rows' or 'max_bytes'), it is written directly to the destination table, omitting the buffer.  The conditions for flushing the data are calculated separately for each of the 'num_layers' buffers. For example, if num_layers = 16 and max_bytes = 100000000, the maximum RAM consumption is 1.6 GB.  Example:  CREATE   TABLE   merge . hits_buffer   AS   merge . hits   ENGINE   =   Buffer ( merge ,   hits ,   16 ,   10 ,   100 ,   10000 ,   1000000 ,   10000000 ,   100000000 )   Creating a 'merge.hits_buffer' table with the same structure as 'merge.hits' and using the Buffer engine. When writing to this table, data is buffered in RAM and later written to the 'merge.hits' table. 16 buffers are created. The data in each of them is flushed if either 100 seconds have passed, or one million rows have been written, or 100 MB of data have been written; or if simultaneously 10 seconds have passed and 10,000 rows and 10 MB of data have been written. For example, if just one row has been written, after 100 seconds it will be flushed, no matter what. But if many rows have been written, the data will be flushed sooner.  When the server is stopped, with DROP TABLE or DETACH TABLE, buffer data is also flushed to the destination table.  You can set empty strings in single quotation marks for the database and table name. This indicates the absence of a destination table. In this case, when the data flush conditions are reached, the buffer is simply cleared. This may be useful for keeping a window of data in memory.  When reading from a Buffer table, data is processed both from the buffer and from the destination table (if there is one).\nNote that the Buffer tables does not support an index. In other words, data in the buffer is fully scanned, which might be slow for large buffers. (For data in a subordinate table, the index that it supports will be used.)  If the set of columns in the Buffer table doesn't match the set of columns in a subordinate table, a subset of columns that exist in both tables is inserted.  If the types don't match for one of the columns in the Buffer table and a subordinate table, an error message is entered in the server log and the buffer is cleared.\nThe same thing happens if the subordinate table doesn't exist when the buffer is flushed.  If you need to run ALTER for a subordinate table and the Buffer table, we recommend first deleting the Buffer table, running ALTER for the subordinate table, then creating the Buffer table again.  If the server is restarted abnormally, the data in the buffer is lost.  PREWHERE, FINAL and SAMPLE do not work correctly for Buffer tables. These conditions are passed to the destination table, but are not used for processing data in the buffer. Because of this, we recommend only using the Buffer table for writing, while reading from the destination table.  When adding data to a Buffer, one of the buffers is locked. This causes delays if a read operation is simultaneously being performed from the table.  Data that is inserted to a Buffer table may end up in the subordinate table in a different order and in different blocks. Because of this, a Buffer table is difficult to use for writing to a CollapsingMergeTree correctly. To avoid problems, you can set 'num_layers' to 1.  If the destination table is replicated, some expected characteristics of replicated tables are lost when writing to a Buffer table. The random changes to the order of rows and sizes of data parts cause data deduplication to quit working, which means it is not possible to have a reliable 'exactly once' write to replicated tables.  Due to these disadvantages, we can only recommend using a Buffer table in rare cases.  A Buffer table is used when too many INSERTs are received from a large number of servers over a unit of time and data can't be buffered before insertion, which means the INSERTs can't run fast enough.  Note that it doesn't make sense to insert data one row at a time, even for Buffer tables. This will only produce a speed of a few thousand rows per second, while inserting larger blocks of data can produce over a million rows per second (see the section \"Performance\").", 
            "title": "Buffer"
        }, 
        {
            "location": "/index.html#fileinputformat", 
            "text": "The data source is a file that stores data in one of the supported input formats (TabSeparated, Native, etc.).", 
            "title": "File(InputFormat)"
        }, 
        {
            "location": "/index.html#null", 
            "text": "When writing to a Null table, data is ignored. When reading from a Null table, the response is empty.  However, you can create a materialized view on a Null table. So the data written to the table will end up in the view.", 
            "title": "Null"
        }, 
        {
            "location": "/index.html#set_1", 
            "text": "A data set that is always in RAM. It is intended for use on the right side of the IN operator (see the section \"IN operators\").  You can use INSERT to insert data in the table. New elements will be added to the data set, while duplicates will be ignored.\nBut you can't perform SELECT from the table. The only way to retrieve data is by using it in the right half of the IN operator.  Data is always located in RAM. For INSERT, the blocks of inserted data are also written to the directory of tables on the disk. When starting the server, this data is loaded to RAM. In other words, after restarting, the data remains in place.  For a rough server restart, the block of data on the disk might be lost or damaged. In the latter case, you may need to manually delete the file with damaged data.", 
            "title": "Set"
        }, 
        {
            "location": "/index.html#join", 
            "text": "A prepared data structure for JOIN that is always located in RAM.  Join(ANY|ALL, LEFT|INNER, k1[, k2, ...])  Engine parameters:  ANY|ALL  \u2013 strictness;  LEFT|INNER  \u2013 type.\nThese parameters are set without quotes and must match the JOIN that the table will be used for. k1, k2, ... are the key columns from the USING clause that the join will be made on.  The table can't be used for GLOBAL JOINs.  You can use INSERT to add data to the table, similar to the Set engine. For ANY, data for duplicated keys will be ignored. For ALL, it will be counted. You can't perform SELECT directly from the table. The only way to retrieve data is to use it as the \"right-hand\" table for JOIN.  Storing data on the disk is the same as for the Set engine.", 
            "title": "Join"
        }, 
        {
            "location": "/index.html#view", 
            "text": "Used for implementing views (for more information, see the  CREATE VIEW query ). It does not store data, but only stores the specified  SELECT  query. When reading from a table, it runs this query (and deletes all unnecessary columns from the query).", 
            "title": "View"
        }, 
        {
            "location": "/index.html#materializedview", 
            "text": "Used for implementing materialized views (for more information, see the  CREATE TABLE ) query. For storing data, it uses a different engine that was specified when creating the view. When reading from a table, it just uses this engine.", 
            "title": "MaterializedView"
        }, 
        {
            "location": "/index.html#kafka", 
            "text": "This engine works with  Apache Kafka .  Kafka lets you:   Publish or subscribe to data flows.  Organize fault-tolerant storage.  Process streams as they become available.   Kafka(broker_list, topic_list, group_name, format[, schema, num_consumers])  Parameters:   broker_list  \u2013 A comma-separated list of brokers ( localhost:9092 ).  topic_list  \u2013 A list of Kafka topics ( my_topic ).  group_name  \u2013 A group of Kafka consumers ( group1 ). Reading margins are tracked for each group separately. If you don't want messages to be duplicated in the cluster, use the same group name everywhere.  --format  \u2013 Message format. Uses the same notation as the SQL  FORMAT  function, such as  JSONEachRow . For more information, see the \"Formats\" section.  schema  \u2013 An optional parameter that must be used if the format requires a schema definition. For example,  Cap'n Proto   requires the path to the schema file and the name of the root  schema.capnp:Message  object.  num_consumers  \u2013 The number of consumers per table. Default:  1 . Specify more consumers if the throughput of one consumer is insufficient. The total number of consumers should not exceed the number of partitions in the topic, since only one consumer can be assigned per partition.   Example:     CREATE   TABLE   queue   ( \n     timestamp   UInt64 , \n     level   String , \n     message   String \n   )   ENGINE   =   Kafka ( localhost:9092 ,   topic ,   group1 ,   JSONEachRow ); \n\n   SELECT   *   FROM   queue   LIMIT   5 ;   The delivered messages are tracked automatically, so each message in a group is only counted once. If you want to get the data twice, then create a copy of the table with another group name.  Groups are flexible and synced on the cluster. For instance, if you have 10 topics and 5 copies of a table in a cluster, then each copy gets 2 topics. If the number of copies changes, the topics are redistributed across the copies automatically. Read more about this at  http://kafka.apache.org/intro .  SELECT  is not particularly useful for reading messages (except for debugging), because each message can be read only once. It is more practical to create real-time threads using materialized views. To do this:   Use the engine to create a Kafka consumer and consider it a data stream.  Create a table with the desired structure.  Create a materialized view that converts data from the engine and puts it into a previously created table.   When the  MATERIALIZED VIEW  joins the engine, it starts collecting data in the background. This allows you to continually receive messages from Kafka and convert them to the required format using  SELECT  Example:     CREATE   TABLE   queue   ( \n     timestamp   UInt64 , \n     level   String , \n     message   String \n   )   ENGINE   =   Kafka ( localhost:9092 ,   topic ,   group1 ,   JSONEachRow ); \n\n   CREATE   TABLE   daily   ( \n     day   Date , \n     level   String , \n     total   UInt64 \n   )   ENGINE   =   SummingMergeTree ( day ,   ( day ,   level ),   8192 ); \n\n   CREATE   MATERIALIZED   VIEW   consumer   TO   daily \n     AS   SELECT   toDate ( toDateTime ( timestamp ))   AS   day ,   level ,   count ()   as   total \n     FROM   queue   GROUP   BY   day ,   level ; \n\n   SELECT   level ,   sum ( total )   FROM   daily   GROUP   BY   level ;   To improve performance, received messages are grouped into blocks the size of  max_insert_block_size . If the block wasn't formed within  stream_flush_interval_ms  milliseconds, the data will be flushed to the table regardless of the completeness of the block.  To stop receiving topic data or to change the conversion logic, detach the materialized view:    DETACH TABLE consumer;\n  ATTACH MATERIALIZED VIEW consumer;  If you want to change the target table by using  ALTER materialized view, we recommend disabling the material view to avoid discrepancies between the target table and the data from the view.", 
            "title": "Kafka"
        }, 
        {
            "location": "/index.html#configuration", 
            "text": "Similar to GraphiteMergeTree, the Kafka engine supports extended configuration using the ClickHouse config file. There are two configuration keys that you can use: global ( kafka ) and topic-level ( kafka_topic_* ). The global configuration is applied first, and the topic-level configuration is second (if it exists).     !--  Global configuration options for all tables of Kafka engine type -- \n   kafka \n     debug cgrp /debug \n     auto_offset_reset smallest /auto_offset_reset \n   /kafka \n\n   !-- Configuration specific for topic  logs  -- \n   kafka_topic_logs \n     retry_backoff_ms 250 /retry_backoff_ms \n     fetch_min_bytes 100000 /fetch_min_bytes \n   /kafka_topic_logs   For a list of possible configuration options, see the  librdkafka configuration reference . Use the underscore ( _ ) instead of a dot in the ClickHouse configuration. For example,  check.crcs=true  will be  check_crcs true /check_crcs .", 
            "title": "Configuration"
        }, 
        {
            "location": "/index.html#mysql", 
            "text": "The MySQL engine allows you to perform SELECT queries on data that is stored on a remote MySQL server.  The engine takes 4 parameters: the server address (host and port); the name of the database; the name of the table; the user's name; the user's password. Example:  MySQL( host:port ,  database ,  table ,  user ,  password );  At this time, simple WHERE clauses such as  =, !=,  ,  =,  ,  =  are executed on the MySQL server.  The rest of the conditions and the LIMIT sampling constraint are executed in ClickHouse only after the query to MySQL finishes.", 
            "title": "MySQL"
        }, 
        {
            "location": "/index.html#external-data-for-query-processing", 
            "text": "ClickHouse allows sending a server the data that is needed for processing a query, together with a SELECT query. This data is put in a temporary table (see the section \"Temporary tables\") and can be used in the query (for example, in IN operators).  For example, if you have a text file with important user identifiers, you can upload it to the server along with a query that uses filtration by this list.  If you need to run more than one query with a large volume of external data, don't use this feature. It is better to upload the data to the DB ahead of time.  External data can be uploaded using the command-line client (in non-interactive mode), or using the HTTP interface.  In the command-line client, you can specify a parameters section in the format  --external --file = ...  [ --name = ... ]   [ --format = ... ]   [ --types = ... | --structure = ... ]   You may have multiple sections like this, for the number of tables being transmitted.  --external  \u2013 Marks the beginning of a clause. --file  \u2013 Path to the file with the table dump, or -, which refers to stdin.\nOnly a single table can be retrieved from stdin.  The following parameters are optional:  --name \u2013 Name of the table. If omitted, _data is used. --format  \u2013 Data format in the file. If omitted, TabSeparated is used.  One of the following parameters is required: --types  \u2013 A list of comma-separated column types. For example:  UInt64,String . The columns will be named _1, _2, ... --structure \u2013 The table structure in the format UserID UInt64 ,  URL String . Defines the column names and types.  The files specified in 'file' will be parsed by the format specified in 'format', using the data types specified in 'types' or 'structure'. The table will be uploaded to the server and accessible there as a temporary table with the name in 'name'.  Examples:  echo  -ne  1\\n2\\n3\\n   |  clickhouse-client --query = SELECT count() FROM test.visits WHERE TraficSourceID IN _data  --external --file = - --types = Int8 849897 \ncat /etc/passwd  |  sed  s/:/\\t/g   |  clickhouse-client --query = SELECT shell, count() AS c FROM passwd GROUP BY shell ORDER BY c DESC  --external --file = - --name = passwd --structure = login String, unused String, uid UInt16, gid UInt16, comment String, home String, shell String \n/bin/sh  20 \n/bin/false       5 \n/bin/bash        4 \n/usr/sbin/nologin        1 \n/bin/sync        1   When using the HTTP interface, external data is passed in the multipart/form-data format. Each table is transmitted as a separate file. The table name is taken from the file name. The 'query_string' is passed the parameters 'name_format', 'name_types', and 'name_structure', where 'name' is the name of the table that these parameters correspond to. The meaning of the parameters is the same as when using the command-line client.  Example:  cat /etc/passwd  |  sed  s/:/\\t/g    passwd.tsv\n\ncurl -F  passwd=@passwd.tsv;   http://localhost:8123/?query=SELECT+shell,+count()+AS+c+FROM+passwd+GROUP+BY+shell+ORDER+BY+c+DESC passwd_structure=login+String,+unused+String,+uid+UInt16,+gid+UInt16,+comment+String,+home+String,+shell+String \n/bin/sh  20 \n/bin/false       5 \n/bin/bash        4 \n/usr/sbin/nologin        1 \n/bin/sync        1   For distributed query processing, the temporary tables are sent to all the remote servers.", 
            "title": "External data for query processing"
        }, 
        {
            "location": "/index.html#system-tables", 
            "text": "System tables are used for implementing part of the system's functionality, and for providing access to information about how the system is working.\nYou can't delete a system table (but you can perform DETACH).\nSystem tables don't have files with data on the disk or files with metadata. The server creates all the system tables when it starts.\nSystem tables are read-only.\nThey are located in the 'system' database.", 
            "title": "System tables"
        }, 
        {
            "location": "/index.html#systemone", 
            "text": "This table contains a single row with a single 'dummy' UInt8 column containing the value 0.\nThis table is used if a SELECT query doesn't specify the FROM clause.\nThis is similar to the DUAL table found in other DBMSs.", 
            "title": "system.one"
        }, 
        {
            "location": "/index.html#systemnumbers", 
            "text": "This table contains a single UInt64 column named 'number' that contains almost all the natural numbers starting from zero.\nYou can use this table for tests, or if you need to do a brute force search.\nReads from this table are not parallelized.", 
            "title": "system.numbers"
        }, 
        {
            "location": "/index.html#systemnumbers_mt", 
            "text": "The same as 'system.numbers' but reads are parallelized. The numbers can be returned in any order.\nUsed for tests.", 
            "title": "system.numbers_mt"
        }, 
        {
            "location": "/index.html#systemdatabases", 
            "text": "This table contains a single String column called 'name' \u2013 the name of a database.\nEach database that the server knows about has a corresponding entry in the table.\nThis system table is used for implementing the  SHOW DATABASES  query.", 
            "title": "system.databases"
        }, 
        {
            "location": "/index.html#systemtables", 
            "text": "This table contains the String columns 'database', 'name', and 'engine'.\nThe table also contains three virtual columns: metadata_modification_time (DateTime type), create_table_query, and engine_full (String type).\nEach table that the server knows about is entered in the 'system.tables' table.\nThis system table is used for implementing SHOW TABLES queries.", 
            "title": "system.tables"
        }, 
        {
            "location": "/index.html#systemcolumns", 
            "text": "Contains information about the columns in all tables.\nYou can use this table to get information similar to  DESCRIBE TABLE , but for multiple tables at once.  database String           - Name of the database the table is located in.\ntable String              - Table name.\nname String               - Column name.\ntype String               - Column type.\ndefault_type String       - Expression type (DEFAULT, MATERIALIZED, ALIAS) for the default value, or an empty string if it is not defined.\ndefault_expression String - Expression for the default value, or an empty string if it is not defined.", 
            "title": "system.columns"
        }, 
        {
            "location": "/index.html#systemparts", 
            "text": "Contains information about parts of a table in the  MergeTree  family.  Each row describes one part of the data.  Columns:   partition (String) \u2013 The partition name. YYYYMM format. To learn what a partition is, see the description of the  ALTER  query.  name (String) \u2013 Name of the data part.  active (UInt8) \u2013 Indicates whether the part is active. If a part is active, it is used in a table; otherwise, it will be deleted. Inactive data parts remain after merging.  marks (UInt64) \u2013 The number of marks. To get the approximate number of rows in a data part, multiply  marks   by the index granularity (usually 8192).  marks_size (UInt64) \u2013 The size of the file with marks.  rows (UInt64) \u2013 The number of rows.  bytes (UInt64) \u2013 The number of bytes when compressed.  modification_time (DateTime) \u2013 The modification time of the directory with the data part. This usually corresponds to the time of data part creation.|  remove_time (DateTime) \u2013 The time when the data part became inactive.  refcount (UInt32) \u2013 The number of places where the data part is used. A value greater than 2 indicates that the data part is used in queries or merges.  min_date (Date) \u2013 The minimum value of the date key in the data part.  max_date (Date) \u2013 The maximum value of the date key in the data part.  min_block_number (UInt64) \u2013 The minimum number of data parts that make up the current part after merging.  max_block_number (UInt64) \u2013 The maximum number of data parts that make up the current part after merging.  level (UInt32) \u2013 Depth of the merge tree. If a merge was not performed,  level=0 .  primary_key_bytes_in_memory (UInt64) \u2013 The amount of memory (in bytes) used by primary key values.  primary_key_bytes_in_memory_allocated (UInt64) \u2013 The amount of memory (in bytes) reserved for primary key values.  database (String) \u2013 Name of the database.  table (String) \u2013 Name of the table.  engine (String) \u2013 Name of the table engine without parameters.", 
            "title": "system.parts"
        }, 
        {
            "location": "/index.html#systemprocesses", 
            "text": "This system table is used for implementing the  SHOW PROCESSLIST  query.\nColumns:  user String              \u2013 Name of the user who made the request. For distributed query processing, this is the user who helped the requestor server send the query to this server, not the user who made the distributed request on the requestor server.\n\naddress String           \u2013 The IP address that the query was made from. The same is true for distributed query processing.\n\nelapsed Float64          \u2013  The time in seconds since request execution started.\n\nrows_read UInt64         \u2013 The number of rows read from the table. For distributed processing, on the requestor server, this is the total for all remote servers.\n\nbytes_read UInt64        \u2013 The number of uncompressed bytes read from the table. For distributed processing, on the requestor server, this is the total for all remote servers.\n\nUInt64 total_rows_approx \u2013 The approximate total number of rows that must be read. For distributed processing, on the requestor server, this is the total for all remote servers. It can be updated during request processing, when new sources to process become known.\n\nmemory_usage UInt64 \u2013 Memory consumption by the query. It might not include some types of dedicated memory.\n\nquery String \u2013 The query text. For INSERT, it doesn t include the data to insert.\n\nquery_id \u2013 Query ID, if defined.", 
            "title": "system.processes"
        }, 
        {
            "location": "/index.html#systemmerges", 
            "text": "Contains information about merges currently in process for tables in the MergeTree family.  Columns:   database String  \u2014 Name of the database the table is located in.  table String  \u2014 Name of the table.  elapsed Float64  \u2014 Time in seconds since the merge started.  progress Float64  \u2014 Percent of progress made, from 0 to 1.  num_parts UInt64  \u2014 Number of parts to merge.  result_part_name String  \u2014 Name of the part that will be formed as the result of the merge.  total_size_bytes_compressed UInt64  \u2014 Total size of compressed data in the parts being merged.  total_size_marks UInt64  \u2014 Total number of marks in the parts being merged.  bytes_read_uncompressed UInt64  \u2014 Amount of bytes read, decompressed.  rows_read UInt64  \u2014 Number of rows read.  bytes_written_uncompressed UInt64  \u2014 Amount of bytes written, uncompressed.  rows_written UInt64  \u2014 Number of rows written.", 
            "title": "system.merges"
        }, 
        {
            "location": "/index.html#systemevents", 
            "text": "Contains information about the number of events that have occurred in the system. This is used for profiling and monitoring purposes.\nExample: The number of processed SELECT queries.\nColumns: 'event String' \u2013 the event name, and 'value UInt64' \u2013 the quantity.", 
            "title": "system.events"
        }, 
        {
            "location": "/index.html#systemmetrics", 
            "text": "", 
            "title": "system.metrics"
        }, 
        {
            "location": "/index.html#systemasynchronous_metrics", 
            "text": "Contain metrics used for profiling and monitoring.\nThey usually reflect the number of events currently in the system, or the total resources consumed by the system.\nExample: The number of SELECT queries currently running; the amount of memory in use. system.asynchronous_metrics and system.metrics  differ in their sets of metrics and how they are calculated.", 
            "title": "system.asynchronous_metrics"
        }, 
        {
            "location": "/index.html#systemreplicas", 
            "text": "Contains information and status for replicated tables residing on the local server.\nThis table can be used for monitoring. The table contains a row for every Replicated* table.  Example:  SELECT   *  FROM   system . replicas  WHERE   table   =   visits  FORMAT   Vertical   Row 1:\n\u2500\u2500\u2500\u2500\u2500\u2500\ndatabase:           merge\ntable:              visits\nengine:             ReplicatedCollapsingMergeTree\nis_leader:          1\nis_readonly:        0\nis_session_expired: 0\nfuture_parts:       1\nparts_to_check:     0\nzookeeper_path:     /clickhouse/tables/01-06/visits\nreplica_name:       example01-06-1.yandex.ru\nreplica_path:       /clickhouse/tables/01-06/visits/replicas/example01-06-1.yandex.ru\ncolumns_version:    9\nqueue_size:         1\ninserts_in_queue:   0\nmerges_in_queue:    1\nlog_max_index:      596273\nlog_pointer:        596274\ntotal_replicas:     2\nactive_replicas:    2  Columns:  database:           database name\ntable:              table name\nengine:             table engine name\n\nis_leader:          whether the replica is the leader\n\nOnly one replica at a time can be the leader. The leader is responsible for selecting background merges to perform.\nNote that writes can be performed to any replica that is available and has a session in ZK, regardless of whether it is a leader.\n\nis_readonly:        Whether the replica is in read-only mode.\nThis mode is turned on if the config doesn t have sections with ZK, if an unknown error occurred when reinitializing sessions in ZK, and during session reinitialization in ZK.\n\nis_session_expired: Whether the ZK session expired.\nBasically, the same thing as is_readonly.\n\nfuture_parts: The number of data parts that will appear as the result of INSERTs or merges that haven t been done yet. \n\nparts_to_check: The number of data parts in the queue for verification.\nA part is put in the verification queue if there is suspicion that it might be damaged.\n\nzookeeper_path: The path to the table data in ZK. \nreplica_name: Name of the replica in ZK. Different replicas of the same table have different names. \nreplica_path: The path to the replica data in ZK. The same as concatenating zookeeper_path/replicas/replica_path.\n\ncolumns_version: Version number of the table structure.\nIndicates how many times ALTER was performed. If replicas have different versions, it means some replicas haven t made all of the ALTERs yet.\n\nqueue_size:         Size of the queue for operations waiting to be performed.\nOperations include inserting blocks of data, merges, and certain other actions.\nNormally coincides with future_parts.\n\ninserts_in_queue: Number of inserts of blocks of data that need to be made.\nInsertions are usually replicated fairly quickly. If the number is high, something is wrong.\n\nmerges_in_queue: The number of merges waiting to be made. \nSometimes merges are lengthy, so this value may be greater than zero for a long time.\n\nThe next 4 columns have a non-null value only if the ZK session is active.\n\nlog_max_index:     Maximum entry number in the log of general activity.\nlog_pointer:        Maximum entry number in the log of general activity that the replica copied to its execution queue, plus one.\nIf log_pointer is much smaller than log_max_index, something is wrong.\n\ntotal_replicas:     Total number of known replicas of this table.\nactive_replicas:    Number of replicas of this table that have a ZK session (the number of active replicas).  If you request all the columns, the table may work a bit slowly, since several reads from ZK are made for each row.\nIf you don't request the last 4 columns (log_max_index, log_pointer, total_replicas, active_replicas), the table works quickly.  For example, you can check that everything is working correctly like this:  SELECT \n     database , \n     table , \n     is_leader , \n     is_readonly , \n     is_session_expired , \n     future_parts , \n     parts_to_check , \n     columns_version , \n     queue_size , \n     inserts_in_queue , \n     merges_in_queue , \n     log_max_index , \n     log_pointer , \n     total_replicas , \n     active_replicas  FROM   system . replicas  WHERE \n        is_readonly \n     OR   is_session_expired \n     OR   future_parts     20 \n     OR   parts_to_check     10 \n     OR   queue_size     20 \n     OR   inserts_in_queue     10 \n     OR   log_max_index   -   log_pointer     10 \n     OR   total_replicas     2 \n     OR   active_replicas     total_replicas   If this query doesn't return anything, it means that everything is fine.", 
            "title": "system.replicas"
        }, 
        {
            "location": "/index.html#systemdictionaries", 
            "text": "Contains information about external dictionaries.  Columns:   name String  \u2013 Dictionary name.  type String  \u2013 Dictionary type: Flat, Hashed, Cache.  origin String  \u2013 Path to the config file where the dictionary is described.  attribute.names Array(String)  \u2013 Array of attribute names provided by the dictionary.  attribute.types Array(String)  \u2013 Corresponding array of attribute types provided by the dictionary.  has_hierarchy UInt8  \u2013 Whether the dictionary is hierarchical.  bytes_allocated UInt64  \u2013 The amount of RAM used by the dictionary.  hit_rate Float64  \u2013 For cache dictionaries, the percent of usage for which the value  was in the cache.  element_count UInt64  \u2013 The number of items stored in the dictionary.  load_factor Float64  \u2013 The filled percentage of the dictionary (for a hashed dictionary, it is the filled percentage of the hash table).  creation_time DateTime  \u2013 Time spent for the creation or last successful reload of the dictionary.  last_exception String  \u2013 Text of an error that occurred when creating or reloading the dictionary, if the dictionary couldn't be created.  source String  \u2013 Text describing the data source for the dictionary.   Note that the amount of memory used by the dictionary is not proportional to the number of items stored in it. So for flat and cached dictionaries, all the memory cells are pre-assigned, regardless of how full the dictionary actually is.", 
            "title": "system.dictionaries"
        }, 
        {
            "location": "/index.html#systemclusters", 
            "text": "Contains information about clusters available in the config file and the servers in them.\nColumns:  cluster String      \u2013 Cluster name.\nshard_num UInt32    \u2013 Number of a shard in the cluster, starting from 1.\nshard_weight UInt32 \u2013 Relative weight of a shard when writing data.\nreplica_num UInt32  \u2013 Number of a replica in the shard, starting from 1.\nhost_name String    \u2013 Host name as specified in the config.\nhost_address String \u2013 Host s IP address obtained from DNS.\nport UInt16         \u2013 The port used to access the server.\nuser String         \u2013 The username to use for connecting to the server.", 
            "title": "system.clusters"
        }, 
        {
            "location": "/index.html#systemfunctions", 
            "text": "Contains information about normal and aggregate functions.  Columns:   name  ( String ) \u2013 Function name.  is_aggregate  ( UInt8 ) \u2013 Whether it is an aggregate function.", 
            "title": "system.functions"
        }, 
        {
            "location": "/index.html#systemsettings", 
            "text": "Contains information about settings that are currently in use.\nI.e. used for executing the query you are using to read from the system.settings table).  Columns:  name String   \u2013 Setting name.\nvalue String  \u2013 Setting value.\nchanged UInt8 - Whether the setting was explicitly defined in the config or explicitly changed.  Example:  SELECT   *  FROM   system . settings  WHERE   changed   \u250c\u2500name\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500value\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500changed\u2500\u2510\n\u2502 max_threads            \u2502 8           \u2502       1 \u2502\n\u2502 use_uncompressed_cache \u2502 0           \u2502       1 \u2502\n\u2502 load_balancing         \u2502 random      \u2502       1 \u2502\n\u2502 max_memory_usage       \u2502 10000000000 \u2502       1 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", 
            "title": "system.settings"
        }, 
        {
            "location": "/index.html#systemzookeeper", 
            "text": "Allows reading data from the ZooKeeper cluster defined in the config.\nThe query must have a 'path' equality condition in the WHERE clause. This is the path in ZooKeeper for the children that you want to get data for.  The query  SELECT * FROM system.zookeeper WHERE path = '/clickhouse'  outputs data for all children on the  /clickhouse  node.\nTo output data for all root nodes, write path = '/'.\nIf the path specified in 'path' doesn't exist, an exception will be thrown.  Columns:   name String  \u2014 Name of the node.  path String  \u2014 Path to the node.  value String  \u2014 Value of the node.  dataLength Int32  \u2014 Size of the value.  numChildren Int32  \u2014 Number of children.  czxid Int64  \u2014 ID of the transaction that created the node.  mzxid Int64  \u2014 ID of the transaction that last changed the node.  pzxid Int64  \u2014 ID of the transaction that last added or removed children.  ctime DateTime  \u2014 Time of node creation.  mtime DateTime  \u2014 Time of the last node modification.  version Int32  \u2014 Node version - the number of times the node was changed.  cversion Int32  \u2014 Number of added or removed children.  aversion Int32  \u2014 Number of changes to ACL.  ephemeralOwner Int64  \u2014 For ephemeral nodes, the ID of the session that owns this node.   Example:  SELECT   *  FROM   system . zookeeper  WHERE   path   =   /clickhouse/tables/01-08/visits/replicas  FORMAT   Vertical   Row 1:\n\u2500\u2500\u2500\u2500\u2500\u2500\nname:           example01-08-1.yandex.ru\nvalue:\nczxid:          932998691229\nmzxid:          932998691229\nctime:          2015-03-27 16:49:51\nmtime:          2015-03-27 16:49:51\nversion:        0\ncversion:       47\naversion:       0\nephemeralOwner: 0\ndataLength:     0\nnumChildren:    7\npzxid:          987021031383\npath:           /clickhouse/tables/01-08/visits/replicas\n\nRow 2:\n\u2500\u2500\u2500\u2500\u2500\u2500\nname:           example01-08-2.yandex.ru\nvalue:\nczxid:          933002738135\nmzxid:          933002738135\nctime:          2015-03-27 16:57:01\nmtime:          2015-03-27 16:57:01\nversion:        0\ncversion:       37\naversion:       0\nephemeralOwner: 0\ndataLength:     0\nnumChildren:    7\npzxid:          987021252247\npath:           /clickhouse/tables/01-08/visits/replicas", 
            "title": "system.zookeeper"
        }, 
        {
            "location": "/index.html#table-functions", 
            "text": "Table functions can be specified in the FROM clause instead of the database and table names.\nTable functions can only be used if 'readonly' is not set.\nTable functions aren't related to other functions.", 
            "title": "Table functions"
        }, 
        {
            "location": "/index.html#remote", 
            "text": "Allows you to access remote servers without creating a  Distributed  table.  Signatures:  remote ( addresses_expr ,   db ,   table [,   user [,   password ]])  remote ( addresses_expr ,   db . table [,   user [,   password ]])   addresses_expr  \u2013 An expression that generates addresses of remote servers. This may be just one server address. The server address is  host:port , or just  host . The host can be specified as the server name, or as the IPv4 or IPv6 address. An IPv6 address is specified in square brackets. The port is the TCP port on the remote server. If the port is omitted, it uses  tcp_port  from the server's config file (by default, 9000).  \n\nThe port is required for an IPv6 address.  Examples:  example01-01-1\nexample01-01-1:9000\nlocalhost\n127.0.0.1\n[::]:9000\n[2a02:6b8:0:1111::11]:9000  Multiple addresses can be comma-separated. In this case, ClickHouse will use distributed processing, so it will send the query to all specified addresses (like to shards with different data).  Example:  example01-01-1,example01-02-1  Part of the expression can be specified in curly brackets. The previous example can be written as follows:  example01-0{1,2}-1  Curly brackets can contain a range of numbers separated by two dots (non-negative integers). In this case, the range is expanded to a set of values that generate shard addresses. If the first number starts with zero, the values are formed with the same zero alignment. The previous example can be written as follows:  example01-{01..02}-1  If you have multiple pairs of curly brackets, it generates the direct product of the corresponding sets.  Addresses and parts of addresses in curly brackets can be separated by the pipe symbol (|). In this case, the corresponding sets of addresses are interpreted as replicas, and the query will be sent to the first healthy replica. However, the replicas are iterated in the order currently set in the  load_balancing  setting.  Example:  example01-{01..02}-{1|2}  This example specifies two shards that each have two replicas.  The number of addresses generated is limited by a constant. Right now this is 1000 addresses.  Using the  remote  table function is less optimal than creating a  Distributed  table, because in this case, the server connection is re-established for every request. In addition, if host names are set, the names are resolved, and errors are not counted when working with various replicas. When processing a large number of queries, always create the  Distributed  table ahead of time, and don't use the  remote  table function.  The  remote  table function can be useful in the following cases:   Accessing a specific server for data comparison, debugging, and testing.  Queries between various ClickHouse clusters for research purposes.  Infrequent distributed requests that are made manually.  Distributed requests where the set of servers is re-defined each time.   If the user is not specified,  default  is used.\nIf the password is not specified, an empty password is used.", 
            "title": "remote"
        }, 
        {
            "location": "/index.html#merge_1", 
            "text": "merge(db_name, 'tables_regexp')  \u2013 Creates a temporary Merge table. For more information, see the section \"Table engines, Merge\".  The table structure is taken from the first table encountered that matches the regular expression.", 
            "title": "merge"
        }, 
        {
            "location": "/index.html#numbers", 
            "text": "numbers(N)  \u2013 Returns a table with the single 'number' column (UInt64) that contains integers from 0 to N-1.  Similar to the  system.numbers  table, it can be used for testing and generating successive values.  The following two queries are equivalent:  SELECT   *   FROM   numbers ( 10 );  SELECT   *   FROM   system . numbers   LIMIT   10 ;   Examples:  -- Generate a sequence of dates from 2010-01-01 to 2010-12-31  select   toDate ( 2010-01-01 )   +   number   as   d   FROM   numbers ( 365 );", 
            "title": "numbers"
        }, 
        {
            "location": "/index.html#formats", 
            "text": "The format determines how data is returned to you after SELECTs (how it is written and formatted by the server), and how it is accepted for INSERTs (how it is read and parsed by the server).", 
            "title": "Formats"
        }, 
        {
            "location": "/index.html#tabseparated", 
            "text": "In TabSeparated format, data is written by row. Each row contains values separated by tabs. Each value is follow by a tab, except the last value in the row, which is followed by a line feed. Strictly Unix line feeds are assumed everywhere. The last row also must contain a line feed at the end. Values are written in text format, without enclosing quotation marks, and with special characters escaped.  Integer numbers are written in decimal form. Numbers can contain an extra \"+\" character at the beginning (ignored when parsing, and not recorded when formatting). Non-negative numbers can't contain the negative sign. When reading, it is allowed to parse an empty string as a zero, or (for signed types) a string consisting of just a minus sign as a zero. Numbers that do not fit into the corresponding data type may be parsed as a different number, without an error message.  Floating-point numbers are written in decimal form. The dot is used as the decimal separator. Exponential entries are supported, as are 'inf', '+inf', '-inf', and 'nan'. An entry of floating-point numbers may begin or end with a decimal point.\nDuring formatting, accuracy may be lost on floating-point numbers.\nDuring parsing, it is not strictly required to read the nearest machine-representable number.  Dates are written in YYYY-MM-DD format and parsed in the same format, but with any characters as separators.\nDates with times are written in the format YYYY-MM-DD hh:mm:ss and parsed in the same format, but with any characters as separators.\nThis all occurs in the system time zone at the time the client or server starts (depending on which one formats data). For dates with times, daylight saving time is not specified. So if a dump has times during daylight saving time, the dump does not unequivocally match the data, and parsing will select one of the two times.\nDuring a read operation, incorrect dates and dates with times can be parsed with natural overflow or as null dates and times, without an error message.  As an exception, parsing dates with times is also supported in Unix timestamp format, if it consists of exactly 10 decimal digits. The result is not time zone-dependent. The formats YYYY-MM-DD hh:mm:ss and NNNNNNNNNN are differentiated automatically.  Strings are output with backslash-escaped special characters. The following escape sequences are used for output:  \\b ,  \\f ,  \\r ,  \\n ,  \\t ,  \\0 ,  \\' ,  \\\\ . Parsing also supports the sequences  \\a ,  \\v , and  \\xHH   (hex escape sequences) and any  \\c  sequences, where  c  is any character (these sequences are converted to  c ). Thus, reading data supports formats where a line feed can be written as  \\n   or  \\ , or as a line feed. For example, the string  Hello world  with a line feed between the words instead of a space can be parsed in any of the following variations:  Hello\\nworld\n\nHello\\\nworld  The second variant is supported because MySQL uses it when writing tab-separated dumps.  The minimum set of characters that you need to escape when passing data in TabSeparated format: tab, line feed (LF) and backslash.  Only a small set of symbols are escaped. You can easily stumble onto a string value that your terminal will ruin in output.  Arrays are written as a list of comma-separated values in square brackets. Number items in the array are fomratted as normally, but dates, dates with times, and strings are written in single quotes with the same escaping rules as above.  The TabSeparated format is convenient for processing data using custom programs and scripts. It is used by default in the HTTP interface, and in the command-line client's batch mode. This format also allows transferring data between different DBMSs. For example, you can get a dump from MySQL and upload it to ClickHouse, or vice versa.  The TabSeparated format supports outputting total values (when using WITH TOTALS) and extreme values (when 'extremes' is set to 1). In these cases, the total values and extremes are output after the main data. The main result, total values, and extremes are separated from each other by an empty line. Example:  SELECT   EventDate ,   count ()   AS   c   FROM   test . hits   GROUP   BY   EventDate   WITH   TOTALS   ORDER   BY   EventDate   FORMAT   TabSeparated ``   2014-03-17      1406958\n2014-03-18      1383658\n2014-03-19      1405797\n2014-03-20      1353623\n2014-03-21      1245779\n2014-03-22      1031592\n2014-03-23      1046491\n\n0000-00-00      8873898\n\n2014-03-17      1031592\n2014-03-23      1406958  This format is also available under the name  TSV .", 
            "title": "TabSeparated"
        }, 
        {
            "location": "/index.html#tabseparatedraw", 
            "text": "Differs from  TabSeparated  format in that the rows are written without escaping.\nThis format is only appropriate for outputting a query result, but not for parsing (retrieving data to insert in a table).  This format is also available under the name  TSVRaw .", 
            "title": "TabSeparatedRaw"
        }, 
        {
            "location": "/index.html#tabseparatedwithnames", 
            "text": "Differs from the  TabSeparated  format in that the column names are written in the first row.\nDuring parsing, the first row is completely ignored. You can't use column names to determine their position or to check their correctness.\n(Support for parsing the header row may be added in the future.)  This format is also available under the name  TSVWithNames .", 
            "title": "TabSeparatedWithNames"
        }, 
        {
            "location": "/index.html#tabseparatedwithnamesandtypes", 
            "text": "Differs from the  TabSeparated  format in that the column names are written to the first row, while the column types are in the second row.\nDuring parsing, the first and second rows are completely ignored.  This format is also available under the name  TSVWithNamesAndTypes .", 
            "title": "TabSeparatedWithNamesAndTypes"
        }, 
        {
            "location": "/index.html#csv", 
            "text": "Comma Separated Values format ( RFC ).  When formatting, rows are enclosed in double quotes. A double quote inside a string is output as two double quotes in a row. There are no other rules for escaping characters. Date and date-time are enclosed in double quotes. Numbers are output without quotes. Values \u200b\u200bare separated by a delimiter . Rows are separated using the Unix line feed (LF). Arrays are serialized in CSV as follows: first the array is serialized to a string as in TabSeparated format, and then the resulting string is output to CSV in double quotes. Tuples in CSV format are serialized as separate columns (that is, their nesting in the tuple is lost).  By default \u2014  , . See a  format_csv_delimiter  setting for additional info.  When parsing, all values can be parsed either with or without quotes. Both double and single quotes are supported. Rows can also be arranged without quotes. In this case, they are parsed up to a delimiter or line feed (CR or LF). In violation of the RFC, when parsing rows without quotes, the leading and trailing spaces and tabs are ignored. For the line feed, Unix (LF), Windows (CR LF) and Mac OS Classic (CR LF) are all supported.  The CSV format supports the output of totals and extremes the same way as  TabSeparated .", 
            "title": "CSV"
        }, 
        {
            "location": "/index.html#csvwithnames", 
            "text": "Also prints the header row, similar to  TabSeparatedWithNames .", 
            "title": "CSVWithNames"
        }, 
        {
            "location": "/index.html#values", 
            "text": "Prints every row in brackets. Rows are separated by commas. There is no comma after the last row. The values inside the brackets are also comma-separated. Numbers are output in decimal format without quotes. Arrays are output in square brackets. Strings, dates, and dates with times are output in quotes. Escaping rules and parsing are similar to the TabSeparated format. During formatting, extra spaces aren't inserted, but during parsing, they are allowed and skipped (except for spaces inside array values, which are not allowed).  The minimum set of characters that you need to escape when passing data in Values \u200b\u200bformat: single quotes and backslashes.  This is the format that is used in  INSERT INTO t VALUES ... , but you can also use it for formatting query results.", 
            "title": "Values"
        }, 
        {
            "location": "/index.html#vertical", 
            "text": "Prints each value on a separate line with the column name specified. This format is convenient for printing just one or a few rows, if each row consists of a large number of columns.\nThis format is only appropriate for outputting a query result, but not for parsing (retrieving data to insert in a table).", 
            "title": "Vertical"
        }, 
        {
            "location": "/index.html#verticalraw", 
            "text": "Differs from  Vertical  format in that the rows are not escaped.\nThis format is only appropriate for outputting a query result, but not for parsing (retrieving data to insert in a table).  Examples:  :) SHOW CREATE TABLE geonames FORMAT VerticalRaw;\nRow 1:\n\u2500\u2500\u2500\u2500\u2500\u2500\nstatement: CREATE TABLE default.geonames ( geonameid UInt32, date Date DEFAULT CAST( 2017-12-08  AS Date)) ENGINE = MergeTree(date, geonameid, 8192)\n\n:) SELECT  string with \\ quotes\\  and \\t with some special \\n characters  AS test FORMAT VerticalRaw;\nRow 1:\n\u2500\u2500\u2500\u2500\u2500\u2500\ntest: string with  quotes  and   with some special\n characters  Compare with the Vertical format:  :) SELECT  string with \\ quotes\\  and \\t with some special \\n characters  AS test FORMAT Vertical;\nRow 1:\n\u2500\u2500\u2500\u2500\u2500\u2500\ntest: string with \\ quotes\\  and \\t with some special \\n characters", 
            "title": "VerticalRaw"
        }, 
        {
            "location": "/index.html#json", 
            "text": "Outputs data in JSON format. Besides data tables, it also outputs column names and types, along with some additional information: the total number of output rows, and the number of rows that could have been output if there weren't a LIMIT. Example:  SELECT   SearchPhrase ,   count ()   AS   c   FROM   test . hits   GROUP   BY   SearchPhrase   WITH   TOTALS   ORDER   BY   c   DESC   LIMIT   5   FORMAT   JSON   { \n         meta : \n         [ \n                 { \n                         name :   SearchPhrase , \n                         type :   String \n                 }, \n                 { \n                         name :   c , \n                         type :   UInt64 \n                 } \n         ], \n\n         data : \n         [ \n                 { \n                         SearchPhrase :   , \n                         c :   8267016 \n                 }, \n                 { \n                         SearchPhrase :   bathroom interior design , \n                         c :   2166 \n                 }, \n                 { \n                         SearchPhrase :   yandex , \n                         c :   1655 \n                 }, \n                 { \n                         SearchPhrase :   spring 2014 fashion , \n                         c :   1549 \n                 }, \n                 { \n                         SearchPhrase :   freeform photos , \n                         c :   1480 \n                 } \n         ], \n\n         totals : \n         { \n                 SearchPhrase :   , \n                 c :   8873898 \n         }, \n\n         extremes : \n         { \n                 min : \n                 { \n                         SearchPhrase :   , \n                         c :   1480 \n                 }, \n                 max : \n                 { \n                         SearchPhrase :   , \n                         c :   8267016 \n                 } \n         }, \n\n         rows :   5 , \n\n         rows_before_limit_at_least :   141137  }   The JSON is compatible with JavaScript. To ensure this, some characters are additionally escaped: the slash  /   is escaped as  \\/ ; alternative line breaks  U+2028  and  U+2029 , which break some browsers, are escaped as  \\uXXXX . ASCII control characters are escaped: backspace, form feed, line feed, carriage return, and horizontal tab are replaced with  \\b ,  \\f ,  \\n ,  \\r ,  \\t   , as well as the remaining bytes in the 00-1F range using  \\uXXXX  sequences. Invalid UTF-8 sequences are changed to the replacement character \ufffd so the output text will consist of valid UTF-8 sequences. For compatibility with JavaScript, Int64 and UInt64 integers are enclosed in double quotes  by default. To remove the quotes, you can set the configuration parameter output_format_json_quote_64bit_integers to 0.  rows  \u2013 The total number of output rows.  rows_before_limit_at_least  The minimal number of rows there would have been without LIMIT. Output only if the query contains LIMIT.\nIf the query contains GROUP BY, rows_before_limit_at_least is the exact number of rows there would have been without a LIMIT.  totals  \u2013 Total values (when using WITH TOTALS).  extremes  \u2013 Extreme values (when extremes is set to 1).  This format is only appropriate for outputting a query result, but not for parsing (retrieving data to insert in a table).\nSee also the JSONEachRow format.", 
            "title": "JSON"
        }, 
        {
            "location": "/index.html#jsoncompact", 
            "text": "Differs from JSON only in that data rows are output in arrays, not in objects.  Example:  { \n         meta : \n         [ \n                 { \n                         name :   SearchPhrase , \n                         type :   String \n                 }, \n                 { \n                         name :   c , \n                         type :   UInt64 \n                 } \n         ], \n\n         data : \n         [ \n                 [ ,   8267016 ], \n                 [ bathroom interior design ,   2166 ], \n                 [ yandex ,   1655 ], \n                 [ spring 2014 fashion ,   1549 ], \n                 [ freeform photos ,   1480 ] \n         ], \n\n         totals :   [ , 8873898 ], \n\n         extremes : \n         { \n                 min :   [ , 1480 ], \n                 max :   [ , 8267016 ] \n         }, \n\n         rows :   5 , \n\n         rows_before_limit_at_least :   141137  }   This format is only appropriate for outputting a query result, but not for parsing (retrieving data to insert in a table).\nSee also the  JSONEachRow  format.", 
            "title": "JSONCompact"
        }, 
        {
            "location": "/index.html#jsoneachrow", 
            "text": "Outputs data as separate JSON objects for each row (newline delimited JSON).  { SearchPhrase : , count() : 8267016 }  { SearchPhrase : bathroom interior design , count() : 2166 }  { SearchPhrase : yandex , count() : 1655 }  { SearchPhrase : spring 2014 fashion , count() : 1549 }  { SearchPhrase : freeform photo , count() : 1480 }  { SearchPhrase : angelina jolie , count() : 1245 }  { SearchPhrase : omsk , count() : 1112 }  { SearchPhrase : photos of dog breeds , count() : 1091 }  { SearchPhrase : curtain design , count() : 1064 }  { SearchPhrase : baku , count() : 1000 }   Unlike the JSON format, there is no substitution of invalid UTF-8 sequences. Any set of bytes can be output in the rows. This is necessary so that data can be formatted without losing any information. Values are escaped in the same way as for JSON.  For parsing, any order is supported for the values of different columns. It is acceptable for some values to be omitted \u2013 they are treated as equal to their default values. In this case, zeros and blank rows are used as default values. Complex values that could be specified in the table are not supported as defaults. Whitespace between elements is ignored. If a comma is placed after the objects, it is ignored. Objects don't necessarily have to be separated by new lines.", 
            "title": "JSONEachRow"
        }, 
        {
            "location": "/index.html#tskv", 
            "text": "Similar to TabSeparated, but outputs a value in name=value format. Names are escaped the same way as in TabSeparated format, and the = symbol is also escaped.  SearchPhrase=   count()=8267016\nSearchPhrase=bathroom interior design    count()=2166\nSearchPhrase=yandex     count()=1655\nSearchPhrase=spring 2014 fashion    count()=1549\nSearchPhrase=freeform photos       count()=1480\nSearchPhrase=angelina jolia    count()=1245\nSearchPhrase=omsk       count()=1112\nSearchPhrase=photos of dog breeds    count()=1091\nSearchPhrase=curtain design        count()=1064\nSearchPhrase=baku       count()=1000  When there is a large number of small columns, this format is ineffective, and there is generally no reason to use it. It is used in some departments of Yandex.  Both data output and parsing are supported in this format. For parsing, any order is supported for the values of different columns. It is acceptable for some values to be omitted \u2013 they are treated as equal to their default values. In this case, zeros and blank rows are used as default values. Complex values that could be specified in the table are not supported as defaults.  Parsing allows the presence of the additional field  tskv  without the equal sign or a value. This field is ignored.", 
            "title": "TSKV"
        }, 
        {
            "location": "/index.html#pretty", 
            "text": "Outputs data as Unicode-art tables, also using ANSI-escape sequences for setting colors in the terminal.\nA full grid of the table is drawn, and each row occupies two lines in the terminal.\nEach result block is output as a separate table. This is necessary so that blocks can be output without buffering results (buffering would be necessary in order to pre-calculate the visible width of all the values).\nTo avoid dumping too much data to the terminal, only the first 10,000 rows are printed. If the number of rows is greater than or equal to 10,000, the message \"Showed first 10 000\" is printed.\nThis format is only appropriate for outputting a query result, but not for parsing (retrieving data to insert in a table).  The Pretty format supports outputting total values (when using WITH TOTALS) and extremes (when 'extremes' is set to 1). In these cases, total values and extreme values are output after the main data, in separate tables. Example (shown for the PrettyCompact format):  SELECT   EventDate ,   count ()   AS   c   FROM   test . hits   GROUP   BY   EventDate   WITH   TOTALS   ORDER   BY   EventDate   FORMAT   PrettyCompact   \u250c\u2500\u2500EventDate\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500c\u2500\u2510\n\u2502 2014-03-17 \u2502 1406958 \u2502\n\u2502 2014-03-18 \u2502 1383658 \u2502\n\u2502 2014-03-19 \u2502 1405797 \u2502\n\u2502 2014-03-20 \u2502 1353623 \u2502\n\u2502 2014-03-21 \u2502 1245779 \u2502\n\u2502 2014-03-22 \u2502 1031592 \u2502\n\u2502 2014-03-23 \u2502 1046491 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nTotals:\n\u250c\u2500\u2500EventDate\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500c\u2500\u2510\n\u2502 0000-00-00 \u2502 8873898 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nExtremes:\n\u250c\u2500\u2500EventDate\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500c\u2500\u2510\n\u2502 2014-03-17 \u2502 1031592 \u2502\n\u2502 2014-03-23 \u2502 1406958 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", 
            "title": "Pretty"
        }, 
        {
            "location": "/index.html#prettycompact", 
            "text": "Differs from  Pretty  in that the grid is drawn between rows and the result is more compact.\nThis format is used by default in the command-line client in interactive mode.", 
            "title": "PrettyCompact"
        }, 
        {
            "location": "/index.html#prettycompactmonoblock", 
            "text": "Differs from  PrettyCompact  in that up to 10,000 rows are buffered, then output as a single table, not by blocks.", 
            "title": "PrettyCompactMonoBlock"
        }, 
        {
            "location": "/index.html#prettynoescapes", 
            "text": "Differs from Pretty in that ANSI-escape sequences aren't used. This is necessary for displaying this format in a browser, as well as for using the 'watch' command-line utility.  Example:  watch -n1  clickhouse-client --query= SELECT * FROM system.events FORMAT PrettyCompactNoEscapes   You can use the HTTP interface for displaying in the browser.", 
            "title": "PrettyNoEscapes"
        }, 
        {
            "location": "/index.html#prettycompactnoescapes", 
            "text": "The same as the previous setting.", 
            "title": "PrettyCompactNoEscapes"
        }, 
        {
            "location": "/index.html#prettyspacenoescapes", 
            "text": "The same as the previous setting.", 
            "title": "PrettySpaceNoEscapes"
        }, 
        {
            "location": "/index.html#prettyspace", 
            "text": "Differs from  PrettyCompact  in that whitespace (space characters) is used instead of the grid.", 
            "title": "PrettySpace"
        }, 
        {
            "location": "/index.html#rowbinary", 
            "text": "Formats and parses data by row in binary format. Rows and values are listed consecutively, without separators.\nThis format is less efficient than the Native format, since it is row-based.  Integers use fixed-length little endian representation. For example, UInt64 uses 8 bytes.\nDateTime is represented as UInt32 containing the Unix timestamp as the value.\nDate is represented as a UInt16 object that contains the number of days since 1970-01-01 as the value.\nString is represented as a varint length (unsigned  LEB128 ), followed by the bytes of the string.\nFixedString is represented simply as a sequence of bytes.  Array is represented as a varint length (unsigned  LEB128 ), followed by successive elements of the array.", 
            "title": "RowBinary"
        }, 
        {
            "location": "/index.html#native", 
            "text": "The most efficient format. Data is written and read by blocks in binary format. For each block, the number of rows, number of columns, column names and types, and parts of columns in this block are recorded one after another. In other words, this format is \"columnar\" \u2013 it doesn't convert columns to rows. This is the format used in the native interface for interaction between servers, for using the command-line client, and for C++ clients.  You can use this format to quickly generate dumps that can only be read by the ClickHouse DBMS. It doesn't make sense to work with this format yourself.", 
            "title": "Native"
        }, 
        {
            "location": "/index.html#null_1", 
            "text": "Nothing is output. However, the query is processed, and when using the command-line client, data is transmitted to the client. This is used for tests, including productivity testing.\nObviously, this format is only appropriate for output, not for parsing.", 
            "title": "Null"
        }, 
        {
            "location": "/index.html#xml", 
            "text": "XML format is suitable only for output, not for parsing. Example:  ?xml version= 1.0  encoding= UTF-8  ?  result \n         meta \n                 columns \n                         column \n                                 name SearchPhrase /name \n                                 type String /type \n                         /column \n                         column \n                                 name count() /name \n                                 type UInt64 /type \n                         /column \n                 /columns \n         /meta \n         data \n                 row \n                         SearchPhrase /SearchPhrase \n                         field 8267016 /field \n                 /row \n                 row \n                         SearchPhrase bathroom interior design /SearchPhrase \n                         field 2166 /field \n                 /row \n                 row \n                         SearchPhrase yandex /SearchPhrase \n                         field 1655 /field \n                 /row \n                 row \n                         SearchPhrase spring 2014 fashion /SearchPhrase \n                         field 1549 /field \n                 /row \n                 row \n                         SearchPhrase freeform photos /SearchPhrase \n                         field 1480 /field \n                 /row \n                 row \n                         SearchPhrase angelina jolie /SearchPhrase \n                         field 1245 /field \n                 /row \n                 row \n                         SearchPhrase omsk /SearchPhrase \n                         field 1112 /field \n                 /row \n                 row \n                         SearchPhrase photos of dog breeds /SearchPhrase \n                         field 1091 /field \n                 /row \n                 row \n                         SearchPhrase curtain design /SearchPhrase \n                         field 1064 /field \n                 /row \n                 row \n                         SearchPhrase baku /SearchPhrase \n                         field 1000 /field \n                 /row \n         /data \n         rows 10 /rows \n         rows_before_limit_at_least 141137 /rows_before_limit_at_least  /result   If the column name does not have an acceptable format, just 'field' is used as the element name. In general, the XML structure follows the JSON structure.\nJust as for JSON, invalid UTF-8 sequences are changed to the replacement character \ufffd so the output text will consist of valid UTF-8 sequences.  In string values, the characters   and   are escaped as   and  .  Arrays are output as  array elem Hello /elem elem World /elem ... /array ,\nand tuples as  tuple elem Hello /elem elem World /elem ... /tuple .", 
            "title": "XML"
        }, 
        {
            "location": "/index.html#capnproto", 
            "text": "Cap'n Proto is a binary message format similar to Protocol Buffers and Thrift, but not like JSON or MessagePack.  Cap'n Proto messages are strictly typed and not self-describing, meaning they need an external schema description. The schema is applied on the fly and cached for each query.  SELECT   SearchPhrase ,   count ()   AS   c   FROM   test . hits \n        GROUP   BY   SearchPhrase   FORMAT   CapnProto   SETTINGS   schema   =   schema:Message   Where  schema.capnp  looks like this:  struct   Message   { \n   SearchPhrase   @0   : Text ; \n   c   @1   : Uint64 ;  }   Schema files are in the file that is located in the directory specified in   format_schema_path  in the server configuration.  Deserialization is effective and usually doesn't increase the system load.", 
            "title": "CapnProto"
        }, 
        {
            "location": "/index.html#data-types", 
            "text": "ClickHouse can store various types of data in table cells.  This section describes the supported data types and special considerations when using and/or implementing them, if any.", 
            "title": "Data types"
        }, 
        {
            "location": "/index.html#uint8-uint16-uint32-uint64-int8-int16-int32-int64", 
            "text": "Fixed-length integers, with or without a sign.", 
            "title": "UInt8, UInt16, UInt32, UInt64, Int8, Int16, Int32, Int64"
        }, 
        {
            "location": "/index.html#int-ranges", 
            "text": "Int8 - [-128 : 127]  Int16 - [-32768 : 32767]  Int32 - [-2147483648 : 2147483647]  Int64 - [-9223372036854775808 : 9223372036854775807]", 
            "title": "Int ranges"
        }, 
        {
            "location": "/index.html#uint-ranges", 
            "text": "UInt8 - [0 : 255]  UInt16 - [0 : 65535]  UInt32 - [0 : 4294967295]  UInt64 - [0 : 18446744073709551615]", 
            "title": "Uint ranges"
        }, 
        {
            "location": "/index.html#float32-float64", 
            "text": "Floating point numbers .  Types are equivalent to types of C:   Float32  -  float  Float64   -  double   We recommend that you store data in integer form whenever possible. For example, convert fixed precision numbers to integer values, such as monetary amounts or page load times in milliseconds.", 
            "title": "Float32, Float64"
        }, 
        {
            "location": "/index.html#using-floating-point-numbers", 
            "text": "Computations with floating-point numbers might produce a rounding error.   SELECT   1   -   0 . 9   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500minus(1, 0.9)\u2500\u2510\n\u2502 0.09999999999999998 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   The result of the calculation depends on the calculation method (the processor type and architecture of the computer system).  Floating-point calculations might result in numbers such as infinity ( Inf ) and \"not-a-number\" ( NaN ). This should be taken into account when processing the results of calculations.  When reading floating point numbers from rows, the result might not be the nearest machine-representable number.", 
            "title": "Using floating-point numbers"
        }, 
        {
            "location": "/index.html#nan-and-inf", 
            "text": "In contrast to standard SQL, ClickHouse supports the following categories of floating-point numbers:   Inf  \u2013 Infinity.   SELECT   0 . 5   /   0   \u250c\u2500divide(0.5, 0)\u2500\u2510\n\u2502            inf \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   -Inf  \u2013 Negative infinity.   SELECT   - 0 . 5   /   0   \u250c\u2500divide(-0.5, 0)\u2500\u2510\n\u2502            -inf \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   NaN  \u2013 Not a number.   SELECT 0 / 0  \u250c\u2500divide(0, 0)\u2500\u2510\n\u2502          nan \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  See the rules for  NaN  sorting in the section  ORDER BY clause .", 
            "title": "NaN and Inf"
        }, 
        {
            "location": "/index.html#boolean-values", 
            "text": "There isn't a separate type for boolean values. They use the UInt8 type, restricted to the values 0 or 1.", 
            "title": "Boolean values"
        }, 
        {
            "location": "/index.html#string", 
            "text": "Strings of an arbitrary length. The length is not limited. The value can contain an arbitrary set of bytes, including null bytes.\nThe String type replaces the types VARCHAR, BLOB, CLOB, and others from other DBMSs.", 
            "title": "String"
        }, 
        {
            "location": "/index.html#encodings", 
            "text": "ClickHouse doesn't have the concept of encodings. Strings can contain an arbitrary set of bytes, which are stored and output as-is.\nIf you need to store texts, we recommend using UTF-8 encoding. At the very least, if your terminal uses UTF-8 (as recommended), you can read and write your values without making conversions.\nSimilarly, certain functions for working with strings have separate variations that work under the assumption that the string contains a set of bytes representing a UTF-8 encoded text.\nFor example, the 'length' function calculates the string length in bytes, while the 'lengthUTF8' function calculates the string length in Unicode code points, assuming that the value is UTF-8 encoded.", 
            "title": "Encodings"
        }, 
        {
            "location": "/index.html#fixedstringn", 
            "text": "A fixed-length string of N bytes (not characters or code points). N must be a strictly positive natural number.\nWhen the server reads a string that contains fewer bytes (such as when parsing INSERT data), the string is padded to N bytes by appending null bytes at the right.\nWhen the server reads a string that contains more bytes, an error message is returned.\nWhen the server writes a string (such as when outputting the result of a SELECT query), null bytes are not trimmed off of the end of the string, but are output.\nNote that this behavior differs from MySQL behavior for the CHAR type (where strings are padded with spaces, and the spaces are removed for output).  Fewer functions can work with the FixedString(N) type than with String, so it is less convenient to use.", 
            "title": "FixedString(N)"
        }, 
        {
            "location": "/index.html#date", 
            "text": "A date. Stored in two bytes as the number of days since 1970-01-01 (unsigned). Allows storing values from just after the beginning of the Unix Epoch to the upper threshold defined by a constant at the compilation stage (currently, this is until the year 2106, but the final fully-supported year is 2105).\nThe minimum value is output as 0000-00-00.  The date is stored without the time zone.", 
            "title": "Date"
        }, 
        {
            "location": "/index.html#datetime", 
            "text": "Date with time. Stored in four bytes as a Unix timestamp (unsigned). Allows storing values in the same range as for the Date type. The minimal value is output as 0000-00-00 00:00:00.\nThe time is stored with accuracy up to one second (without leap seconds).", 
            "title": "DateTime"
        }, 
        {
            "location": "/index.html#time-zones", 
            "text": "The date with time is converted from text (divided into component parts) to binary and back, using the system's time zone at the time the client or server starts. In text format, information about daylight savings is lost.  By default, the client switches to the timezone of the server when it connects. You can change this behavior by enabling the client command-line option  --use_client_time_zone .  Supports only those time zones that never had the time differ from UTC for a partial number of hours (without leap seconds) over the entire time range you will be working with.  So when working with a textual date (for example, when saving text dumps), keep in mind that there may be ambiguity during changes for daylight savings time, and there may be problems matching data if the time zone changed.", 
            "title": "Time zones"
        }, 
        {
            "location": "/index.html#enum", 
            "text": "Enum8 or Enum16. A finite set of string values that can be stored more efficiently than the  String  data type.  Example:  Enum8( hello  = 1,  world  = 2)   A data type with two possible values: 'hello' and 'world'.   Each of the values is assigned a number in the range  -128 ... 127  for  Enum8  or in the range  -32768 ... 32767  for  Enum16 . All the strings and numbers must be different. An empty string is allowed. If this type is specified (in a table definition), numbers can be in an arbitrary order. However, the order does not matter.  In RAM, this type of column is stored in the same way as  Int8  or  Int16   of the corresponding numerical values.\nWhen reading in text form, ClickHouse parses the value as a string and searches for the corresponding string from the set of Enum values. If it is not found, an exception is thrown. When reading in text format, the string is read and the corresponding numeric value is looked up. An exception will be thrown if it is not found.\nWhen writing in text form, it writes the value as the corresponding string. If column data contains garbage (numbers that are not from the valid set), an exception is thrown. When reading and writing in binary form, it works the same way as for Int8 and Int16 data types.\nThe implicit default value is the value with the lowest number.  During  ORDER BY ,  GROUP BY ,  IN ,  DISTINCT  and so on, Enums behave the same way as the corresponding numbers. For example, ORDER BY sorts them numerically. Equality and comparison operators work the same way on Enums as they do on the underlying numeric values.  Enum values cannot be compared with numbers. Enums can be compared to a constant string. If the string compared to is not a valid value for the Enum, an exception will be thrown. The IN operator is supported with the Enum on the left hand side and a set of strings on the right hand side. The strings are the values of the corresponding Enum.  Most numeric and string operations are not defined for Enum values, e.g. adding a number to an Enum or concatenating a string to an Enum.\nHowever, the Enum has a natural  toString  function that returns its string value.  Enum values are also convertible to numeric types using the  toT  function, where T is a numeric type. When T corresponds to the enum\u2019s underlying numeric type, this conversion is zero-cost.\nThe Enum type can be changed without cost using ALTER, if only the set of values is changed. It is possible to both add and remove members of the Enum using ALTER (removing is safe only if the removed value has never been used in the table). As a safeguard, changing the numeric value of a previously defined Enum member will throw an exception.  Using ALTER, it is possible to change an Enum8 to an Enum16 or vice versa, just like changing an Int8 to Int16.", 
            "title": "Enum"
        }, 
        {
            "location": "/index.html#arrayt", 
            "text": "An array of elements of type T. The T type can be any type, including an array.\nWe don't recommend using multidimensional arrays, because they are not well supported (for example, you can't store multidimensional arrays in tables with a MergeTree engine).", 
            "title": "Array(T)"
        }, 
        {
            "location": "/index.html#aggregatefunctionname-types_of_arguments", 
            "text": "The intermediate state of an aggregate function. To get it, use aggregate functions with the '-State' suffix. For more information, see \"AggregatingMergeTree\".", 
            "title": "AggregateFunction(name, types_of_arguments...)"
        }, 
        {
            "location": "/index.html#tuplet1-t2", 
            "text": "Tuples can't be written to tables (other than Memory tables). They are used for temporary column grouping. Columns can be grouped when an IN expression is used in a query, and for specifying certain formal parameters of lambda functions. For more information, see \"IN operators\" and \"Higher order functions\".  Tuples can be output as the result of running a query. In this case, for text formats other than JSON*, values are comma-separated in brackets. In JSON* formats, tuples are output as arrays (in square brackets).", 
            "title": "Tuple(T1, T2, ...)"
        }, 
        {
            "location": "/index.html#nested-data-structures", 
            "text": "", 
            "title": "Nested data structures"
        }, 
        {
            "location": "/index.html#nestedname1-type1-name2-type2", 
            "text": "A nested data structure is like a nested table. The parameters of a nested data structure \u2013 the column names and types \u2013 are specified the same way as in a CREATE query. Each table row can correspond to any number of rows in a nested data structure.  Example:  CREATE   TABLE   test . visits  ( \n     CounterID   UInt32 , \n     StartDate   Date , \n     Sign   Int8 , \n     IsNew   UInt8 , \n     VisitID   UInt64 , \n     UserID   UInt64 , \n     ... \n     Goals   Nested \n     ( \n         ID   UInt32 , \n         Serial   UInt32 , \n         EventTime   DateTime , \n         Price   Int64 , \n         OrderID   String , \n         CurrencyID   UInt32 \n     ), \n     ...  )   ENGINE   =   CollapsingMergeTree ( StartDate ,   intHash32 ( UserID ),   ( CounterID ,   StartDate ,   intHash32 ( UserID ),   VisitID ),   8192 ,   Sign )   This example declares the  Goals  nested data structure, which contains data about conversions (goals reached). Each row in the 'visits' table can correspond to zero or any number of conversions.  Only a single nesting level is supported. Columns of nested structures containing arrays are equivalent to multidimensional arrays, so they have limited support (there is no support for storing these columns in tables with the MergeTree engine).  In most cases, when working with a nested data structure, its individual columns are specified. To do this, the column names are separated by a dot. These columns make up an array of matching types. All the column arrays of a single nested data structure have the same length.  Example:  SELECT \n     Goals . ID , \n     Goals . EventTime  FROM   test . visits  WHERE   CounterID   =   101500   AND   length ( Goals . ID )     5  LIMIT   10   \u250c\u2500Goals.ID\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500Goals.EventTime\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [1073752,591325,591325]        \u2502 [ 2014-03-17 16:38:10 , 2014-03-17 16:38:48 , 2014-03-17 16:42:27 ]                       \u2502\n\u2502 [1073752]                      \u2502 [ 2014-03-17 00:28:25 ]                                                                   \u2502\n\u2502 [1073752]                      \u2502 [ 2014-03-17 10:46:20 ]                                                                   \u2502\n\u2502 [1073752,591325,591325,591325] \u2502 [ 2014-03-17 13:59:20 , 2014-03-17 22:17:55 , 2014-03-17 22:18:07 , 2014-03-17 22:18:51 ] \u2502\n\u2502 []                             \u2502 []                                                                                        \u2502\n\u2502 [1073752,591325,591325]        \u2502 [ 2014-03-17 11:37:06 , 2014-03-17 14:07:47 , 2014-03-17 14:36:21 ]                       \u2502\n\u2502 []                             \u2502 []                                                                                        \u2502\n\u2502 []                             \u2502 []                                                                                        \u2502\n\u2502 [591325,1073752]               \u2502 [ 2014-03-17 00:46:05 , 2014-03-17 00:46:05 ]                                             \u2502\n\u2502 [1073752,591325,591325,591325] \u2502 [ 2014-03-17 13:28:33 , 2014-03-17 13:30:26 , 2014-03-17 18:51:21 , 2014-03-17 18:51:45 ] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  It is easiest to think of a nested data structure as a set of multiple column arrays of the same length.  The only place where a SELECT query can specify the name of an entire nested data structure instead of individual columns is the ARRAY JOIN clause. For more information, see \"ARRAY JOIN clause\". Example:  SELECT \n     Goal . ID , \n     Goal . EventTime  FROM   test . visits  ARRAY   JOIN   Goals   AS   Goal  WHERE   CounterID   =   101500   AND   length ( Goals . ID )     5  LIMIT   10   \u250c\u2500Goal.ID\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500Goal.EventTime\u2500\u2510\n\u2502 1073752 \u2502 2014-03-17 16:38:10 \u2502\n\u2502  591325 \u2502 2014-03-17 16:38:48 \u2502\n\u2502  591325 \u2502 2014-03-17 16:42:27 \u2502\n\u2502 1073752 \u2502 2014-03-17 00:28:25 \u2502\n\u2502 1073752 \u2502 2014-03-17 10:46:20 \u2502\n\u2502 1073752 \u2502 2014-03-17 13:59:20 \u2502\n\u2502  591325 \u2502 2014-03-17 22:17:55 \u2502\n\u2502  591325 \u2502 2014-03-17 22:18:07 \u2502\n\u2502  591325 \u2502 2014-03-17 22:18:51 \u2502\n\u2502 1073752 \u2502 2014-03-17 11:37:06 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  You can't perform SELECT for an entire nested data structure. You can only explicitly list individual columns that are part of it.  For an INSERT query, you should pass all the component column arrays of a nested data structure separately (as if they were individual column arrays). During insertion, the system checks that they have the same length.  For a DESCRIBE query, the columns in a nested data structure are listed separately in the same way.  The ALTER query is very limited for elements in a nested data structure.", 
            "title": "Nested(Name1 Type1, Name2 Type2, ...)"
        }, 
        {
            "location": "/index.html#special-data-types", 
            "text": "Special data type values can't be saved to a table or output in results, but are used as the intermediate result of running a query.", 
            "title": "Special data types"
        }, 
        {
            "location": "/index.html#expression", 
            "text": "Used for representing lambda expressions in high-order functions.", 
            "title": "Expression"
        }, 
        {
            "location": "/index.html#set_2", 
            "text": "Used for the right half of an IN expression.", 
            "title": "Set"
        }, 
        {
            "location": "/index.html#operators_1", 
            "text": "All operators are transformed to the corresponding functions at the query parsing stage, in accordance with their precedence and associativity.\nGroups of operators are listed in order of priority (the higher it is in the list, the earlier the operator is connected to its arguments).", 
            "title": "Operators"
        }, 
        {
            "location": "/index.html#access-operators", 
            "text": "a[N]   Access to an element of an array;  arrayElement(a, N) function .  a.N  \u2013 Access to a tuble element;  tupleElement(a, N)  function.", 
            "title": "Access operators"
        }, 
        {
            "location": "/index.html#numeric-negation-operator", 
            "text": "-a   \u2013 The  negate (a)  function.", 
            "title": "Numeric negation operator"
        }, 
        {
            "location": "/index.html#multiplication-and-division-operators", 
            "text": "a * b   \u2013 The  multiply (a, b) function.  a / b   \u2013 The  divide(a, b) function.  a % b  \u2013 The  modulo(a, b) function.", 
            "title": "Multiplication and division operators"
        }, 
        {
            "location": "/index.html#addition-and-subtraction-operators", 
            "text": "a + b  \u2013 The  plus(a, b) function.  a - b   \u2013 The  minus(a, b) function.", 
            "title": "Addition and subtraction operators"
        }, 
        {
            "location": "/index.html#comparison-operators", 
            "text": "a = b  \u2013 The  equals(a, b) function.  a == b  \u2013 The  equals(a, b) function.  a != b  \u2013 The  notEquals(a, b) function.  a   b  \u2013 The  notEquals(a, b) function.  a  = b  \u2013 The  lessOrEquals(a, b) function.  a  = b  \u2013 The  greaterOrEquals(a, b) function.  a   b  \u2013 The  less(a, b) function.  a   b  \u2013 The  greater(a, b) function.  a LIKE s  \u2013 The  like(a, b) function.  a NOT LIKE s  \u2013 The  notLike(a, b) function.  a BETWEEN b AND c  \u2013 The same as  a  = b AND a  = c.", 
            "title": "Comparison operators"
        }, 
        {
            "location": "/index.html#operators-for-working-with-data-sets", 
            "text": "See the section \"IN operators\".  a IN ...  \u2013 The  in(a, b) function  a NOT IN ...  \u2013 The  notIn(a, b) function.  a GLOBAL IN ...  \u2013 The  globalIn(a, b) function.  a GLOBAL NOT IN ...  \u2013 The  globalNotIn(a, b) function.", 
            "title": "Operators for working with data sets"
        }, 
        {
            "location": "/index.html#logical-negation-operator", 
            "text": "NOT a  The  not(a) function.", 
            "title": "Logical negation operator"
        }, 
        {
            "location": "/index.html#logical-and-operator", 
            "text": "a AND b  \u2013 The and(a, b) function.", 
            "title": "Logical AND operator"
        }, 
        {
            "location": "/index.html#logical-or-operator", 
            "text": "a OR b  \u2013 The  or(a, b) function.", 
            "title": "Logical OR operator"
        }, 
        {
            "location": "/index.html#conditional-operator", 
            "text": "a ? b : c  \u2013 The  if(a, b, c) function.  Note:  The conditional operator calculates the values of b and c, then checks whether condition a is met, and then returns the corresponding value. If \"b\" or \"c\" is an arrayJoin() function, each row will be replicated regardless of the \"a\" condition.", 
            "title": "Conditional operator"
        }, 
        {
            "location": "/index.html#conditional-expression", 
            "text": "CASE   [ x ] \n     WHEN   a   THEN   b \n     [ WHEN   ...   THEN   ...] \n     ELSE   c  END   If \"x\" is specified, then transform(x, [a, ...], [b, ...], c). Otherwise \u2013 multiIf(a, b, ..., c).", 
            "title": "Conditional expression"
        }, 
        {
            "location": "/index.html#concatenation-operator", 
            "text": "s1 || s2  \u2013 The  concat(s1, s2) function.", 
            "title": "Concatenation operator"
        }, 
        {
            "location": "/index.html#lambda-creation-operator", 
            "text": "x -  expr  \u2013 The  lambda(x, expr) function.  The following operators do not have a priority, since they are brackets:", 
            "title": "Lambda creation operator"
        }, 
        {
            "location": "/index.html#array-creation-operator", 
            "text": "[x1, ...]  \u2013 The  array(x1, ...) function.", 
            "title": "Array creation operator"
        }, 
        {
            "location": "/index.html#tuple-creation-operator", 
            "text": "(x1, x2, ...)  \u2013 The  tuple(x2, x2, ...) function.", 
            "title": "Tuple creation operator"
        }, 
        {
            "location": "/index.html#associativity", 
            "text": "All binary operators have left associativity. For example,  1 + 2 + 3  is transformed to  plus(plus(1, 2), 3) .\nSometimes this doesn't work the way you expect. For example,  SELECT 4   2   3   will result in 0.  For efficiency, the  and  and  or  functions accept any number of arguments. The corresponding chains of  AND  and  OR  operators are transformed to a single call of these functions.", 
            "title": "Associativity"
        }, 
        {
            "location": "/index.html#functions_1", 
            "text": "There are at least* two types of functions - regular functions (they are just called \"functions\") and aggregate functions. These are completely different concepts. Regular functions work as if they are applied to each row separately (for each row, the result of the function doesn't depend on the other rows). Aggregate functions accumulate a set of values from various rows (i.e. they depend on the entire set of rows).  In this section we discuss regular functions. For aggregate functions, see the section \"Aggregate functions\".  * - There is a third type of function that the 'arrayJoin' function belongs to; table functions can also be mentioned separately.*", 
            "title": "Functions"
        }, 
        {
            "location": "/index.html#strong-typing", 
            "text": "In contrast to standard SQL, ClickHouse has strong typing. In other words, it doesn't make implicit conversions between types. Each function works for a specific set of types. This means that sometimes you need to use type conversion functions.", 
            "title": "Strong typing"
        }, 
        {
            "location": "/index.html#common-subexpression-elimination", 
            "text": "All expressions in a query that have the same AST (the same record or same result of syntactic parsing) are considered to have identical values. Such expressions are concatenated and executed once. Identical subqueries are also eliminated this way.", 
            "title": "Common subexpression elimination"
        }, 
        {
            "location": "/index.html#types-of-results", 
            "text": "All functions return a single return as the result (not several values, and not zero values). The type of result is usually defined only by the types of arguments, not by the values. Exceptions are the tupleElement function (the a.N operator), and the toFixedString function.", 
            "title": "Types of results"
        }, 
        {
            "location": "/index.html#constants", 
            "text": "For simplicity, certain functions can only work with constants for some arguments. For example, the right argument of the LIKE operator must be a constant.\nAlmost all functions return a constant for constant arguments. The exception is functions that generate random numbers.\nThe 'now' function returns different values for queries that were run at different times, but the result is considered a constant, since constancy is only important within a single query.\nA constant expression is also considered a constant (for example, the right half of the LIKE operator can be constructed from multiple constants).  Functions can be implemented in different ways for constant and non-constant arguments (different code is executed). But the results for a constant and for a true column containing only the same value should match each other.", 
            "title": "Constants"
        }, 
        {
            "location": "/index.html#constancy", 
            "text": "Functions can't change the values of their arguments \u2013 any changes are returned as the result. Thus, the result of calculating separate functions does not depend on the order in which the functions are written in the query.", 
            "title": "Constancy"
        }, 
        {
            "location": "/index.html#error-handling", 
            "text": "Some functions might throw an exception if the data is invalid. In this case, the query is canceled and an error text is returned to the client. For distributed processing, when an exception occurs on one of the servers, the other servers also attempt to abort the query.", 
            "title": "Error handling"
        }, 
        {
            "location": "/index.html#evaluation-of-argument-expressions", 
            "text": "In almost all programming languages, one of the arguments might not be evaluated for certain operators. This is usually the operators  ,  || , and  ?: .\nBut in ClickHouse, arguments of functions (operators) are always evaluated. This is because entire parts of columns are evaluated at once, instead of calculating each row separately.", 
            "title": "Evaluation of argument expressions"
        }, 
        {
            "location": "/index.html#performing-functions-for-distributed-query-processing", 
            "text": "For distributed query processing, as many stages of query processing as possible are performed on remote servers, and the rest of the stages (merging intermediate results and everything after that) are performed on the requestor server.  This means that functions can be performed on different servers.\nFor example, in the query  SELECT f(sum(g(x))) FROM distributed_table GROUP BY h(y),   if a  distributed_table  has at least two shards, the functions 'g' and 'h' are performed on remote servers, and the function 'f' is performed on the requestor server.  if a  distributed_table  has only one shard, all the 'f', 'g', and 'h' functions are performed on this shard's server.   The result of a function usually doesn't depend on which server it is performed on. However, sometimes this is important.\nFor example, functions that work with dictionaries use the dictionary that exists on the server they are running on.\nAnother example is the  hostName  function, which returns the name of the server it is running on in order to make  GROUP BY  by servers in a  SELECT  query.  If a function in a query is performed on the requestor server, but you need to perform it on remote servers, you can wrap it in an 'any' aggregate function or add it to a key in  GROUP BY .", 
            "title": "Performing functions for distributed query processing"
        }, 
        {
            "location": "/index.html#arithmetic-functions", 
            "text": "For all arithmetic functions, the result type is calculated as the smallest number type that the result fits in, if there is such a type. The minimum is taken simultaneously based on the number of bits, whether it is signed, and whether it floats. If there are not enough bits, the highest bit type is taken.  Example:  SELECT   toTypeName ( 0 ),   toTypeName ( 0   +   0 ),   toTypeName ( 0   +   0   +   0 ),   toTypeName ( 0   +   0   +   0   +   0 )   \u250c\u2500toTypeName(0)\u2500\u252c\u2500toTypeName(plus(0, 0))\u2500\u252c\u2500toTypeName(plus(plus(0, 0), 0))\u2500\u252c\u2500toTypeName(plus(plus(plus(0, 0), 0), 0))\u2500\u2510\n\u2502 UInt8         \u2502 UInt16                 \u2502 UInt32                          \u2502 UInt64                                   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  Arithmetic functions work for any pair of types from UInt8, UInt16, UInt32, UInt64, Int8, Int16, Int32, Int64, Float32, or Float64.  Overflow is produced the same way as in C++.", 
            "title": "Arithmetic functions"
        }, 
        {
            "location": "/index.html#plusa-b-a-b-operator", 
            "text": "Calculates the sum of the numbers.\nYou can also add integer numbers with a date or date and time. In the case of a date, adding an integer means adding the corresponding number of days. For a date with time, it means adding the corresponding number of seconds.", 
            "title": "plus(a, b), a + b operator"
        }, 
        {
            "location": "/index.html#minusa-b-a-b-operator", 
            "text": "Calculates the difference. The result is always signed.  You can also calculate integer numbers from a date or date with time. The idea is the same \u2013 see above for 'plus'.", 
            "title": "minus(a, b), a - b operator"
        }, 
        {
            "location": "/index.html#multiplya-b-a-42-b-operator", 
            "text": "Calculates the product of the numbers.", 
            "title": "multiply(a, b), a * b operator"
        }, 
        {
            "location": "/index.html#dividea-b-a-b-operator", 
            "text": "Calculates the quotient of the numbers. The result type is always a floating-point type.\nIt is not integer division. For integer division, use the 'intDiv' function.\nWhen dividing by zero you get 'inf', '-inf', or 'nan'.", 
            "title": "divide(a, b), a / b operator"
        }, 
        {
            "location": "/index.html#intdiva-b", 
            "text": "Calculates the quotient of the numbers. Divides into integers, rounding down (by the absolute value).\nAn exception is thrown when dividing by zero or when dividing a minimal negative number by minus one.", 
            "title": "intDiv(a, b)"
        }, 
        {
            "location": "/index.html#intdivorzeroa-b", 
            "text": "Differs from 'intDiv' in that it returns zero when dividing by zero or when dividing a minimal negative number by minus one.", 
            "title": "intDivOrZero(a, b)"
        }, 
        {
            "location": "/index.html#moduloa-b-a-b-operator", 
            "text": "Calculates the remainder after division.\nIf arguments are floating-point numbers, they are pre-converted to integers by dropping the decimal portion.\nThe remainder is taken in the same sense as in C++. Truncated division is used for negative numbers.\nAn exception is thrown when dividing by zero or when dividing a minimal negative number by minus one.", 
            "title": "modulo(a, b), a % b operator"
        }, 
        {
            "location": "/index.html#negatea-a-operator", 
            "text": "Calculates a number with the reverse sign. The result is always signed.", 
            "title": "negate(a), -a operator"
        }, 
        {
            "location": "/index.html#absa", 
            "text": "Calculates the absolute value of the number (a). That is, if a   0, it returns -a. For unsigned types it doesn't do anything. For signed integer types, it returns an unsigned number.", 
            "title": "abs(a)"
        }, 
        {
            "location": "/index.html#gcda-b", 
            "text": "Returns the greatest common divisor of the numbers.\nAn exception is thrown when dividing by zero or when dividing a minimal negative number by minus one.", 
            "title": "gcd(a, b)"
        }, 
        {
            "location": "/index.html#lcma-b", 
            "text": "Returns the least common multiple of the numbers.\nAn exception is thrown when dividing by zero or when dividing a minimal negative number by minus one.", 
            "title": "lcm(a, b)"
        }, 
        {
            "location": "/index.html#comparison-functions", 
            "text": "Comparison functions always return 0 or 1 (Uint8).  The following types can be compared:   numbers  strings and fixed strings  dates  dates with times   within each group, but not between different groups.  For example, you can't compare a date with a string. You have to use a function to convert the string to a date, or vice versa.  Strings are compared by bytes. A shorter string is smaller than all strings that start with it and that contain at least one more character.  Note. Up until version 1.1.54134, signed and unsigned numbers were compared the same way as in C++. In other words, you could get an incorrect result in cases like SELECT 9223372036854775807   -1. This behavior changed in version 1.1.54134 and is now mathematically correct.", 
            "title": "Comparison functions"
        }, 
        {
            "location": "/index.html#equals-a-b-and-a-b-operator", 
            "text": "", 
            "title": "equals, a = b and a == b operator"
        }, 
        {
            "location": "/index.html#notequals-a-operator-b-and-a-b", 
            "text": "", 
            "title": "notEquals, a ! operator= b and a &lt;&gt; b"
        }, 
        {
            "location": "/index.html#less-operator", 
            "text": "", 
            "title": "less, &lt; operator"
        }, 
        {
            "location": "/index.html#greater-operator", 
            "text": "", 
            "title": "greater, &gt; operator"
        }, 
        {
            "location": "/index.html#lessorequals-operator", 
            "text": "", 
            "title": "lessOrEquals, &lt;= operator"
        }, 
        {
            "location": "/index.html#greaterorequals-operator", 
            "text": "", 
            "title": "greaterOrEquals, &gt;= operator"
        }, 
        {
            "location": "/index.html#logical-functions", 
            "text": "Logical functions accept any numeric types, but return a UInt8 number equal to 0 or 1.  Zero as an argument is considered \"false,\" while any non-zero value is considered \"true\".", 
            "title": "Logical functions"
        }, 
        {
            "location": "/index.html#and-and-operator", 
            "text": "", 
            "title": "and, AND operator"
        }, 
        {
            "location": "/index.html#or-or-operator", 
            "text": "", 
            "title": "or, OR operator"
        }, 
        {
            "location": "/index.html#not-not-operator", 
            "text": "", 
            "title": "not, NOT operator"
        }, 
        {
            "location": "/index.html#xor", 
            "text": "", 
            "title": "xor"
        }, 
        {
            "location": "/index.html#type-conversion-functions", 
            "text": "", 
            "title": "Type conversion functions"
        }, 
        {
            "location": "/index.html#touint8-touint16-touint32-touint64", 
            "text": "", 
            "title": "toUInt8, toUInt16, toUInt32, toUInt64"
        }, 
        {
            "location": "/index.html#toint8-toint16-toint32-toint64", 
            "text": "", 
            "title": "toInt8, toInt16, toInt32, toInt64"
        }, 
        {
            "location": "/index.html#tofloat32-tofloat64", 
            "text": "", 
            "title": "toFloat32, toFloat64"
        }, 
        {
            "location": "/index.html#touint8orzero-touint16orzero-touint32orzero-touint64orzero-toint8orzero-toint16orzero-toint32orzero-toint64orzero-tofloat32orzero-tofloat64orzero", 
            "text": "", 
            "title": "toUInt8OrZero, toUInt16OrZero, toUInt32OrZero, toUInt64OrZero, toInt8OrZero, toInt16OrZero, toInt32OrZero, toInt64OrZero, toFloat32OrZero, toFloat64OrZero"
        }, 
        {
            "location": "/index.html#todate-todatetime", 
            "text": "", 
            "title": "toDate, toDateTime"
        }, 
        {
            "location": "/index.html#tostring", 
            "text": "Functions for converting between numbers, strings (but not fixed strings), dates, and dates with times.\nAll these functions accept one argument.  When converting to or from a string, the value is formatted or parsed using the same rules as for the TabSeparated format (and almost all other text formats). If the string can't be parsed, an exception is thrown and the request is canceled.  When converting dates to numbers or vice versa, the date corresponds to the number of days since the beginning of the Unix epoch.\nWhen converting dates with times to numbers or vice versa, the date with time corresponds to the number of seconds since the beginning of the Unix epoch.  The date and date-with-time formats for the toDate/toDateTime functions are defined as follows:  YYYY-MM-DD\nYYYY-MM-DD hh:mm:ss  As an exception, if converting from UInt32, Int32, UInt64, or Int64 numeric types to Date, and if the number is greater than or equal to 65536, the number is interpreted as a Unix timestamp (and not as the number of days) and is rounded to the date. This allows support for the common occurrence of writing 'toDate(unix_timestamp)', which otherwise would be an error and would require writing the more cumbersome 'toDate(toDateTime(unix_timestamp))'.  Conversion between a date and date with time is performed the natural way: by adding a null time or dropping the time.  Conversion between numeric types uses the same rules as assignments between different numeric types in C++.  Additionally, the toString function of the DateTime argument can take a second String argument containing the name of the time zone. Example:  Asia/Yekaterinburg  In this case, the time is formatted according to the specified time zone.  SELECT \n     now ()   AS   now_local , \n     toString ( now (),   Asia/Yekaterinburg )   AS   now_yekat   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500now_local\u2500\u252c\u2500now_yekat\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 2016-06-15 00:11:21 \u2502 2016-06-15 02:11:21 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  Also see the  toUnixTimestamp  function.", 
            "title": "toString"
        }, 
        {
            "location": "/index.html#tofixedstrings-n", 
            "text": "Converts a String type argument to a FixedString(N) type (a string with fixed length N). N must be a constant.\nIf the string has fewer bytes than N, it is passed with null bytes to the right. If the string has more bytes than N, an exception is thrown.", 
            "title": "toFixedString(s, N)"
        }, 
        {
            "location": "/index.html#tostringcuttozeros", 
            "text": "Accepts a String or FixedString argument. Returns the String with the content truncated at the first zero byte found.  Example:  SELECT   toFixedString ( foo ,   8 )   AS   s ,   toStringCutToZero ( s )   AS   s_cut   \u250c\u2500s\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500s_cut\u2500\u2510\n\u2502 foo\\0\\0\\0\\0\\0 \u2502 foo   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  SELECT   toFixedString ( foo\\0bar ,   8 )   AS   s ,   toStringCutToZero ( s )   AS   s_cut   \u250c\u2500s\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500s_cut\u2500\u2510\n\u2502 foo\\0bar\\0 \u2502 foo   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", 
            "title": "toStringCutToZero(s)"
        }, 
        {
            "location": "/index.html#reinterpretasuint8-reinterpretasuint16-reinterpretasuint32-reinterpretasuint64", 
            "text": "", 
            "title": "reinterpretAsUInt8, reinterpretAsUInt16, reinterpretAsUInt32, reinterpretAsUInt64"
        }, 
        {
            "location": "/index.html#reinterpretasint8-reinterpretasint16-reinterpretasint32-reinterpretasint64", 
            "text": "", 
            "title": "reinterpretAsInt8, reinterpretAsInt16, reinterpretAsInt32, reinterpretAsInt64"
        }, 
        {
            "location": "/index.html#reinterpretasfloat32-reinterpretasfloat64", 
            "text": "", 
            "title": "reinterpretAsFloat32, reinterpretAsFloat64"
        }, 
        {
            "location": "/index.html#reinterpretasdate-reinterpretasdatetime", 
            "text": "These functions accept a string and interpret the bytes placed at the beginning of the string as a number in host order (little endian). If the string isn't long enough, the functions work as if the string is padded with the necessary number of null bytes. If the string is longer than needed, the extra bytes are ignored. A date is interpreted as the number of days since the beginning of the Unix Epoch, and a date with time is interpreted as the number of seconds since the beginning of the Unix Epoch.", 
            "title": "reinterpretAsDate, reinterpretAsDateTime"
        }, 
        {
            "location": "/index.html#reinterpretasstring", 
            "text": "This function accepts a number or date or date with time, and returns a string containing bytes representing the corresponding value in host order (little endian). Null bytes are dropped from the end. For example, a UInt32 type value of 255 is a string that is one byte long.", 
            "title": "reinterpretAsString"
        }, 
        {
            "location": "/index.html#castx-t", 
            "text": "Converts 'x' to the 't' data type. The syntax CAST(x AS t) is also supported.  Example:  SELECT \n     2016-06-15 23:00:00   AS   timestamp , \n     CAST ( timestamp   AS   DateTime )   AS   datetime , \n     CAST ( timestamp   AS   Date )   AS   date , \n     CAST ( timestamp ,   String )   AS   string , \n     CAST ( timestamp ,   FixedString(22) )   AS   fixed_string   \u250c\u2500timestamp\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500datetime\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500date\u2500\u252c\u2500string\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500fixed_string\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 2016-06-15 23:00:00 \u2502 2016-06-15 23:00:00 \u2502 2016-06-15 \u2502 2016-06-15 23:00:00 \u2502 2016-06-15 23:00:00\\0\\0\\0 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  Conversion to FixedString (N) only works for arguments of type String or FixedString (N).", 
            "title": "CAST(x, t)"
        }, 
        {
            "location": "/index.html#functions-for-working-with-dates-and-times", 
            "text": "Support for time zones  All functions for working with the date and time that have a logical use for the time zone can accept a second optional time zone argument. Example: Asia/Yekaterinburg. In this case, they use the specified time zone instead of the local (default) one.  SELECT \n     toDateTime ( 2016-06-15 23:00:00 )   AS   time , \n     toDate ( time )   AS   date_local , \n     toDate ( time ,   Asia/Yekaterinburg )   AS   date_yekat , \n     toString ( time ,   US/Samoa )   AS   time_samoa   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500time\u2500\u252c\u2500date_local\u2500\u252c\u2500date_yekat\u2500\u252c\u2500time_samoa\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 2016-06-15 23:00:00 \u2502 2016-06-15 \u2502 2016-06-16 \u2502 2016-06-15 09:00:00 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  Only time zones that differ from UTC by a whole number of hours are supported.", 
            "title": "Functions for working with dates and times"
        }, 
        {
            "location": "/index.html#toyear", 
            "text": "Converts a date or date with time to a UInt16 number containing the year number (AD).", 
            "title": "toYear"
        }, 
        {
            "location": "/index.html#tomonth", 
            "text": "Converts a date or date with time to a UInt8 number containing the month number (1-12).", 
            "title": "toMonth"
        }, 
        {
            "location": "/index.html#todayofmonth", 
            "text": "-Converts a date or date with time to a UInt8 number containing the number of the day of the month (1-31).", 
            "title": "toDayOfMonth"
        }, 
        {
            "location": "/index.html#todayofweek", 
            "text": "Converts a date or date with time to a UInt8 number containing the number of the day of the week (Monday is 1, and Sunday is 7).", 
            "title": "toDayOfWeek"
        }, 
        {
            "location": "/index.html#tohour", 
            "text": "Converts a date with time to a UInt8 number containing the number of the hour in 24-hour time (0-23).\nThis function assumes that if clocks are moved ahead, it is by one hour and occurs at 2 a.m., and if clocks are moved back, it is by one hour and occurs at 3 a.m. (which is not always true \u2013 even in Moscow the clocks were twice changed at a different time).", 
            "title": "toHour"
        }, 
        {
            "location": "/index.html#tominute", 
            "text": "Converts a date with time to a UInt8 number containing the number of the minute of the hour (0-59).", 
            "title": "toMinute"
        }, 
        {
            "location": "/index.html#tosecond", 
            "text": "Converts a date with time to a UInt8 number containing the number of the second in the minute (0-59).\nLeap seconds are not accounted for.", 
            "title": "toSecond"
        }, 
        {
            "location": "/index.html#tomonday", 
            "text": "Rounds down a date or date with time to the nearest Monday.\nReturns the date.", 
            "title": "toMonday"
        }, 
        {
            "location": "/index.html#tostartofmonth", 
            "text": "Rounds down a date or date with time to the first day of the month.\nReturns the date.", 
            "title": "toStartOfMonth"
        }, 
        {
            "location": "/index.html#tostartofquarter", 
            "text": "Rounds down a date or date with time to the first day of the quarter.\nThe first day of the quarter is either 1 January, 1 April, 1 July, or 1 October.\nReturns the date.", 
            "title": "toStartOfQuarter"
        }, 
        {
            "location": "/index.html#tostartofyear", 
            "text": "Rounds down a date or date with time to the first day of the year.\nReturns the date.", 
            "title": "toStartOfYear"
        }, 
        {
            "location": "/index.html#tostartofminute", 
            "text": "Rounds down a date with time to the start of the minute.", 
            "title": "toStartOfMinute"
        }, 
        {
            "location": "/index.html#tostartoffiveminute", 
            "text": "Rounds down a date with time to the start of the hour.", 
            "title": "toStartOfFiveMinute"
        }, 
        {
            "location": "/index.html#tostartoffifteenminutes", 
            "text": "Rounds down the date with time to the start of the fifteen-minute interval.  Note: If you need to round a date with time to any other number of seconds, minutes, or hours, you can convert it into a number by using the toUInt32 function, then round the number using intDiv and multiplication, and convert it back using the toDateTime function.", 
            "title": "toStartOfFifteenMinutes"
        }, 
        {
            "location": "/index.html#tostartofhour", 
            "text": "Rounds down a date with time to the start of the hour.", 
            "title": "toStartOfHour"
        }, 
        {
            "location": "/index.html#tostartofday", 
            "text": "Rounds down a date with time to the start of the day.", 
            "title": "toStartOfDay"
        }, 
        {
            "location": "/index.html#totime", 
            "text": "Converts a date with time to a certain fixed date, while preserving the time.", 
            "title": "toTime"
        }, 
        {
            "location": "/index.html#torelativeyearnum", 
            "text": "Converts a date with time or date to the number of the year, starting from a certain fixed point in the past.", 
            "title": "toRelativeYearNum"
        }, 
        {
            "location": "/index.html#torelativemonthnum", 
            "text": "Converts a date with time or date to the number of the month, starting from a certain fixed point in the past.", 
            "title": "toRelativeMonthNum"
        }, 
        {
            "location": "/index.html#torelativeweeknum", 
            "text": "Converts a date with time or date to the number of the week, starting from a certain fixed point in the past.", 
            "title": "toRelativeWeekNum"
        }, 
        {
            "location": "/index.html#torelativedaynum", 
            "text": "Converts a date with time or date to the number of the day, starting from a certain fixed point in the past.", 
            "title": "toRelativeDayNum"
        }, 
        {
            "location": "/index.html#torelativehournum", 
            "text": "Converts a date with time or date to the number of the hour, starting from a certain fixed point in the past.", 
            "title": "toRelativeHourNum"
        }, 
        {
            "location": "/index.html#torelativeminutenum", 
            "text": "Converts a date with time or date to the number of the minute, starting from a certain fixed point in the past.", 
            "title": "toRelativeMinuteNum"
        }, 
        {
            "location": "/index.html#torelativesecondnum", 
            "text": "Converts a date with time or date to the number of the second, starting from a certain fixed point in the past.", 
            "title": "toRelativeSecondNum"
        }, 
        {
            "location": "/index.html#now", 
            "text": "Accepts zero arguments and returns the current time at one of the moments of request execution.\nThis function returns a constant, even if the request took a long time to complete.", 
            "title": "now"
        }, 
        {
            "location": "/index.html#today", 
            "text": "Accepts zero arguments and returns the current date at one of the moments of request execution.\nThe same as 'toDate(now())'.", 
            "title": "today"
        }, 
        {
            "location": "/index.html#yesterday", 
            "text": "Accepts zero arguments and returns yesterday's date at one of the moments of request execution.\nThe same as 'today() - 1'.", 
            "title": "yesterday"
        }, 
        {
            "location": "/index.html#timeslot", 
            "text": "Rounds the time to the half hour.\nThis function is specific to Yandex.Metrica, since half an hour is the minimum amount of time for breaking a session into two sessions if a tracking tag shows a single user's consecutive pageviews that differ in time by strictly more than this amount. This means that tuples (the tag ID, user ID, and time slot) can be used to search for pageviews that are included in the corresponding session.", 
            "title": "timeSlot"
        }, 
        {
            "location": "/index.html#timeslotsstarttime-duration", 
            "text": "For a time interval starting at 'StartTime' and continuing for 'Duration' seconds, it returns an array of moments in time, consisting of points from this interval rounded down to the half hour.\nFor example,  timeSlots(toDateTime('2012-01-01 12:20:00'), 600) = [toDateTime('2012-01-01 12:00:00'), toDateTime('2012-01-01 12:30:00')] .\nThis is necessary for searching for pageviews in the corresponding session.", 
            "title": "timeSlots(StartTime, Duration)"
        }, 
        {
            "location": "/index.html#functions-for-working-with-strings", 
            "text": "", 
            "title": "Functions for working with strings"
        }, 
        {
            "location": "/index.html#empty", 
            "text": "Returns 1 for an empty string or 0 for a non-empty string.\nThe result type is UInt8.\nA string is considered non-empty if it contains at least one byte, even if this is a space or a null byte.\nThe function also works for arrays.", 
            "title": "empty"
        }, 
        {
            "location": "/index.html#notempty", 
            "text": "Returns 0 for an empty string or 1 for a non-empty string.\nThe result type is UInt8.\nThe function also works for arrays.", 
            "title": "notEmpty"
        }, 
        {
            "location": "/index.html#length", 
            "text": "Returns the length of a string in bytes (not in characters, and not in code points).\nThe result type is UInt64.\nThe function also works for arrays.", 
            "title": "length"
        }, 
        {
            "location": "/index.html#lengthutf8", 
            "text": "Returns the length of a string in Unicode code points (not in characters), assuming that the string contains a set of bytes that make up UTF-8 encoded text. If this assumption is not met, it returns some result (it doesn't throw an exception).\nThe result type is UInt64.", 
            "title": "lengthUTF8"
        }, 
        {
            "location": "/index.html#lower", 
            "text": "Converts ASCII Latin symbols in a string to lowercase.", 
            "title": "lower"
        }, 
        {
            "location": "/index.html#upper", 
            "text": "Converts ASCII Latin symbols in a string to uppercase.", 
            "title": "upper"
        }, 
        {
            "location": "/index.html#lowerutf8", 
            "text": "Converts a string to lowercase, assuming the string contains a set of bytes that make up a UTF-8 encoded text.\nIt doesn't detect the language. So for Turkish the result might not be exactly correct.\nIf the length of the UTF-8 byte sequence is different for upper and lower case of a code point, the result may be incorrect for this code point.\nIf the string contains a set of bytes that is not UTF-8, then the behavior is undefined.", 
            "title": "lowerUTF8"
        }, 
        {
            "location": "/index.html#upperutf8", 
            "text": "Converts a string to uppercase, assuming the string contains a set of bytes that make up a UTF-8 encoded text.\nIt doesn't detect the language. So for Turkish the result might not be exactly correct.\nIf the length of the UTF-8 byte sequence is different for upper and lower case of a code point, the result may be incorrect for this code point.\nIf the string contains a set of bytes that is not UTF-8, then the behavior is undefined.", 
            "title": "upperUTF8"
        }, 
        {
            "location": "/index.html#reverse", 
            "text": "Reverses the string (as a sequence of bytes).", 
            "title": "reverse"
        }, 
        {
            "location": "/index.html#reverseutf8", 
            "text": "Reverses a sequence of Unicode code points, assuming that the string contains a set of bytes representing a UTF-8 text. Otherwise, it does something else (it doesn't throw an exception).", 
            "title": "reverseUTF8"
        }, 
        {
            "location": "/index.html#concats1-s2", 
            "text": "Concatenates the strings listed in the arguments, without a separator.", 
            "title": "concat(s1, s2, ...)"
        }, 
        {
            "location": "/index.html#substrings-offset-length", 
            "text": "Returns a substring starting with the byte from the 'offset' index that is 'length' bytes long. Character indexing starts from one (as in standard SQL). The 'offset' and 'length' arguments must be constants.", 
            "title": "substring(s, offset, length)"
        }, 
        {
            "location": "/index.html#substringutf8s-offset-length", 
            "text": "The same as 'substring', but for Unicode code points. Works under the assumption that the string contains a set of bytes representing a UTF-8 encoded text. If this assumption is not met, it returns some result (it doesn't throw an exception).", 
            "title": "substringUTF8(s, offset, length)"
        }, 
        {
            "location": "/index.html#appendtrailingcharifabsents-c", 
            "text": "If the 's' string is non-empty and does not contain the 'c' character at the end, it appends the 'c' character to the end.", 
            "title": "appendTrailingCharIfAbsent(s, c)"
        }, 
        {
            "location": "/index.html#convertcharsets-from-to", 
            "text": "Returns the string 's' that was converted from the encoding in 'from' to the encoding in 'to'.", 
            "title": "convertCharset(s, from, to)"
        }, 
        {
            "location": "/index.html#functions-for-searching-strings", 
            "text": "The search is case-sensitive in all these functions.\nThe search substring or regular expression must be a constant in all these functions.", 
            "title": "Functions for searching strings"
        }, 
        {
            "location": "/index.html#positionhaystack-needle", 
            "text": "Search for the  needle  substring in the  haystack  string.\nReturns the position (in bytes) of the found substring, starting from 1, or returns 0 if the substring was not found.  For case-insensitive search use  positionCaseInsensitive  function.", 
            "title": "position(haystack, needle)"
        }, 
        {
            "location": "/index.html#positionutf8haystack-needle", 
            "text": "The same as  position , but the position is returned in Unicode code points. Works under the assumption that the string contains a set of bytes representing a UTF-8 encoded text. If this assumption is not met, it returns some result (it doesn't throw an exception).  For case-insensitive search use  positionCaseInsensitiveUTF8  function.", 
            "title": "positionUTF8(haystack, needle)"
        }, 
        {
            "location": "/index.html#matchhaystack-pattern", 
            "text": "Checks whether the string matches the 'pattern' regular expression. A re2 regular expression.\nReturns 0 if it doesn't match, or 1 if it matches.  Note that the backslash symbol ( \\ ) is used for escaping in the regular expression. The same symbol is used for escaping in string literals. So in order to escape the symbol in a regular expression, you must write two backslashes (\\) in a string literal.  The regular expression works with the string as if it is a set of bytes. The regular expression can't contain null bytes.\nFor patterns to search for substrings in a string, it is better to use LIKE or 'position', since they work much faster.", 
            "title": "match(haystack, pattern)"
        }, 
        {
            "location": "/index.html#extracthaystack-pattern", 
            "text": "Extracts a fragment of a string using a regular expression. If 'haystack' doesn't match the 'pattern' regex, an empty string is returned. If the regex doesn't contain subpatterns, it takes the fragment that matches the entire regex. Otherwise, it takes the fragment that matches the first subpattern.", 
            "title": "extract(haystack, pattern)"
        }, 
        {
            "location": "/index.html#extractallhaystack-pattern", 
            "text": "Extracts all the fragments of a string using a regular expression. If 'haystack' doesn't match the 'pattern' regex, an empty string is returned. Returns an array of strings consisting of all matches to the regex. In general, the behavior is the same as the 'extract' function (it takes the first subpattern, or the entire expression if there isn't a subpattern).", 
            "title": "extractAll(haystack, pattern)"
        }, 
        {
            "location": "/index.html#likehaystack-pattern-haystack-like-pattern-operator", 
            "text": "Checks whether a string matches a simple regular expression.\nThe regular expression can contain the metasymbols  %  and  _ .  ``% indicates any quantity of any bytes (including zero characters).  _  indicates any one byte.  Use the backslash ( \\ ) for escaping metasymbols. See the note on escaping in the description of the 'match' function.  For regular expressions like  %needle% , the code is more optimal and works as fast as the  position  function.\nFor other regular expressions, the code is the same as for the 'match' function.", 
            "title": "like(haystack, pattern), haystack LIKE pattern operator"
        }, 
        {
            "location": "/index.html#notlikehaystack-pattern-haystack-not-like-pattern-operator", 
            "text": "The same thing as 'like', but negative.", 
            "title": "notLike(haystack, pattern), haystack NOT LIKE pattern operator"
        }, 
        {
            "location": "/index.html#functions-for-searching-and-replacing-in-strings", 
            "text": "", 
            "title": "Functions for searching and replacing in strings"
        }, 
        {
            "location": "/index.html#replaceonehaystack-pattern-replacement", 
            "text": "Replaces the first occurrence, if it exists, of the 'pattern' substring in 'haystack' with the 'replacement' substring.\nHereafter, 'pattern' and 'replacement' must be constants.", 
            "title": "replaceOne(haystack, pattern, replacement)"
        }, 
        {
            "location": "/index.html#replaceallhaystack-pattern-replacement", 
            "text": "Replaces all occurrences of the 'pattern' substring in 'haystack' with the 'replacement' substring.", 
            "title": "replaceAll(haystack, pattern, replacement)"
        }, 
        {
            "location": "/index.html#replaceregexponehaystack-pattern-replacement", 
            "text": "Replacement using the 'pattern' regular expression. A re2 regular expression.\nReplaces only the first occurrence, if it exists.\nA pattern can be specified as 'replacement'. This pattern can include substitutions  \\0-\\9 .\nThe substitution  \\0  includes the entire regular expression. Substitutions  \\1-\\9  correspond to the subpattern numbers.To use the  \\  character in a template, escape it using  \\ .\nAlso keep in mind that a string literal requires an extra escape.  Example 1. Converting the date to American format:  SELECT   DISTINCT \n     EventDate , \n     replaceRegexpOne ( toString ( EventDate ),   (\\\\d{4})-(\\\\d{2})-(\\\\d{2}) ,   \\\\2/\\\\3/\\\\1 )   AS   res  FROM   test . hits  LIMIT   7  FORMAT   TabSeparated   2014-03-17      03/17/2014\n2014-03-18      03/18/2014\n2014-03-19      03/19/2014\n2014-03-20      03/20/2014\n2014-03-21      03/21/2014\n2014-03-22      03/22/2014\n2014-03-23      03/23/2014  Example 2. Copying a string ten times:  SELECT   replaceRegexpOne ( Hello, World! ,   .* ,   \\\\0\\\\0\\\\0\\\\0\\\\0\\\\0\\\\0\\\\0\\\\0\\\\0 )   AS   res   \u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Hello, World!Hello, World!Hello, World!Hello, World!Hello, World!Hello, World!Hello, World!Hello, World!Hello, World!Hello, World! \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", 
            "title": "replaceRegexpOne(haystack, pattern, replacement)"
        }, 
        {
            "location": "/index.html#replaceregexpallhaystack-pattern-replacement", 
            "text": "This does the same thing, but replaces all the occurrences. Example:  SELECT   replaceRegexpAll ( Hello, World! ,   . ,   \\\\0\\\\0 )   AS   res   \u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 HHeelllloo,,  WWoorrlldd!! \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  As an exception, if a regular expression worked on an empty substring, the replacement is not made more than once.\nExample:  SELECT   replaceRegexpAll ( Hello, World! ,   ^ ,   here:  )   AS   res   \u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 here: Hello, World! \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", 
            "title": "replaceRegexpAll(haystack, pattern, replacement)"
        }, 
        {
            "location": "/index.html#conditional-functions", 
            "text": "", 
            "title": "Conditional functions"
        }, 
        {
            "location": "/index.html#ifcond-then-else-cond-operator-then-else", 
            "text": "Returns 'then' if cond !or 'else' if cond = 0.'cond' must be UInt 8, and 'then' and 'else' must be a type that has the smallest common type.", 
            "title": "if(cond, then, else), cond ? operator then : else"
        }, 
        {
            "location": "/index.html#mathematical-functions", 
            "text": "All the functions return a Float64 number. The accuracy of the result is close to the maximum precision possible, but the result might not coincide with the machine representable number nearest to the corresponding real number.", 
            "title": "Mathematical functions"
        }, 
        {
            "location": "/index.html#e", 
            "text": "Returns a Float64 number close to the e number.", 
            "title": "e()"
        }, 
        {
            "location": "/index.html#pi", 
            "text": "Returns a Float64 number close to \u03c0.", 
            "title": "pi()"
        }, 
        {
            "location": "/index.html#expx", 
            "text": "Accepts a numeric argument and returns a Float64 number close to the exponent of the argument.", 
            "title": "exp(x)"
        }, 
        {
            "location": "/index.html#logx", 
            "text": "Accepts a numeric argument and returns a Float64 number close to the natural logarithm of the argument.", 
            "title": "log(x)"
        }, 
        {
            "location": "/index.html#exp2x", 
            "text": "Accepts a numeric argument and returns a Float64 number close to 2^x.", 
            "title": "exp2(x)"
        }, 
        {
            "location": "/index.html#log2x", 
            "text": "Accepts a numeric argument and returns a Float64 number close to the binary logarithm of the argument.", 
            "title": "log2(x)"
        }, 
        {
            "location": "/index.html#exp10x", 
            "text": "Accepts a numeric argument and returns a Float64 number close to 10^x.", 
            "title": "exp10(x)"
        }, 
        {
            "location": "/index.html#log10x", 
            "text": "Accepts a numeric argument and returns a Float64 number close to the decimal logarithm of the argument.", 
            "title": "log10(x)"
        }, 
        {
            "location": "/index.html#sqrtx", 
            "text": "Accepts a numeric argument and returns a Float64 number close to the square root of the argument.", 
            "title": "sqrt(x)"
        }, 
        {
            "location": "/index.html#cbrtx", 
            "text": "Accepts a numeric argument and returns a Float64 number close to the cubic root of the argument.", 
            "title": "cbrt(x)"
        }, 
        {
            "location": "/index.html#erfx", 
            "text": "If 'x' is non-negative, then erf(x / \u03c3\u221a2)  is the probability that a random variable having a normal distribution with standard deviation '\u03c3' takes the value that is separated from the expected value by more than 'x'.  Example (three sigma rule):  SELECT   erf ( 3   /   sqrt ( 2 ))   \u250c\u2500erf(divide(3, sqrt(2)))\u2500\u2510\n\u2502      0.9973002039367398 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", 
            "title": "erf(x)"
        }, 
        {
            "location": "/index.html#erfcx", 
            "text": "Accepts a numeric argument and returns a Float64 number close to 1 - erf(x), but without loss of precision for large 'x' values.", 
            "title": "erfc(x)"
        }, 
        {
            "location": "/index.html#lgammax", 
            "text": "The logarithm of the gamma function.", 
            "title": "lgamma(x)"
        }, 
        {
            "location": "/index.html#tgammax", 
            "text": "Gamma function.", 
            "title": "tgamma(x)"
        }, 
        {
            "location": "/index.html#sinx", 
            "text": "The sine.", 
            "title": "sin(x)"
        }, 
        {
            "location": "/index.html#cosx", 
            "text": "The cosine.", 
            "title": "cos(x)"
        }, 
        {
            "location": "/index.html#tanx", 
            "text": "The tangent.", 
            "title": "tan(x)"
        }, 
        {
            "location": "/index.html#asinx", 
            "text": "The arc sine.", 
            "title": "asin(x)"
        }, 
        {
            "location": "/index.html#acosx", 
            "text": "The arc cosine.", 
            "title": "acos(x)"
        }, 
        {
            "location": "/index.html#atanx", 
            "text": "The arc tangent.", 
            "title": "atan(x)"
        }, 
        {
            "location": "/index.html#powx-y", 
            "text": "Accepts two numeric arguments and returns a Float64 number close to x^y.", 
            "title": "pow(x, y)"
        }, 
        {
            "location": "/index.html#rounding-functions", 
            "text": "", 
            "title": "Rounding functions"
        }, 
        {
            "location": "/index.html#floorx91-n93", 
            "text": "Returns the largest round number that is less than or equal to x. A round number is a multiple of 1/10N, or the nearest number of the appropriate data type if 1 / 10N isn't exact.\n'N' is an integer constant, optional parameter. By default it is zero, which means to round to an integer.\n'N' may be negative.  Examples:  floor(123.45, 1) = 123.4, floor(123.45, -1) = 120.  x  is any numeric type. The result is a number of the same type.\nFor integer arguments, it makes sense to round with a negative 'N' value (for non-negative 'N', the function doesn't do anything).\nIf rounding causes overflow (for example, floor(-128, -1)), an implementation-specific result is returned.", 
            "title": "floor(x[, N])"
        }, 
        {
            "location": "/index.html#ceilx91-n93", 
            "text": "Returns the smallest round number that is greater than or equal to 'x'. In every other way, it is the same as the 'floor' function (see above).", 
            "title": "ceil(x[, N])"
        }, 
        {
            "location": "/index.html#roundx91-n93", 
            "text": "Returns the round number nearest to 'num', which may be less than, greater than, or equal to 'x'.If 'x' is exactly in the middle between the nearest round numbers, one of them is returned (implementation-specific).\nThe number '-0.' may or may not be considered round (implementation-specific).\nIn every other way, this function is the same as 'floor' and 'ceil' described above.", 
            "title": "round(x[, N])"
        }, 
        {
            "location": "/index.html#roundtoexp2num", 
            "text": "Accepts a number. If the number is less than one, it returns 0. Otherwise, it rounds the number down to the nearest (whole non-negative) degree of two.", 
            "title": "roundToExp2(num)"
        }, 
        {
            "location": "/index.html#rounddurationnum", 
            "text": "Accepts a number. If the number is less than one, it returns 0. Otherwise, it rounds the number down to numbers from the set: 1, 10, 30, 60, 120, 180, 240, 300, 600, 1200, 1800, 3600, 7200, 18000, 36000. This function is specific to Yandex.Metrica and used for implementing the report on session length", 
            "title": "roundDuration(num)"
        }, 
        {
            "location": "/index.html#roundagenum", 
            "text": "Accepts a number. If the number is less than 18, it returns 0. Otherwise, it rounds the number down to a number from the set: 18, 25, 35, 45, 55. This function is specific to Yandex.Metrica and used for implementing the report on user age.", 
            "title": "roundAge(num)"
        }, 
        {
            "location": "/index.html#functions-for-working-with-arrays", 
            "text": "", 
            "title": "Functions for working with arrays"
        }, 
        {
            "location": "/index.html#empty_1", 
            "text": "Returns 1 for an empty array, or 0 for a non-empty array.\nThe result type is UInt8.\nThe function also works for strings.", 
            "title": "empty"
        }, 
        {
            "location": "/index.html#notempty_1", 
            "text": "Returns 0 for an empty array, or 1 for a non-empty array.\nThe result type is UInt8.\nThe function also works for strings.", 
            "title": "notEmpty"
        }, 
        {
            "location": "/index.html#length_1", 
            "text": "Returns the number of items in the array.\nThe result type is UInt64.\nThe function also works for strings.", 
            "title": "length"
        }, 
        {
            "location": "/index.html#emptyarrayuint8-emptyarrayuint16-emptyarrayuint32-emptyarrayuint64", 
            "text": "", 
            "title": "emptyArrayUInt8, emptyArrayUInt16, emptyArrayUInt32, emptyArrayUInt64"
        }, 
        {
            "location": "/index.html#emptyarrayint8-emptyarrayint16-emptyarrayint32-emptyarrayint64", 
            "text": "", 
            "title": "emptyArrayInt8, emptyArrayInt16, emptyArrayInt32, emptyArrayInt64"
        }, 
        {
            "location": "/index.html#emptyarrayfloat32-emptyarrayfloat64", 
            "text": "", 
            "title": "emptyArrayFloat32, emptyArrayFloat64"
        }, 
        {
            "location": "/index.html#emptyarraydate-emptyarraydatetime", 
            "text": "", 
            "title": "emptyArrayDate, emptyArrayDateTime"
        }, 
        {
            "location": "/index.html#emptyarraystring", 
            "text": "Accepts zero arguments and returns an empty array of the appropriate type.", 
            "title": "emptyArrayString"
        }, 
        {
            "location": "/index.html#emptyarraytosingle", 
            "text": "Accepts an empty array and returns a one-element array that is equal to the default value.", 
            "title": "emptyArrayToSingle"
        }, 
        {
            "location": "/index.html#rangen", 
            "text": "Returns an array of numbers from 0 to N-1.\nJust in case, an exception is thrown if arrays with a total length of more than 100,000,000 elements are created in a data block.", 
            "title": "range(N)"
        }, 
        {
            "location": "/index.html#arrayx1-operator-91x1-93", 
            "text": "Creates an array from the function arguments.\nThe arguments must be constants and have types that have the smallest common type. At least one argument must be passed, because otherwise it isn't clear which type of array to create. That is, you can't use this function to create an empty array (to do that, use the 'emptyArray*' function described above).\nReturns an 'Array(T)' type result, where 'T' is the smallest common type out of the passed arguments.", 
            "title": "array(x1, ...), operator [x1, ...]"
        }, 
        {
            "location": "/index.html#arrayconcat", 
            "text": "Combines arrays passed as arguments.  arrayConcat(arrays)  Arguments   arrays  \u2013 Arrays of comma-separated  [values] .   Example  SELECT   arrayConcat ([ 1 ,   2 ],   [ 3 ,   4 ],   [ 5 ,   6 ])   AS   res   \u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [1,2,3,4,5,6] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", 
            "title": "arrayConcat"
        }, 
        {
            "location": "/index.html#arrayelementarr-n-operator-arrn", 
            "text": "Get the element with the index 'n' from the array 'arr'.'n' must be any integer type.\nIndexes in an array begin from one.\nNegative indexes are supported. In this case, it selects the corresponding element numbered from the end. For example, 'arr[-1]' is the last item in the array.  If the index falls outside of the bounds of an array, it returns some default value (0 for numbers, an empty string for strings, etc.).", 
            "title": "arrayElement(arr, n), operator arr[n]"
        }, 
        {
            "location": "/index.html#hasarr-elem", 
            "text": "Checks whether the 'arr' array has the 'elem' element.\nReturns 0 if the the element is not in the array, or 1 if it is.", 
            "title": "has(arr, elem)"
        }, 
        {
            "location": "/index.html#indexofarr-x", 
            "text": "Returns the index of the 'x' element (starting from 1) if it is in the array, or 0 if it is not.", 
            "title": "indexOf(arr, x)"
        }, 
        {
            "location": "/index.html#countequalarr-x", 
            "text": "Returns the number of elements in the array equal to x. Equivalent to arrayCount (elem-   elem = x, arr).", 
            "title": "countEqual(arr, x)"
        }, 
        {
            "location": "/index.html#arrayenumeratearr", 
            "text": "Returns the array [1, 2, 3, ..., length (arr) ]  This function is normally used with ARRAY JOIN. It allows counting something just once for each array after applying ARRAY JOIN. Example:  SELECT \n     count ()   AS   Reaches , \n     countIf ( num   =   1 )   AS   Hits  FROM   test . hits  ARRAY   JOIN \n     GoalsReached , \n     arrayEnumerate ( GoalsReached )   AS   num  WHERE   CounterID   =   160656  LIMIT   10   \u250c\u2500Reaches\u2500\u252c\u2500\u2500Hits\u2500\u2510\n\u2502   95606 \u2502 31406 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  In this example, Reaches is the number of conversions (the strings received after applying ARRAY JOIN), and Hits is the number of pageviews (strings before ARRAY JOIN). In this particular case, you can get the same result in an easier way:  SELECT \n     sum ( length ( GoalsReached ))   AS   Reaches , \n     count ()   AS   Hits  FROM   test . hits  WHERE   ( CounterID   =   160656 )   AND   notEmpty ( GoalsReached )   \u250c\u2500Reaches\u2500\u252c\u2500\u2500Hits\u2500\u2510\n\u2502   95606 \u2502 31406 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  This function can also be used in higher-order functions. For example, you can use it to get array indexes for elements that match a condition.", 
            "title": "arrayEnumerate(arr)"
        }, 
        {
            "location": "/index.html#arrayenumerateuniqarr", 
            "text": "Returns an array the same size as the source array, indicating for each element what its position is among elements with the same value.\nFor example: arrayEnumerateUniq([10, 20, 10, 30]) = [1,  1,  2,  1].  This function is useful when using ARRAY JOIN and aggregation of array elements.\nExample:  SELECT \n     Goals . ID   AS   GoalID , \n     sum ( Sign )   AS   Reaches , \n     sumIf ( Sign ,   num   =   1 )   AS   Visits  FROM   test . visits  ARRAY   JOIN \n     Goals , \n     arrayEnumerateUniq ( Goals . ID )   AS   num  WHERE   CounterID   =   160656  GROUP   BY   GoalID  ORDER   BY   Reaches   DESC  LIMIT   10   \u250c\u2500\u2500GoalID\u2500\u252c\u2500Reaches\u2500\u252c\u2500Visits\u2500\u2510\n\u2502   53225 \u2502    3214 \u2502   1097 \u2502\n\u2502 2825062 \u2502    3188 \u2502   1097 \u2502\n\u2502   56600 \u2502    2803 \u2502    488 \u2502\n\u2502 1989037 \u2502    2401 \u2502    365 \u2502\n\u2502 2830064 \u2502    2396 \u2502    910 \u2502\n\u2502 1113562 \u2502    2372 \u2502    373 \u2502\n\u2502 3270895 \u2502    2262 \u2502    812 \u2502\n\u2502 1084657 \u2502    2262 \u2502    345 \u2502\n\u2502   56599 \u2502    2260 \u2502    799 \u2502\n\u2502 3271094 \u2502    2256 \u2502    812 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  In this example, each goal ID has a calculation of the number of conversions (each element in the Goals nested data structure is a goal that was reached, which we refer to as a conversion) and the number of sessions. Without ARRAY JOIN, we would have counted the number of sessions as sum(Sign). But in this particular case, the rows were multiplied by the nested Goals structure, so in order to count each session one time after this, we apply a condition to the value of the arrayEnumerateUniq(Goals.ID) function.  The arrayEnumerateUniq function can take multiple arrays of the same size as arguments. In this case, uniqueness is considered for tuples of elements in the same positions in all the arrays.  SELECT   arrayEnumerateUniq ([ 1 ,   1 ,   1 ,   2 ,   2 ,   2 ],   [ 1 ,   1 ,   2 ,   1 ,   1 ,   2 ])   AS   res   \u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [1,2,1,1,2,1] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  This is necessary when using ARRAY JOIN with a nested data structure and further aggregation across multiple elements in this structure.", 
            "title": "arrayEnumerateUniq(arr, ...)"
        }, 
        {
            "location": "/index.html#arraypopback", 
            "text": "Removes the last item from the array.  arrayPopBack(array)  Arguments   array  \u2013 Array.   Example  SELECT   arrayPopBack ([ 1 ,   2 ,   3 ])   AS   res   \u250c\u2500res\u2500\u2500\u2500\u2510\n\u2502 [1,2] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", 
            "title": "arrayPopBack"
        }, 
        {
            "location": "/index.html#arraypopfront", 
            "text": "Removes the first item from the array.  arrayPopFront(array)  Arguments   array  \u2013 Array.   Example  SELECT   arrayPopFront ([ 1 ,   2 ,   3 ])   AS   res   \u250c\u2500res\u2500\u2500\u2500\u2510\n\u2502 [2,3] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", 
            "title": "arrayPopFront"
        }, 
        {
            "location": "/index.html#arraypushback", 
            "text": "Adds one item to the end of the array.  arrayPushBack(array, single_value)  Arguments   array  \u2013 Array.  single_value  \u2013 A single value. Only numbers can be added to an array with numbers, and only strings can be added to an array of strings. When adding numbers, ClickHouse automatically sets the  single_value  type for the data type of the array. For more information about ClickHouse data types, read the section \" Data types \".   Example  SELECT   arrayPushBack ([ a ],   b )   AS   res   \u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [ a , b ] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", 
            "title": "arrayPushBack"
        }, 
        {
            "location": "/index.html#arraypushfront", 
            "text": "Adds one element to the beginning of the array.  arrayPushFront(array, single_value)  Arguments   array  \u2013 Array.  single_value  \u2013 A single value.  Only numbers can be added to an array with numbers, and only strings can be added to an array of strings. When adding numbers, ClickHouse automatically sets the  single_value  type for the data type of the array.  For more information about ClickHouse data types, read the section \" Data types \".   Example  SELECT   arrayPushBack ([ b ],   a )   AS   res   \u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [ a , b ] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", 
            "title": "arrayPushFront"
        }, 
        {
            "location": "/index.html#arrayslice", 
            "text": "Returns a slice of the array.  arraySlice(array, offset[, length])  Arguments   array  \u2013  Array of data.  offset  \u2013 Indent from the edge of the array. A positive value indicates an offset on the left, and a negative value is an indent on the right. Numbering of the array items begins with 1.  length  - The length of the required slice. If you specify a negative value, the function returns an open slice  [offset, array_length - length) . If you omit the value, the function returns the slice  [offset, the_end_of_array] .   Example  SELECT   arraySlice ([ 1 ,   2 ,   3 ,   4 ,   5 ],   2 ,   3 )   AS   res   \u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [2,3,4] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", 
            "title": "arraySlice"
        }, 
        {
            "location": "/index.html#arrayuniqarr", 
            "text": "If one argument is passed, it counts the number of different elements in the array.\nIf multiple arguments are passed, it counts the number of different tuples of elements at corresponding positions in multiple arrays.  If you want to get a list of unique items in an array, you can use arrayReduce('groupUniqArray', arr).", 
            "title": "arrayUniq(arr, ...)"
        }, 
        {
            "location": "/index.html#arrayjoinarr", 
            "text": "A special function. See the section  \"ArrayJoin function\" .", 
            "title": "arrayJoin(arr)"
        }, 
        {
            "location": "/index.html#functions-for-splitting-and-merging-strings-and-arrays", 
            "text": "", 
            "title": "Functions for splitting and merging strings and arrays"
        }, 
        {
            "location": "/index.html#splitbycharseparator-s", 
            "text": "Splits a string into substrings separated by 'separator'.'separator' must be a string constant consisting of exactly one character.\nReturns an array of selected substrings. Empty substrings may be selected if the separator occurs at the beginning or end of the string, or if there are multiple consecutive separators.", 
            "title": "splitByChar(separator, s)"
        }, 
        {
            "location": "/index.html#splitbystringseparator-s", 
            "text": "The same as above, but it uses a string of multiple characters as the separator. The string must be non-empty.", 
            "title": "splitByString(separator, s)"
        }, 
        {
            "location": "/index.html#arraystringconcatarr91-separator93", 
            "text": "Concatenates the strings listed in the array with the separator.'separator' is an optional parameter: a constant string, set to an empty string by default.\nReturns the string.", 
            "title": "arrayStringConcat(arr[, separator])"
        }, 
        {
            "location": "/index.html#alphatokenss", 
            "text": "Selects substrings of consecutive bytes from the ranges a-z and A-Z.Returns an array of substrings.", 
            "title": "alphaTokens(s)"
        }, 
        {
            "location": "/index.html#bit-functions", 
            "text": "Bit functions work for any pair of types from UInt8, UInt16, UInt32, UInt64, Int8, Int16, Int32, Int64, Float32, or Float64.  The result type is an integer with bits equal to the maximum bits of its arguments. If at least one of the arguments is signed, the result is a signed number. If an argument is a floating-point number, it is cast to Int64.", 
            "title": "Bit functions"
        }, 
        {
            "location": "/index.html#bitanda-b", 
            "text": "", 
            "title": "bitAnd(a, b)"
        }, 
        {
            "location": "/index.html#bitora-b", 
            "text": "", 
            "title": "bitOr(a, b)"
        }, 
        {
            "location": "/index.html#bitxora-b", 
            "text": "", 
            "title": "bitXor(a, b)"
        }, 
        {
            "location": "/index.html#bitnota", 
            "text": "", 
            "title": "bitNot(a)"
        }, 
        {
            "location": "/index.html#bitshiftlefta-b", 
            "text": "", 
            "title": "bitShiftLeft(a, b)"
        }, 
        {
            "location": "/index.html#bitshiftrighta-b", 
            "text": "", 
            "title": "bitShiftRight(a, b)"
        }, 
        {
            "location": "/index.html#hash-functions", 
            "text": "Hash functions can be used for deterministic pseudo-random shuffling of elements.", 
            "title": "Hash functions"
        }, 
        {
            "location": "/index.html#halfmd5", 
            "text": "Calculates the MD5 from a string. Then it takes the first 8 bytes of the hash and interprets them as UInt64 in big endian.\nAccepts a String-type argument. Returns UInt64.\nThis function works fairly slowly (5 million short strings per second per processor core).\nIf you don't need MD5 in particular, use the 'sipHash64' function instead.", 
            "title": "halfMD5"
        }, 
        {
            "location": "/index.html#md5", 
            "text": "Calculates the MD5 from a string and returns the resulting set of bytes as FixedString(16).\nIf you don't need MD5 in particular, but you need a decent cryptographic 128-bit hash, use the 'sipHash128' function instead.\nIf you want to get the same result as output by the md5sum utility, use lower(hex(MD5(s))).", 
            "title": "MD5"
        }, 
        {
            "location": "/index.html#siphash64", 
            "text": "Calculates SipHash from a string.\nAccepts a String-type argument. Returns UInt64.\nSipHash is a cryptographic hash function. It works at least three times faster than MD5.\nFor more information, see the link:  https://131002.net/siphash/", 
            "title": "sipHash64"
        }, 
        {
            "location": "/index.html#siphash128", 
            "text": "Calculates SipHash from a string.\nAccepts a String-type argument. Returns FixedString(16).\nDiffers from sipHash64 in that the final xor-folding state is only done up to 128 bytes.", 
            "title": "sipHash128"
        }, 
        {
            "location": "/index.html#cityhash64", 
            "text": "Calculates CityHash64 from a string or a similar hash function for any number of any type of arguments.\nFor String-type arguments, CityHash is used. This is a fast non-cryptographic hash function for strings with decent quality.\nFor other types of arguments, a decent implementation-specific fast non-cryptographic hash function is used.\nIf multiple arguments are passed, the function is calculated using the same rules and chain combinations using the CityHash combinator.\nFor example, you can compute the checksum of an entire table with accuracy up to the row order:  SELECT sum(cityHash64(*)) FROM table .", 
            "title": "cityHash64"
        }, 
        {
            "location": "/index.html#inthash32", 
            "text": "Calculates a 32-bit hash code from any type of integer.\nThis is a relatively fast non-cryptographic hash function of average quality for numbers.", 
            "title": "intHash32"
        }, 
        {
            "location": "/index.html#inthash64", 
            "text": "Calculates a 64-bit hash code from any type of integer.\nIt works faster than intHash32. Average quality.", 
            "title": "intHash64"
        }, 
        {
            "location": "/index.html#sha1", 
            "text": "", 
            "title": "SHA1"
        }, 
        {
            "location": "/index.html#sha224", 
            "text": "", 
            "title": "SHA224"
        }, 
        {
            "location": "/index.html#sha256", 
            "text": "Calculates SHA-1, SHA-224, or SHA-256 from a string and returns the resulting set of bytes as FixedString(20), FixedString(28), or FixedString(32).\nThe function works fairly slowly (SHA-1 processes about 5 million short strings per second per processor core, while SHA-224 and SHA-256 process about 2.2 million).\nWe recommend using this function only in cases when you need a specific hash function and you can't select it.\nEven in these cases, we recommend applying the function offline and pre-calculating values when inserting them into the table, instead of applying it in SELECTS.", 
            "title": "SHA256"
        }, 
        {
            "location": "/index.html#urlhashurl91-n93", 
            "text": "A fast, decent-quality non-cryptographic hash function for a string obtained from a URL using some type of normalization. URLHash(s)  \u2013 Calculates a hash from a string without one of the trailing symbols  / , ?  or  #  at the end, if present. URLHash(s, N)  \u2013 Calculates a hash from a string up to the N level in the URL hierarchy, without one of the trailing symbols  / , ?  or  #  at the end, if present.\nLevels are the same as in URLHierarchy. This function is specific to Yandex.Metrica.", 
            "title": "URLHash(url[, N])"
        }, 
        {
            "location": "/index.html#functions-for-generating-pseudo-random-numbers", 
            "text": "Non-cryptographic generators of pseudo-random numbers are used.  All the functions accept zero arguments or one argument.\nIf an argument is passed, it can be any type, and its value is not used for anything.\nThe only purpose of this argument is to prevent common subexpression elimination, so that two different instances of the same function return different columns with different random numbers.", 
            "title": "Functions for generating pseudo-random numbers"
        }, 
        {
            "location": "/index.html#rand", 
            "text": "Returns a pseudo-random UInt32 number, evenly distributed among all UInt32-type numbers.\nUses a linear congruential generator.", 
            "title": "rand"
        }, 
        {
            "location": "/index.html#rand64", 
            "text": "Returns a pseudo-random UInt64 number, evenly distributed among all UInt64-type numbers.\nUses a linear congruential generator.", 
            "title": "rand64"
        }, 
        {
            "location": "/index.html#encoding-functions", 
            "text": "", 
            "title": "Encoding functions"
        }, 
        {
            "location": "/index.html#hex", 
            "text": "Accepts arguments of types:  String ,  unsigned integer ,  Date , or  DateTime . Returns a string containing the argument's hexadecimal representation. Uses uppercase letters  A-F . Does not use  0x  prefixes or  h  suffixes. For strings, all bytes are simply encoded as two hexadecimal numbers. Numbers are converted to big endian (\"human readable\") format. For numbers, older zeros are trimmed, but only by entire bytes. For example,  hex (1) = '01' .  Date  is encoded as the number of days since the beginning of the Unix epoch.  DateTime  is encoded as the number of seconds since the beginning of the Unix epoch.", 
            "title": "hex"
        }, 
        {
            "location": "/index.html#unhexstr", 
            "text": "Accepts a string containing any number of hexadecimal digits, and returns a string containing the corresponding bytes. Supports both uppercase and lowercase letters A-F. The number of hexadecimal digits does not have to be even. If it is odd, the last digit is interpreted as the younger half of the 00-0F byte. If the argument string contains anything other than hexadecimal digits, some implementation-defined result is returned (an exception isn't thrown).\nIf you want to convert the result to a number, you can use the 'reverse' and 'reinterpretAsType' functions.", 
            "title": "unhex(str)"
        }, 
        {
            "location": "/index.html#uuidstringtonumstr", 
            "text": "Accepts a string containing 36 characters in the format  123e4567-e89b-12d3-a456-426655440000 , and returns it as a set of bytes in a FixedString(16).", 
            "title": "UUIDStringToNum(str)"
        }, 
        {
            "location": "/index.html#uuidnumtostringstr", 
            "text": "Accepts a FixedString(16) value. Returns a string containing 36 characters in text format.", 
            "title": "UUIDNumToString(str)"
        }, 
        {
            "location": "/index.html#bitmasktolistnum", 
            "text": "Accepts an integer. Returns a string containing the list of powers of two that total the source number when summed. They are comma-separated without spaces in text format, in ascending order.", 
            "title": "bitmaskToList(num)"
        }, 
        {
            "location": "/index.html#bitmasktoarraynum", 
            "text": "Accepts an integer. Returns an array of UInt64 numbers containing the list of powers of two that total the source number when summed. Numbers in the array are in ascending order.", 
            "title": "bitmaskToArray(num)"
        }, 
        {
            "location": "/index.html#functions-for-working-with-urls", 
            "text": "All these functions don't follow the RFC. They are maximally simplified for improved performance.", 
            "title": "Functions for working with URLs"
        }, 
        {
            "location": "/index.html#functions-that-extract-part-of-a-url", 
            "text": "If there isn't anything similar in a URL, an empty string is returned.", 
            "title": "Functions that extract part of a URL"
        }, 
        {
            "location": "/index.html#protocol", 
            "text": "Returns the protocol. Examples: http, ftp, mailto, magnet...", 
            "title": "protocol"
        }, 
        {
            "location": "/index.html#domain", 
            "text": "Gets the domain.", 
            "title": "domain"
        }, 
        {
            "location": "/index.html#domainwithoutwww", 
            "text": "Returns the domain and removes no more than one 'www.' from the beginning of it, if present.", 
            "title": "domainWithoutWWW"
        }, 
        {
            "location": "/index.html#topleveldomain", 
            "text": "Returns the top-level domain. Example: .ru.", 
            "title": "topLevelDomain"
        }, 
        {
            "location": "/index.html#firstsignificantsubdomain", 
            "text": "Returns the \"first significant subdomain\". This is a non-standard concept specific to Yandex.Metrica. The first significant subdomain is a second-level domain if it is 'com', 'net', 'org', or 'co'. Otherwise, it is a third-level domain. For example, firstSignificantSubdomain (' https://news.yandex.ru/ ') = 'yandex ', firstSignificantSubdomain (' https://news.yandex.com.tr/ ') = 'yandex '. The list of \"insignificant\" second-level domains and other implementation details may change in the future.", 
            "title": "firstSignificantSubdomain"
        }, 
        {
            "location": "/index.html#cuttofirstsignificantsubdomain", 
            "text": "Returns the part of the domain that includes top-level subdomains up to the \"first significant subdomain\" (see the explanation above).  For example,  cutToFirstSignificantSubdomain('https://news.yandex.com.tr/') = 'yandex.com.tr' .", 
            "title": "cutToFirstSignificantSubdomain"
        }, 
        {
            "location": "/index.html#path", 
            "text": "Returns the path. Example:  /top/news.html   The path does not include the query string.", 
            "title": "path"
        }, 
        {
            "location": "/index.html#pathfull", 
            "text": "The same as above, but including query string and fragment. Example: /top/news.html?page=2#comments", 
            "title": "pathFull"
        }, 
        {
            "location": "/index.html#querystring", 
            "text": "Returns the query string. Example: page=1 lr=213. query-string does not include the initial question mark, as well as #  and everything after #.", 
            "title": "queryString"
        }, 
        {
            "location": "/index.html#fragment", 
            "text": "Returns the fragment identifier. fragment does not include the initial hash symbol.", 
            "title": "fragment"
        }, 
        {
            "location": "/index.html#querystringandfragment", 
            "text": "Returns the query string and fragment identifier. Example: page=1#29390.", 
            "title": "queryStringAndFragment"
        }, 
        {
            "location": "/index.html#extracturlparameterurl-name", 
            "text": "Returns the value of the 'name' parameter in the URL, if present. Otherwise, an empty string. If there are many parameters with this name, it returns the first occurrence. This function works under the assumption that the parameter name is encoded in the URL exactly the same way as in the passed argument.", 
            "title": "extractURLParameter(URL, name)"
        }, 
        {
            "location": "/index.html#extracturlparametersurl", 
            "text": "Returns an array of name=value strings corresponding to the URL parameters. The values are not decoded in any way.", 
            "title": "extractURLParameters(URL)"
        }, 
        {
            "location": "/index.html#extracturlparameternamesurl", 
            "text": "Returns an array of name strings corresponding to the names of URL parameters. The values are not decoded in any way.", 
            "title": "extractURLParameterNames(URL)"
        }, 
        {
            "location": "/index.html#urlhierarchyurl", 
            "text": "Returns an array containing the URL, truncated at the end by the symbols /,? in the path and query-string. Consecutive separator characters are counted as one. The cut is made in the position after all the consecutive separator characters. Example:", 
            "title": "URLHierarchy(URL)"
        }, 
        {
            "location": "/index.html#urlpathhierarchyurl", 
            "text": "The same as above, but without the protocol and host in the result. The / element (root) is not included. Example: the function is used to implement tree reports the URL in Yandex. Metric.  URLPathHierarchy( https://example.com/browse/CONV-6788 ) =\n[\n     /browse/ ,\n     /browse/CONV-6788 \n]", 
            "title": "URLPathHierarchy(URL)"
        }, 
        {
            "location": "/index.html#decodeurlcomponenturl", 
            "text": "Returns the decoded URL.\nExample:  SELECT   decodeURLComponent ( http://127.0.0.1:8123/?query=SELECT%201%3B )   AS   DecodedURL ;   \u250c\u2500DecodedURL\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 http://127.0.0.1:8123/?query=SELECT 1; \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", 
            "title": "decodeURLComponent(URL)"
        }, 
        {
            "location": "/index.html#functions-that-remove-part-of-a-url", 
            "text": "If the URL doesn't have anything similar, the URL remains unchanged.", 
            "title": "Functions that remove part of a URL."
        }, 
        {
            "location": "/index.html#cutwww", 
            "text": "Removes no more than one 'www.' from the beginning of the URL's domain, if present.", 
            "title": "cutWWW"
        }, 
        {
            "location": "/index.html#cutquerystring", 
            "text": "Removes query string. The question mark is also removed.", 
            "title": "cutQueryString"
        }, 
        {
            "location": "/index.html#cutfragment", 
            "text": "Removes the fragment identifier. The number sign is also removed.", 
            "title": "cutFragment"
        }, 
        {
            "location": "/index.html#cutquerystringandfragment", 
            "text": "Removes the query string and fragment identifier. The question mark and number sign are also removed.", 
            "title": "cutQueryStringAndFragment"
        }, 
        {
            "location": "/index.html#cuturlparameterurl-name", 
            "text": "Removes the 'name' URL parameter, if present. This function works under the assumption that the parameter name is encoded in the URL exactly the same way as in the passed argument.", 
            "title": "cutURLParameter(URL, name)"
        }, 
        {
            "location": "/index.html#functions-for-working-with-ip-addresses", 
            "text": "", 
            "title": "Functions for working with IP addresses"
        }, 
        {
            "location": "/index.html#ipv4numtostringnum", 
            "text": "Takes a UInt32 number. Interprets it as an IPv4 address in big endian. Returns a string containing the corresponding IPv4 address in the format A.B.C.d (dot-separated numbers in decimal form).", 
            "title": "IPv4NumToString(num)"
        }, 
        {
            "location": "/index.html#ipv4stringtonums", 
            "text": "The reverse function of IPv4NumToString. If the IPv4 address has an invalid format, it returns 0.", 
            "title": "IPv4StringToNum(s)"
        }, 
        {
            "location": "/index.html#ipv4numtostringclasscnum", 
            "text": "Similar to IPv4NumToString, but using xxx instead of the last octet.  Example:  SELECT \n     IPv4NumToStringClassC ( ClientIP )   AS   k , \n     count ()   AS   c  FROM   test . hits  GROUP   BY   k  ORDER   BY   c   DESC  LIMIT   10   \u250c\u2500k\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500c\u2500\u2510\n\u2502 83.149.9.xxx   \u2502 26238 \u2502\n\u2502 217.118.81.xxx \u2502 26074 \u2502\n\u2502 213.87.129.xxx \u2502 25481 \u2502\n\u2502 83.149.8.xxx   \u2502 24984 \u2502\n\u2502 217.118.83.xxx \u2502 22797 \u2502\n\u2502 78.25.120.xxx  \u2502 22354 \u2502\n\u2502 213.87.131.xxx \u2502 21285 \u2502\n\u2502 78.25.121.xxx  \u2502 20887 \u2502\n\u2502 188.162.65.xxx \u2502 19694 \u2502\n\u2502 83.149.48.xxx  \u2502 17406 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  Since using 'xxx' is highly unusual, this may be changed in the future. We recommend that you don't rely on the exact format of this fragment.", 
            "title": "IPv4NumToStringClassC(num)"
        }, 
        {
            "location": "/index.html#ipv6numtostringx", 
            "text": "Accepts a FixedString(16) value containing the IPv6 address in binary format. Returns a string containing this address in text format.\nIPv6-mapped IPv4 addresses are output in the format ::ffff:111.222.33.44. Examples:  SELECT   IPv6NumToString ( toFixedString ( unhex ( 2A0206B8000000000000000000000011 ),   16 ))   AS   addr   \u250c\u2500addr\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 2a02:6b8::11 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  SELECT \n     IPv6NumToString ( ClientIP6   AS   k ), \n     count ()   AS   c  FROM   hits_all  WHERE   EventDate   =   today ()   AND   substring ( ClientIP6 ,   1 ,   12 )   !=   unhex ( 00000000000000000000FFFF )  GROUP   BY   k  ORDER   BY   c   DESC  LIMIT   10   \u250c\u2500IPv6NumToString(ClientIP6)\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500c\u2500\u2510\n\u2502 2a02:2168:aaa:bbbb::2                   \u2502 24695 \u2502\n\u2502 2a02:2698:abcd:abcd:abcd:abcd:8888:5555 \u2502 22408 \u2502\n\u2502 2a02:6b8:0:fff::ff                      \u2502 16389 \u2502\n\u2502 2a01:4f8:111:6666::2                    \u2502 16016 \u2502\n\u2502 2a02:2168:888:222::1                    \u2502 15896 \u2502\n\u2502 2a01:7e00::ffff:ffff:ffff:222           \u2502 14774 \u2502\n\u2502 2a02:8109:eee:ee:eeee:eeee:eeee:eeee    \u2502 14443 \u2502\n\u2502 2a02:810b:8888:888:8888:8888:8888:8888  \u2502 14345 \u2502\n\u2502 2a02:6b8:0:444:4444:4444:4444:4444      \u2502 14279 \u2502\n\u2502 2a01:7e00::ffff:ffff:ffff:ffff          \u2502 13880 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  SELECT \n     IPv6NumToString ( ClientIP6   AS   k ), \n     count ()   AS   c  FROM   hits_all  WHERE   EventDate   =   today ()  GROUP   BY   k  ORDER   BY   c   DESC  LIMIT   10   \u250c\u2500IPv6NumToString(ClientIP6)\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500c\u2500\u2510\n\u2502 ::ffff:94.26.111.111       \u2502 747440 \u2502\n\u2502 ::ffff:37.143.222.4        \u2502 529483 \u2502\n\u2502 ::ffff:5.166.111.99        \u2502 317707 \u2502\n\u2502 ::ffff:46.38.11.77         \u2502 263086 \u2502\n\u2502 ::ffff:79.105.111.111      \u2502 186611 \u2502\n\u2502 ::ffff:93.92.111.88        \u2502 176773 \u2502\n\u2502 ::ffff:84.53.111.33        \u2502 158709 \u2502\n\u2502 ::ffff:217.118.11.22       \u2502 154004 \u2502\n\u2502 ::ffff:217.118.11.33       \u2502 148449 \u2502\n\u2502 ::ffff:217.118.11.44       \u2502 148243 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", 
            "title": "IPv6NumToString(x)"
        }, 
        {
            "location": "/index.html#ipv6stringtonums", 
            "text": "The reverse function of IPv6NumToString. If the IPv6 address has an invalid format, it returns a string of null bytes.\nHEX can be uppercase or lowercase.", 
            "title": "IPv6StringToNum(s)"
        }, 
        {
            "location": "/index.html#functions-for-working-with-json", 
            "text": "In Yandex.Metrica, JSON is transmitted by users as session parameters. There are some special functions for working with this JSON. (Although in most of the cases, the JSONs are additionally pre-processed, and the resulting values are put in separate columns in their processed format.) All these functions are based on strong assumptions about what the JSON can be, but they try to do as little as possible to get the job done.  The following assumptions are made:   The field name (function argument) must be a constant.  The field name is somehow canonically encoded in JSON. For example:  visitParamHas('{\"abc\":\"def\"}', 'abc') = 1 , but  visitParamHas('{\"\\\\u0061\\\\u0062\\\\u0063\":\"def\"}', 'abc') = 0  Fields are searched for on any nesting level, indiscriminately. If there are multiple matching fields, the first occurrence is used.  The JSON doesn't have space characters outside of string literals.", 
            "title": "Functions for working with JSON"
        }, 
        {
            "location": "/index.html#visitparamhasparams-name", 
            "text": "Checks whether there is a field with the 'name' name.", 
            "title": "visitParamHas(params, name)"
        }, 
        {
            "location": "/index.html#visitparamextractuintparams-name", 
            "text": "Parses UInt64 from the value of the field named 'name'. If this is a string field, it tries to parse a number from the beginning of the string. If the field doesn't exist, or it exists but doesn't contain a number, it returns 0.", 
            "title": "visitParamExtractUInt(params, name)"
        }, 
        {
            "location": "/index.html#visitparamextractintparams-name", 
            "text": "The same as for Int64.", 
            "title": "visitParamExtractInt(params, name)"
        }, 
        {
            "location": "/index.html#visitparamextractfloatparams-name", 
            "text": "The same as for Float64.", 
            "title": "visitParamExtractFloat(params, name)"
        }, 
        {
            "location": "/index.html#visitparamextractboolparams-name", 
            "text": "Parses a true/false value. The result is UInt8.", 
            "title": "visitParamExtractBool(params, name)"
        }, 
        {
            "location": "/index.html#visitparamextractrawparams-name", 
            "text": "Returns the value of a field, including separators.  Examples:  visitParamExtractRaw( { abc : \\\\n\\\\u0000 } ,  abc ) =  \\\\n\\\\u0000 \nvisitParamExtractRaw( { abc :{ def :[1,2,3]}} ,  abc ) =  { def :[1,2,3]}", 
            "title": "visitParamExtractRaw(params, name)"
        }, 
        {
            "location": "/index.html#visitparamextractstringparams-name", 
            "text": "Parses the string in double quotes. The value is unescaped. If unescaping failed, it returns an empty string.  Examples:  visitParamExtractString( { abc : \\\\n\\\\u0000 } ,  abc ) =  \\n\\0 \nvisitParamExtractString( { abc : \\\\u263a } ,  abc ) =  \u263a \nvisitParamExtractString( { abc : \\\\u263 } ,  abc ) =  \nvisitParamExtractString( { abc : hello} ,  abc ) =    There is currently no support for code points in the format  \\uXXXX\\uYYYY  that are not from the basic multilingual plane (they are converted to CESU-8 instead of UTF-8).", 
            "title": "visitParamExtractString(params, name)"
        }, 
        {
            "location": "/index.html#higher-order-functions", 
            "text": "", 
            "title": "Higher-order functions"
        }, 
        {
            "location": "/index.html#-operator-lambdaparams-expr-function", 
            "text": "Allows describing a lambda function for passing to a higher-order function. The left side of the arrow has a formal parameter, which is any ID, or multiple formal parameters \u2013 any IDs in a tuple. The right side of the arrow has an expression that can use these formal parameters, as well as any table columns.  Examples:  x -  2 * x, str -  str != Referer.  Higher-order functions can only accept lambda functions as their functional argument.  A lambda function that accepts multiple arguments can be passed to a higher-order function. In this case, the higher-order function is passed several arrays of identical length that these arguments will correspond to.  For all functions other than 'arrayMap' and 'arrayFilter', the first argument (the lambda function) can be omitted. In this case, identical mapping is assumed.", 
            "title": "-&gt; operator, lambda(params, expr) function"
        }, 
        {
            "location": "/index.html#arraymapfunc-arr1", 
            "text": "Returns an array obtained from the original application of the 'func' function to each element in the 'arr' array.", 
            "title": "arrayMap(func, arr1, ...)"
        }, 
        {
            "location": "/index.html#arrayfilterfunc-arr1", 
            "text": "Returns an array containing only the elements in 'arr1' for which 'func' returns something other than 0.  Examples:  SELECT   arrayFilter ( x   -   x   LIKE   %World% ,   [ Hello ,   abc World ])   AS   res   \u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [ abc World ] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  SELECT \n     arrayFilter ( \n         ( i ,   x )   -   x   LIKE   %World% , \n         arrayEnumerate ( arr ), \n         [ Hello ,   abc World ]   AS   arr ) \n     AS   res   \u250c\u2500res\u2500\u2510\n\u2502 [2] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518", 
            "title": "arrayFilter(func, arr1, ...)"
        }, 
        {
            "location": "/index.html#arraycount91func93-arr1", 
            "text": "Returns the number of elements in the arr array for which func returns something other than 0. If 'func' is not specified, it returns the number of non-zero elements in the array.", 
            "title": "arrayCount([func,] arr1, ...)"
        }, 
        {
            "location": "/index.html#arrayexists91func93-arr1", 
            "text": "Returns 1 if there is at least one element in 'arr' for which 'func' returns something other than 0. Otherwise, it returns 0.", 
            "title": "arrayExists([func,] arr1, ...)"
        }, 
        {
            "location": "/index.html#arrayall91func93-arr1", 
            "text": "Returns 1 if 'func' returns something other than 0 for all the elements in 'arr'. Otherwise, it returns 0.", 
            "title": "arrayAll([func,] arr1, ...)"
        }, 
        {
            "location": "/index.html#arraysum91func93-arr1", 
            "text": "Returns the sum of the 'func' values. If the function is omitted, it just returns the sum of the array elements.", 
            "title": "arraySum([func,] arr1, ...)"
        }, 
        {
            "location": "/index.html#arrayfirstfunc-arr1", 
            "text": "Returns the first element in the 'arr1' array for which 'func' returns something other than 0.", 
            "title": "arrayFirst(func, arr1, ...)"
        }, 
        {
            "location": "/index.html#arrayfirstindexfunc-arr1", 
            "text": "Returns the index of the first element in the 'arr1' array for which 'func' returns something other than 0.", 
            "title": "arrayFirstIndex(func, arr1, ...)"
        }, 
        {
            "location": "/index.html#arraycumsum91func93-arr1", 
            "text": "Returns an array of partial sums of elements in the source array (a running sum). If the  func  function is specified, then the values of the array elements are converted by this function before summing.  Example:  SELECT   arrayCumSum ([ 1 ,   1 ,   1 ,   1 ])   AS   res   \u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [1, 2, 3, 4] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", 
            "title": "arrayCumSum([func,] arr1, ...)"
        }, 
        {
            "location": "/index.html#arraysort91func93-arr1", 
            "text": "Returns an array as result of sorting the elements of  arr1  in ascending order. If the  func  function is specified, sorting order is determined by the result of the function  func  applied to the elements of array (arrays)    The  Schwartzian transform  is used to impove sorting efficiency.  Example:  SELECT   arraySort (( x ,   y )   -   y ,   [ hello ,   world ],   [ 2 ,   1 ]);   \u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [ world ,  hello ] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", 
            "title": "arraySort([func,] arr1, ...)"
        }, 
        {
            "location": "/index.html#arrayreversesort91func93-arr1", 
            "text": "Returns an array as result of sorting the elements of  arr1  in descending order. If the  func  function is specified, sorting order is determined by the result of the function  func  applied to the elements of array (arrays)", 
            "title": "arrayReverseSort([func,] arr1, ...)"
        }, 
        {
            "location": "/index.html#other-functions", 
            "text": "", 
            "title": "Other functions"
        }, 
        {
            "location": "/index.html#hostname", 
            "text": "Returns a string with the name of the host that this function was performed on. For distributed processing, this is the name of the remote server host, if the function is performed on a remote server.", 
            "title": "hostName()"
        }, 
        {
            "location": "/index.html#visiblewidthx", 
            "text": "Calculates the approximate width when outputting values to the console in text format (tab-separated).\nThis function is used by the system for implementing Pretty formats.", 
            "title": "visibleWidth(x)"
        }, 
        {
            "location": "/index.html#totypenamex", 
            "text": "Returns a string containing the type name of the passed argument.", 
            "title": "toTypeName(x)"
        }, 
        {
            "location": "/index.html#blocksize", 
            "text": "Gets the size of the block.\nIn ClickHouse, queries are always run on blocks (sets of column parts). This function allows getting the size of the block that you called it for.", 
            "title": "blockSize()"
        }, 
        {
            "location": "/index.html#materializex", 
            "text": "Turns a constant into a full column containing just one value.\nIn ClickHouse, full columns and constants are represented differently in memory. Functions work differently for constant arguments and normal arguments (different code is executed), although the result is almost always the same. This function is for debugging this behavior.", 
            "title": "materialize(x)"
        }, 
        {
            "location": "/index.html#ignore", 
            "text": "Accepts any arguments and always returns 0.\nHowever, the argument is still evaluated. This can be used for benchmarks.", 
            "title": "ignore(...)"
        }, 
        {
            "location": "/index.html#sleepseconds", 
            "text": "Sleeps 'seconds' seconds on each data block. You can specify an integer or a floating-point number.", 
            "title": "sleep(seconds)"
        }, 
        {
            "location": "/index.html#currentdatabase", 
            "text": "Returns the name of the current database.\nYou can use this function in table engine parameters in a CREATE TABLE query where you need to specify the database.", 
            "title": "currentDatabase()"
        }, 
        {
            "location": "/index.html#isfinitex", 
            "text": "Accepts Float32 and Float64 and returns UInt8 equal to 1 if the argument is not infinite and not a NaN, otherwise 0.", 
            "title": "isFinite(x)"
        }, 
        {
            "location": "/index.html#isinfinitex", 
            "text": "Accepts Float32 and Float64 and returns UInt8 equal to 1 if the argument is infinite, otherwise 0. Note that 0 is returned for a NaN.", 
            "title": "isInfinite(x)"
        }, 
        {
            "location": "/index.html#isnanx", 
            "text": "Accepts Float32 and Float64 and returns UInt8 equal to 1 if the argument is a NaN, otherwise 0.", 
            "title": "isNaN(x)"
        }, 
        {
            "location": "/index.html#hascolumnintable91hostname91-username91-password939393-database-table-column", 
            "text": "Accepts constant strings: database name, table name, and column name. Returns a UInt8 constant expression equal to 1 if there is a column, otherwise 0. If the hostname parameter is set, the test will run on a remote server.\nThe function throws an exception if the table does not exist.\nFor elements in a nested data structure, the function checks for the existence of a column. For the nested data structure itself, the function returns 0.", 
            "title": "hasColumnInTable(['hostname'[, 'username'[, 'password']],] 'database', 'table', 'column')"
        }, 
        {
            "location": "/index.html#bar", 
            "text": "Allows building a unicode-art diagram.  bar (x, min, max, width)  draws a band with a width proportional to  (x - min)  and equal to  width  characters when  x = max .  Parameters:   x  \u2013 Value to display.  min, max  \u2013 Integer constants. The value must fit in Int64.  width  \u2013 Constant, positive number, may be a fraction.   The band is drawn with accuracy to one eighth of a symbol.  Example:  SELECT \n     toHour ( EventTime )   AS   h , \n     count ()   AS   c , \n     bar ( c ,   0 ,   600000 ,   20 )   AS   bar  FROM   test . hits  GROUP   BY   h  ORDER   BY   h   ASC   \u250c\u2500\u2500h\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500c\u2500\u252c\u2500bar\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  0 \u2502 292907 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b         \u2502\n\u2502  1 \u2502 180563 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588             \u2502\n\u2502  2 \u2502 114861 \u2502 \u2588\u2588\u2588\u258b               \u2502\n\u2502  3 \u2502  85069 \u2502 \u2588\u2588\u258b                \u2502\n\u2502  4 \u2502  68543 \u2502 \u2588\u2588\u258e                \u2502\n\u2502  5 \u2502  78116 \u2502 \u2588\u2588\u258c                \u2502\n\u2502  6 \u2502 113474 \u2502 \u2588\u2588\u2588\u258b               \u2502\n\u2502  7 \u2502 170678 \u2502 \u2588\u2588\u2588\u2588\u2588\u258b             \u2502\n\u2502  8 \u2502 278380 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e         \u2502\n\u2502  9 \u2502 391053 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588      \u2502\n\u2502 10 \u2502 457681 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e   \u2502\n\u2502 11 \u2502 493667 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d  \u2502\n\u2502 12 \u2502 509641 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  \u2502\n\u2502 13 \u2502 522947 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d \u2502\n\u2502 14 \u2502 539954 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a \u2502\n\u2502 15 \u2502 528460 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c \u2502\n\u2502 16 \u2502 539201 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a \u2502\n\u2502 17 \u2502 523539 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d \u2502\n\u2502 18 \u2502 506467 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  \u2502\n\u2502 19 \u2502 520915 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e \u2502\n\u2502 20 \u2502 521665 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d \u2502\n\u2502 21 \u2502 542078 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2502\n\u2502 22 \u2502 493642 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d  \u2502\n\u2502 23 \u2502 400397 \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", 
            "title": "bar"
        }, 
        {
            "location": "/index.html#transform", 
            "text": "Transforms a value according to the explicitly defined mapping of some elements to other ones.\nThere are two variations of this function:   transform(x, array_from, array_to, default)   x  \u2013 What to transform.  array_from  \u2013 Constant array of values for converting.  array_to  \u2013 Constant array of values to convert the values in 'from' to.  default  \u2013 Which value to use if 'x' is not equal to any of the values in 'from'.  array_from  and  array_to  \u2013 Arrays of the same size.  Types:  transform(T, Array(T), Array(U), U) -  U  T  and  U  can be numeric, string, or Date or DateTime types.\nWhere the same letter is indicated (T or U), for numeric types these might not be matching types, but types that have a common type.\nFor example, the first argument can have the Int64 type, while the second has the Array(Uint16) type.  If the 'x' value is equal to one of the elements in the 'array_from' array, it returns the existing element (that is numbered the same) from the 'array_to' array. Otherwise, it returns 'default'. If there are multiple matching elements in 'array_from', it returns one of the matches.  Example:  SELECT \n     transform ( SearchEngineID ,   [ 2 ,   3 ],   [ Yandex ,   Google ],   Other )   AS   title , \n     count ()   AS   c  FROM   test . hits  WHERE   SearchEngineID   !=   0  GROUP   BY   title  ORDER   BY   c   DESC   \u250c\u2500title\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500c\u2500\u2510\n\u2502 Yandex    \u2502 498635 \u2502\n\u2502 Google    \u2502 229872 \u2502\n\u2502 Other     \u2502 104472 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   transform(x, array_from, array_to)   Differs from the first variation in that the 'default' argument is omitted.\nIf the 'x' value is equal to one of the elements in the 'array_from' array, it returns the matching element (that is numbered the same) from the 'array_to' array. Otherwise, it returns 'x'.  Types:  transform(T, Array(T), Array(T)) -  T  Example:  SELECT \n     transform ( domain ( Referer ),   [ yandex.ru ,   google.ru ,   vk.com ],   [ www.yandex ,   example.com ])   AS   s , \n     count ()   AS   c  FROM   test . hits  GROUP   BY   domain ( Referer )  ORDER   BY   count ()   DESC  LIMIT   10   \u250c\u2500s\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500c\u2500\u2510\n\u2502                \u2502 2906259 \u2502\n\u2502 www.yandex     \u2502  867767 \u2502\n\u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588.ru     \u2502  313599 \u2502\n\u2502 mail.yandex.ru \u2502  107147 \u2502\n\u2502 \u2588\u2588\u2588\u2588\u2588\u2588.ru      \u2502  100355 \u2502\n\u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588.ru   \u2502   65040 \u2502\n\u2502 news.yandex.ru \u2502   64515 \u2502\n\u2502 \u2588\u2588\u2588\u2588\u2588\u2588.net     \u2502   59141 \u2502\n\u2502 example.com    \u2502   57316 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", 
            "title": "transform"
        }, 
        {
            "location": "/index.html#formatreadablesizex", 
            "text": "Accepts the size (number of bytes). Returns a rounded size with a suffix (KiB, MiB, etc.) as a string.  Example:  SELECT \n     arrayJoin ([ 1 ,   1024 ,   1024 * 1024 ,   192851925 ])   AS   filesize_bytes , \n     formatReadableSize ( filesize_bytes )   AS   filesize   \u250c\u2500filesize_bytes\u2500\u252c\u2500filesize\u2500\u2500\u2500\u2510\n\u2502              1 \u2502 1.00 B     \u2502\n\u2502           1024 \u2502 1.00 KiB   \u2502\n\u2502        1048576 \u2502 1.00 MiB   \u2502\n\u2502      192851925 \u2502 183.92 MiB \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", 
            "title": "formatReadableSize(x)"
        }, 
        {
            "location": "/index.html#leasta-b", 
            "text": "Returns the smallest value from a and b.", 
            "title": "least(a, b)"
        }, 
        {
            "location": "/index.html#greatesta-b", 
            "text": "Returns the largest value of a and b.", 
            "title": "greatest(a, b)"
        }, 
        {
            "location": "/index.html#uptime", 
            "text": "Returns the server's uptime in seconds.", 
            "title": "uptime()"
        }, 
        {
            "location": "/index.html#version", 
            "text": "Returns the version of the server as a string.", 
            "title": "version()"
        }, 
        {
            "location": "/index.html#rownumberinallblocks", 
            "text": "Returns the ordinal number of the row in the data block. This function only considers the affected data blocks.", 
            "title": "rowNumberInAllBlocks()"
        }, 
        {
            "location": "/index.html#runningdifferencex", 
            "text": "Calculates the difference between successive row values \u200b\u200bin the data block.\nReturns 0 for the first row and the difference from the previous row for each subsequent row.  The result of the function depends on the affected data blocks and the order of data in the block.\nIf you make a subquery with ORDER BY and call the function from outside the subquery, you can get the expected result.  Example:  SELECT \n     EventID , \n     EventTime , \n     runningDifference ( EventTime )   AS   delta  FROM  ( \n     SELECT \n         EventID , \n         EventTime \n     FROM   events \n     WHERE   EventDate   =   2016-11-24 \n     ORDER   BY   EventTime   ASC \n     LIMIT   5  )   \u250c\u2500EventID\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500EventTime\u2500\u252c\u2500delta\u2500\u2510\n\u2502    1106 \u2502 2016-11-24 00:00:04 \u2502     0 \u2502\n\u2502    1107 \u2502 2016-11-24 00:00:05 \u2502     1 \u2502\n\u2502    1108 \u2502 2016-11-24 00:00:05 \u2502     0 \u2502\n\u2502    1109 \u2502 2016-11-24 00:00:09 \u2502     4 \u2502\n\u2502    1110 \u2502 2016-11-24 00:00:10 \u2502     1 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", 
            "title": "runningDifference(x)"
        }, 
        {
            "location": "/index.html#macnumtostringnum", 
            "text": "Accepts a UInt64 number. Interprets it as a MAC address in big endian. Returns a string containing the corresponding MAC address in the format AA:BB:CC:DD:EE:FF (colon-separated numbers in hexadecimal form).", 
            "title": "MACNumToString(num)"
        }, 
        {
            "location": "/index.html#macstringtonums", 
            "text": "The inverse function of MACNumToString. If the MAC address has an invalid format, it returns 0.", 
            "title": "MACStringToNum(s)"
        }, 
        {
            "location": "/index.html#macstringtoouis", 
            "text": "Accepts a MAC address in the format AA:BB:CC:DD:EE:FF (colon-separated numbers in hexadecimal form). Returns the first three octets as a UInt64 number. If the MAC address has an invalid format, it returns 0.", 
            "title": "MACStringToOUI(s)"
        }, 
        {
            "location": "/index.html#functions-for-working-with-external-dictionaries", 
            "text": "For information on connecting and configuring external dictionaries, see \" External dictionaries \".", 
            "title": "Functions for working with external dictionaries"
        }, 
        {
            "location": "/index.html#dictgetuint8-dictgetuint16-dictgetuint32-dictgetuint64", 
            "text": "", 
            "title": "dictGetUInt8, dictGetUInt16, dictGetUInt32, dictGetUInt64"
        }, 
        {
            "location": "/index.html#dictgetint8-dictgetint16-dictgetint32-dictgetint64", 
            "text": "", 
            "title": "dictGetInt8, dictGetInt16, dictGetInt32, dictGetInt64"
        }, 
        {
            "location": "/index.html#dictgetfloat32-dictgetfloat64", 
            "text": "", 
            "title": "dictGetFloat32, dictGetFloat64"
        }, 
        {
            "location": "/index.html#dictgetdate-dictgetdatetime", 
            "text": "", 
            "title": "dictGetDate, dictGetDateTime"
        }, 
        {
            "location": "/index.html#dictgetuuid", 
            "text": "", 
            "title": "dictGetUUID"
        }, 
        {
            "location": "/index.html#dictgetstring", 
            "text": "dictGetT('dict_name', 'attr_name', id)   Get the value of the attr_name attribute  from the dict_name dictionary using the 'id' key. dict_name   and  attr_name   are constant strings. id must be UInt64.\nIf there is no  id  key in the dictionary, it returns the default value specified in the dictionary description.", 
            "title": "dictGetString"
        }, 
        {
            "location": "/index.html#dictgettordefault", 
            "text": "dictGetT('dict_name', 'attr_name', id, default)  The same as the  dictGetT  functions, but the default value is taken from the function's last argument.", 
            "title": "dictGetTOrDefault"
        }, 
        {
            "location": "/index.html#dictisin", 
            "text": "dictIsIn('dict_name', child_id, ancestor_id)   For the 'dict_name' hierarchical dictionary, finds out whether the 'child_id' key is located inside 'ancestor_id' (or matches 'ancestor_id'). Returns UInt8.", 
            "title": "dictIsIn"
        }, 
        {
            "location": "/index.html#dictgethierarchy", 
            "text": "dictGetHierarchy('dict_name', id)   For the 'dict_name' hierarchical dictionary, returns an array of dictionary keys starting from 'id' and continuing along the chain of parent elements. Returns Array(UInt64).", 
            "title": "dictGetHierarchy"
        }, 
        {
            "location": "/index.html#dicthas", 
            "text": "dictHas('dict_name', id)   Check whether the dictionary has the key. Returns a UInt8 value equal to 0 if there is no key and 1 if there is a key.", 
            "title": "dictHas"
        }, 
        {
            "location": "/index.html#functions-for-working-with-yandexmetrica-dictionaries", 
            "text": "In order for the functions below to work, the server config must specify the paths and addresses for getting all the Yandex.Metrica dictionaries. The dictionaries are loaded at the first call of any of these functions. If the reference lists can't be loaded, an exception is thrown.  For information about creating reference lists, see the section \"Dictionaries\".", 
            "title": "Functions for working with Yandex.Metrica dictionaries"
        }, 
        {
            "location": "/index.html#multiple-geobases", 
            "text": "ClickHouse supports working with multiple alternative geobases (regional hierarchies) simultaneously, in order to support various perspectives on which countries certain regions belong to.  The 'clickhouse-server' config specifies the file with the regional hierarchy:: path_to_regions_hierarchy_file /opt/geo/regions_hierarchy.txt /path_to_regions_hierarchy_file  Besides this file, it also searches for files nearby that have the _ symbol and any suffix appended to the name (before the file extension).\nFor example, it will also find the file  /opt/geo/regions_hierarchy_ua.txt , if present.  ua  is called the dictionary key. For a dictionary without a suffix, the key is an empty string.  All the dictionaries are re-loaded in runtime (once every certain number of seconds, as defined in the builtin_dictionaries_reload_interval config parameter, or once an hour by default). However, the list of available dictionaries is defined one time, when the server starts.  All functions for working with regions have an optional argument at the end \u2013 the dictionary key. It is referred to as the geobase.\nExample:  regionToCountry(RegionID) \u2013 Uses the default dictionary: /opt/geo/regions_hierarchy.txt\nregionToCountry(RegionID,  ) \u2013 Uses the default dictionary: /opt/geo/regions_hierarchy.txt\nregionToCountry(RegionID,  ua ) \u2013 Uses the dictionary for the  ua  key: /opt/geo/regions_hierarchy_ua.txt", 
            "title": "Multiple geobases"
        }, 
        {
            "location": "/index.html#regiontocityid-geobase", 
            "text": "Accepts a UInt32 number \u2013 the region ID from the Yandex geobase. If this region is a city or part of a city, it returns the region ID for the appropriate city. Otherwise, returns 0.", 
            "title": "regionToCity(id[, geobase])"
        }, 
        {
            "location": "/index.html#regiontoareaid91-geobase93", 
            "text": "Converts a region to an area (type 5 in the geobase). In every other way, this function is the same as 'regionToCity'.  SELECT   DISTINCT   regionToName ( regionToArea ( toUInt32 ( number ),   ua ))  FROM   system . numbers  LIMIT   15   \u250c\u2500regionToName(regionToArea(toUInt32(number), \\ ua\\ ))\u2500\u2510\n\u2502                                                      \u2502\n\u2502 Moscow and Moscow region                             \u2502\n\u2502 St. Petersburg and Leningrad region                  \u2502\n\u2502 Belgorod region                                      \u2502\n\u2502 Ivanovsk region                                      \u2502\n\u2502 Kaluga region                                        \u2502\n\u2502 Kostroma region                                      \u2502\n\u2502 Kursk region                                         \u2502\n\u2502 Lipetsk region                                       \u2502\n\u2502 Orlov region                                         \u2502\n\u2502 Ryazan region                                        \u2502\n\u2502 Smolensk region                                      \u2502\n\u2502 Tambov region                                        \u2502\n\u2502 Tver region                                          \u2502\n\u2502 Tula region                                          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", 
            "title": "regionToArea(id[, geobase])"
        }, 
        {
            "location": "/index.html#regiontodistrictid-geobase", 
            "text": "Converts a region to a federal district (type 4 in the geobase). In every other way, this function is the same as 'regionToCity'.  SELECT   DISTINCT   regionToName ( regionToDistrict ( toUInt32 ( number ),   ua ))  FROM   system . numbers  LIMIT   15   \u250c\u2500regionToName(regionToDistrict(toUInt32(number), \\ ua\\ ))\u2500\u2510\n\u2502                                                          \u2502\n\u2502 Central federal district                                 \u2502\n\u2502 Northwest federal district                               \u2502\n\u2502 South federal district                                   \u2502\n\u2502 North Caucases federal district                          \u2502\n\u2502 Privolga federal district                                \u2502\n\u2502 Ural federal district                                    \u2502\n\u2502 Siberian federal district                                \u2502\n\u2502 Far East federal district                                \u2502\n\u2502 Scotland                                                 \u2502\n\u2502 Faroe Islands                                            \u2502\n\u2502 Flemish region                                           \u2502\n\u2502 Brussels capital region                                  \u2502\n\u2502 Wallonia                                                 \u2502\n\u2502 Federation of Bosnia and Herzegovina                     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", 
            "title": "regionToDistrict(id[, geobase])"
        }, 
        {
            "location": "/index.html#regiontocountryid-geobase", 
            "text": "Converts a region to a country. In every other way, this function is the same as 'regionToCity'.\nExample:  regionToCountry(toUInt32(213)) = 225  converts Moscow (213) to Russia (225).", 
            "title": "regionToCountry(id[, geobase])"
        }, 
        {
            "location": "/index.html#regiontocontinentid-geobase", 
            "text": "Converts a region to a continent. In every other way, this function is the same as 'regionToCity'.\nExample:  regionToContinent(toUInt32(213)) = 10001  converts Moscow (213) to Eurasia (10001).", 
            "title": "regionToContinent(id[, geobase])"
        }, 
        {
            "location": "/index.html#regiontopopulationid-geobase", 
            "text": "Gets the population for a region.\nThe population can be recorded in files with the geobase. See the section \"External dictionaries\".\nIf the population is not recorded for the region, it returns 0.\nIn the Yandex geobase, the population might be recorded for child regions, but not for parent regions.", 
            "title": "regionToPopulation(id[, geobase])"
        }, 
        {
            "location": "/index.html#regioninlhs-rhs-geobase", 
            "text": "Checks whether a 'lhs' region belongs to a 'rhs' region. Returns a UInt8 number equal to 1 if it belongs, or 0 if it doesn't belong.\nThe relationship is reflexive \u2013 any region also belongs to itself.", 
            "title": "regionIn(lhs, rhs[, geobase])"
        }, 
        {
            "location": "/index.html#regionhierarchyid91-geobase93", 
            "text": "Accepts a UInt32 number \u2013 the region ID from the Yandex geobase. Returns an array of region IDs consisting of the passed region and all parents along the chain.\nExample:  regionHierarchy(toUInt32(213)) = [213,1,3,225,10001,10000] .", 
            "title": "regionHierarchy(id[, geobase])"
        }, 
        {
            "location": "/index.html#regiontonameid91-lang93", 
            "text": "Accepts a UInt32 number \u2013 the region ID from the Yandex geobase. A string with the name of the language can be passed as a second argument. Supported languages are: ru, en, ua, uk, by, kz, tr. If the second argument is omitted, the language 'ru' is used. If the language is not supported, an exception is thrown. Returns a string \u2013 the name of the region in the corresponding language. If the region with the specified ID doesn't exist, an empty string is returned.  ua  and  uk  both mean Ukrainian.", 
            "title": "regionToName(id[, lang])"
        }, 
        {
            "location": "/index.html#functions-for-implementing-the-in-operator", 
            "text": "", 
            "title": "Functions for implementing the IN operator"
        }, 
        {
            "location": "/index.html#in-notin-globalin-globalnotin", 
            "text": "See the section \"IN operators\".", 
            "title": "in, notIn, globalIn, globalNotIn"
        }, 
        {
            "location": "/index.html#tuplex-y-operator-x-y", 
            "text": "A function that allows grouping multiple columns.\nFor columns with the types T1, T2, ..., it returns a Tuple(T1, T2, ...) type tuple containing these columns. There is no cost to execute the function.\nTuples are normally used as intermediate values for an argument of IN operators, or for creating a list of formal parameters of lambda functions. Tuples can't be written to a table.", 
            "title": "tuple(x, y, ...), operator (x, y, ...)"
        }, 
        {
            "location": "/index.html#tupleelementtuple-n-operator-xn", 
            "text": "A function that allows getting a column from a tuple.\n'N' is the column index, starting from 1. N must be a constant. 'N' must be a constant. 'N' must be a strict postive integer no greater than the size of the tuple.\nThere is no cost to execute the function.", 
            "title": "tupleElement(tuple, n), operator x.N"
        }, 
        {
            "location": "/index.html#arrayjoin-function", 
            "text": "This is a very unusual function.  Normal functions don't change a set of rows, but just change the values in each row (map).\nAggregate functions compress a set of rows (fold or reduce).\nThe 'arrayJoin' function takes each row and generates a set of rows (unfold).  This function takes an array as an argument, and propagates the source row to multiple rows for the number of elements in the array.\nAll the values in columns are simply copied, except the values in the column where this function is applied; it is replaced with the corresponding array value.  A query can use multiple  arrayJoin  functions. In this case, the transformation is performed multiple times.  Note the ARRAY JOIN syntax in the SELECT query, which provides broader possibilities.  Example:  SELECT   arrayJoin ([ 1 ,   2 ,   3 ]   AS   src )   AS   dst ,   Hello ,   src   \u250c\u2500dst\u2500\u252c\u2500\\ Hello\\ \u2500\u252c\u2500src\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   1 \u2502 Hello     \u2502 [1,2,3] \u2502\n\u2502   2 \u2502 Hello     \u2502 [1,2,3] \u2502\n\u2502   3 \u2502 Hello     \u2502 [1,2,3] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", 
            "title": "arrayJoin function"
        }, 
        {
            "location": "/index.html#aggregate-functions", 
            "text": "Aggregate functions work in the  normal  way as expected by database experts.  ClickHouse also supports:   Parametric aggregate functions , which accept other parameters in addition to columns.  Combinators , which change the behavior of aggregate functions.", 
            "title": "Aggregate functions"
        }, 
        {
            "location": "/index.html#function-reference", 
            "text": "", 
            "title": "Function reference"
        }, 
        {
            "location": "/index.html#count", 
            "text": "Counts the number of rows. Accepts zero arguments and returns UInt64.\nThe syntax  COUNT(DISTINCT x)  is not supported. The separate  uniq  aggregate function exists for this purpose.  A  SELECT count() FROM table  query is not optimized, because the number of entries in the table is not stored separately. It will select some small column from the table and count the number of values in it.", 
            "title": "count()"
        }, 
        {
            "location": "/index.html#anyx", 
            "text": "Selects the first encountered value.\nThe query can be executed in any order and even in a different order each time, so the result of this function is indeterminate.\nTo get a determinate result, you can use the 'min' or 'max' function instead of 'any'.  In some cases, you can rely on the order of execution. This applies to cases when SELECT comes from a subquery that uses ORDER BY.  When a  SELECT  query has the  GROUP BY  clause or at least one aggregate function, ClickHouse (in contrast to MySQL) requires that all expressions in the  SELECT ,  HAVING , and  ORDER BY  clauses be calculated from keys or from aggregate functions. In other words, each column selected from the table must be used either in keys or inside aggregate functions. To get behavior like in MySQL, you can put the other columns in the  any  aggregate function.", 
            "title": "any(x)"
        }, 
        {
            "location": "/index.html#anyheavyx", 
            "text": "Selects a frequently occurring value using the  heavy hitters  algorithm. If there is a value that occurs more than in half the cases in each of the query's execution threads, this value is returned. Normally, the result is nondeterministic.  anyHeavy(column)  Arguments \n-  column  \u2013 The column name.  Example  Take the  OnTime  data set and select any frequently occurring value in the  AirlineID  column.  SELECT   anyHeavy ( AirlineID )   AS   res  FROM   ontime   \u250c\u2500\u2500\u2500res\u2500\u2510\n\u2502 19690 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", 
            "title": "anyHeavy(x)"
        }, 
        {
            "location": "/index.html#anylastx", 
            "text": "Selects the last value encountered.\nThe result is just as indeterminate as for the  any  function.", 
            "title": "anyLast(x)"
        }, 
        {
            "location": "/index.html#minx", 
            "text": "Calculates the minimum.", 
            "title": "min(x)"
        }, 
        {
            "location": "/index.html#maxx", 
            "text": "Calculates the maximum.", 
            "title": "max(x)"
        }, 
        {
            "location": "/index.html#argminarg-val", 
            "text": "Calculates the 'arg' value for a minimal 'val' value. If there are several different values of 'arg' for minimal values of 'val', the first of these values encountered is output.", 
            "title": "argMin(arg, val)"
        }, 
        {
            "location": "/index.html#argmaxarg-val", 
            "text": "Calculates the 'arg' value for a maximum 'val' value. If there are several different values of 'arg' for maximum values of 'val', the first of these values encountered is output.", 
            "title": "argMax(arg, val)"
        }, 
        {
            "location": "/index.html#sumx", 
            "text": "Calculates the sum.\nOnly works for numbers.", 
            "title": "sum(x)"
        }, 
        {
            "location": "/index.html#sumwithoverflowx", 
            "text": "Computes the sum of the numbers, using the same data type for the result as for the input parameters. If the sum exceeds the maximum value for this data type, the function returns an error.  Only works for numbers.", 
            "title": "sumWithOverflow(x)"
        }, 
        {
            "location": "/index.html#summapkey-value", 
            "text": "Totals the 'value' array according to the keys specified in the 'key' array.\nThe number of elements in 'key' and 'value' must be the same for each row that is totaled.\nReturns a tuple of two arrays: keys in sorted order, and values \u200b\u200bsummed for the corresponding keys.  Example:  CREATE   TABLE   sum_map ( \n     date   Date , \n     timeslot   DateTime , \n     statusMap   Nested ( \n         status   UInt16 , \n         requests   UInt64 \n     )  )   ENGINE   =   Log ;  INSERT   INTO   sum_map   VALUES \n     ( 2000-01-01 ,   2000-01-01 00:00:00 ,   [ 1 ,   2 ,   3 ],   [ 10 ,   10 ,   10 ]), \n     ( 2000-01-01 ,   2000-01-01 00:00:00 ,   [ 3 ,   4 ,   5 ],   [ 10 ,   10 ,   10 ]), \n     ( 2000-01-01 ,   2000-01-01 00:01:00 ,   [ 4 ,   5 ,   6 ],   [ 10 ,   10 ,   10 ]), \n     ( 2000-01-01 ,   2000-01-01 00:01:00 ,   [ 6 ,   7 ,   8 ],   [ 10 ,   10 ,   10 ]);  SELECT \n     timeslot , \n     sumMap ( statusMap . status ,   statusMap . requests )  FROM   sum_map  GROUP   BY   timeslot   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500timeslot\u2500\u252c\u2500sumMap(statusMap.status, statusMap.requests)\u2500\u2510\n\u2502 2000-01-01 00:00:00 \u2502 ([1,2,3,4,5],[10,10,20,10,10])               \u2502\n\u2502 2000-01-01 00:01:00 \u2502 ([4,5,6,7,8],[10,10,20,10,10])               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", 
            "title": "sumMap(key, value)"
        }, 
        {
            "location": "/index.html#avgx", 
            "text": "Calculates the average.\nOnly works for numbers.\nThe result is always Float64.", 
            "title": "avg(x)"
        }, 
        {
            "location": "/index.html#uniqx", 
            "text": "Calculates the approximate number of different values of the argument. Works for numbers, strings, dates, date-with-time, and for multiple arguments and tuple arguments.  Uses an adaptive sampling algorithm: for the calculation state, it uses a sample of element hash values with a size up to 65536.\nThis algorithm is also very accurate for data sets with low cardinality (up to 65536) and very efficient on CPU (when computing not too many of these functions, using  uniq  is almost as fast as using other aggregate functions).  The result is determinate (it doesn't depend on the order of query processing).  This function provides excellent accuracy even for data sets with extremely high cardinality (over 10 billion elements). It is recommended for default use.", 
            "title": "uniq(x)"
        }, 
        {
            "location": "/index.html#uniqcombinedx", 
            "text": "Calculates the approximate number of different values of the argument. Works for numbers, strings, dates, date-with-time, and for multiple arguments and tuple arguments.  A combination of three algorithms is used: array, hash table and  HyperLogLog  with an error correction table. The memory consumption is several times smaller than for the  uniq  function, and the accuracy is several times higher. Performance is slightly lower than for the  uniq  function, but sometimes it can be even higher than it, such as with distributed queries that transmit a large number of aggregation states over the network. The maximum state size is 96 KiB (HyperLogLog of 217 6-bit cells).  The result is determinate (it doesn't depend on the order of query processing).  The  uniqCombined  function is a good default choice for calculating the number of different values, but keep in mind that the estimation error will increase for high-cardinality data sets (200M+ elements), and the function will return very inaccurate results for data sets with extremely high cardinality (1B+ elements).", 
            "title": "uniqCombined(x)"
        }, 
        {
            "location": "/index.html#uniqhll12x", 
            "text": "Uses the  HyperLogLog  algorithm to approximate the number of different values of the argument.\n212 5-bit cells are used. The size of the state is slightly more than 2.5 KB. The result is not very accurate (up to ~10% error) for small data sets ( 10K elements). However, the result is fairly accurate for high-cardinality data sets (10K-100M), with a maximum error of ~1.6%. Starting from 100M, the estimation error increases, and the function will return very inaccurate results for data sets with extremely high cardinality (1B+ elements).  The result is determinate (it doesn't depend on the order of query processing).  We don't recommend using this function. In most cases, use the   uniq  or  uniqCombined  function.", 
            "title": "uniqHLL12(x)"
        }, 
        {
            "location": "/index.html#uniqexactx", 
            "text": "Calculates the number of different values of the argument, exactly.\nThere is no reason to fear approximations. It's better to use the  uniq  function.\nUse the  uniqExact  function if you definitely need an exact result.  The  uniqExact  function uses more memory than the  uniq  function, because the size of the state has unbounded growth as the number of different values increases.", 
            "title": "uniqExact(x)"
        }, 
        {
            "location": "/index.html#grouparrayx-grouparraymax_sizex", 
            "text": "Creates an array of argument values.\nValues can be added to the array in any (indeterminate) order.  The second version (with the  max_size  parameter) limits the size of the resulting array to  max_size  elements.\nFor example,  groupArray (1) (x)  is equivalent to  [any (x)] .  In some cases, you can still rely on the order of execution. This applies to cases when  SELECT  comes from a subquery that uses  ORDER BY .", 
            "title": "groupArray(x), groupArray(max_size)(x)"
        }, 
        {
            "location": "/index.html#grouparrayinsertatx", 
            "text": "Inserts a value into the array in the specified position.  Accepts the value and position as input. If several values \u200b\u200bare inserted into the same position, any of them might end up in the resulting array (the first one will be used in the case of single-threaded execution). If no value is inserted into a position, the position is assigned the default value.  Optional parameters:   The default value for substituting in empty positions.  The length of the resulting array. This allows you to receive arrays of the same size for all the aggregate keys. When using this parameter, the default value must be specified.", 
            "title": "groupArrayInsertAt(x)"
        }, 
        {
            "location": "/index.html#groupuniqarrayx", 
            "text": "Creates an array from different argument values. Memory consumption is the same as for the  uniqExact  function.", 
            "title": "groupUniqArray(x)"
        }, 
        {
            "location": "/index.html#quantilelevelx", 
            "text": "Approximates the 'level' quantile. 'level' is a constant, a floating-point number from 0 to 1.\nWe recommend using a 'level' value in the range of 0.01..0.99\nDon't use a 'level' value equal to 0 or 1 \u2013 use the 'min' and 'max' functions for these cases.  In this function, as well as in all functions for calculating quantiles, the 'level' parameter can be omitted. In this case, it is assumed to be equal to 0.5 (in other words, the function will calculate the median).  Works for numbers, dates, and dates with times.\nReturns: for numbers \u2013 Float64; for dates \u2013 a date; for dates with times \u2013 a date with time.  Uses  reservoir sampling  with a reservoir size up to 8192.\nIf necessary, the result is output with linear approximation from the two neighboring values.\nThis algorithm provides very low accuracy. See also:  quantileTiming ,  quantileTDigest ,  quantileExact .  The result depends on the order of running the query, and is nondeterministic.  When using multiple  quantile  (and similar) functions with different levels in a query, the internal states are not combined (that is, the query works less efficiently than it could). In this case, use the  quantiles  (and similar) functions.", 
            "title": "quantile(level)(x)"
        }, 
        {
            "location": "/index.html#quantiledeterministiclevelx-determinator", 
            "text": "Works the same way as the  quantile  function, but the result is deterministic and does not depend on the order of query execution.  To achieve this, the function takes a second argument \u2013 the \"determinator\". This is a number whose hash is used instead of a random number generator in the reservoir sampling algorithm. For the function to work correctly, the same determinator value should not occur too often. For the determinator, you can use an event ID, user ID, and so on.  Don't use this function for calculating timings. There is a more suitable function for this purpose:  quantileTiming .", 
            "title": "quantileDeterministic(level)(x, determinator)"
        }, 
        {
            "location": "/index.html#quantiletiminglevelx", 
            "text": "Computes the quantile of 'level' with a fixed precision.\nWorks for numbers. Intended for calculating quantiles of page loading time in milliseconds.  If the value is greater than 30,000 (a page loading time of more than 30 seconds), the result is equated to 30,000.  If the total value is not more than about 5670, then the calculation is accurate.  Otherwise:   if the time is less than 1024 ms, then the calculation is accurate.  otherwise the calculation is rounded to a multiple of 16 ms.   When passing negative values to the function, the behavior is undefined.  The returned value has the Float32 type. If no values were passed to the function (when using  quantileTimingIf ), 'nan' is returned. The purpose of this is to differentiate these instances from zeros. See the note on sorting NaNs in \"ORDER BY clause\".  The result is determinate (it doesn't depend on the order of query processing).  For its purpose (calculating quantiles of page loading times), using this function is more effective and the result is more accurate than for the  quantile  function.", 
            "title": "quantileTiming(level)(x)"
        }, 
        {
            "location": "/index.html#quantiletimingweightedlevelx-weight", 
            "text": "Differs from the  quantileTiming   function in that it has a second argument, \"weights\". Weight is a non-negative integer.\nThe result is calculated as if the  x   value were passed  weight  number of times to the  quantileTiming  function.", 
            "title": "quantileTimingWeighted(level)(x, weight)"
        }, 
        {
            "location": "/index.html#quantileexactlevelx", 
            "text": "Computes the quantile of 'level' exactly. To do this, all the passed values \u200b\u200bare combined into an array, which is then partially sorted. Therefore, the function consumes O(n) memory, where 'n' is the number of values that were passed. However, for a small number of values, the function is very effective.", 
            "title": "quantileExact(level)(x)"
        }, 
        {
            "location": "/index.html#quantileexactweightedlevelx-weight", 
            "text": "Computes the quantile of 'level' exactly. In addition, each value is counted with its weight, as if it is present 'weight' times. The arguments of the function can be considered as histograms, where the value 'x' corresponds to a histogram \"column\" of the height 'weight', and the function itself can be considered as a summation of histograms.  A hash table is used as the algorithm. Because of this, if the passed values \u200b\u200bare frequently repeated, the function consumes less RAM than  quantileExact . You can use this function instead of  quantileExact  and specify the weight as 1.", 
            "title": "quantileExactWeighted(level)(x, weight)"
        }, 
        {
            "location": "/index.html#quantiletdigestlevelx", 
            "text": "Approximates the quantile level using the  t-digest  algorithm. The maximum error is 1%. Memory consumption by State is proportional to the logarithm of the number of passed values.  The performance of the function is lower than for  quantile ,  quantileTiming . In terms of the ratio of State size to precision, this function is much better than  quantile .  The result depends on the order of running the query, and is nondeterministic.", 
            "title": "quantileTDigest(level)(x)"
        }, 
        {
            "location": "/index.html#medianx", 
            "text": "All the quantile functions have corresponding median functions:  median ,  medianDeterministic ,  medianTiming ,  medianTimingWeighted ,  medianExact ,  medianExactWeighted ,  medianTDigest . They are synonyms and their behavior is identical.", 
            "title": "median(x)"
        }, 
        {
            "location": "/index.html#quantileslevel1-level2-x", 
            "text": "All the quantile functions also have corresponding quantiles functions:  quantiles ,  quantilesDeterministic ,  quantilesTiming ,  quantilesTimingWeighted ,  quantilesExact ,  quantilesExactWeighted ,  quantilesTDigest . These functions calculate all the quantiles of the listed levels in one pass, and return an array of the resulting values.", 
            "title": "quantiles(level1, level2, ...)(x)"
        }, 
        {
            "location": "/index.html#varsampx", 
            "text": "Calculates the amount  \u03a3((x - x\u0305)^2) / (n - 1) , where  n  is the sample size and  x\u0305 is the average value of  x .  It represents an unbiased estimate of the variance of a random variable, if the values passed to the function are a sample of this random amount.  Returns  Float64 . When  n  = 1 , returns  +\u221e .", 
            "title": "varSamp(x)"
        }, 
        {
            "location": "/index.html#varpopx", 
            "text": "Calculates the amount  \u03a3((x - x\u0305)^2) / (n - 1) , where  n  is the sample size and  x\u0305 is the average value of  x .  In other words, dispersion for a set of values. Returns  Float64 .", 
            "title": "varPop(x)"
        }, 
        {
            "location": "/index.html#stddevsampx", 
            "text": "The result is equal to the square root of  varSamp(x) .", 
            "title": "stddevSamp(x)"
        }, 
        {
            "location": "/index.html#stddevpopx", 
            "text": "The result is equal to the square root of  varPop(x) .", 
            "title": "stddevPop(x)"
        }, 
        {
            "location": "/index.html#topkncolumn", 
            "text": "Returns an array of the most frequent values in the specified column. The resulting array is sorted in descending order of frequency of values (not by the values themselves).  Implements the  Filtered Space-Saving   algorithm for analyzing TopK, based on the reduce-and-combine algorithm from  Parallel Space Saving .  topK(N)(column)  This function doesn't provide a guaranteed result. In certain situations, errors might occur and it might return frequent values that aren't the most frequent values.  We recommend using the  N   10  value; performance is reduced with large  N  values. Maximum value of  N = 65536 .  Arguments \n- 'N' is the number of values.\n- ' x ' \u2013 The column.  Example  Take the  OnTime  data set and select the three most frequently occurring values in the  AirlineID  column.  SELECT   topK ( 3 )( AirlineID )   AS   res  FROM   ontime   \u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 [19393,19790,19805] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518", 
            "title": "topK(N)(column)"
        }, 
        {
            "location": "/index.html#covarsampx-y", 
            "text": "Calculates the value of  \u03a3((x - x\u0305)(y - y\u0305)) / (n - 1) .  Returns Float64. When  n  = 1 , returns +\u221e.", 
            "title": "covarSamp(x, y)"
        }, 
        {
            "location": "/index.html#covarpopx-y", 
            "text": "Calculates the value of  \u03a3((x - x\u0305)(y - y\u0305)) / n .", 
            "title": "covarPop(x, y)"
        }, 
        {
            "location": "/index.html#corrx-y", 
            "text": "Calculates the Pearson correlation coefficient:  \u03a3((x - x\u0305)(y - y\u0305)) / sqrt(\u03a3((x - x\u0305)^2) * \u03a3((y - y\u0305)^2)) .", 
            "title": "corr(x, y)"
        }, 
        {
            "location": "/index.html#aggregate-function-combinators", 
            "text": "The name of an aggregate function can have a suffix appended to it. This changes the way the aggregate function works.", 
            "title": "Aggregate function combinators"
        }, 
        {
            "location": "/index.html#-if", 
            "text": "The suffix -If can be appended to the name of any aggregate function. In this case, the aggregate function accepts an extra argument \u2013 a condition (Uint8 type). The aggregate function processes only the rows that trigger the condition. If the condition was not triggered even once, it returns a default value (usually zeros or empty strings).  Examples:  sumIf(column, cond) ,  countIf(cond) ,  avgIf(x, cond) ,  quantilesTimingIf(level1, level2)(x, cond) ,  argMinIf(arg, val, cond)  and so on.  With conditional aggregate functions, you can calculate aggregates for several conditions at once, without using subqueries and  JOIN s. For example, in Yandex.Metrica, conditional aggregate functions are used to implement the segment comparison functionality.", 
            "title": "-If"
        }, 
        {
            "location": "/index.html#-array", 
            "text": "The -Array suffix can be appended to any aggregate function. In this case, the aggregate function takes arguments of the 'Array(T)' type (arrays) instead of 'T' type arguments. If the aggregate function accepts multiple arguments, this must be arrays of equal lengths. When processing arrays, the aggregate function works like the original aggregate function across all array elements.  Example 1:  sumArray(arr)  - Totals all the elements of all 'arr' arrays. In this example, it could have been written more simply:  sum(arraySum(arr)) .  Example 2:  uniqArray(arr)  \u2013 Count the number of unique elements in all 'arr' arrays. This could be done an easier way:  uniq(arrayJoin(arr)) , but it's not always possible to add 'arrayJoin' to a query.  -If and -Array can be combined. However, 'Array' must come first, then 'If'. Examples:  uniqArrayIf(arr, cond) ,  quantilesTimingArrayIf(level1, level2)(arr, cond) . Due to this order, the 'cond' argument can't be an array.", 
            "title": "-Array"
        }, 
        {
            "location": "/index.html#-state", 
            "text": "If you apply this combinator, the aggregate function doesn't return the resulting value (such as the number of unique values for the 'uniq' function), but an intermediate state of the aggregation (for  uniq , this is the hash table for calculating the number of unique values). This is an AggregateFunction(...) that can be used for further processing or stored in a table to finish aggregating later. See the sections \"AggregatingMergeTree\" and \"Functions for working with intermediate aggregation states\".", 
            "title": "-State"
        }, 
        {
            "location": "/index.html#-merge", 
            "text": "If you apply this combinator, the aggregate function takes the intermediate aggregation state as an argument, combines the states to finish aggregation, and returns the resulting value.", 
            "title": "-Merge"
        }, 
        {
            "location": "/index.html#-mergestate", 
            "text": "Merges the intermediate aggregation states in the same way as the -Merge combinator. However, it doesn't return the resulting value, but an intermediate aggregation state, similar to the -State combinator.", 
            "title": "-MergeState."
        }, 
        {
            "location": "/index.html#-foreach", 
            "text": "Converts an aggregate function for tables into an aggregate function for arrays that aggregates the corresponding array items and returns an array of results. For example,  sumForEach  for the arrays  [1, 2] ,  [3, 4, 5] and [6, 7] returns the result  [10, 13, 5]  after adding together the corresponding array items.", 
            "title": "-ForEach"
        }, 
        {
            "location": "/index.html#parametric-aggregate-functions", 
            "text": "Some aggregate functions can accept not only argument columns (used for compression), but a set of parameters \u2013 constants for initialization. The syntax is two pairs of brackets instead of one. The first is for parameters, and the second is for arguments.", 
            "title": "Parametric aggregate functions"
        }, 
        {
            "location": "/index.html#sequencematchpatterntime-cond1-cond2", 
            "text": "Pattern matching for event chains.  pattern  is a string containing a pattern to match. The pattern is similar to a regular expression.  time  is the time of the event with the DateTime type.  cond1 ,  cond2  ... is from one to 32 arguments of type UInt8 that indicate whether a certain condition was met for the event.  The function collects a sequence of events in RAM. Then it checks whether this sequence matches the pattern.\nIt returns UInt8: 0 if the pattern isn't matched, or 1 if it matches.  Example:  sequenceMatch ('(?1).*(?2)')(EventTime, URL LIKE '%company%', URL LIKE '%cart%')   whether there was a chain of events in which a pageview with 'company' in the address occurred earlier than a pageview with 'cart' in the address.   This is a singular example. You could write it using other aggregate functions:  minIf(EventTime, URL LIKE  %company% )   maxIf(EventTime, URL LIKE  %cart% ).  However, there is no such solution for more complex situations.  Pattern syntax:  (?1)  refers to the condition (any number can be used in place of 1).  .*  is any number of any events.  (?t =1800)  is a time condition.  Any quantity of any type of events is allowed over the specified time.  Instead of  = ,  the following operators can be used: ,  ,  = .  Any number may be specified in place of 1800.  Events that occur during the same second can be put in the chain in any order. This may affect the result of the function.", 
            "title": "sequenceMatch(pattern)(time, cond1, cond2, ...)"
        }, 
        {
            "location": "/index.html#sequencecountpatterntime-cond1-cond2", 
            "text": "Works the same way as the sequenceMatch function, but instead of returning whether there is an event chain, it returns UInt64 with the number of event chains found.\nChains are searched for without overlapping. In other words, the next chain can start only after the end of the previous one.", 
            "title": "sequenceCount(pattern)(time, cond1, cond2, ...)"
        }, 
        {
            "location": "/index.html#windowfunnelwindowtimestamp-cond1-cond2-cond3", 
            "text": "Window funnel matching for event chains, calculates the max event level in a sliding window.  window  is the timestamp window value, such as 3600.  timestamp  is the time of the event with the DateTime type or UInt32 type.  cond1 ,  cond2  ... is from one to 32 arguments of type UInt8 that indicate whether a certain condition was met for the event  Example:   Consider you are doing a website analytics, intend to find out the user counts clicked login button( event = 1001 ), then the user counts followed by searched the phones( event = 1003 and product = 'phone' ) , then the user counts followed by made an order ( event = 1009 ). And all event chains must be in a 3600 seconds sliding window.   This could be easily calculate by  windowFunnel  SELECT\n    level,\n    count() AS c\nFROM\n(\n    SELECT\n        user_id,\n        windowFunnel(3600)(timestamp, event_id = 1001, event_id = 1003 AND product =  phone , event_id = 1009) AS level\n    FROM trend_event\n    WHERE (event_date  =  2017-01-01 ) AND (event_date  =  2017-01-31 )\n    GROUP BY user_id\n)\nGROUP BY level\nORDER BY level  Simply, the level could only be 0,1,2,3, it means the maxium event action stage that one user could reach.", 
            "title": "windowFunnel(window)(timestamp, cond1, cond2, cond3, ....)"
        }, 
        {
            "location": "/index.html#uniquptonx", 
            "text": "Calculates the number of different argument values \u200b\u200bif it is less than or equal to N. If the number of different argument values is greater than N, it returns N + 1.  Recommended for use with small Ns, up to 10. The maximum value of N is 100.  For the state of an aggregate function, it uses the amount of memory equal to 1 + N * the size of one value of bytes.\nFor strings, it stores a non-cryptographic hash of 8 bytes. That is, the calculation is approximated for strings.  The function also works for several arguments.  It works as fast as possible, except for cases when a large N value is used and the number of unique values is slightly less than N.  Usage example:  Problem: Generate a report that shows only keywords that produced at least 5 unique users.\nSolution: Write in the GROUP BY query SearchPhrase HAVING uniqUpTo(4)(UserID)  = 5", 
            "title": "uniqUpTo(N)(x)"
        }, 
        {
            "location": "/index.html#dictionaries", 
            "text": "A dictionary  is a mapping (key  -  attributes) that can be used in a query as functions.\nYou can think of this as a more convenient and efficient type of JOIN with dimension tables.  There are built-in (internal) and add-on (external) dictionaries.", 
            "title": "Dictionaries"
        }, 
        {
            "location": "/index.html#external-dictionaries", 
            "text": "You can add your own dictionaries from various data sources. The data source for a dictionary can be a local text or executable file, an HTTP(s) resource, or another DBMS. For more information, see \" Sources for external dictionaries \".  ClickHouse:    Fully or partially stores dictionaries in RAM.  Periodically updates dictionaries and dynamically loads missing values. In other words, dictionaries can be loaded dynamically.    The configuration of external dictionaries is located in one or more files. The path to the configuration is specified in the  dictionaries_config  parameter.  Dictionaries can be loaded at server startup or at first use, depending on the  dictionaries_lazy_load  setting.  The dictionary config file has the following format:  yandex \n     comment An optional element with any content. Ignored by the ClickHouse server. /comment \n\n     !--Optional element. File name with substitutions-- \n     include_from /etc/metrika.xml /include_from \n\n\n     dictionary \n         !-- Dictionary configuration -- \n     /dictionary \n\n    ...\n\n     dictionary \n         !-- Dictionary configuration -- \n     /dictionary  /yandex   You can  configure  any number of dictionaries in the same file. The file format is preserved even if there is only one dictionary (i.e.  yandex dictionary   !--configuration -   /dictionary /yandex  ).  See also \" Functions for working with external dictionaries \".  \n\nYou can convert values \u200b\u200bfor a small dictionary by describing it in a `SELECT` query (see the [transform](#other_functions-transform) function). This functionality is not related to external dictionaries.", 
            "title": "External dictionaries"
        }, 
        {
            "location": "/index.html#configuring-an-external-dictionary", 
            "text": "The dictionary configuration has the following structure:  dictionary \n     name dict_name /name \n\n     source \n       !-- Source configuration -- \n     /source \n\n     layout \n       !-- Memory layout configuration -- \n     /layout \n\n     structure \n       !-- Complex key configuration -- \n     /structure \n\n     lifetime \n       !-- Lifetime of dictionary in memory -- \n     /lifetime  /dictionary    name \u2013 The identifier that can be used to access the dictionary. Use the characters  [a-zA-Z0-9_\\-] .  source  \u2014 Source of the dictionary.  layout  \u2014 Dictionary layout in memory.  structure  \u2014 Structure of the dictionary . A key and attributes that can be retrieved by this key.  lifetime  \u2014 Frequency of dictionary updates.", 
            "title": "Configuring an external dictionary"
        }, 
        {
            "location": "/index.html#storing-dictionaries-in-memory", 
            "text": "There are a  variety of ways  to store dictionaries in memory.  We recommend  flat ,  hashed and complex_key_hashed . which provide optimal processing speed.  Caching is not recommended because of potentially poor performance and difficulties in selecting optimal parameters. Read more in the section \" cache \".  There are several ways to improve dictionary performance:   Call the function for working with the dictionary after  GROUP BY .  Mark attributes to extract as injective. An attribute is called injective if different attribute values correspond to different keys. So when  GROUP BY  uses a function that fetches an attribute value by the key, this function is automatically taken out of  GROUP BY .   ClickHouse generates an exception for errors with dictionaries. Examples of errors:   The dictionary being accessed could not be loaded.  Error querying a  cached  dictionary.   You can view the list of external dictionaries and their statuses in the  system.dictionaries  table.  The configuration looks like this:  yandex \n     dictionary \n        ...\n         layout \n             layout_type \n                 !-- layout settings -- \n             /layout_type \n         /layout \n        ...\n     /dictionary  /yandex", 
            "title": "Storing dictionaries in memory"
        }, 
        {
            "location": "/index.html#ways-to-store-dictionaries-in-memory", 
            "text": "flat  hashed  cache  range_hashed  complex_key_hashed  complex_key_cache  ip_trie", 
            "title": "Ways to store dictionaries in memory"
        }, 
        {
            "location": "/index.html#flat", 
            "text": "The dictionary is completely stored in memory in the form of flat arrays. How much memory does the dictionary use? The amount is proportional to the size of the largest key (in space used).  The dictionary key has the  UInt64  type and the value is limited to 500,000. If a larger key is discovered when creating the dictionary, ClickHouse throws an exception and does not create the dictionary.  All types of sources are supported. When updating, data (from a file or from a table) is read in its entirety.  This method provides the best performance among all available methods of storing the dictionary.  Configuration example:  layout \n   flat   /  /layout", 
            "title": "flat"
        }, 
        {
            "location": "/index.html#hashed", 
            "text": "The dictionary is completely stored in memory in the form of a hash table. The dictionary can contain any number of elements with any identifiers In practice, the number of keys can reach tens of millions of items.  All types of sources are supported. When updating, data (from a file or from a table) is read in its entirety.  Configuration example:  layout \n   hashed   /  /layout", 
            "title": "hashed"
        }, 
        {
            "location": "/index.html#complex_key_hashed", 
            "text": "This type of storage is for use with composite  keys . Similar to  hashed .  Configuration example:  layout \n   complex_key_hashed   /  /layout", 
            "title": "complex_key_hashed"
        }, 
        {
            "location": "/index.html#range_hashed", 
            "text": "The dictionary is stored in memory in the form of a hash table with an ordered array of ranges and their corresponding values.  This storage method works the same way as hashed and allows using date/time ranges  in addition to the key, if they appear in the dictionary.  Example: The table contains discounts for each advertiser in the format:  +---------------+---------------------+-------------------+--------+\n| advertiser id | discount start date | discount end date | amount |\n+===============+=====================+===================+========+\n| 123           | 2015-01-01          | 2015-01-15        | 0.15   |\n+---------------+---------------------+-------------------+--------+\n| 123           | 2015-01-16          | 2015-01-31        | 0.25   |\n+---------------+---------------------+-------------------+--------+\n| 456           | 2015-01-01          | 2015-01-15        | 0.05   |\n+---------------+---------------------+-------------------+--------+  To use a sample for date ranges, define the  range_min  and  range_max  elements in the  structure .  Example:  structure \n     id \n         name Id /name \n     /id \n     range_min \n         name first /name \n     /range_min \n     range_max \n         name last /name \n     /range_max \n    ...  To work with these dictionaries, you need to pass an additional date argument to the  dictGetT  function:  dictGetT( dict_name ,  attr_name , id, date)  This function returns the value for the specified  id s and the date range that includes the passed date.  Details of the algorithm:   If the  id  is not found or a range is not found for the  id , it returns the default value for the dictionary.  If there are overlapping ranges, you can use any.  If the range delimiter is  NULL  or an invalid date (such as 1900-01-01 or 2039-01-01), the range is left open. The range can be open on both sides.   Configuration example:  yandex \n         dictionary \n\n                ...\n\n                 layout \n                         range_hashed   / \n                 /layout \n\n                 structure \n                         id \n                                 name Abcdef /name \n                         /id \n                         range_min \n                                 name StartDate /name \n                         /range_min \n                         range_max \n                                 name EndDate /name \n                         /range_max \n                         attribute \n                                 name XXXType /name \n                                 type String /type \n                                 null_value   / \n                         /attribute \n                 /structure \n\n         /dictionary  /yandex", 
            "title": "range_hashed"
        }, 
        {
            "location": "/index.html#cache", 
            "text": "The dictionary is stored in a cache that has a fixed number of cells. These cells contain frequently used elements.  When searching for a dictionary, the cache is searched first. For each block of data, all keys that are not found in the cache or are outdated are requested from the source using  SELECT attrs... FROM db.table WHERE id IN (k1, k2, ...) . The received data is then written to the cache.  For cache dictionaries, the expiration  lifetime  of data in the cache can be set. If more time than  lifetime  has passed since loading the data in a cell, the cell's value is not used, and it is re-requested the next time it needs to be used.  This is the least effective of all the ways to store dictionaries. The speed of the cache depends strongly on correct settings and the usage scenario. A cache type dictionary performs well only when the hit rates are high enough (recommended 99% and higher). You can view the average hit rate in the  system.dictionaries  table.  To improve cache performance, use a subquery with  LIMIT , and call the function with the dictionary externally.  Supported  sources : MySQL, ClickHouse, executable, HTTP.  Example of settings:  layout \n     cache \n         !-- The size of the cache, in number of cells. Rounded up to a power of two. -- \n         size_in_cells 1000000000 /size_in_cells \n     /cache  /layout   Set a large enough cache size. You need to experiment to select the number of cells:   Set some value.  Run queries until the cache is completely full.  Assess memory consumption using the  system.dictionaries  table.  Increase or decrease the number of cells until the required memory consumption is reached.   \n\nDo not use ClickHouse as a source, because it is slow to process queries with random reads.", 
            "title": "cache"
        }, 
        {
            "location": "/index.html#complex_key_cache", 
            "text": "This type of storage is for use with composite  keys . Similar to  cache .", 
            "title": "complex_key_cache"
        }, 
        {
            "location": "/index.html#ip_trie", 
            "text": "This type of storage is for mapping network prefixes (IP addresses) to metadata such as ASN.  Example: The table contains network prefixes and their corresponding AS number and country code:    +-----------------+-------+--------+\n  | prefix          | asn   | cca2   |\n  +=================+=======+========+\n  | 202.79.32.0/20  | 17501 | NP     |\n  +-----------------+-------+--------+\n  | 2620:0:870::/48 | 3856  | US     |\n  +-----------------+-------+--------+\n  | 2a02:6b8:1::/48 | 13238 | RU     |\n  +-----------------+-------+--------+\n  | 2001:db8::/32   | 65536 | ZZ     |\n  +-----------------+-------+--------+  When using this type of layout, the structure must have a composite key.  Example:  structure \n     key \n         attribute \n             name prefix /name \n             type String /type \n         /attribute \n     /key \n     attribute \n             name asn /name \n             type UInt32 /type \n             null_value   / \n     /attribute \n     attribute \n             name cca2 /name \n             type String /type \n             null_value ?? /null_value \n     /attribute \n    ...  The key must have only one String type attribute that contains an allowed IP prefix. Other types are not supported yet.  For queries, you must use the same functions ( dictGetT  with a tuple) as for dictionaries with composite keys:  dictGetT( dict_name ,  attr_name , tuple(ip))  The function takes either  UInt32  for IPv4, or  FixedString(16)  for IPv6:  dictGetString( prefix ,  asn , tuple(IPv6StringToNum( 2001:db8::1 )))  Other types are not supported yet. The function returns the attribute for the prefix that corresponds to this IP address. If there are overlapping prefixes, the most specific one is returned.  Data is stored in a  trie . It must completely fit into RAM.", 
            "title": "ip_trie"
        }, 
        {
            "location": "/index.html#dictionary-updates", 
            "text": "ClickHouse periodically updates the dictionaries. The update interval for fully downloaded dictionaries and the invalidation interval for cached dictionaries are defined in the  lifetime  tag in seconds.  Dictionary updates (other than loading for first use) do not block queries. During updates, the old version of a dictionary is used. If an error occurs during an update, the error is written to the server log, and queries continue using the old version of dictionaries.  Example of settings:  dictionary \n    ...\n     lifetime 300 /lifetime \n    ... /dictionary   Setting  lifetime  0 /lifetime   prevents updating dictionaries.  You can set a time interval for upgrades, and ClickHouse will choose a uniformly random time within this range. This is necessary in order to distribute the load on the dictionary source when upgrading on a large number of servers.  Example of settings:  dictionary \n    ...\n     lifetime \n         min 300 /min \n         max 360 /max \n     /lifetime \n    ... /dictionary   When upgrading the dictionaries, the ClickHouse server applies different logic depending on the type of   source :    For a text file, it checks the time of modification. If the time differs from the previously recorded time, the dictionary is updated.  For MyISAM tables, the time of modification is checked using a  SHOW TABLE STATUS  query.  Dictionaries from other sources are updated every time by default.    For MySQL (InnoDB) and ODBC sources, you can set up a query that will update the dictionaries only if they really changed, rather than each time. To do this, follow these steps:    The dictionary table must have a field that always changes when the source data is updated.  The settings of the source must specify a query that retrieves the changing field. The ClickHouse server interprets the query result as a row, and if this row has changed relative to its previous state, the dictionary is updated. Specify the query in the  invalidate_query  field in the settings for the  source .    Example of settings:  dictionary \n    ...\n     odbc \n      ...\n       invalidate_query SELECT update_time FROM dictionary_source where id = 1 /invalidate_query \n     /odbc \n    ... /dictionary", 
            "title": "Dictionary updates"
        }, 
        {
            "location": "/index.html#sources-of-external-dictionaries", 
            "text": "An external dictionary can be connected from many different sources.  The configuration looks like this:  yandex \n   dictionary \n    ...\n     source \n       source_type \n         !-- Source configuration -- \n       /source_type \n     /source \n    ...\n   /dictionary \n  ... /yandex   The source is configured in the  source  section.  Types of sources ( source_type ):   Local file  Executable file  HTTP(s)  ODBC  DBMS  MySQL  ClickHouse  MongoDB", 
            "title": "Sources of external dictionaries"
        }, 
        {
            "location": "/index.html#local-file", 
            "text": "Example of settings:  source \n   file \n     path /opt/dictionaries/os.tsv /path \n     format TabSeparated /format \n   /file  /source   Setting fields:   path  \u2013 The absolute path to the file.  format  \u2013 The file format. All the formats described in \" Formats \" are supported.", 
            "title": "Local file"
        }, 
        {
            "location": "/index.html#executable-file", 
            "text": "Working with executable files depends on  how the dictionary is stored in memory . If the dictionary is stored using  cache  and  complex_key_cache , ClickHouse requests the necessary keys by sending a request to the executable file's  STDIN .  Example of settings:  source \n     executable \n         command cat /opt/dictionaries/os.tsv /command \n         format TabSeparated /format \n     /executable  /source   Setting fields:   command  \u2013 The absolute path to the executable file, or the file name (if the program directory is written to  PATH ).  format  \u2013 The file format. All the formats described in \" Formats \" are supported.", 
            "title": "Executable file"
        }, 
        {
            "location": "/index.html#https", 
            "text": "Working with an HTTP(s) server depends on  how the dictionary is stored in memory . If the dictionary is stored using  cache  and  complex_key_cache , ClickHouse requests the necessary keys by sending a request via the  POST  method.  Example of settings:  source \n     http \n         url http://[::1]/os.tsv /url \n         format TabSeparated /format \n     /http  /source   In order for ClickHouse to access an HTTPS resource, you must  configure openSSL  in the server configuration.  Setting fields:   url  \u2013 The source URL.  format  \u2013 The file format. All the formats described in \" Formats \" are supported.", 
            "title": "HTTP(s)"
        }, 
        {
            "location": "/index.html#odbc", 
            "text": "You can use this method to connect any database that has an ODBC driver.  Example of settings:  odbc \n     db DatabaseName /db \n     table TableName /table \n     connection_string DSN=some_parameters /connection_string \n     invalidate_query SQL_QUERY /invalidate_query  /odbc   Setting fields:   db  \u2013 Name of the database. Omit it if the database name is set in the  connection_string  parameters.  table  \u2013 Name of the table.  connection_string  \u2013 Connection string.  invalidate_query  \u2013 Query for checking the dictionary status. Optional parameter. Read more in the section  Updating dictionaries .", 
            "title": "ODBC"
        }, 
        {
            "location": "/index.html#example-of-connecting-postgresql", 
            "text": "Ubuntu OS.  Installing unixODBC and the ODBC driver for PostgreSQL:  sudo apt-get install -y unixodbc odbcinst odbc-postgresql  Configuring  /etc/odbc.ini  (or  ~/.odbc.ini ):      [DEFAULT]\n    Driver = myconnection\n\n    [myconnection]\n    Description         = PostgreSQL connection to my_db\n    Driver              = PostgreSQL Unicode\n    Database            = my_db\n    Servername          = 127.0.0.1\n    UserName            = username\n    Password            = password\n    Port                = 5432\n    Protocol            = 9.3\n    ReadOnly            = No\n    RowVersioning       = No\n    ShowSystemTables    = No\n    ConnSettings        =  The dictionary configuration in ClickHouse:  dictionary \n     name table_name /name \n     source \n     odbc \n         !-- You can specifiy the following parameters in connection_string: -- \n         !-- DSN=myconnection;UID=username;PWD=password;HOST=127.0.0.1;PORT=5432;DATABASE=my_db -- \n             connection_string DSN=myconnection /connection_string \n             table postgresql_table /table \n         /odbc \n     /source \n     lifetime \n         min 300 /min \n         max 360 /max \n     /lifetime \n     layout \n         hashed/ \n     /layout \n     structure \n         id \n             name id /name \n         /id \n         attribute \n             name some_column /name \n             type UInt64 /type \n             null_value 0 /null_value \n         /attribute \n     /structure  /dictionary   You may need to edit  odbc.ini  to specify the full path to the library with the driver  DRIVER=/usr/local/lib/psqlodbcw.so .", 
            "title": "Example of connecting PostgreSQL"
        }, 
        {
            "location": "/index.html#example-of-connecting-ms-sql-server", 
            "text": "Ubuntu OS.  Installing the driver: :      sudo apt-get install tdsodbc freetds-bin sqsh  Configuring the driver: :      $ cat /etc/freetds/freetds.conf \n    ...\n\n    [MSSQL]\n    host = 192.168.56.101\n    port = 1433\n    tds version = 7.0\n    client charset = UTF-8\n\n    $ cat /etc/odbcinst.ini \n    ...\n\n    [FreeTDS]\n    Description     = FreeTDS\n    Driver          = /usr/lib/x86_64-linux-gnu/odbc/libtdsodbc.so\n    Setup           = /usr/lib/x86_64-linux-gnu/odbc/libtdsS.so\n    FileUsage       = 1\n    UsageCount      = 5\n\n    $ cat ~/.odbc.ini \n    ...\n\n    [MSSQL]\n    Description     = FreeTDS\n    Driver          = FreeTDS\n    Servername      = MSSQL\n    Database        = test\n    UID             = test\n    PWD             = test\n    Port            = 1433  Configuring the dictionary in ClickHouse:  yandex \n     dictionary \n         name test /name \n         source \n             odbc \n                 table dict /table \n                 connection_string DSN=MSSQL;UID=test;PWD=test /connection_string \n             /odbc \n         /source \n\n         lifetime \n             min 300 /min \n             max 360 /max \n         /lifetime \n\n         layout \n             flat   / \n         /layout \n\n         structure \n             id \n                 name k /name \n             /id \n             attribute \n                 name s /name \n                 type String /type \n                 null_value /null_value \n             /attribute \n         /structure \n     /dictionary  /yandex", 
            "title": "Example of connecting MS SQL Server"
        }, 
        {
            "location": "/index.html#dbms", 
            "text": "", 
            "title": "DBMS"
        }, 
        {
            "location": "/index.html#mysql_1", 
            "text": "Example of settings:  source \n   mysql \n       port 3306 /port \n       user clickhouse /user \n       password qwerty /password \n       replica \n           host example01-1 /host \n           priority 1 /priority \n       /replica \n       replica \n           host example01-2 /host \n           priority 1 /priority \n       /replica \n       db db_name /db \n       table table_name /table \n       where id=10 /where \n       invalidate_query SQL_QUERY /invalidate_query \n   /mysql  /source   Setting fields:    port  \u2013 The port on the MySQL server. You can specify it for all replicas, or for each one individually (inside  replica ).    user  \u2013 Name of the MySQL user. You can specify it for all replicas, or for each one individually (inside  replica ).    password  \u2013 Password of the MySQL user. You can specify it for all replicas, or for each one individually (inside  replica ).    replica  \u2013 Section of replica configurations. There can be multiple sections.   replica/host  \u2013 The MySQL host.   *  replica/priority  \u2013 The replica priority. When attempting to connect, ClickHouse traverses the replicas in order of priority. The lower the number, the higher the priority.    db  \u2013 Name of the database.    table  \u2013 Name of the table.    where  \u2013 The selection criteria. Optional parameter.    invalidate_query  \u2013 Query for checking the dictionary status. Optional parameter. Read more in the section  Updating dictionaries .    MySQL can be connected on a local host via sockets. To do this, set  host  and  socket .  Example of settings:  source \n   mysql \n       host localhost /host \n       socket /path/to/socket/file.sock /socket \n       user clickhouse /user \n       password qwerty /password \n       db db_name /db \n       table table_name /table \n       where id=10 /where \n       invalidate_query SQL_QUERY /invalidate_query \n   /mysql  /source", 
            "title": "MySQL"
        }, 
        {
            "location": "/index.html#clickhouse", 
            "text": "Example of settings:  source \n     clickhouse \n         host example01-01-1 /host \n         port 9000 /port \n         user default /user \n         password /password \n         db default /db \n         table ids /table \n         where id=10 /where \n     /clickhouse  /source   Setting fields:   host  \u2013 The ClickHouse host. If it is a local host, the query is processed without any network activity. To improve fault tolerance, you can create a  Distributed  table and enter it in subsequent configurations.  port  \u2013 The port on the ClickHouse server.  user  \u2013 Name of the ClickHouse user.  password  \u2013 Password of the ClickHouse user.  db  \u2013 Name of the database.  table  \u2013 Name of the table.  where  \u2013 The selection criteria. May be omitted.", 
            "title": "ClickHouse"
        }, 
        {
            "location": "/index.html#mongodb", 
            "text": "Example of settings:  source \n     mongodb \n         host localhost /host \n         port 27017 /port \n         user /user \n         password /password \n         db test /db \n         collection dictionary_source /collection \n     /mongodb  /source   Setting fields:   host  \u2013 The MongoDB host.  port  \u2013 The port on the MongoDB server.  user  \u2013 Name of the MongoDB user.  password  \u2013 Password of the MongoDB user.  db  \u2013 Name of the database.  collection  \u2013 Name of the collection.", 
            "title": "MongoDB"
        }, 
        {
            "location": "/index.html#dictionary-key-and-fields", 
            "text": "The  structure  clause describes the dictionary key and fields available for queries.  Overall structure:  dictionary \n     structure \n         id \n             name Id /name \n         /id \n\n         attribute \n             !-- Attribute parameters -- \n         /attribute \n\n        ...\n\n     /structure  /dictionary   Columns are described in the structure:   id  -  key column .  attribute  -  data column . There can be a large number of columns.", 
            "title": "Dictionary key and fields"
        }, 
        {
            "location": "/index.html#key", 
            "text": "ClickHouse supports the following types of keys:   Numeric key. UInt64. Defined in the tag  id  .  Composite key. Set of values of different types. Defined in the tag  key  .   A structure can contain either  id  or  key  .  \n\nThe key doesn't need to be defined separately in attributes.", 
            "title": "Key"
        }, 
        {
            "location": "/index.html#numeric-key", 
            "text": "Format:  UInt64 .  Configuration example:  id \n     name Id /name  /id   Configuration fields:   name \u2013 The name of the column with keys.", 
            "title": "Numeric key"
        }, 
        {
            "location": "/index.html#composite-key", 
            "text": "The key can be a  tuple  from any types of fields. The  layout  in this case must be  complex_key_hashed  or  complex_key_cache .  \nA composite key can consist of a single element. This makes it possible to use a string as the key, for instance.  The key structure is set in the element  key . Key fields are specified in the same format as the dictionary  attributes . Example:  structure \n     key \n         attribute \n             name field1 /name \n             type String /type \n         /attribute \n         attribute \n             name field2 /name \n             type UInt32 /type \n         /attribute \n        ...\n     /key \n...  For a query to the  dictGet*  function, a tuple is passed as the key. Example:  dictGetString('dict_name', 'attr_name', tuple('string for field1', num_for_field2)) .", 
            "title": "Composite key"
        }, 
        {
            "location": "/index.html#attributes", 
            "text": "Configuration example:  structure \n    ...\n     attribute \n         name Name /name \n         type Type /type \n         null_value /null_value \n         expression rand64() /expression \n         hierarchical true /hierarchical \n         injective true /injective \n         is_object_id true /is_object_id \n     /attribute  /structure   Configuration fields:   name  \u2013 The column name.  type  \u2013 The column type. Sets the method for interpreting data in the source. For example, for MySQL, the field might be  TEXT ,  VARCHAR , or  BLOB  in the source table, but it can be uploaded as  String .  null_value  \u2013 The default value for a non-existing element. In the example, it is an empty string.  expression  \u2013 The attribute can be an expression. The tag is not required.  hierarchical  \u2013 Hierarchical support. Mirrored to the parent identifier. By default,  false .  injective  \u2013 Whether the  id -  attribute  image is injective. If  true , then you can optimize the  GROUP BY  clause. By default,  false .  is_object_id  \u2013 Whether the query is executed for a MongoDB document by  ObjectID .", 
            "title": "Attributes"
        }, 
        {
            "location": "/index.html#internal-dictionaries", 
            "text": "ClickHouse contains a built-in feature for working with a geobase.  This allows you to:   Use a region's ID to get its name in the desired language.  Use a region's ID to get the ID of a city, area, federal district, country, or continent.  Check whether a region is part of another region.  Get a chain of parent regions.   All the functions support \"translocality,\" the ability to simultaneously use different perspectives on region ownership. For more information, see the section \"Functions for working with Yandex.Metrica dictionaries\".  The internal dictionaries are disabled in the default package.\nTo enable them, uncomment the parameters  path_to_regions_hierarchy_file  and  path_to_regions_names_files  in the server configuration file.  The geobase is loaded from text files.\nIf you work at Yandex, you can follow these instructions to create them: https://github.yandex-team.ru/raw/Metrika/ClickHouse_private/master/doc/create_embedded_geobase_dictionaries.txt  Put the regions_hierarchy*.txt files in the path_to_regions_hierarchy_file directory. This configuration parameter must contain the path to the regions_hierarchy.txt file (the default regional hierarchy), and the other files (regions_hierarchy_ua.txt) must be located in the same directory.  Put the  regions_names_*.txt  files in the path_to_regions_names_files directory.  You can also create these files yourself. The file format is as follows:  regions_hierarchy*.txt : TabSeparated (no header), columns:   Region ID (UInt32)  Parent region ID (UInt32)  Region type (UInt8): 1 - continent, 3 - country, 4 - federal district, 5 - region, 6 - city; other types don't have values.  Population (UInt32) - Optional column.   regions_names_*.txt : TabSeparated (no header), columns:   Region ID (UInt32)  Region name (String) - Can't contain tabs or line feeds, even escaped ones.   A flat array is used for storing in RAM. For this reason, IDs shouldn't be more than a million.  Dictionaries can be updated without restarting the server. However, the set of available dictionaries is not updated.\nFor updates, the file modification times are checked. If a file has changed, the dictionary is updated.\nThe interval to check for changes is configured in the 'builtin_dictionaries_reload_interval' parameter.\nDictionary updates (other than loading at first use) do not block queries. During updates, queries use the old versions of dictionaries. If an error occurs during an update, the error is written to the server log, and queries continue using the old version of dictionaries.  We recommend periodically updating the dictionaries with the geobase. During an update, generate new files and write them to a separate location. When everything is ready, rename them to the files used by the server.  There are also functions for working with OS identifiers and Yandex.Metrica search engines, but they shouldn't be used.", 
            "title": "Internal dictionaries"
        }, 
        {
            "location": "/index.html#usage_1", 
            "text": "", 
            "title": "Usage"
        }, 
        {
            "location": "/index.html#access-rights", 
            "text": "Users and access rights are set up in the user config. This is usually  users.xml .  Users are recorded in the  users  section. Here is a fragment of the  users.xml  file:  !-- Users and ACL. --  users \n     !-- If the user name is not specified, the  default  user is used. -- \n     default \n         !-- Password could be specified in plaintext or in SHA256 (in hex format).               If you want to specify the password in plain text (not recommended), place it in the  password  element.               Example:  password qwerty /password .               Password can be empty.               If you want to specify SHA256, place it in the  password_sha256_hex  element.                            Example:  password_sha256_hex 65e84be33532fb784c48129675f9eff3a682b27168c0ea744b2cf58ee02337c5 /password_sha256_hex               How to generate decent password:               Execute: PASSWORD=$(base64   /dev/urandom | head -c8); echo  $PASSWORD ; echo -n  $PASSWORD  | sha256sum | tr -d  -               In first line will be password and in second - corresponding SHA256.          -- \n         password /password \n         !-- A list of networks that access is allowed from.              Each list item has one of the following forms:               ip IP address or subnet mask. For example: 198.51.100.0/24 or 2001:DB8::/32.               host  Host name. For example: example01. A DNS query is made for verification, and all addresses obtained are compared with the address of the customer.               host_regexp  Regular expression for host names. For example: ^example\\d\\d-\\d\\d-\\d\\.yandex\\.ru$                  For verification, a DNS PTR query is made for the customer s address and a regular expression is applied to the result.                  Then another DNS query is made for the result of the PTR query, and all received address are compared to the client address.                  We strongly recommend that the regex ends with \\.yandex\\.ru$.              If you are installing ClickHouse yourself, enter:                   networks                           ip ::/0 /ip                   /networks          -- \n         networks   incl= networks   / \n\n         !-- Settings profile for the user. -- \n         profile default /profile \n\n         !-- Quota for the user. -- \n         quota default /quota \n     /default \n\n     !-- For requests from the Yandex.Metrica user interface via the API for data on specific counters. -- \n     web \n         password /password \n         networks   incl= networks   / \n         profile web /profile \n         quota default /quota \n         allow_databases \n         database test /database \n         /allow_databases \n     /web  /users   You can see a declaration from two users:  default  and  web . We added the  web  user separately.  The  default  user is chosen in cases when the username is not passed. The  default  user is also used for distributed query processing, if the configuration of the server or cluster doesn't specify the  user  and  password  (see the section on the  Distributed  engine).  The user that is used for exchanging information between servers combined in a cluster must not have substantial restrictions or quotas \u2013 otherwise, distributed queries will fail.  The password is specified in open format (not recommended) or in SHA-256. The hash isn't salted. In this regard, you should not consider these passwords as providing security against potential malicious attacks. Rather, they are necessary for protection from employees.  A list of networks is specified that access is allowed from. In this example, the list of networks for both users is loaded from a separate file (/etc/metrika.xml) containing the 'networks' substitution. Here is a fragment of it:  yandex \n    ...\n     networks \n         ip ::/64 /ip \n         ip 203.0.113.0/24 /ip \n         ip 2001:DB8::/32 /ip \n        ...\n     /networks  /yandex   We could have defined this list of networks directly in 'users.xml', or in a file in the 'users.d' directory (for more information, see the section \"Configuration files\").  The config includes comments explaining how to open access from everywhere.  For use in production, only specify IP elements (IP addresses and their masks), since using 'host' and 'hoost_regexp' might cause extra latency.  Next the user settings profile is specified (see the section \"Settings profiles\"). You can specify the default profile,  default . The profile can have any name. You can specify the same profile for different users. The most important thing you can write in the settings profile is 'readonly' set to 1, which provides read-only access.  After this, the quota is defined (see the section \"Quotas\"). You can specify the default quota,  default . It is set in the config by default so that it only counts resource usage, but does not restrict it. The quota can have any name. You can specify the same quota for different users \u2013 in this case, resource usage is calculated for each user individually.  In the optional  allow_databases  section, you can also specify a list of databases that the user can access. By default, all databases are available to the user. You can specify the  default  database. In this case, the user will receive access to the database by default.  Access to the  system  database is always allowed (since this database is used for processing queries).  The user can get a list of all databases and tables in them by using  SHOW  queries or system tables, even if access to individual databases isn't allowed.  Database access is not related to the  readonly  setting. You can't grant full access to one database and  readonly  access to another one.", 
            "title": "Access rights"
        }, 
        {
            "location": "/index.html#configuration-files_1", 
            "text": "The main server config file is  config.xml . It resides in the  /etc/clickhouse-server/  directory.  Individual settings can be overridden in the  *.xml and *.conf  files in the  conf.d  and  config.d  directories next to the config file.  The  replace  or  remove  attributes can be specified for the elements of these config files.  If neither is specified, it combines the contents of elements recursively, replacing values of duplicate children.  If  replace  is specified, it replaces the entire element with the specified one.  If  remove  is specified, it deletes the element.  The config can also define \"substitutions\". If an element has the  incl  attribute, the corresponding substitution from the file will be used as the value. By default, the path to the file with substitutions is  /etc/metrika.xml . This can be changed in the  include_from  element in the server config. The substitution values are specified in   /yandex/substitution_name  elements in this file. If a substitution specified in  incl   does not exist, it is recorded in the log. To prevent ClickHouse from logging missing substitutions, specify the   optional=\"true\"  attribute (for example, settings for  macros ).  Substitutions can also be performed from ZooKeeper. To do this, specify the attribute  from_zk = \"/path/to/node\" . The element value is replaced with the contents of the node at  /path/to/node  in ZooKeeper. You can also put an entire XML subtree on the ZooKeeper node and it will be fully inserted into the source element.  The  config.xml  file can specify a separate config with user settings, profiles, and quotas. The relative path to this config is set in the 'users_config' element. By default, it is  users.xml . If  users_config  is omitted, the user settings, profiles, and quotas are specified directly in  config.xml .  In addition,  users_config  may have overrides in files from the  users_config.d  directory (for example,  users.d ) and substitutions.  For each config file, the server also generates  file-preprocessed.xml  files when starting. These files contain all the completed substitutions and overrides, and they are intended for informational use. If ZooKeeper substitutions were used in the config files but ZooKeeper is not available on the server start, the server loads the configuration from the preprocessed file.  The server tracks changes in config files, as well as files and ZooKeeper nodes that were used when performing substitutions and overrides, and reloads the settings for users and clusters on the fly. This means that you can modify the cluster, users, and their settings without restarting the server.", 
            "title": "Configuration files"
        }, 
        {
            "location": "/index.html#quotas", 
            "text": "Quotas allow you to limit resource usage over a period of time, or simply track the use of resources.\nQuotas are set up in the user config. This is usually 'users.xml'.  The system also has a feature for limiting the complexity of a single query. See the section \"Restrictions on query complexity\").  In contrast to query complexity restrictions, quotas:   Place restrictions on a set of queries that can be run over a period of time, instead of limiting a single query.  Account for resources spent on all remote servers for distributed query processing.   Let's look at the section of the 'users.xml' file that defines quotas.  !-- Quotas. --  quotas \n     !-- Quota name. -- \n     default \n         !-- Restrictions for a time period. You can set many intervals with different restrictions. -- \n         interval \n             !-- Length of the interval. -- \n             duration 3600 /duration \n\n             !-- Unlimited. Just collect data for the specified time interval. -- \n             queries 0 /queries \n             errors 0 /errors \n             result_rows 0 /result_rows \n             read_rows 0 /read_rows \n             execution_time 0 /execution_time \n         /interval \n     /default   By default, the quota just tracks resource consumption for each hour, without limiting usage.\nThe resource consumption calculated for each interval is output to the server log after each request.  statbox \n     !-- Restrictions for a time period. You can set many intervals with different restrictions. -- \n     interval \n         !-- Length of the interval. -- \n         duration 3600 /duration \n\n         queries 1000 /queries \n         errors 100 /errors \n         result_rows 1000000000 /result_rows \n         read_rows 100000000000 /read_rows \n         execution_time 900 /execution_time \n     /interval \n\n     interval \n         duration 86400 /duration \n\n         queries 10000 /queries \n         errors 1000 /errors \n         result_rows 5000000000 /result_rows \n         read_rows 500000000000 /read_rows \n         execution_time 7200 /execution_time \n     /interval  /statbox   For the 'statbox' quota, restrictions are set for every hour and for every 24 hours (86,400 seconds). The time interval is counted starting from an implementation-defined fixed moment in time. In other words, the 24-hour interval doesn't necessarily begin at midnight.  When the interval ends, all collected values are cleared. For the next hour, the quota calculation starts over.  Here are the amounts that can be restricted:  queries  \u2013 The total number of requests.  errors  \u2013 The number of queries that threw an exception.  result_rows  \u2013 The total number of rows given as the result.  read_rows  \u2013 The total number of source rows read from tables for running the query, on all remote servers.  execution_time  \u2013 The total query execution time, in seconds (wall time).  If the limit is exceeded for at least one time interval, an exception is thrown with a text about which restriction was exceeded, for which interval, and when the new interval begins (when queries can be sent again).  Quotas can use the \"quota key\" feature in order to report on resources for multiple keys independently. Here is an example of this:  !-- For the global reports designer. --  web_global \n     !-- keyed - The quota_key  key  is passed in the query parameter,              and the quota is tracked separately for each key value.          For example, you can pass a Yandex.Metrica username as the key,              so the quota will be counted separately for each username.          Using keys makes sense only if quota_key is transmitted by the program, not by a user.          You can also write  keyed_by_ip /  so the IP address is used as the quota key.          (But keep in mind that users can change the IPv6 address fairly easily.)      -- \n     keyed   /   The quota is assigned to users in the 'users' section of the config. See the section \"Access rights\".  For distributed query processing, the accumulated amounts are stored on the requestor server. So if the user goes to another server, the quota there will \"start over\".  When the server is restarted, quotas are reset.", 
            "title": "Quotas"
        }, 
        {
            "location": "/index.html#usage-recommendations", 
            "text": "", 
            "title": "Usage recommendations"
        }, 
        {
            "location": "/index.html#cpu", 
            "text": "The SSE 4.2 instruction set must be supported. Modern processors (since 2008) support it.  When choosing a processor, prefer a large number of cores and slightly slower clock rate over fewer cores and a higher clock rate.\nFor example, 16 cores with 2600 MHz is better than 8 cores with 3600 MHz.", 
            "title": "CPU"
        }, 
        {
            "location": "/index.html#hyper-threading", 
            "text": "Don't disable hyper-threading. It helps for some queries, but not for others.", 
            "title": "Hyper-threading"
        }, 
        {
            "location": "/index.html#turbo-boost", 
            "text": "Turbo Boost is highly recommended. It significantly improves performance with a typical load.\nYou can use  turbostat  to view the CPU's actual clock rate under a load.", 
            "title": "Turbo Boost"
        }, 
        {
            "location": "/index.html#cpu-scaling-governor", 
            "text": "Always use the  performance  scaling governor.  The  on-demand  scaling governor works much worse with constantly high demand.  sudo  echo   performance   |  tee /sys/devices/system/cpu/cpu \\* /cpufreq/scaling_governor", 
            "title": "CPU scaling governor"
        }, 
        {
            "location": "/index.html#cpu-limitations", 
            "text": "Processors can overheat. Use  dmesg  to see if the CPU's clock rate was limited due to overheating.\nThe restriction can also be set externally at the datacenter level. You can use  turbostat  to monitor it under a load.", 
            "title": "CPU limitations"
        }, 
        {
            "location": "/index.html#ram", 
            "text": "For small amounts of data (up to \\~200 GB compressed), it is best to use as much memory as the volume of data.\nFor large amounts of data and when processing interactive (online) queries, you should use a reasonable amount of RAM (128 GB or more) so the hot data subset will fit in the cache of pages.\nEven for data volumes of \\~50 TB per server, using 128 GB of RAM significantly improves query performance compared to 64 GB.", 
            "title": "RAM"
        }, 
        {
            "location": "/index.html#swap-file", 
            "text": "Always disable the swap file. The only reason for not doing this is if you are using ClickHouse on your personal laptop.", 
            "title": "Swap file"
        }, 
        {
            "location": "/index.html#huge-pages", 
            "text": "Always disable transparent huge pages. It interferes with memory allocators, which leads to significant performance degradation.  echo   never   |  sudo tee /sys/kernel/mm/transparent_hugepage/enabled  Use  perf top  to watch the time spent in the kernel for memory management.\nPermanent huge pages also do not need to be allocated.", 
            "title": "Huge pages"
        }, 
        {
            "location": "/index.html#storage-subsystem", 
            "text": "If your budget allows you to use SSD, use SSD.\nIf not, use HDD. SATA HDDs 7200 RPM will do.  Give preference to a lot of servers with local hard drives over a smaller number of servers with attached disk shelves.\nBut for storing archives with rare queries, shelves will work.", 
            "title": "Storage subsystem"
        }, 
        {
            "location": "/index.html#raid", 
            "text": "When using HDD, you can combine their RAID-10, RAID-5, RAID-6 or RAID-50.\nFor Linux, software RAID is better (with  mdadm ). We don't recommend using LVM.\nWhen creating RAID-10, select the  far  layout.\nIf your budget allows, choose RAID-10.  If you have more than 4 disks, use RAID-6 (preferred) or RAID-50, instead of RAID-5.\nWhen using RAID-5, RAID-6 or RAID-50, always increase stripe_cache_size, since the default value is usually not the best choice.  echo   4096   |  sudo tee /sys/block/md2/md/stripe_cache_size  Calculate the exact number from the number of devices and the block size, using the formula:  2 * num_devices * chunk_size_in_bytes / 4096 .  A block size of 1025 KB is sufficient for all RAID configurations.\nNever set the block size too small or too large.  You can use RAID-0 on SSD.\nRegardless of RAID use, always use replication for data security.  Enable NCQ with a long queue. For HDD, choose the CFQ scheduler, and for SSD, choose noop. Don't reduce the 'readahead' setting.\nFor HDD, enable the write cache.", 
            "title": "RAID"
        }, 
        {
            "location": "/index.html#file-system", 
            "text": "Ext4 is the most reliable option. Set the mount options  noatime, nobarrier .\nXFS is also suitable, but it hasn't been as thoroughly tested with ClickHouse.\nMost other file systems should also work fine. File systems with delayed allocation work better.", 
            "title": "File system"
        }, 
        {
            "location": "/index.html#linux-kernel", 
            "text": "Don't use an outdated Linux kernel. In 2015, 3.18.19 was new enough.\nConsider using the kernel build from Yandex: https://github.com/yandex/smart  \u2013 it provides at least a 5% performance increase.", 
            "title": "Linux kernel"
        }, 
        {
            "location": "/index.html#network", 
            "text": "If you are using IPv6, increase the size of the route cache.\nThe Linux kernel prior to 3.2 had a multitude of problems with IPv6 implementation.  Use at least a 10 GB network, if possible. 1 Gb will also work, but it will be much worse for patching replicas with tens of terabytes of data, or for processing distributed queries with a large amount of intermediate data.", 
            "title": "Network"
        }, 
        {
            "location": "/index.html#zookeeper", 
            "text": "You are probably already using ZooKeeper for other purposes. You can use the same installation of ZooKeeper, if it isn't already overloaded.  It's best to use a fresh version of ZooKeeper \u2013 3.4.9 or later. The version in stable Linux distributions may be outdated.  With the default settings, ZooKeeper is a time bomb:   The ZooKeeper server won't delete files from old snapshots and logs when using the default configuration (see autopurge), and this is the responsibility of the operator.   This bomb must be defused.  The ZooKeeper (3.5.1) configuration below is used in the Yandex.Metrica production environment as of May 20, 2017:  zoo.cfg:  ## http://hadoop.apache.org/zookeeper/docs/current/zookeeperAdmin.html  ## The number of milliseconds of each tick  tickTime = 2000  ## The number of ticks that the initial  ## synchronization phase can take  initLimit = 30000  ## The number of ticks that can pass between  ## sending a request and getting an acknowledgement  syncLimit = 10  maxClientCnxns = 2000  maxSessionTimeout = 60000000  ## the directory where the snapshot is stored.  dataDir = /opt/zookeeper/ {{  cluster [ name ]   }} /data ## Place the dataLogDir to a separate physical disc for better performance  dataLogDir = /opt/zookeeper/ {{  cluster [ name ]   }} /logs\n\nautopurge.snapRetainCount = 10 \nautopurge.purgeInterval = 1  ## To avoid seeks ZooKeeper allocates space in the transaction log file in  ## blocks of preAllocSize kilobytes. The default block size is 64M. One reason  ## for changing the size of the blocks is to reduce the block size if snapshots  ## are taken more often. (Also, see snapCount).  preAllocSize = 131072  ## Clients can submit requests faster than ZooKeeper can process them,  ## especially if there are a lot of clients. To prevent ZooKeeper from running  ## out of memory due to queued requests, ZooKeeper will throttle clients so that  ## there is no more than globalOutstandingLimit outstanding requests in the  ## system. The default limit is 1,000.ZooKeeper logs transactions to a  ## transaction log. After snapCount transactions are written to a log file a  ## snapshot is started and a new transaction log file is started. The default  ## snapCount is 10,000.  snapCount = 3000000  ## If this option is defined, requests will be will logged to a trace file named  ## traceFile.year.month.day.  ##traceFile=  ## Leader accepts client connections. Default value is  yes . The leader machine  ## coordinates updates. For higher update throughput at thes slight expense of  ## read throughput the leader can be configured to not accept clients and focus  ## on coordination.  leaderServes = yes standaloneEnabled = false  dynamicConfigFile = /etc/zookeeper- {{  cluster [ name ]   }} /conf/zoo.cfg.dynamic  Java version:  Java(TM) SE Runtime Environment (build 1.8.0_25-b17)\nJava HotSpot(TM) 64-Bit Server VM (build 25.25-b02, mixed mode)  JVM parameters:  NAME = zookeeper- {{  cluster [ name ]   }}  ZOOCFGDIR = /etc/ $NAME /conf ## TODO this is really ugly  ## How to find out, which jars are needed?  ## seems, that log4j requires the log4j.properties file to be in the classpath  CLASSPATH = $ZOOCFGDIR :/usr/build/classes:/usr/build/lib/*.jar:/usr/share/zookeeper/zookeeper-3.5.1-metrika.jar:/usr/share/zookeeper/slf4j-log4j12-1.7.5.jar:/usr/share/zookeeper/slf4j-api-1.7.5.jar:/usr/share/zookeeper/servlet-api-2.5-20081211.jar:/usr/share/zookeeper/netty-3.7.0.Final.jar:/usr/share/zookeeper/log4j-1.2.16.jar:/usr/share/zookeeper/jline-2.11.jar:/usr/share/zookeeper/jetty-util-6.1.26.jar:/usr/share/zookeeper/jetty-6.1.26.jar:/usr/share/zookeeper/javacc.jar:/usr/share/zookeeper/jackson-mapper-asl-1.9.11.jar:/usr/share/zookeeper/jackson-core-asl-1.9.11.jar:/usr/share/zookeeper/commons-cli-1.2.jar:/usr/src/java/lib/*.jar:/usr/etc/zookeeper  ZOOCFG = $ZOOCFGDIR /zoo.cfg  ZOO_LOG_DIR = /var/log/ $NAME  USER = zookeeper GROUP = zookeeper PIDDIR = /var/run/ $NAME  PIDFILE = $PIDDIR / $NAME .pid SCRIPTNAME = /etc/init.d/ $NAME  JAVA = /usr/bin/java ZOOMAIN = org.apache.zookeeper.server.quorum.QuorumPeerMain  ZOO_LOG4J_PROP = INFO,ROLLINGFILE  JMXLOCALONLY = false  JAVA_OPTS = -Xms{{ cluster.get( xms , 128M ) }} \\      -Xmx{{ cluster.get( xmx , 1G ) }} \\      -Xloggc:/var/log/ $NAME /zookeeper-gc.log \\      -XX:+UseGCLogFileRotation \\      -XX:NumberOfGCLogFiles=16 \\      -XX:GCLogFileSize=16M \\      -verbose:gc \\      -XX:+PrintGCTimeStamps \\      -XX:+PrintGCDateStamps \\      -XX:+PrintGCDetails      -XX:+PrintTenuringDistribution \\      -XX:+PrintGCApplicationStoppedTime \\      -XX:+PrintGCApplicationConcurrentTime \\      -XX:+PrintSafepointStatistics \\      -XX:+UseParNewGC \\      -XX:+UseConcMarkSweepGC \\  -XX:+CMSParallelRemarkEnabled   Salt init:  description  zookeeper-{{ cluster[ name ] }} centralized coordination service \n\nstart on runlevel [2345]\nstop on runlevel [!2345]\n\nrespawn\n\nlimit nofile 8192 8192\n\npre-start script\n    [ -r  /etc/zookeeper-{{ cluster[ name ] }}/conf/environment  ] || exit 0\n    . /etc/zookeeper-{{ cluster[ name ] }}/conf/environment\n    [ -d $ZOO_LOG_DIR ] || mkdir -p $ZOO_LOG_DIR\n    chown $USER:$GROUP $ZOO_LOG_DIR\nend script\n\nscript\n    . /etc/zookeeper-{{ cluster[ name ] }}/conf/environment\n    [ -r /etc/default/zookeeper ]   . /etc/default/zookeeper\n    if [ -z  $JMXDISABLE  ]; then\n        JAVA_OPTS= $JAVA_OPTS -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.local.only=$JMXLOCALONLY \n    fi\n    exec start-stop-daemon --start -c $USER --exec $JAVA --name zookeeper-{{ cluster[ name ] }} \\\n        -- -cp $CLASSPATH $JAVA_OPTS -Dzookeeper.log.dir=${ZOO_LOG_DIR} \\\n        -Dzookeeper.root.logger=${ZOO_LOG4J_PROP} $ZOOMAIN $ZOOCFG\nend script", 
            "title": "ZooKeeper"
        }, 
        {
            "location": "/index.html#server-configuration-parameters", 
            "text": "This section contains descriptions of server settings that cannot be changed at the session or query level.  These settings are stored in the  config.xml  file on the ClickHouse server.  Other settings are described in the \" Settings \" section.  Before studying the settings, read the  Configuration files  section and note the use of substitutions (the  incl  and  optional  attributes).", 
            "title": "Server configuration parameters"
        }, 
        {
            "location": "/index.html#server-settings", 
            "text": "", 
            "title": "Server settings"
        }, 
        {
            "location": "/index.html#builtin_dictionaries_reload_interval", 
            "text": "The interval in seconds before reloading built-in dictionaries.  ClickHouse reloads built-in dictionaries every x seconds. This makes it possible to edit dictionaries \"on the fly\" without restarting the server.  Default value: 3600.  Example  builtin_dictionaries_reload_interval 3600 /builtin_dictionaries_reload_interval", 
            "title": "builtin_dictionaries_reload_interval"
        }, 
        {
            "location": "/index.html#compression", 
            "text": "Data compression settings.  \n\nDon't use it if you have just started using ClickHouse.  The configuration looks like this:  compression \n     case \n       parameters/ \n     /case \n    ... /compression   You can configure multiple sections  case .  Block field  case :   min_part_size  \u2013 The minimum size of a table part.  min_part_size_ratio  \u2013 The ratio of the minimum size of a table part to the full size of the table.  method  \u2013 Compression method. Acceptable values \u200b:  lz4  or  zstd (experimental).   ClickHouse checks  min_part_size   and  min_part_size_ratio   and processes the  case  blocks that match these conditions. If none of the  case  matches, ClickHouse applies the  lz4  compression algorithm.  Example  compression   incl= clickhouse_compression \n     case \n         min_part_size 10000000000 /min_part_size \n         min_part_size_ratio 0.01 /min_part_size_ratio \n         method zstd /method \n     /case  /compression", 
            "title": "compression"
        }, 
        {
            "location": "/index.html#default_database", 
            "text": "The default database.  To get a list of databases, use the  SHOW DATABASES .  Example  default_database default /default_database", 
            "title": "default_database"
        }, 
        {
            "location": "/index.html#default_profile", 
            "text": "Default settings profile.  Settings profiles are located in the file specified in the parameter  user_config .  Example  default_profile default /default_profile", 
            "title": "default_profile"
        }, 
        {
            "location": "/index.html#dictionaries_config", 
            "text": "The path to the config file for external dictionaries.  Path:   Specify the absolute path or the path relative to the server config file.  The path can contain wildcards * and ?.   See also \" External dictionaries \".  Example  dictionaries_config *_dictionary.xml /dictionaries_config", 
            "title": "dictionaries_config"
        }, 
        {
            "location": "/index.html#dictionaries_lazy_load", 
            "text": "Lazy loading of dictionaries.  If  true , then each dictionary is created on first use. If dictionary creation failed, the function that was using the dictionary throws an exception.  If  false , all dictionaries are created when the server starts, and if there is an error, the server shuts down.  The default is  true .  Example  dictionaries_lazy_load true /dictionaries_lazy_load", 
            "title": "dictionaries_lazy_load"
        }, 
        {
            "location": "/index.html#format_schema_path", 
            "text": "The path to the directory with the schemes for the input data, such as schemas for the  CapnProto  format.  Example     !-- Directory containing schema files for various input formats. -- \n   format_schema_path format_schemas/ /format_schema_path", 
            "title": "format_schema_path"
        }, 
        {
            "location": "/index.html#graphite", 
            "text": "Sending data to  Graphite .  Settings:   host \u2013 The Graphite server.  port \u2013 The port on the Graphite server.  interval \u2013 The interval for sending, in seconds.  timeout \u2013 The timeout for sending data, in seconds.  root_path \u2013 Prefix for keys.  metrics \u2013 Sending data from a :ref: system_tables-system.metrics  table.  events \u2013 Sending data from a :ref: system_tables-system.events  table.  asynchronous_metrics \u2013 Sending data from a :ref: system_tables-system.asynchronous_metrics  table.   You can configure multiple  graphite  clauses. For instance, you can use this for sending different data at different intervals.  Example  graphite \n     host localhost /host \n     port 42000 /port \n     timeout 0.1 /timeout \n     interval 60 /interval \n     root_path one_min /root_path \n     metrics true /metrics \n     events true /events \n     asynchronous_metrics true /asynchronous_metrics  /graphite", 
            "title": "graphite"
        }, 
        {
            "location": "/index.html#graphite_rollup", 
            "text": "Settings for thinning data for Graphite.  For more information, see  GraphiteMergeTree .  Example  graphite_rollup_example \n     default \n         function max /function \n         retention \n             age 0 /age \n             precision 60 /precision \n         /retention \n         retention \n             age 3600 /age \n             precision 300 /precision \n         /retention \n         retention \n             age 86400 /age \n             precision 3600 /precision \n         /retention \n     /default  /graphite_rollup_example", 
            "title": "graphite_rollup"
        }, 
        {
            "location": "/index.html#http_porthttps_port", 
            "text": "The port for connecting to the server over HTTP(s).  If  https_port  is specified,  openSSL  must be configured.  If  http_port  is specified, the openSSL configuration is ignored even if it is set.  Example  https 0000 /https", 
            "title": "http_port/https_port"
        }, 
        {
            "location": "/index.html#http_server_default_response", 
            "text": "The page that is shown by default when you access the ClickHouse HTTP(s) server.  Example  Opens  https://tabix.io/  when accessing  http://localhost: http_port .  http_server_default_response \n   ![CDATA[ html ng-app= SMI2 head base href= http://ui.tabix.io/ /head body div ui-view=  class= content-ui /div script src= http://loader.tabix.io/master.js /script /body /html ]]  /http_server_default_response", 
            "title": "http_server_default_response"
        }, 
        {
            "location": "/index.html#include_from", 
            "text": "The path to the file with substitutions.  For more information, see the section \" Configuration files \".  Example  include_from /etc/metrica.xml /include_from", 
            "title": "include_from"
        }, 
        {
            "location": "/index.html#interserver_http_port", 
            "text": "Port for exchanging data between ClickHouse servers.  Example  interserver_http_port 9009 /interserver_http_port", 
            "title": "interserver_http_port"
        }, 
        {
            "location": "/index.html#interserver_http_host", 
            "text": "The host name that can be used by other servers to access this server.  If omitted, it is defined in the same way as the  hostname-f  command.  Useful for breaking away from a specific network interface.  Example  interserver_http_host example.yandex.ru /interserver_http_host", 
            "title": "interserver_http_host"
        }, 
        {
            "location": "/index.html#keep_alive_timeout", 
            "text": "The number of milliseconds that ClickHouse waits for incoming requests before closing the connection.  Example  keep_alive_timeout 3 /keep_alive_timeout", 
            "title": "keep_alive_timeout"
        }, 
        {
            "location": "/index.html#listen_host", 
            "text": "Restriction on hosts that requests can come from. If you want the server to answer all of them, specify  :: .  Examples:  listen_host ::1 /listen_host  listen_host 127.0.0.1 /listen_host", 
            "title": "listen_host"
        }, 
        {
            "location": "/index.html#logger", 
            "text": "Logging settings.  Keys:   level \u2013 Logging level. Acceptable values:  trace ,  debug ,  information ,  warning ,  error .  log \u2013 The log file. Contains all the entries according to  level .  errorlog \u2013 Error log file.  size \u2013 Size of the file. Applies to  log and errorlog . Once the file reaches  size , ClickHouse archives and renames it, and creates a new log file in its place.  count \u2013 The number of archived log files that ClickHouse stores.   Example  logger \n     level trace /level \n     log /var/log/clickhouse-server/clickhouse-server.log /log \n     errorlog /var/log/clickhouse-server/clickhouse-server.err.log /errorlog \n     size 1000M /size \n     count 10 /count  /logger", 
            "title": "logger"
        }, 
        {
            "location": "/index.html#macros", 
            "text": "Parameter substitutions for replicated tables.  Can be omitted if replicated tables are not used.  For more information, see the section \" Creating replicated tables \".  Example  macros   incl= macros   optional= true   /", 
            "title": "macros"
        }, 
        {
            "location": "/index.html#mark_cache_size", 
            "text": "Approximate size (in bytes) of the cache of \"marks\" used by  MergeTree  engines.  The cache is shared for the server and memory is allocated as needed. The cache size must be at least 5368709120.  Example  mark_cache_size 5368709120 /mark_cache_size", 
            "title": "mark_cache_size"
        }, 
        {
            "location": "/index.html#max_concurrent_queries", 
            "text": "The maximum number of simultaneously processed requests.  Example  max_concurrent_queries 100 /max_concurrent_queries", 
            "title": "max_concurrent_queries"
        }, 
        {
            "location": "/index.html#max_connections", 
            "text": "The maximum number of inbound connections.  Example  max_connections 4096 /max_connections", 
            "title": "max_connections"
        }, 
        {
            "location": "/index.html#max_open_files", 
            "text": "The maximum number of open files.  By default:  maximum .  We recommend using this option in Mac OS X, since the  getrlimit()  function returns an incorrect value.  Example  max_open_files 262144 /max_open_files", 
            "title": "max_open_files"
        }, 
        {
            "location": "/index.html#max_table_size_to_drop", 
            "text": "Restriction on deleting tables.  If the size of a  MergeTree  type table exceeds  max_table_size_to_drop  (in bytes), you can't delete it using a DROP query.  If you still need to delete the table without restarting the ClickHouse server, create the  clickhouse-path /flags/force_drop_table  file and run the DROP query.  Default value: 50 GB.  The value 0 means that you can delete all tables without any restrictions.  Example  max_table_size_to_drop 0 /max_table_size_to_drop", 
            "title": "max_table_size_to_drop"
        }, 
        {
            "location": "/index.html#merge_tree", 
            "text": "Fine tuning for tables in the   MergeTree  family.  For more information, see the MergeTreeSettings.h header file.  Example  merge_tree \n     max_suspicious_broken_parts 5 /max_suspicious_broken_parts  /merge_tree", 
            "title": "merge_tree"
        }, 
        {
            "location": "/index.html#openssl", 
            "text": "SSL client/server configuration.  Support for SSL is provided by the  libpoco  library. The interface is described in the file  SSLManager.h  Keys for server/client settings:   privateKeyFile \u2013 The path to the file with the secret key of the PEM certificate. The file may contain a key and certificate at the same time.  certificateFile \u2013 The path to the client/server certificate file in PEM format. You can omit it if  privateKeyFile  contains the certificate.  caConfig \u2013 The path to the file or directory that contains trusted root certificates.  verificationMode \u2013 The method for checking the node's certificates. Details are in the description of the  Context  class. Possible values:  none ,  relaxed ,  strict ,  once .  verificationDepth \u2013 The maximum length of the verification chain. Verification will fail if the certificate chain length exceeds the set value.  loadDefaultCAFile \u2013 Indicates that built-in CA certificates for OpenSSL will be used. Acceptable values:  true ,  false .  |  cipherList \u2013 Supported OpenSSL encryptions. For example:  ALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH .  cacheSessions \u2013 Enables or disables caching sessions. Must be used in combination with  sessionIdContext . Acceptable values:  true ,  false .  sessionIdContext \u2013 A unique set of random characters that the server appends to each generated identifier. The length of the string must not exceed  SSL_MAX_SSL_SESSION_ID_LENGTH . This parameter is always recommended, since it helps avoid problems both if the server caches the session and if the client requested caching. Default value:  ${application.name} .  sessionCacheSize \u2013 The maximum number of sessions that the server caches. Default value: 1024*20. 0 \u2013 Unlimited sessions.  sessionTimeout \u2013 Time for caching the session on the server.  extendedVerification \u2013 Automatically extended verification of certificates after the session ends. Acceptable values:  true ,  false .  requireTLSv1 \u2013 Require a TLSv1 connection. Acceptable values:  true ,  false .  requireTLSv1_1 \u2013 Require a TLSv1.1 connection. Acceptable values:  true ,  false .  requireTLSv1 \u2013 Require a TLSv1.2 connection. Acceptable values:  true ,  false .  fips \u2013 Activates OpenSSL FIPS mode. Supported if the library's OpenSSL version supports FIPS.  privateKeyPassphraseHandler \u2013 Class (PrivateKeyPassphraseHandler subclass) that requests the passphrase for accessing the private key. For example:  privateKeyPassphraseHandler ,  name KeyFileHandler /name ,  options password test /password /options ,  /privateKeyPassphraseHandler .  invalidCertificateHandler \u2013 Class (subclass of CertificateHandler) for verifying invalid certificates. For example:  invalidCertificateHandler   name ConsoleCertificateHandler /name    /invalidCertificateHandler  .  disableProtocols \u2013 Protocols that are not allowed to use.  preferServerCiphers \u2013 Preferred server ciphers on the client.   Example of settings:  openSSL \n     server \n         !-- openssl req -subj  /CN=localhost  -new -newkey rsa:2048 -days 365 -nodes -x509 -keyout /etc/clickhouse-server/server.key -out /etc/clickhouse-server/server.crt -- \n         certificateFile /etc/clickhouse-server/server.crt /certificateFile \n         privateKeyFile /etc/clickhouse-server/server.key /privateKeyFile \n         !-- openssl dhparam -out /etc/clickhouse-server/dhparam.pem 4096 -- \n         dhParamsFile /etc/clickhouse-server/dhparam.pem /dhParamsFile \n         verificationMode none /verificationMode \n         loadDefaultCAFile true /loadDefaultCAFile \n         cacheSessions true /cacheSessions \n         disableProtocols sslv2,sslv3 /disableProtocols \n         preferServerCiphers true /preferServerCiphers \n     /server \n     client \n         loadDefaultCAFile true /loadDefaultCAFile \n         cacheSessions true /cacheSessions \n         disableProtocols sslv2,sslv3 /disableProtocols \n         preferServerCiphers true /preferServerCiphers \n         !-- Use for self-signed:  verificationMode none /verificationMode  -- \n         invalidCertificateHandler \n             !-- Use for self-signed:  name AcceptCertificateHandler /name  -- \n             name RejectCertificateHandler /name \n         /invalidCertificateHandler \n     /client  /openSSL", 
            "title": "openSSL"
        }, 
        {
            "location": "/index.html#part_log", 
            "text": "Logging events that are associated with  MergeTree  data. For instance, adding or merging data. You can use the log to simulate merge algorithms and compare their characteristics. You can visualize the merge process.  Queries are logged in the ClickHouse table, not in a separate file.  Columns in the log:   event_time \u2013 Date of the event.  duration_ms \u2013 Duration of the event.  event_type \u2013 Type of event. 1 \u2013 new data part; 2 \u2013 merge result; 3 \u2013 data part downloaded from replica; 4 \u2013 data part deleted.  database_name \u2013 The name of the database.  table_name \u2013 Name of the table.  part_name \u2013 Name of the data part.  size_in_bytes \u2013 Size of the data part in bytes.  merged_from \u2013 An array of names of data parts that make up the merge (also used when downloading a merged part).  merge_time_ms \u2013 Time spent on the merge.   Use the following parameters to configure logging:   database \u2013 Name of the database.  table \u2013 Name of the table.  partition_by \u2013 Sets a  custom partitioning key .  flush_interval_milliseconds \u2013 Interval for flushing data from memory to the disk.   Example  part_log \n     database system /database \n     table part_log /table \n     partition_by toMonday(event_date) /partition_by \n     flush_interval_milliseconds 7500 /flush_interval_milliseconds  /part_log", 
            "title": "part_log"
        }, 
        {
            "location": "/index.html#path_1", 
            "text": "The path to the directory containing data.  \n\nThe end slash is mandatory.  Example  path /var/lib/clickhouse/ /path", 
            "title": "path"
        }, 
        {
            "location": "/index.html#query_log", 
            "text": "Setting for logging queries received with the  log_queries=1  setting.  Queries are logged in the ClickHouse table, not in a separate file.  Use the following parameters to configure logging:   database \u2013 Name of the database.  table \u2013 Name of the table.  partition_by \u2013 Sets a  custom partitioning key .  flush_interval_milliseconds \u2013 Interval for flushing data from memory to the disk.   If the table doesn't exist, ClickHouse will create it. If the structure of the query log changed when the ClickHouse server was updated, the table with the old structure is renamed, and a new table is created automatically.  Example  query_log \n     database system /database \n     table query_log /table \n     partition_by toMonday(event_date) /partition_by \n     flush_interval_milliseconds 7500 /flush_interval_milliseconds  /query_log", 
            "title": "query_log"
        }, 
        {
            "location": "/index.html#remote_servers", 
            "text": "Configuration of clusters used by the Distributed table engine.  For more information, see the section \" Table engines/Distributed \".  Example  remote_servers   incl= clickhouse_remote_servers   /   For the value of the  incl  attribute, see the section \" Configuration files \".", 
            "title": "remote_servers"
        }, 
        {
            "location": "/index.html#timezone", 
            "text": "The server's time zone.  Specified as an IANA identifier for the UTC time zone or geographic location (for example, Africa/Abidjan).  The time zone is necessary for conversions between String and DateTime formats when DateTime fields are output to text format (printed on the screen or in a file), and when getting DateTime from a string. In addition, the time zone is used in functions that work with the time and date if they didn't receive the time zone in the input parameters.  Example  timezone Europe/Moscow /timezone", 
            "title": "timezone"
        }, 
        {
            "location": "/index.html#tcp_port", 
            "text": "Port for communicating with clients over the TCP protocol.  Example  tcp_port 9000 /tcp_port", 
            "title": "tcp_port"
        }, 
        {
            "location": "/index.html#tmp_path", 
            "text": "Path to temporary data for processing large queries.  \n\nThe end slash is mandatory.  Example  tmp_path /var/lib/clickhouse/tmp/ /tmp_path", 
            "title": "tmp_path"
        }, 
        {
            "location": "/index.html#uncompressed_cache_size", 
            "text": "Cache size (in bytes) for uncompressed data used by table engines from the  MergeTree  family.  There is one shared cache for the server. Memory is allocated on demand. The cache is used if the option  use_uncompressed_cache  is enabled.  The uncompressed cache is advantageous for very short queries in individual cases.  Example  uncompressed_cache_size 8589934592 /uncompressed_cache_size", 
            "title": "uncompressed_cache_size"
        }, 
        {
            "location": "/index.html#users_config", 
            "text": "Path to the file that contains:   User configurations.  Access rights.  Settings profiles.  Quota settings.   Example  users_config users.xml /users_config", 
            "title": "users_config"
        }, 
        {
            "location": "/index.html#zookeeper_1", 
            "text": "Configuration of ZooKeeper servers.  ClickHouse uses ZooKeeper for storing replica metadata when using replicated tables.  This parameter can be omitted if replicated tables are not used.  For more information, see the section \" Replication \".  Example  zookeeper   incl= zookeeper-servers   optional= true   /", 
            "title": "zookeeper"
        }, 
        {
            "location": "/index.html#settings", 
            "text": "There are multiple ways to make all the settings described below.\nSettings are configured in layers, so each subsequent layer redefines the previous settings.  Ways to configure settings, in order of priority:   Settings in the server config file.   Settings from user profiles.   Session settings.   Send  SET setting=value  from the ClickHouse console client in interactive mode.\nSimilarly, you can use ClickHouse sessions in the HTTP protocol. To do this, you need to specify the  session_id  HTTP parameter.   For a query.  When starting the ClickHouse console client in non-interactive mode, set the startup parameter  --setting=value .  When using the HTTP API, pass CGI parameters ( URL?setting_1=value setting_2=value... ).   Settings that can only be made in the server config file are not covered in this section.", 
            "title": "Settings"
        }, 
        {
            "location": "/index.html#restrictions-on-query-complexity", 
            "text": "Restrictions on query complexity are part of the settings.\nThey are used in order to provide safer execution from the user interface.\nAlmost all the restrictions only apply to SELECTs.For distributed query processing, restrictions are applied on each server separately.  Restrictions on the \"maximum amount of something\" can take the value 0, which means \"unrestricted\".\nMost restrictions also have an 'overflow_mode' setting, meaning what to do when the limit is exceeded.\nIt can take one of two values:  throw  or  break . Restrictions on aggregation (group_by_overflow_mode) also have the value  any .  throw  \u2013 Throw an exception (default).  break  \u2013 Stop executing the query and return the partial result, as if the source data ran out.  any (only for group_by_overflow_mode)  \u2013 Continuing aggregation for the keys that got into the set, but don't add new keys to the set.", 
            "title": "Restrictions on query complexity"
        }, 
        {
            "location": "/index.html#readonly", 
            "text": "With a value of 0, you can execute any queries.\nWith a value of 1, you can only execute read requests (such as SELECT and SHOW). Requests for writing and changing settings (INSERT, SET) are prohibited.\nWith a value of 2, you can process read queries (SELECT, SHOW) and change settings (SET).  After enabling readonly mode, you can't disable it in the current session.  When using the GET method in the HTTP interface, 'readonly = 1' is set automatically. In other words, for queries that modify data, you can only use the POST method. You can send the query itself either in the POST body, or in the URL parameter.", 
            "title": "readonly"
        }, 
        {
            "location": "/index.html#max_memory_usage", 
            "text": "The maximum amount of RAM to use for running a query on a single server.  In the default configuration file, the maximum is 10 GB.  The setting doesn't consider the volume of available memory or the total volume of memory on the machine.\nThe restriction applies to a single query within a single server.\nYou can use  SHOW PROCESSLIST  to see the current memory consumption for each query.\nIn addition, the peak memory consumption is tracked for each query and written to the log.  Memory usage is not monitored for the states of certain aggregate functions.  Memory usage is not fully tracked for states of the aggregate functions  min ,  max ,  any ,  anyLast ,  argMin ,  argMax  from  String  and  Array  arguments.  Memory consumption is also restricted by the parameters  max_memory_usage_for_user  and  max_memory_usage_for_all_queries .", 
            "title": "max_memory_usage"
        }, 
        {
            "location": "/index.html#max_memory_usage_for_user", 
            "text": "The maximum amount of RAM to use for running a user's queries on a single server.  Default values are defined in  Settings.h . By default, the amount is not restricted ( max_memory_usage_for_user = 0 ).  See also the description of  max_memory_usage .", 
            "title": "max_memory_usage_for_user"
        }, 
        {
            "location": "/index.html#max_memory_usage_for_all_queries", 
            "text": "The maximum amount of RAM to use for running all queries on a single server.  Default values are defined in  Settings.h . By default, the amount is not restricted ( max_memory_usage_for_all_queries = 0 ).  See also the description of  max_memory_usage .", 
            "title": "max_memory_usage_for_all_queries"
        }, 
        {
            "location": "/index.html#max_rows_to_read", 
            "text": "The following restrictions can be checked on each block (instead of on each row). That is, the restrictions can be broken a little.\nWhen running a query in multiple threads, the following restrictions apply to each thread separately.  Maximum number of rows that can be read from a table when running a query.", 
            "title": "max_rows_to_read"
        }, 
        {
            "location": "/index.html#max_bytes_to_read", 
            "text": "Maximum number of bytes (uncompressed data) that can be read from a table when running a query.", 
            "title": "max_bytes_to_read"
        }, 
        {
            "location": "/index.html#read_overflow_mode", 
            "text": "What to do when the volume of data read exceeds one of the limits: 'throw' or 'break'. By default, throw.", 
            "title": "read_overflow_mode"
        }, 
        {
            "location": "/index.html#max_rows_to_group_by", 
            "text": "Maximum number of unique keys received from aggregation. This setting lets you limit memory consumption when aggregating.", 
            "title": "max_rows_to_group_by"
        }, 
        {
            "location": "/index.html#group_by_overflow_mode", 
            "text": "What to do when the number of unique keys for aggregation exceeds the limit: 'throw', 'break', or 'any'. By default, throw.\nUsing the 'any' value lets you run an approximation of GROUP BY. The quality of this approximation depends on the statistical nature of the data.", 
            "title": "group_by_overflow_mode"
        }, 
        {
            "location": "/index.html#max_rows_to_sort", 
            "text": "Maximum number of rows before sorting. This allows you to limit memory consumption when sorting.", 
            "title": "max_rows_to_sort"
        }, 
        {
            "location": "/index.html#max_bytes_to_sort", 
            "text": "Maximum number of bytes before sorting.", 
            "title": "max_bytes_to_sort"
        }, 
        {
            "location": "/index.html#sort_overflow_mode", 
            "text": "What to do if the number of rows received before sorting exceeds one of the limits: 'throw' or 'break'. By default, throw.", 
            "title": "sort_overflow_mode"
        }, 
        {
            "location": "/index.html#max_result_rows", 
            "text": "Limit on the number of rows in the result. Also checked for subqueries, and on remote servers when running parts of a distributed query.", 
            "title": "max_result_rows"
        }, 
        {
            "location": "/index.html#max_result_bytes", 
            "text": "Limit on the number of bytes in the result. The same as the previous setting.", 
            "title": "max_result_bytes"
        }, 
        {
            "location": "/index.html#result_overflow_mode", 
            "text": "What to do if the volume of the result exceeds one of the limits: 'throw' or 'break'. By default, throw.\nUsing 'break' is similar to using LIMIT.", 
            "title": "result_overflow_mode"
        }, 
        {
            "location": "/index.html#max_execution_time", 
            "text": "Maximum query execution time in seconds.\nAt this time, it is not checked for one of the sorting stages, or when merging and finalizing aggregate functions.", 
            "title": "max_execution_time"
        }, 
        {
            "location": "/index.html#timeout_overflow_mode", 
            "text": "What to do if the query is run longer than 'max_execution_time': 'throw' or 'break'. By default, throw.", 
            "title": "timeout_overflow_mode"
        }, 
        {
            "location": "/index.html#min_execution_speed", 
            "text": "Minimal execution speed in rows per second. Checked on every data block when 'timeout_before_checking_execution_speed' expires. If the execution speed is lower, an exception is thrown.", 
            "title": "min_execution_speed"
        }, 
        {
            "location": "/index.html#timeout_before_checking_execution_speed", 
            "text": "Checks that execution speed is not too slow (no less than 'min_execution_speed'), after the specified time in seconds has expired.", 
            "title": "timeout_before_checking_execution_speed"
        }, 
        {
            "location": "/index.html#max_columns_to_read", 
            "text": "Maximum number of columns that can be read from a table in a single query. If a query requires reading a greater number of columns, it throws an exception.", 
            "title": "max_columns_to_read"
        }, 
        {
            "location": "/index.html#max_temporary_columns", 
            "text": "Maximum number of temporary columns that must be kept in RAM at the same time when running a query, including constant columns. If there are more temporary columns than this, it throws an exception.", 
            "title": "max_temporary_columns"
        }, 
        {
            "location": "/index.html#max_temporary_non_const_columns", 
            "text": "The same thing as 'max_temporary_columns', but without counting constant columns.\nNote that constant columns are formed fairly often when running a query, but they require approximately zero computing resources.", 
            "title": "max_temporary_non_const_columns"
        }, 
        {
            "location": "/index.html#max_subquery_depth", 
            "text": "Maximum nesting depth of subqueries. If subqueries are deeper, an exception is thrown. By default, 100.", 
            "title": "max_subquery_depth"
        }, 
        {
            "location": "/index.html#max_pipeline_depth", 
            "text": "Maximum pipeline depth. Corresponds to the number of transformations that each data block goes through during query processing. Counted within the limits of a single server. If the pipeline depth is greater, an exception is thrown. By default, 1000.", 
            "title": "max_pipeline_depth"
        }, 
        {
            "location": "/index.html#max_ast_depth", 
            "text": "Maximum nesting depth of a query syntactic tree. If exceeded, an exception is thrown.\nAt this time, it isn't checked during parsing, but only after parsing the query. That is, a syntactic tree that is too deep can be created during parsing, but the query will fail. By default, 1000.", 
            "title": "max_ast_depth"
        }, 
        {
            "location": "/index.html#max_ast_elements", 
            "text": "Maximum number of elements in a query syntactic tree. If exceeded, an exception is thrown.\nIn the same way as the previous setting, it is checked only after parsing the query. By default, 10,000.", 
            "title": "max_ast_elements"
        }, 
        {
            "location": "/index.html#max_rows_in_set", 
            "text": "Maximum number of rows for a data set in the IN clause created from a subquery.", 
            "title": "max_rows_in_set"
        }, 
        {
            "location": "/index.html#max_bytes_in_set", 
            "text": "Maximum number of bytes (uncompressed data) used by a set in the IN clause created from a subquery.", 
            "title": "max_bytes_in_set"
        }, 
        {
            "location": "/index.html#set_overflow_mode", 
            "text": "What to do when the amount of data exceeds one of the limits: 'throw' or 'break'. By default, throw.", 
            "title": "set_overflow_mode"
        }, 
        {
            "location": "/index.html#max_rows_in_distinct", 
            "text": "Maximum number of different rows when using DISTINCT.", 
            "title": "max_rows_in_distinct"
        }, 
        {
            "location": "/index.html#max_bytes_in_distinct", 
            "text": "Maximum number of bytes used by a hash table when using DISTINCT.", 
            "title": "max_bytes_in_distinct"
        }, 
        {
            "location": "/index.html#distinct_overflow_mode", 
            "text": "What to do when the amount of data exceeds one of the limits: 'throw' or 'break'. By default, throw.", 
            "title": "distinct_overflow_mode"
        }, 
        {
            "location": "/index.html#max_rows_to_transfer", 
            "text": "Maximum number of rows that can be passed to a remote server or saved in a temporary table when using GLOBAL IN.", 
            "title": "max_rows_to_transfer"
        }, 
        {
            "location": "/index.html#max_bytes_to_transfer", 
            "text": "Maximum number of bytes (uncompressed data) that can be passed to a remote server or saved in a temporary table when using GLOBAL IN.", 
            "title": "max_bytes_to_transfer"
        }, 
        {
            "location": "/index.html#transfer_overflow_mode", 
            "text": "What to do when the amount of data exceeds one of the limits: 'throw' or 'break'. By default, throw.", 
            "title": "transfer_overflow_mode"
        }, 
        {
            "location": "/index.html#settings_1", 
            "text": "", 
            "title": "Settings"
        }, 
        {
            "location": "/index.html#distributed_product_mode", 
            "text": "Changes the behavior of  distributed subqueries , i.e. in cases when the query contains the product of distributed tables.  ClickHouse applies the configuration if the subqueries on any level have a distributed table that exists on the local server and has more than one shard.  Restrictions:   Only applied for IN and JOIN subqueries.  Used only if a distributed table is used in the FROM clause.  Not used for a table-valued   remote  function.   The possible values \u200b\u200bare:", 
            "title": "distributed_product_mode"
        }, 
        {
            "location": "/index.html#fallback_to_stale_replicas_for_distributed_queries", 
            "text": "Forces a query to an out-of-date replica if updated data is not available. See \" Replication \".  ClickHouse selects the most relevant from the outdated replicas of the table.  Used when performing  SELECT   from a distributed table that points to replicated tables.  By default, 1 (enabled).", 
            "title": "fallback_to_stale_replicas_for_distributed_queries"
        }, 
        {
            "location": "/index.html#force_index_by_date", 
            "text": "Disables query execution if the index can't be used by date.  Works with tables in the MergeTree family.  If  force_index_by_date=1 ,  ClickHouse checks whether the query has a date key condition that can be used for restricting data ranges. If there is no suitable condition, it throws an exception. However, it does not check whether the condition actually reduces the amount of data to read. For example, the condition  Date != ' 2000-01-01 '  is acceptable even when it matches all the data in the table (i.e., running the query requires a full scan). For more information about ranges of data in MergeTree tables, see \" MergeTree \".", 
            "title": "force_index_by_date"
        }, 
        {
            "location": "/index.html#force_primary_key", 
            "text": "Disables query execution if indexing by the primary key is not possible.  Works with tables in the MergeTree family.  If  force_primary_key=1 ,  ClickHouse checks to see if the query has a primary key condition that can be used for restricting data ranges. If there is no suitable condition, it throws an exception. However, it does not check whether the condition actually reduces the amount of data to read. For more information about data ranges in MergeTree tables, see \" MergeTree \".", 
            "title": "force_primary_key"
        }, 
        {
            "location": "/index.html#fsync_metadata", 
            "text": "Enable or disable fsync when writing .sql files. By default, it is enabled.  It makes sense to disable it if the server has millions of tiny table chunks that are constantly being created and destroyed.", 
            "title": "fsync_metadata"
        }, 
        {
            "location": "/index.html#input_format_allow_errors_num", 
            "text": "Sets the maximum number of acceptable errors when reading from text formats (CSV, TSV, etc.).  The default value is 0.  Always pair it with  input_format_allow_errors_ratio . To skip errors, both settings must be greater than 0.  If an error occurred while reading rows but the error counter is still less than  input_format_allow_errors_num , ClickHouse ignores the row and moves on to the next one.  If  input_format_allow_errors_num is exceeded, ClickHouse throws an exception.", 
            "title": "input_format_allow_errors_num"
        }, 
        {
            "location": "/index.html#input_format_allow_errors_ratio", 
            "text": "Sets the maximum percentage of errors allowed when reading from text formats (CSV, TSV, etc.).\nThe percentage of errors is set as a floating-point number between 0 and 1.  The default value is 0.  Always pair it with  input_format_allow_errors_num . To skip errors, both settings must be greater than 0.  If an error occurred while reading rows but the error counter is still less than  input_format_allow_errors_ratio , ClickHouse ignores the row and moves on to the next one.  If  input_format_allow_errors_ratio  is exceeded, ClickHouse throws an exception.", 
            "title": "input_format_allow_errors_ratio"
        }, 
        {
            "location": "/index.html#max_block_size", 
            "text": "In ClickHouse, data is processed by blocks (sets of column parts). The internal processing cycles for a single block are efficient enough, but there are noticeable expenditures on each block.  max_block_size  is a recommendation for what size of block (in number of rows) to load from tables. The block size shouldn't be too small, so that the expenditures on each block are still noticeable, but not too large, so that the query with LIMIT that is completed after the first block is processed quickly, so that too much memory isn't consumed when extracting a large number of columns in multiple threads, and so that at least some cache locality is preserved.  By default, 65,536.  Blocks the size of  max_block_size  are not always loaded from the table. If it is obvious that less data needs to be retrieved, a smaller block is processed.", 
            "title": "max_block_size"
        }, 
        {
            "location": "/index.html#preferred_block_size_bytes", 
            "text": "Used for the same purpose as  max_block_size , but it sets the recommended block size in bytes by adapting it to the number of rows in the block.\nHowever, the block size cannot be more than  max_block_size  rows.\nDisabled by default (set to 0). It only works when reading from MergeTree engines.", 
            "title": "preferred_block_size_bytes"
        }, 
        {
            "location": "/index.html#log_queries", 
            "text": "Setting up query the logging.  Queries sent to ClickHouse with this setup are logged according to the rules in the  query_log  server configuration parameter.  Example :  log_queries=1", 
            "title": "log_queries"
        }, 
        {
            "location": "/index.html#max_insert_block_size", 
            "text": "The size of blocks to form for insertion into a table.\nThis setting only applies in cases when the server forms the blocks.\nFor example, for an INSERT via the HTTP interface, the server parses the data format and forms blocks of the specified size.\nBut when using clickhouse-client, the client parses the data itself, and the 'max_insert_block_size' setting on the server doesn't affect the size of the inserted blocks.\nThe setting also doesn't have a purpose when using INSERT SELECT, since data is inserted using the same blocks that are formed after SELECT.  By default, it is 1,048,576.  This is slightly more than  max_block_size . The reason for this is because certain table engines ( *MergeTree ) form a data part on the disk for each inserted block, which is a fairly large entity. Similarly,  *MergeTree  tables sort data during insertion, and a large enough block size allows sorting more data in RAM.", 
            "title": "max_insert_block_size"
        }, 
        {
            "location": "/index.html#max_replica_delay_for_distributed_queries", 
            "text": "Disables lagging replicas for distributed queries. See \" Replication \".  Sets the time in seconds. If a replica lags more than the set value, this replica is not used.  Default value: 0 (off).  Used when performing  SELECT   from a distributed table that points to replicated tables.", 
            "title": "max_replica_delay_for_distributed_queries"
        }, 
        {
            "location": "/index.html#max_threads", 
            "text": "The maximum number of query processing threads   excluding threads for retrieving data from remote servers (see the 'max_distributed_connections' parameter).   This parameter applies to threads that perform the same stages of the query processing pipeline in parallel.\nFor example, if reading from a table, evaluating expressions with functions, filtering with WHERE and pre-aggregating for GROUP BY can all be done in parallel using at least 'max_threads' number of threads, then 'max_threads' are used.  By default, 8.  If less than one SELECT query is normally run on a server at a time, set this parameter to a value slightly less than the actual number of processor cores.  For queries that are completed quickly because of a LIMIT, you can set a lower 'max_threads'. For example, if the necessary number of entries are located in every block and max_threads = 8, 8 blocks are retrieved, although it would have been enough to read just one.  The smaller the  max_threads  value, the less memory is consumed.", 
            "title": "max_threads"
        }, 
        {
            "location": "/index.html#max_compress_block_size", 
            "text": "The maximum size of blocks of uncompressed data before compressing for writing to a table. By default, 1,048,576 (1 MiB). If the size is reduced, the compression rate is significantly reduced, the compression and decompression speed increases slightly due to cache locality, and memory consumption is reduced. There usually isn't any reason to change this setting.  Don't confuse blocks for compression (a chunk of memory consisting of bytes) and blocks for query processing (a set of rows from a table).", 
            "title": "max_compress_block_size"
        }, 
        {
            "location": "/index.html#min_compress_block_size", 
            "text": "For  MergeTree \" tables. In order to reduce latency when processing queries, a block is compressed when writing the next mark if its size is at least 'min_compress_block_size'. By default, 65,536.  The actual size of the block, if the uncompressed data is less than 'max_compress_block_size', is no less than this value and no less than the volume of data for one mark.  Let's look at an example. Assume that 'index_granularity' was set to 8192 during table creation.  We are writing a UInt32-type column (4 bytes per value). When writing 8192 rows, the total will be 32 KB of data. Since min_compress_block_size = 65,536, a compressed block will be formed for every two marks.  We are writing a URL column with the String type (average size of 60 bytes per value). When writing 8192 rows, the average will be slightly less than 500 KB of data. Since this is more than 65,536, a compressed block will be formed for each mark. In this case, when reading data from the disk in the range of a single mark, extra data won't be decompressed.  There usually isn't any reason to change this setting.", 
            "title": "min_compress_block_size"
        }, 
        {
            "location": "/index.html#max_query_size", 
            "text": "The maximum part of a query that can be taken to RAM for parsing with the SQL parser.\nThe INSERT query also contains data for INSERT that is processed by a separate stream parser (that consumes O(1) RAM), which is not included in this restriction.  The default is 256 KiB.", 
            "title": "max_query_size"
        }, 
        {
            "location": "/index.html#interactive_delay", 
            "text": "The interval in microseconds for checking whether request execution has been canceled and sending the progress.  By default, 100,000 (check for canceling and send progress ten times per second).", 
            "title": "interactive_delay"
        }, 
        {
            "location": "/index.html#connect_timeout", 
            "text": "", 
            "title": "connect_timeout"
        }, 
        {
            "location": "/index.html#receive_timeout", 
            "text": "", 
            "title": "receive_timeout"
        }, 
        {
            "location": "/index.html#send_timeout", 
            "text": "Timeouts in seconds on the socket used for communicating with the client.  By default, 10, 300, 300.", 
            "title": "send_timeout"
        }, 
        {
            "location": "/index.html#poll_interval", 
            "text": "Lock in a wait loop for the specified number of seconds.  By default, 10.", 
            "title": "poll_interval"
        }, 
        {
            "location": "/index.html#max_distributed_connections", 
            "text": "The maximum number of simultaneous connections with remote servers for distributed processing of a single query to a single Distributed table. We recommend setting a value no less than the number of servers in the cluster.  By default, 100.  The following parameters are only used when creating Distributed tables (and when launching a server), so there is no reason to change them at runtime.", 
            "title": "max_distributed_connections"
        }, 
        {
            "location": "/index.html#distributed_connections_pool_size", 
            "text": "The maximum number of simultaneous connections with remote servers for distributed processing of all queries to a single Distributed table. We recommend setting a value no less than the number of servers in the cluster.  By default, 128.", 
            "title": "distributed_connections_pool_size"
        }, 
        {
            "location": "/index.html#connect_timeout_with_failover_ms", 
            "text": "The timeout in milliseconds for connecting to a remote server for a Distributed table engine, if the 'shard' and 'replica' sections are used in the cluster definition.\nIf unsuccessful, several attempts are made to connect to various replicas.  By default, 50.", 
            "title": "connect_timeout_with_failover_ms"
        }, 
        {
            "location": "/index.html#connections_with_failover_max_tries", 
            "text": "The maximum number of connection attempts with each replica, for the Distributed table engine.  By default, 3.", 
            "title": "connections_with_failover_max_tries"
        }, 
        {
            "location": "/index.html#extremes", 
            "text": "Whether to count extreme values (the minimums and maximums in columns of a query result). Accepts 0 or 1. By default, 0 (disabled).\nFor more information, see the section \"Extreme values\".", 
            "title": "extremes"
        }, 
        {
            "location": "/index.html#use_uncompressed_cache", 
            "text": "Whether to use a cache of uncompressed blocks. Accepts 0 or 1. By default, 0 (disabled).\nThe uncompressed cache (only for tables in the MergeTree family) allows significantly reducing latency and increasing throughput when working with a large number of short queries. Enable this setting for users who send frequent short requests. Also pay attention to the 'uncompressed_cache_size' configuration parameter (only set in the config file) \u2013 the size of uncompressed cache blocks. By default, it is 8 GiB. The uncompressed cache is filled in as needed; the least-used data is automatically deleted.  For queries that read at least a somewhat large volume of data (one million rows or more), the uncompressed cache is disabled automatically in order to save space for truly small queries. So you can keep the 'use_uncompressed_cache' setting always set to 1.", 
            "title": "use_uncompressed_cache"
        }, 
        {
            "location": "/index.html#replace_running_query", 
            "text": "When using the HTTP interface, the 'query_id' parameter can be passed. This is any string that serves as the query identifier.\nIf a query from the same user with the same 'query_id' already exists at this time, the behavior depends on the 'replace_running_query' parameter.  0  (default) \u2013 Throw an exception (don't allow the query to run if a query with the same 'query_id' is already running).  1  \u2013 Cancel the old query and start running the new one.  Yandex.Metrica uses this parameter set to 1 for implementing suggestions for segmentation conditions. After entering the next character, if the old query hasn't finished yet, it should be canceled.", 
            "title": "replace_running_query"
        }, 
        {
            "location": "/index.html#schema", 
            "text": "This parameter is useful when you are using formats that require a schema definition, such as  Cap'n Proto . The value depends on the format.", 
            "title": "schema"
        }, 
        {
            "location": "/index.html#stream_flush_interval_ms", 
            "text": "Works for tables with streaming in the case of a timeout, or when a thread generates max_insert_block_size  rows.  The default value is 7500.  The smaller the value, the more often data is flushed into the table. Setting the value too low leads to poor performance.", 
            "title": "stream_flush_interval_ms"
        }, 
        {
            "location": "/index.html#load_balancing", 
            "text": "Which replicas (among healthy replicas) to preferably send a query to (on the first attempt) for distributed processing.", 
            "title": "load_balancing"
        }, 
        {
            "location": "/index.html#random-default", 
            "text": "The number of errors is counted for each replica. The query is sent to the replica with the fewest errors, and if there are several of these, to any one of them.\nDisadvantages: Server proximity is not accounted for; if the replicas have different data, you will also get different data.", 
            "title": "random (default)"
        }, 
        {
            "location": "/index.html#nearest_hostname", 
            "text": "The number of errors is counted for each replica. Every 5 minutes, the number of errors is integrally divided by 2. Thus, the number of errors is calculated for a recent time with exponential smoothing. If there is one replica with a minimal number of errors (i.e. errors occurred recently on the other replicas), the query is sent to it. If there are multiple replicas with the same minimal number of errors, the query is sent to the replica with a host name that is most similar to the server's host name in the config file (for the number of different characters in identical positions, up to the minimum length of both host names).  For instance, example01-01-1 and example01-01-2.yandex.ru are different in one position, while example01-01-1 and example01-02-2 differ in two places.\nThis method might seem a little stupid, but it doesn't use external data about network topology, and it doesn't compare IP addresses, which would be complicated for our IPv6 addresses.  Thus, if there are equivalent replicas, the closest one by name is preferred.\nWe can also assume that when sending a query to the same server, in the absence of failures, a distributed query will also go to the same servers. So even if different data is placed on the replicas, the query will return mostly the same results.", 
            "title": "nearest_hostname"
        }, 
        {
            "location": "/index.html#in_order", 
            "text": "Replicas are accessed in the same order as they are specified. The number of errors does not matter.\nThis method is appropriate when you know exactly which replica is preferable.", 
            "title": "in_order"
        }, 
        {
            "location": "/index.html#totals_mode", 
            "text": "How to calculate TOTALS when HAVING is present, as well as when max_rows_to_group_by and group_by_overflow_mode = 'any' are present.\nSee the section \"WITH TOTALS modifier\".", 
            "title": "totals_mode"
        }, 
        {
            "location": "/index.html#totals_auto_threshold", 
            "text": "The threshold for  totals_mode = 'auto' .\nSee the section \"WITH TOTALS modifier\".", 
            "title": "totals_auto_threshold"
        }, 
        {
            "location": "/index.html#default_sample", 
            "text": "Floating-point number from 0 to 1. By default, 1.\nAllows you to set the default sampling ratio for all SELECT queries.\n(For tables that do not support sampling, it throws an exception.)\nIf set to 1, sampling is not performed by default.", 
            "title": "default_sample"
        }, 
        {
            "location": "/index.html#max_parallel_replicas", 
            "text": "The maximum number of replicas for each shard when executing a query.\nFor consistency (to get different parts of the same data split), this option only works when the sampling key is set.\nReplica lag is not controlled.", 
            "title": "max_parallel_replicas"
        }, 
        {
            "location": "/index.html#compile", 
            "text": "Enable compilation of queries. By default, 0 (disabled).  Compilation is only used for part of the query-processing pipeline: for the first stage of aggregation (GROUP BY).\nIf this portion of the pipeline was compiled, the query may run faster due to  deployment of short cycles and inlining aggregate function calls. The maximum performance improvement (up to four times faster in rare cases) is seen for queries with multiple simple aggregate functions. Typically, the performance gain is insignificant. In very rare cases, it may slow down query execution.", 
            "title": "compile"
        }, 
        {
            "location": "/index.html#min_count_to_compile", 
            "text": "How many times to potentially use a compiled chunk of code before running compilation. By default, 3.\nIf the value is zero, then compilation runs synchronously and the query waits for the end of the compilation process before continuing execution. This can be used for testing; otherwise, use values \u200b\u200bstarting with 1. Compilation normally takes about 5-10 seconds.\nIf the value is 1 or more, compilation occurs asynchronously in a separate thread. The result will be used as soon as it is ready, including by queries that are currently running.  Compiled code is required for each different combination of aggregate functions used in the query and the type of keys in the GROUP BY clause.\nThe results of compilation are saved in the build directory in the form of .so files. There is no restriction on the number of compilation results, since they don't use very much space. Old results will be used after server restarts, except in the case of a server upgrade \u2013 in this case, the old results are deleted.", 
            "title": "min_count_to_compile"
        }, 
        {
            "location": "/index.html#input_format_skip_unknown_fields", 
            "text": "If the value is true, running INSERT skips input data from columns with unknown names. Otherwise, this situation will generate an exception.\nIt works for JSONEachRow and TSKV formats.", 
            "title": "input_format_skip_unknown_fields"
        }, 
        {
            "location": "/index.html#output_format_json_quote_64bit_integers", 
            "text": "If the value is true, integers appear in quotes when using JSON* Int64 and UInt64 formats  (for compatibility with most JavaScript implementations); otherwise, integers are output without the quotes.", 
            "title": "output_format_json_quote_64bit_integers"
        }, 
        {
            "location": "/index.html#format_csv_delimiter", 
            "text": "The character to be considered as a delimiter in CSV data. By default,  , .", 
            "title": "format_csv_delimiter"
        }, 
        {
            "location": "/index.html#settings-profiles", 
            "text": "A settings profile is a collection of settings grouped under the same name. Each ClickHouse user has a profile.\nTo apply all the settings in a profile, set  profile .  Example:  Setting  web  profile.  SET   profile   =   web   Settings profiles are declared in the user config file. This is usually  users.xml .  Example:  !-- Settings profiles --  profiles \n     !-- Default settings -- \n     default \n         !-- The maximum number of threads when running a single query. -- \n         max_threads 8 /max_threads \n     /default \n\n     !-- Settings for quries from the user interface -- \n     web \n         max_rows_to_read 1000000000 /max_rows_to_read \n         max_bytes_to_read 100000000000 /max_bytes_to_read \n\n         max_rows_to_group_by 1000000 /max_rows_to_group_by \n         group_by_overflow_mode any /group_by_overflow_mode \n\n         max_rows_to_sort 1000000 /max_rows_to_sort \n         max_bytes_to_sort 1000000000 /max_bytes_to_sort \n\n         max_result_rows 100000 /max_result_rows \n         max_result_bytes 100000000 /max_result_bytes \n         result_overflow_mode break /result_overflow_mode \n\n         max_execution_time 600 /max_execution_time \n         min_execution_speed 1000000 /min_execution_speed \n         timeout_before_checking_execution_speed 15 /timeout_before_checking_execution_speed \n\n         max_columns_to_read 25 /max_columns_to_read \n         max_temporary_columns 100 /max_temporary_columns \n         max_temporary_non_const_columns 50 /max_temporary_non_const_columns \n\n         max_subquery_depth 2 /max_subquery_depth \n         max_pipeline_depth 25 /max_pipeline_depth \n         max_ast_depth 50 /max_ast_depth \n         max_ast_elements 100 /max_ast_elements \n\n         readonly 1 /readonly \n     /web  /profiles   The example specifies two profiles:  default   and  web . The  default  profile has a special purpose: it must always be present and is applied when starting the server. In other words, the  default  profile contains default settings. The  web  profile is a regular profile that can be set using the  SET  query or using a URL parameter in an HTTP query.  Settings profiles can inherit from each other. To use inheritance, indicate the  profile  setting before the other settings that are listed in the profile.", 
            "title": "Settings profiles"
        }, 
        {
            "location": "/index.html#clickhouse-utility", 
            "text": "clickhouse-local  \u2014 Allows running SQL queries on data without stopping the ClickHouse server, similar to how  awk  does this.  clickhouse-copier  \u2014 Copies (and reshards) data from one cluster to another cluster.", 
            "title": "ClickHouse utility"
        }, 
        {
            "location": "/index.html#clickhouse-copier", 
            "text": "Copies data from the tables in one cluster to tables in another (or the same) cluster.  You can run multiple  clickhouse-copier  instances on different servers to perform the same job. ZooKeeper is used for syncing the processes.  After starting,  clickhouse-copier :   Connects to ZooKeeper and receives:  Copying jobs.   The state of the copying jobs.    It performs the jobs.    Each running process chooses the \"closest\" shard of the source cluster and copies the data into the destination cluster, resharding the data if necessary.  clickhouse-copier  tracks the changes in ZooKeeper and applies them on the fly.  To reduce network traffic, we recommend running  clickhouse-copier  on the same server where the source data is located.", 
            "title": "clickhouse-copier"
        }, 
        {
            "location": "/index.html#running-clickhouse-copier", 
            "text": "The utility should be run manually:  clickhouse-copier copier --daemon --config zookeeper.xml --task-path /task/path --base-dir /path/to/dir  Parameters:   daemon  \u2014 Starts  clickhouse-copier  in daemon mode.  config  \u2014 The path to the  zookeeper.xml  file with the parameters for the connection to ZooKeeper.  task-path  \u2014 The path to the ZooKeeper node. This node is used for syncing  clickhouse-copier  processes and storing tasks. Tasks are stored in  $task-path/description .  base-dir  \u2014 The path to logs and auxiliary files. When it starts,  clickhouse-copier  creates  clickhouse-copier_YYYYMMHHSS_ PID  subdirectories in  $base-dir . If this parameter is omitted, the directories are created in the directory where  clickhouse-copier  was launched.", 
            "title": "Running clickhouse-copier"
        }, 
        {
            "location": "/index.html#format-of-zookeeperxml", 
            "text": "yandex \n     zookeeper \n         node   index= 1 \n             host 127.0.0.1 /host \n             port 2181 /port \n         /node \n     /zookeeper  /yandex", 
            "title": "Format of zookeeper.xml"
        }, 
        {
            "location": "/index.html#configuration-of-copying-tasks", 
            "text": "yandex \n     !-- Configuration of clusters as in an ordinary server config -- \n     remote_servers \n         source_cluster \n             shard \n                 internal_replication false /internal_replication \n                     replica \n                         host 127.0.0.1 /host \n                         port 9000 /port \n                     /replica \n             /shard \n            ...\n         /source_cluster \n\n         destination_cluster \n        ...\n         /destination_cluster \n     /remote_servers \n\n     !-- How many simultaneously active workers are possible. If you run more workers superfluous workers will sleep. -- \n     max_workers 2 /max_workers \n\n     !-- Setting used to fetch (pull) data from source cluster tables -- \n     settings_pull \n         readonly 1 /readonly \n     /settings_pull \n\n     !-- Setting used to insert (push) data to destination cluster tables -- \n     settings_push \n         readonly 0 /readonly \n     /settings_push \n\n     !-- Common setting for fetch (pull) and insert (push) operations. The copier process context also uses it.           They are overlaid by  settings_pull/  and  settings_push/  respectively. -- \n     settings \n         connect_timeout 3 /connect_timeout \n         !-- Sync insert is set forcibly, leave it here just in case. -- \n         insert_distributed_sync 1 /insert_distributed_sync \n     /settings \n\n     !-- Copying description of tasks.           You can specify several table tasks in the same task description (in the same ZooKeeper node), and they will be performed         sequentially.      -- \n     tables \n         !-- A table task that copies one table. -- \n         table_hits \n             !-- Source cluster name (from the  remote_servers/  section) and tables in it that should be copied -- \n             cluster_pull source_cluster /cluster_pull \n             database_pull test /database_pull \n             table_pull hits /table_pull \n\n             !-- Destination cluster name and tables in which the data should be inserted -- \n             cluster_push destination_cluster /cluster_push \n             database_push test /database_push \n             table_push hits2 /table_push \n\n             !-- Engine of destination tables.                   If the destination tables have not been created yet, workers create them using column definitions from source tables and the engine                 definition from here.                   NOTE: If the first worker starts to insert data and detects that the destination partition is not empty, then the partition will                   be dropped and refilled. Take this into account if you already have some data in destination tables. You can directly                    specify partitions that should be copied in  enabled_partitions/ . They should be in quoted format like the partition column in the                                    system.parts table.              -- \n             engine \n            ENGINE=ReplicatedMergeTree( /clickhouse/tables/{cluster}/{shard}/hits2 ,  {replica} )\n            PARTITION BY toMonday(date)\n            ORDER BY (CounterID, EventDate)\n             /engine \n\n             !-- Sharding key used to insert data to destination cluster -- \n             sharding_key jumpConsistentHash(intHash64(UserID), 2) /sharding_key \n\n             !-- Optional expression that filter data while pull them from source servers -- \n             where_condition CounterID != 0 /where_condition \n\n             !-- This section specifies partitions that should be copied, other partition will be ignored.                   Partition names should have the same format as                   partition column of system.parts table (i.e. a quoted text).                   Since partition key of source and destination cluster could be different,                   these partition names specify destination partitions.                   Note: Although this section is optional (if it omitted, all partitions will be copied),                    it is strongly recommended to specify the partitions explicitly.                   If you already have some partitions ready on the destination cluster, they                                    will be removed at the start of the copying, because they will be interpreted                                    as unfinished data from the previous copying.              -- \n             enabled_partitions \n                 partition 2018-02-26 /partition \n                 partition 2018-03-05 /partition \n                ...\n             /enabled_partitions \n         /table_hits \n\n         !-- Next table to copy. It is not copied until the previous table is copying. -- \n         /table_visits \n        ...\n         /table_visits \n        ...\n     /tables  /yandex   clickhouse-copier  tracks the changes in  /task/path/description  and applies them on the fly. For instance, if you change the value of  max_workers , the number of processes running tasks will also change.", 
            "title": "Configuration of copying tasks"
        }, 
        {
            "location": "/index.html#clickhouse-local", 
            "text": "The  clickhouse-local   program enables you to perform fast processing on local files that store tables, without having to deploy and configure the ClickHouse server.", 
            "title": "clickhouse-local"
        }, 
        {
            "location": "/index.html#clickhouse-development", 
            "text": "", 
            "title": "ClickHouse Development"
        }, 
        {
            "location": "/index.html#overview-of-clickhouse-architecture", 
            "text": "ClickHouse is a true column-oriented DBMS. Data is stored by columns, and during the execution of arrays (vectors or chunks of columns). Whenever possible, operations are dispatched on arrays, rather than on individual values. This is called \"vectorized query execution,\" and it helps lower the cost of actual data processing.   This idea is nothing new. It dates back to the  APL  programming language and its descendants:  A + ,  J ,  K , and  Q . Array programming is used in scientific data processing. Neither is this idea something new in relational databases: for example, it is used in the  Vectorwise  system.   There are two different approaches for speeding up the query processing: vectorized query execution and runtime code generation. In the latter, the code is generated for every kind of query on the fly, removing all indirection and dynamic dispatch. Neither of these approaches is strictly better than the other. Runtime code generation can be better when it's fuses many operations together, thus fully utilizing CPU execution units and the pipeline. Vectorized query execution can be less practical, because it involves the temporary vectors that must be written to the cache and read back. If the temporary data does not fit in the L2 cache, this becomes an issue. But vectorized query execution more easily utilizes the SIMD capabilities of the CPU. A  research paper  written by our friends shows that it is better to combine both approaches. ClickHouse uses vectorized query execution and has limited initial support for runtime code.", 
            "title": "Overview of ClickHouse architecture"
        }, 
        {
            "location": "/index.html#columns", 
            "text": "To represent columns in memory (actually, chunks of columns), the  IColumn  interface is used. This interface provides helper methods for implementation of various relational operators. Almost all operations are immutable: they do not modify the original column, but create a new modified one. For example, the  IColumn :: filter  method accepts a filter byte mask. It is used for the  WHERE  and  HAVING  relational operators. Additional examples: the  IColumn :: permute  method to support  ORDER BY , the  IColumn :: cut  method to support  LIMIT , and so on.  Various  IColumn  implementations ( ColumnUInt8 ,  ColumnString  and so on) are responsible for the memory layout of columns. Memory layout is usually a contiguous array. For the integer type of columns it is just one contiguous array, like  std :: vector . For  String  and  Array  columns, it is two vectors: one for all array elements, placed contiguously, and a second one for offsets to the beginning of each array. There is also  ColumnConst  that stores just one value in memory, but looks like a column.", 
            "title": "Columns"
        }, 
        {
            "location": "/index.html#field", 
            "text": "Nevertheless, it is possible to work with individual values as well. To represent an individual value, the  Field  is used.  Field  is just a discriminated union of  UInt64 ,  Int64 ,  Float64 ,  String  and  Array .  IColumn  has the  operator[]  method to get the n-th value as a  Field , and the  insert  method to append a  Field  to the end of a column. These methods are not very efficient, because they require dealing with temporary  Field  objects representing an individual value. There are more efficient methods, such as  insertFrom ,  insertRangeFrom , and so on.  Field  doesn't have enough information about a specific data type for a table. For example,  UInt8 ,  UInt16 ,  UInt32 , and  UInt64  are all represented as  UInt64  in a  Field .", 
            "title": "Field"
        }, 
        {
            "location": "/index.html#leaky-abstractions", 
            "text": "IColumn  has methods for common relational transformations of data, but they don't meet all needs. For example,  ColumnUInt64  doesn't have a method to calculate the sum of two columns, and  ColumnString  doesn't have a method to run a substring search. These countless routines are implemented outside of  IColumn .  Various functions on columns can be implemented in a generic, non-efficient way using  IColumn  methods to extract  Field  values, or in a specialized way using knowledge of inner memory layout of data in a specific  IColumn  implementation. To do this, functions are cast to a specific  IColumn  type and deal with internal representation directly. For example,  ColumnUInt64  has the  getData  method that returns a reference to an internal array, then a separate routine reads or fills that array directly. In fact, we have \"leaky abstractions\" to allow efficient specializations of various routines.", 
            "title": "Leaky abstractions"
        }, 
        {
            "location": "/index.html#data-types_1", 
            "text": "IDataType  is responsible for serialization and deserialization: for reading and writing chunks of columns or individual values in binary or text form. IDataType  directly corresponds to data types in tables. For example, there are  DataTypeUInt32 ,  DataTypeDateTime ,  DataTypeString  and so on.  IDataType  and  IColumn  are only loosely related to each other. Different data types can be represented in memory by the same  IColumn  implementations. For example,  DataTypeUInt32  and  DataTypeDateTime  are both represented by  ColumnUInt32  or  ColumnConstUInt32 . In addition, the same data type can be represented by different  IColumn  implementations. For example,  DataTypeUInt8  can be represented by  ColumnUInt8  or  ColumnConstUInt8 .  IDataType  only stores metadata. For instance,  DataTypeUInt8  doesn't store anything at all (except vptr) and  DataTypeFixedString  stores just  N  (the size of fixed-size strings).  IDataType  has helper methods for various data formats. Examples are methods to serialize a value with possible quoting, to serialize a value for JSON, and to serialize a value as part of XML format. There is no direct correspondence to data formats. For example, the different data formats  Pretty  and  TabSeparated  can use the same  serializeTextEscaped  helper method from the  IDataType  interface.", 
            "title": "Data types"
        }, 
        {
            "location": "/index.html#block", 
            "text": "A  Block  is a container that represents a subset (chunk) of a table in memory. It is just a set of triples:  (IColumn, IDataType, column name) . During query execution, data is processed by  Block s. If we have a  Block , we have data (in the  IColumn  object), we have information about its type (in  IDataType ) that tells us how to deal with that column, and we have the column name (either the original column name from the table, or some artificial name assigned for getting temporary results of calculations).  When we calculate some function over columns in a block, we add another column with its result to the block, and we don't touch columns for arguments of the function because operations are immutable. Later, unneeded columns can be removed from the block, but not modified. This is convenient for elimination of common subexpressions.  Blocks are created for every processed chunk of data. Note that for the same type of calculation, the column names and types remain the same for different blocks, and only column data changes. It is better to split block data from the block header, because small block sizes will have a high overhead of temporary strings for copying shared_ptrs and column names.", 
            "title": "Block"
        }, 
        {
            "location": "/index.html#block-streams", 
            "text": "Block streams are for processing data. We use streams of blocks to read data from somewhere, perform data transformations, or write data to somewhere.  IBlockInputStream  has the  read  method to fetch the next block while available.  IBlockOutputStream  has the  write  method to push the block somewhere.  Streams are responsible for:   Reading or writing to a table. The table just returns a stream for reading or writing blocks.  Implementing data formats. For example, if you want to output data to a terminal in  Pretty  format, you create a block output stream where you push blocks, and it formats them.  Performing data transformations. Let's say you have  IBlockInputStream  and want to create a filtered stream. You create  FilterBlockInputStream  and initialize it with your stream. Then when you pull a block from  FilterBlockInputStream , it pulls a block from your stream, filters it, and returns the filtered block to you. Query execution pipelines are represented this way.   There are more sophisticated transformations. For example, when you pull from  AggregatingBlockInputStream , it reads all data from its source, aggregates it, and then returns a stream of aggregated data for you. Another example:  UnionBlockInputStream  accepts many input sources in the constructor and also a number of threads. It launches multiple threads and reads from multiple sources in parallel.   Block streams use the \"pull\" approach to control flow: when you pull a block from the first stream, it consequently pulls the required blocks from nested streams, and the entire execution pipeline will work. Neither \"pull\" nor \"push\" is the best solution, because control flow is implicit, and that limits implementation of various features like simultaneous execution of multiple queries (merging many pipelines together). This limitation could be overcome with coroutines or just running extra threads that wait for each other. We may have more possibilities if we make control flow explicit: if we locate the logic for passing data from one calculation unit to another outside of those calculation units. Read this  article  for more thoughts.   We should note that the query execution pipeline creates temporary data at each step. We try to keep block size small enough so that temporary data fits in the CPU cache. With that assumption, writing and reading temporary data is almost free in comparison with other calculations. We could consider an alternative, which is to fuse many operations in the pipeline together, to make the pipeline as short as possible and remove much of the temporary data. This could be an advantage, but it also has drawbacks. For example, a split pipeline makes it easy to implement caching intermediate data, stealing intermediate data from similar queries running at the same time, and merging pipelines for similar queries.", 
            "title": "Block Streams"
        }, 
        {
            "location": "/index.html#formats_1", 
            "text": "Data formats are implemented with block streams. There are \"presentational\" formats only suitable for output of data to the client, such as  Pretty  format, which provides only  IBlockOutputStream . And there are input/output formats, such as  TabSeparated  or  JSONEachRow .  There are also row streams:  IRowInputStream  and  IRowOutputStream . They allow you to pull/push data by individual rows, not by blocks. And they are only needed to simplify implementation of row-oriented formats. The wrappers  BlockInputStreamFromRowInputStream  and  BlockOutputStreamFromRowOutputStream  allow you to convert row-oriented streams to regular block-oriented streams.", 
            "title": "Formats"
        }, 
        {
            "location": "/index.html#io", 
            "text": "For byte-oriented input/output, there are  ReadBuffer  and  WriteBuffer  abstract classes. They are used instead of C++  iostream 's. Don't worry: every mature C++ project is using something other than  iostream 's for good reasons.  ReadBuffer  and  WriteBuffer  are just a contiguous buffer and a cursor pointing to the position in that buffer. Implementations may own or not own the memory for the buffer. There is a virtual method to fill the buffer with the following data (for  ReadBuffer ) or to flush the buffer somewhere (for  WriteBuffer ). The virtual methods are rarely called.  Implementations of  ReadBuffer / WriteBuffer  are used for working with files and file descriptors and network sockets, for implementing compression ( CompressedWriteBuffer  is initialized with another WriteBuffer and performs compression before writing data to it), and for other purposes \u2013 the names  ConcatReadBuffer ,  LimitReadBuffer , and  HashingWriteBuffer  speak for themselves.  Read/WriteBuffers only deal with bytes. To help with formatted input/output (for instance, to write a number in decimal format), there are functions from  ReadHelpers  and  WriteHelpers  header files.  Let's look at what happens when you want to write a result set in  JSON  format to stdout. You have a result set ready to be fetched from  IBlockInputStream . You create  WriteBufferFromFileDescriptor(STDOUT_FILENO)  to write bytes to stdout. You create  JSONRowOutputStream , initialized with that  WriteBuffer , to write rows in  JSON  to stdout. You create  BlockOutputStreamFromRowOutputStream  on top of it, to represent it as  IBlockOutputStream . Then you call  copyData  to transfer data from  IBlockInputStream  to  IBlockOutputStream , and everything works. Internally,  JSONRowOutputStream  will write various JSON delimiters and call the  IDataType::serializeTextJSON  method with a reference to  IColumn  and the row number as arguments. Consequently,  IDataType::serializeTextJSON  will call a method from  WriteHelpers.h : for example,  writeText  for numeric types and  writeJSONString  for  DataTypeString .", 
            "title": "I/O"
        }, 
        {
            "location": "/index.html#tables", 
            "text": "Tables are represented by the  IStorage  interface. Different implementations of that interface are different table engines. Examples are  StorageMergeTree ,  StorageMemory , and so on. Instances of these classes are just tables.  The most important  IStorage  methods are  read  and  write . There are also  alter ,  rename ,  drop , and so on. The  read  method accepts the following arguments: the set of columns to read from a table, the  AST  query to consider, and the desired number of streams to return. It returns one or multiple  IBlockInputStream  objects and information about the stage of data processing that was completed inside a table engine during query execution.  In most cases, the read method is only responsible for reading the specified columns from a table, not for any further data processing. All further data processing is done by the query interpreter and is outside the responsibility of  IStorage .  But there are notable exceptions:   The AST query is passed to the  read  method and the table engine can use it to derive index usage and to read less data from a table.  Sometimes the table engine can process data itself to a specific stage. For example,  StorageDistributed  can send a query to remote servers, ask them to process data to a stage where data from different remote servers can be merged, and return that preprocessed data.\nThe query interpreter then finishes processing the data.   The table's  read  method can return multiple  IBlockInputStream  objects to allow parallel data processing. These multiple block input streams can read from a table in parallel. Then you can wrap these streams with various transformations (such as expression evaluation or filtering) that can be calculated independently and create a  UnionBlockInputStream  on top of them, to read from multiple streams in parallel.  There are also  TableFunction s. These are functions that return a temporary  IStorage  object to use in the  FROM  clause of a query.  To get a quick idea of how to implement your own table engine, look at something simple, like  StorageMemory  or  StorageTinyLog .   As the result of the  read  method,  IStorage  returns  QueryProcessingStage  \u2013 information about what parts of the query were already calculated inside storage. Currently we have only very coarse granularity for that information. There is no way for the storage to say \"I have already processed this part of the expression in WHERE, for this range of data\". We need to work on that.", 
            "title": "Tables"
        }, 
        {
            "location": "/index.html#parsers", 
            "text": "A query is parsed by a hand-written recursive descent parser. For example,  ParserSelectQuery  just recursively calls the underlying parsers for various parts of the query. Parsers create an  AST . The  AST  is represented by nodes, which are instances of  IAST .   Parser generators are not used for historical reasons.", 
            "title": "Parsers"
        }, 
        {
            "location": "/index.html#interpreters", 
            "text": "Interpreters are responsible for creating the query execution pipeline from an  AST . There are simple interpreters, such as  InterpreterExistsQuery and  InterpreterDropQuery , or the more sophisticated  InterpreterSelectQuery . The query execution pipeline is a combination of block input or output streams. For example, the result of interpreting the  SELECT  query is the  IBlockInputStream  to read the result set from; the result of the INSERT query is the  IBlockOutputStream  to write data for insertion to; and the result of interpreting the  INSERT SELECT  query is the  IBlockInputStream  that returns an empty result set on the first read, but that copies data from  SELECT  to  INSERT  at the same time.  InterpreterSelectQuery  uses  ExpressionAnalyzer  and  ExpressionActions  machinery for query analysis and transformations. This is where most rule-based query optimizations are done.  ExpressionAnalyzer  is quite messy and should be rewritten: various query transformations and optimizations should be extracted to separate classes to allow modular transformations or query.", 
            "title": "Interpreters"
        }, 
        {
            "location": "/index.html#functions_2", 
            "text": "There are ordinary functions and aggregate functions. For aggregate functions, see the next section.  Ordinary functions don't change the number of rows \u2013 they work as if they are processing each row independently. In fact, functions are not called for individual rows, but for  Block 's of data to implement vectorized query execution.  There are some miscellaneous functions, like  blockSize ,  rowNumberInBlock , and  runningAccumulate , that exploit block processing and violate the independence of rows.  ClickHouse has strong typing, so implicit type conversion doesn't occur. If a function doesn't support a specific combination of types, an exception will be thrown. But functions can work (be overloaded) for many different combinations of types. For example, the  plus  function (to implement the  +  operator) works for any combination of numeric types:  UInt8  +  Float32 ,  UInt16  +  Int8 , and so on. Also, some variadic functions can accept any number of arguments, such as the  concat  function.  Implementing a function may be slightly inconvenient because a function explicitly dispatches supported data types and supported  IColumns . For example, the  plus  function has code generated by instantiation of a C++ template for each combination of numeric types, and for constant or non-constant left and right arguments.   This is a nice place to implement runtime code generation to avoid template code bloat. Also, it will make it possible to add fused functions like fused multiply-add, or to make multiple comparisons in one loop iteration.   Due to vectorized query execution, functions are not short-circuit. For example, if you write  WHERE f(x) AND g(y) , both sides will be calculated, even for rows, when  f(x)  is zero (except when  f(x)  is a zero constant expression). But if selectivity of the  f(x)  condition is high, and calculation of  f(x)  is much cheaper than  g(y) , it's better to implement multi-pass calculation: first calculate  f(x) , then filter columns by the result, and then calculate  g(y)  only for smaller, filtered chunks of data.", 
            "title": "Functions"
        }, 
        {
            "location": "/index.html#aggregate-functions_1", 
            "text": "Aggregate functions are stateful functions. They accumulate passed values into some state, and allow you to get results from that state. They are managed with the  IAggregateFunction  interface. States can be rather simple (the state for  AggregateFunctionCount  is just a single  UInt64  value) or quite complex (the state of  AggregateFunctionUniqCombined  is a combination of a linear array, a hash table and a  HyperLogLog  probabilistic data structure).  To deal with multiple states while executing a high-cardinality  GROUP BY  query, states are allocated in  Arena  (a memory pool), or they could be allocated in any suitable piece of memory. States can have a non-trivial constructor and destructor: for example, complex aggregation states can allocate additional memory themselves. This requires some attention to creating and destroying states and properly passing their ownership, to keep track of who and when will destroy states.  Aggregation states can be serialized and deserialized to pass over the network during distributed query execution or to write them on disk where there is not enough RAM. They can even be stored in a table with the  DataTypeAggregateFunction  to allow incremental aggregation of data.   The serialized data format for aggregate function states is not versioned right now. This is ok if aggregate states are only stored temporarily. But we have the  AggregatingMergeTree  table engine for incremental aggregation, and people are already using it in production. This is why we should add support for backward compatibility when changing the serialized format for any aggregate function in the future.", 
            "title": "Aggregate Functions"
        }, 
        {
            "location": "/index.html#server", 
            "text": "The server implements several different interfaces:   An HTTP interface for any foreign clients.  A TCP interface for the native ClickHouse client and for cross-server communication during distributed query execution.  An interface for transferring data for replication.   Internally, it is just a basic multithreaded server without coroutines, fibers, etc. Since the server is not designed to process a high rate of simple queries but is intended to process a relatively low rate of complex queries, each of them can process a vast amount of data for analytics.  The server initializes the  Context  class with the necessary environment for query execution: the list of available databases, users and access rights, settings, clusters, the process list, the query log, and so on. This environment is used by interpreters.  We maintain full backward and forward compatibility for the server TCP protocol: old clients can talk to new servers and new clients can talk to old servers. But we don't want to maintain it eternally, and we are removing support for old versions after about one year.   For all external applications, we recommend using the HTTP interface because it is simple and easy to use. The TCP protocol is more tightly linked to internal data structures: it uses an internal format for passing blocks of data and it uses custom framing for compressed data. We haven't released a C library for that protocol because it requires linking most of the ClickHouse codebase, which is not practical.", 
            "title": "Server"
        }, 
        {
            "location": "/index.html#distributed-query-execution", 
            "text": "Servers in a cluster setup are mostly independent. You can create a  Distributed  table on one or all servers in a cluster. The  Distributed  table does not store data itself \u2013 it only provides a \"view\" to all local tables on multiple nodes of a cluster. When you SELECT from a  Distributed  table, it rewrites that query, chooses remote nodes according to load balancing settings, and sends the query to them. The  Distributed  table requests remote servers to process a query just up to a stage where intermediate results from different servers can be merged. Then it receives the intermediate results and merges them. The distributed table tries to distribute as much work as possible to remote servers, and does not send much intermediate data over the network.   Things become more complicated when you have subqueries in IN or JOIN clauses and each of them uses a  Distributed  table. We have different strategies for execution of these queries.   There is no global query plan for distributed query execution. Each node has its own local query plan for its part of the job. We only have simple one-pass distributed query execution: we send queries for remote nodes and then merge the results. But this is not feasible for difficult queries with high cardinality GROUP BYs or with a large amount of temporary data for JOIN: in such cases, we need to \"reshuffle\" data between servers, which requires additional coordination. ClickHouse does not support that kind of query execution, and we need to work on it.", 
            "title": "Distributed query execution"
        }, 
        {
            "location": "/index.html#merge-tree", 
            "text": "MergeTree  is a family of storage engines that supports indexing by primary key. The primary key can be an arbitary tuple of columns or expressions. Data in a  MergeTree  table is stored in \"parts\". Each part stores data in the primary key order (data is ordered lexicographically by the primary key tuple). All the table columns are stored in separate  column.bin  files in these parts. The files consist of compressed blocks. Each block is usually from 64 KB to 1 MB of uncompressed data, depending on the average value size. The blocks consist of column values placed contiguously one after the other. Column values are in the same order for each column (the order is defined by the primary key), so when you iterate by many columns, you get values for the corresponding rows.  The primary key itself is \"sparse\". It doesn't address each single row, but only some ranges of data. A separate  primary.idx  file has the value of the primary key for each N-th row, where N is called  index_granularity  (usually, N = 8192). Also, for each column, we have  column.mrk  files with \"marks,\" which are offsets to each N-th row in the data file. Each mark is a pair: the offset in the file to the beginning of the compressed block, and the offset in the decompressed block to the beginning of data. Usually compressed blocks are aligned by marks, and the offset in the decompressed block is zero. Data for  primary.idx  always resides in memory and data for  column.mrk  files is cached.  When we are going to read something from a part in  MergeTree , we look at  primary.idx  data and locate ranges that could possibly contain requested data, then look at  column.mrk  data and calculate offsets for where to start reading those ranges. Because of sparseness, excess data may be read. ClickHouse is not suitable for a high load of simple point queries, because the entire range with  index_granularity  rows must be read for each key, and the entire compressed block must be decompressed for each column. We made the index sparse because we must be able to maintain trillions of rows per single server without noticeable memory consumption for the index. Also, because the primary key is sparse, it is not unique: it cannot check the existence of the key in the table at INSERT time. You could have many rows with the same key in a table.  When you  INSERT  a bunch of data into  MergeTree , that bunch is sorted by primary key order and forms a new part. To keep the number of parts relatively low, there are background threads that periodically select some parts and merge them to a single sorted part. That's why it is called  MergeTree . Of course, merging leads to \"write amplification\". All parts are immutable: they are only created and deleted, but not modified. When SELECT is run, it holds a snapshot of the table (a set of parts). After merging, we also keep old parts for some time to make recovery after failure easier, so if we see that some merged part is probably broken, we can replace it with its source parts.  MergeTree  is not an LSM tree because it doesn't contain \"memtable\" and \"log\": inserted data is written directly to the filesystem. This makes it suitable only to INSERT data in batches, not by individual row and not very frequently \u2013 about once per second is ok, but a thousand times a second is not. We did it this way for simplicity's sake, and because we are already inserting data in batches in our applications.   MergeTree tables can only have one (primary) index: there aren't any secondary indices. It would be nice to allow multiple physical representations under one logical table, for example, to store data in more than one physical order or even to allow representations with pre-aggregated data along with original data.   There are MergeTree engines that are doing additional work during background merges. Examples are  CollapsingMergeTree  and  AggregatingMergeTree . This could be treated as special support for updates. Keep in mind that these are not real updates because users usually have no control over the time when background merges will be executed, and data in a  MergeTree  table is almost always stored in more than one part, not in completely merged form.", 
            "title": "Merge Tree"
        }, 
        {
            "location": "/index.html#replication", 
            "text": "Replication in ClickHouse is implemented on a per-table basis. You could have some replicated and some non-replicated tables on the same server. You could also have tables replicated in different ways, such as one table with two-factor replication and another with three-factor.  Replication is implemented in the  ReplicatedMergeTree  storage engine. The path in  ZooKeeper  is specified as a parameter for the storage engine. All tables with the same path in  ZooKeeper  become replicas of each other: they synchronize their data and maintain consistency. Replicas can be added and removed dynamically simply by creating or dropping a table.  Replication uses an asynchronous multi-master scheme. You can insert data into any replica that has a session with  ZooKeeper , and data is replicated to all other replicas asynchronously. Because ClickHouse doesn't support UPDATEs, replication is conflict-free. As there is no quorum acknowledgment of inserts, just-inserted data might be lost if one node fails.  Metadata for replication is stored in ZooKeeper. There is a replication log that lists what actions to do. Actions are: get part; merge parts; drop partition, etc. Each replica copies the replication log to its queue and then executes the actions from the queue. For example, on insertion, the \"get part\" action is created in the log, and every replica downloads that part. Merges are coordinated between replicas to get byte-identical results. All parts are merged in the same way on all replicas. To achieve this, one replica is elected as the leader, and that replica initiates merges and writes \"merge parts\" actions to the log.  Replication is physical: only compressed parts are transferred between nodes, not queries. To lower the network cost (to avoid network amplification), merges are processed on each replica independently in most cases. Large merged parts are sent over the network only in cases of significant replication lag.  In addition, each replica stores its state in ZooKeeper as the set of parts and its checksums. When the state on the local filesystem diverges from the reference state in ZooKeeper, the replica restores its consistency by downloading missing and broken parts from other replicas. When there is some unexpected or broken data in the local filesystem, ClickHouse does not remove it, but moves it to a separate directory and forgets it.   The ClickHouse cluster consists of independent shards, and each shard consists of replicas. The cluster is not elastic, so after adding a new shard, data is not rebalanced between shards automatically. Instead, the cluster load will be uneven. This implementation gives you more control, and it is fine for relatively small clusters such as tens of nodes. But for clusters with hundreds of nodes that we are using in production, this approach becomes a significant drawback. We should implement a table engine that will span its data across the cluster with dynamically replicated regions that could be split and balanced between clusters automatically.", 
            "title": "Replication"
        }, 
        {
            "location": "/index.html#how-to-build-clickhouse-on-linux", 
            "text": "Build should work on Linux Ubuntu 12.04, 14.04 or newer.\nWith appropriate changes, it should also work on any other Linux distribution.\nThe build process is not intended to work on Mac OS X.\nOnly x86_64 with SSE 4.2 is supported. Support for AArch64 is experimental.  To test for SSE 4.2, do  grep -q sse4_2 /proc/cpuinfo    echo   SSE 4.2 supported   ||   echo   SSE 4.2 not supported", 
            "title": "How to build ClickHouse on Linux"
        }, 
        {
            "location": "/index.html#install-git-and-cmake", 
            "text": "sudo apt-get install git cmake  Or cmake3 instead of cmake on older systems.", 
            "title": "Install Git and CMake"
        }, 
        {
            "location": "/index.html#detect-the-number-of-threads", 
            "text": "export   THREADS = $( grep -c ^processor /proc/cpuinfo )", 
            "title": "Detect the number of threads"
        }, 
        {
            "location": "/index.html#install-gcc-7", 
            "text": "There are several ways to do this.", 
            "title": "Install GCC 7"
        }, 
        {
            "location": "/index.html#install-from-a-ppa-package", 
            "text": "sudo apt-get install software-properties-common\nsudo apt-add-repository ppa:ubuntu-toolchain-r/test\nsudo apt-get update\nsudo apt-get install gcc-7 g++-7", 
            "title": "Install from a PPA package"
        }, 
        {
            "location": "/index.html#install-from-sources", 
            "text": "Look at [https://github.com/yandex/ClickHouse/blob/master/utils/prepare-environment/install-gcc.sh]", 
            "title": "Install from sources"
        }, 
        {
            "location": "/index.html#use-gcc-7-for-builds", 
            "text": "export   CC = gcc-7 export   CXX = g++-7", 
            "title": "Use GCC 7 for builds"
        }, 
        {
            "location": "/index.html#install-required-libraries-from-packages", 
            "text": "sudo apt-get install libicu-dev libreadline-dev libmysqlclient-dev libssl-dev unixodbc-dev ninja-build", 
            "title": "Install required libraries from packages"
        }, 
        {
            "location": "/index.html#checkout-clickhouse-sources", 
            "text": "To get the latest stable version:  git clone -b stable --recursive git@github.com:yandex/ClickHouse.git ## or: git clone -b stable --recursive https://github.com/yandex/ClickHouse.git  cd  ClickHouse  For development, switch to the  master  branch.\nFor the latest release candidate, switch to the  testing  branch.", 
            "title": "Checkout ClickHouse sources"
        }, 
        {
            "location": "/index.html#build-clickhouse", 
            "text": "There are two build variants.", 
            "title": "Build ClickHouse"
        }, 
        {
            "location": "/index.html#build-release-package", 
            "text": "Install prerequisites to build Debian packages.  sudo apt-get install devscripts dupload fakeroot debhelper  Install the most recent version of Clang.  Clang is embedded into the ClickHouse package and used at runtime. The minimum version is 5.0. It is optional.  To install clang, see  utils/prepare-environment/install-clang.sh  You may also build ClickHouse with Clang for development purposes.\nFor production releases, GCC is used.  Run the release script:  rm -f ../clickhouse*.deb\n./release  You will find built packages in the parent directory:  ls -l ../clickhouse*.deb  Note that usage of debian packages is not required.\nClickHouse has no runtime dependencies except libc, so it could work on almost any Linux.  Installing freshly built packages on a development server:  sudo dpkg -i ../clickhouse*.deb\nsudo service clickhouse-server start", 
            "title": "Build release package"
        }, 
        {
            "location": "/index.html#build-to-work-with-code", 
            "text": "mkdir build cd  build\ncmake ..\nmake -j  $THREADS  cd  ..  To create an executable, run  make clickhouse .\nThis will create the  dbms/src/Server/clickhouse  executable, which can be used with  client  or  server  arguments.", 
            "title": "Build to work with code"
        }, 
        {
            "location": "/index.html#how-to-build-clickhouse-on-mac-os-x", 
            "text": "Build should work on Mac OS X 10.12. If you're using earlier version, you can try to build ClickHouse using Gentoo Prefix and clang sl in this instruction.\nWith appropriate changes, it should also work on any other Linux distribution.", 
            "title": "How to build ClickHouse on Mac OS X"
        }, 
        {
            "location": "/index.html#install-homebrew", 
            "text": "/usr/bin/ruby -e  $( curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install )", 
            "title": "Install Homebrew"
        }, 
        {
            "location": "/index.html#install-required-compilers-tools-and-libraries", 
            "text": "brew install cmake gcc icu4c mysql openssl unixodbc libtool gettext zlib readline boost --cc = gcc-7", 
            "title": "Install required compilers, tools, and libraries"
        }, 
        {
            "location": "/index.html#checkout-clickhouse-sources_1", 
            "text": "To get the latest stable version:  git clone -b stable --recursive --depth = 10  git@github.com:yandex/ClickHouse.git ## or: git clone -b stable --recursive --depth=10 https://github.com/yandex/ClickHouse.git  cd  ClickHouse  For development, switch to the  master  branch.\nFor the latest release candidate, switch to the  testing  branch.", 
            "title": "Checkout ClickHouse sources"
        }, 
        {
            "location": "/index.html#build-clickhouse_1", 
            "text": "mkdir build cd  build\ncmake .. -DCMAKE_CXX_COMPILER = ` which g++-7 `  -DCMAKE_C_COMPILER = ` which gcc-7 ` \nmake -j  ` sysctl -n hw.ncpu `  cd  ..", 
            "title": "Build ClickHouse"
        }, 
        {
            "location": "/index.html#caveats", 
            "text": "If you intend to run clickhouse-server, make sure to increase the system's maxfiles variable. See  MacOS.md  for more details.", 
            "title": "Caveats"
        }, 
        {
            "location": "/index.html#how-to-write-c-code", 
            "text": "", 
            "title": "How to write C++ code"
        }, 
        {
            "location": "/index.html#general-recommendations", 
            "text": "1.  The following are recommendations, not requirements.  2.  If you are editing code, it makes sense to follow the formatting of the existing code.  3.  Code style is needed for consistency. Consistency makes it easier to read the code, and it also makes it easier to search the code.  4.  Many of the rules do not have logical reasons; they are dictated by established practices.", 
            "title": "General recommendations"
        }, 
        {
            "location": "/index.html#formatting", 
            "text": "1.  Most of the formatting will be done automatically by  clang-format .  2.  Indents are 4 spaces. Configure your development environment so that a tab adds four spaces.  3.  A left curly bracket must be separated on a new line. (And the right one, as well.)  inline   void   readBoolText ( bool     x ,   ReadBuffer     buf )  { \n     char   tmp   =   0 ; \n     readChar ( tmp ,   buf ); \n     x   =   tmp   !=   0 ;  }   4. \nBut if the entire function body is quite short (a single statement), you can place it entirely on one line if you wish. Place spaces around curly braces (besides the space at the end of the line).  inline   size_t   mask ()   const                  {   return   buf_size ()   -   1 ;   }  inline   size_t   place ( HashValue   x )   const      {   return   x     mask ();   }   5.  For functions, don't put spaces around brackets.  void   reinsert ( const   Value     x )  memcpy ( buf [ place_value ],   x ,   sizeof ( x ));   6.  When using statements such as  if ,  for , and  while  (unlike function calls), put a space before the opening bracket.  cpp\n for (size_t i = 0; i   rows; i += storage.index_granularity)  7.  Put spaces around binary operators ( + ,  - ,  * ,  / ,  % , ...), as well as the ternary operator  ?: .  UInt16   year   =   ( s [ 0 ]   -   0 )   *   1000   +   ( s [ 1 ]   -   0 )   *   100   +   ( s [ 2 ]   -   0 )   *   10   +   ( s [ 3 ]   -   0 );  UInt8   month   =   ( s [ 5 ]   -   0 )   *   10   +   ( s [ 6 ]   -   0 );  UInt8   day   =   ( s [ 8 ]   -   0 )   *   10   +   ( s [ 9 ]   -   0 );   8.  If a line feed is entered, put the operator on a new line and increase the indent before it.  if   ( elapsed_ns ) \n     message      ( \n            rows_read_on_server   *   1000000000   /   elapsed_ns      rows/s.,  \n           bytes_read_on_server   *   1000.0   /   elapsed_ns      MB/s.)  ;   9.  You can use spaces for alignment within a line, if desired.  dst . ClickLogID           =   click . LogID ;  dst . ClickEventID         =   click . EventID ;  dst . ClickGoodEvent       =   click . GoodEvent ;   10.  Don't use spaces around the operators  . ,  -  .  If necessary, the operator can be wrapped to the next line. In this case, the offset in front of it is increased.  11.  Do not use a space to separate unary operators ( - ,  + ,  * ,  , ...) from the argument.  12.  Put a space after a comma, but not before it. The same rule goes for a semicolon inside a for expression.  13.  Do not use spaces to separate the  []  operator.  14.  In a  template  ...  expression, use a space between  template  and  . No spaces after   or before  .  template   typename   TKey ,   typename   TValue  struct   AggregatedStatElement  {}   15.  In classes and structures, public, private, and protected are written on the same level as the  class/struct , but all other internal elements should be deeper.  template   typename   T  class   MultiVersion  {  public : \n     /// Version of object for usage. shared_ptr manage lifetime of version. \n     using   Version   =   std :: shared_ptr const   T ; \n     ...  }   16.  If the same namespace is used for the entire file, and there isn't anything else significant, an offset is not necessary  inside namespace.  17.  If the block for  if ,  for ,  while ... expressions consists of a single statement, you don't need to use curly brackets. Place the statement on a separate line, instead. The same is true for a nested if, for, while... statement. But if the inner statement contains curly brackets or else, the external block should be written in curly brackets.  /// Finish write.  for   ( auto     stream   :   streams ) \n     stream . second - finalize ();   18.  There should be any spaces at the ends of lines.  19.  Sources are UTF-8 encoded.  20.  Non-ASCII characters can be used in string literals.    ,      ( timer . elapsed ()   /   chunks_stats . hits )      \u03bcsec/hit. ;   21.  Do not write multiple expressions in a single line.  22.  Group sections of code inside functions and separate them with no more than one empty line.  23.  Separate functions, classes, and so on with one or two empty lines.  24.  A  const  (related to a value) must be written before the type name.  //correct  const   char   *   pos  const   std :: string     s  //incorrect  char   const   *   pos   25.  When declaring a pointer or reference, the  *  and   symbols should be separated by spaces on both sides.  //correct  const   char   *   pos  //incorrect  const   char *   pos  const   char   * pos   26.  When using template types, alias them with the  using  keyword (except in the simplest cases).  In other words, the template parameters are specified only in  using  and aren't repeated in the code.  using  can be declared locally, such as inside a function.  //correct  using   FileStreams   =   std :: map std :: string ,   std :: shared_ptr Stream ;  FileStreams   streams ;  //incorrect  std :: map std :: string ,   std :: shared_ptr Stream   streams ;   27.  Do not declare several variables of different types in one statement.  //incorrect  int   x ,   * y ;   28.  Do not use C-style casts.  //incorrect  std :: cerr     ( int ) c   ;   std :: endl ;  //correct  std :: cerr     static_cast int ( c )     std :: endl ;   29.  In classes and structs, group members and functions separately inside each visibility scope.  30.  For small classes and structs, it is not necessary to separate the method declaration from the implementation.  The same is true for small methods in any classes or structs.  For templated classes and structs, don't separate the method declarations from the implementation (because otherwise they must be defined in the same translation unit).  31.  You can wrap lines at 140 characters, instead of 80.  32.  Always use the prefix increment/decrement operators if postfix is not required.  for   ( Names :: const_iterator   it   =   column_names . begin ();   it   !=   column_names . end ();   ++ it )", 
            "title": "Formatting"
        }, 
        {
            "location": "/index.html#comments_1", 
            "text": "1.  Be sure to add comments for all non-trivial parts of code.  This is very important. Writing the comment might help you realize that the code isn't necessary, or that it is designed wrong.  /** Part of piece of memory, that can be used.    * For example, if internal_buffer is 1MB, and there was only 10 bytes loaded to buffer from file for reading,    * then working_buffer will have size of only 10 bytes    * (working_buffer.end() will point to the position right after those 10 bytes available for read).  */   2.  Comments can be as detailed as necessary.  3.  Place comments before the code they describe. In rare cases, comments can come after the code, on the same line.  /** Parses and executes the query.  */  void   executeQuery ( \n     ReadBuffer     istr ,   /// Where to read the query from (and data for INSERT, if applicable) \n     WriteBuffer     ostr ,   /// Where to write the result \n     Context     context ,   /// DB, tables, data types, engines, functions, aggregate functions... \n     BlockInputStreamPtr     query_plan ,   /// A description of query processing can be included here \n     QueryProcessingStage :: Enum   stage   =   QueryProcessingStage :: Complete   /// The last stage to process the SELECT query to \n     )   4.  Comments should be written in English only.  5.  If you are writing a library, include detailed comments explaining it in the main header file.  6.  Do not add comments that do not provide additional information. In particular, do not leave empty comments like this:  /*  * Procedure Name:  * Original procedure name:  * Author:  * Date of creation:  * Dates of modification:  * Modification authors:  * Original file name:  * Purpose:  * Intent:  * Designation:  * Classes used:  * Constants:  * Local variables:  * Parameters:  * Date of creation:  * Purpose:  */   The example is borrowed from   http://home.tamk.fi/~jaalto/course/coding-style/doc/unmaintainable-code/ .  7.  Do not write garbage comments (author, creation date ..) at the beginning of each file.  8.  Single-line comments begin with three slashes:  ///   and multi-line comments begin with  /** . These comments are considered \"documentation\".  Note: You can use Doxygen to generate documentation from these comments. But Doxygen is not generally used because it is more convenient to navigate the code in the IDE.  9.  Multi-line comments must not have empty lines at the beginning and end (except the line that closes a multi-line comment).  10.  For commenting out code, use basic comments, not \"documenting\" comments.  11.  Delete the commented out parts of the code before commiting.  12.  Do not use profanity in comments or code.  13.  Do not use uppercase letters. Do not use excessive punctuation.  /// WHAT THE FAIL???   14.  Do not make delimeters from comments.  ///******************************************************  15.  Do not start discussions in comments.  /// Why did you do this stuff?  16.  There's no need to write a comment at the end of a block describing what it was about.  /// for", 
            "title": "Comments"
        }, 
        {
            "location": "/index.html#names", 
            "text": "1.  The names of variables and class members use lowercase letters with underscores.  size_t   max_block_size ;   2.  The names of functions (methods) use camelCase beginning with a lowercase letter.  std :: string   getName ()   const   override   {   return   Memory ;   }   3.  The names of classes (structures) use CamelCase beginning with an uppercase letter. Prefixes other than I are not used for interfaces.  class   StorageMemory   :   public   IStorage   4.  The names of usings follow the same rules as classes, or you can add _t at the end.  5.  Names of template type arguments for simple cases: T; T, U; T1, T2.  For more complex cases, either follow the rules for class names, or add the prefix T.  template   typename   TKey ,   typename   TValue  struct   AggregatedStatElement   6.  Names of template constant arguments: either follow the rules for variable names, or use N in simple cases.  template   bool   without_www  struct   ExtractDomain   7.  For abstract classes (interfaces) you can add the I prefix.  class   IBlockInputStream   8.  If you use a variable locally, you can use the short name.  In other cases, use a descriptive name that conveys the meaning.  bool   info_successfully_loaded   =   false ;   9.   define \u2018s should be in ALL_CAPS with underscores. The same is true for global constants.  ##define MAX_SRC_TABLE_NAMES_TO_STORE 1000   10.  File names should use the same style as their contents.  If a file contains a single class, name the file the same way as the class, in CamelCase.  If the file contains a single function, name the file the same way as the function, in camelCase.  11.  If the name contains an abbreviation, then:   For variable names, the abbreviation should use lowercase letters  mysql_connection  (not  mySQL_connection ).  For names of classes and functions, keep the uppercase letters in the abbreviation  MySQLConnection  (not  MySqlConnection ).   12.  Constructor arguments that are used just to initialize the class members should be named the same way as the class members, but with an underscore at the end.  FileQueueProcessor ( \n     const   std :: string     path_ , \n     const   std :: string     prefix_ , \n     std :: shared_ptr FileHandler   handler_ ) \n     :   path ( path_ ), \n     prefix ( prefix_ ), \n     handler ( handler_ ), \n     log ( Logger :: get ( FileQueueProcessor ))  {  }   The underscore suffix can be omitted if the argument is not used in the constructor body.  13.  There is no difference in the names of local variables and class members (no prefixes required).  timer   ( not   m_timer )   14.  Constants in enums use CamelCase beginning with an uppercase letter. ALL_CAPS is also allowed. If the enum is not local, use enum class.  enum   class   CompressionMethod  { \n     QuickLZ   =   0 , \n     LZ4       =   1 ,  };   15.  All names must be in English. Transliteration of Russian words is not allowed.  not   Stroka   16.  Abbreviations are acceptable if they are well known (when you can easily find the meaning of the abbreviation in Wikipedia or in a search engine).  `AST`, `SQL`.\n\nNot `NVDH` (some random letters)  Incomplete words are acceptable if the shortened version is common use.  You can also use an abbreviation if the full name is included next to it in the comments.  17.  File names with C++ source code must have the  .cpp  extension. Header files must have the  .h  extension.", 
            "title": "Names"
        }, 
        {
            "location": "/index.html#how-to-write-code", 
            "text": "1.  Memory management.  Manual memory deallocation (delete) can only be used in library code.  In library code, the delete operator can only be used in destructors.  In application code, memory must be freed by the object that owns it.  Examples:   The easiest way is to place an object on the stack, or make it a member of another class.  For a large number of small objects, use containers.  For automatic deallocation of a small number of objects that reside in the heap, use shared_ptr/unique_ptr.   2.  Resource management.  Use RAII and see the previous point.  3.  Error handling.  Use exceptions. In most cases, you only need to throw an exception, and don't need to catch it (because of RAII).  In offline data processing applications, it's often acceptable to not catch exceptions.  In servers that handle user requests, it's usually enough to catch exceptions at the top level of the connection handler.  /// If there were no other calculations yet, do it synchronously  if   ( ! started )  { \n     calculate (); \n     started   =   true ;  }  else      /// If the calculations are already in progress, wait for results \n     pool . wait ();  if   ( exception ) \n     exception - rethrow ();   Never hide exceptions without handling. Never just blindly put all exceptions to log.  Not  catch (...) {} .  If you need to ignore some exceptions, do so only for specific ones and rethrow the rest.  catch   ( const   DB :: Exception     e )  { \n     if   ( e . code ()   ==   ErrorCodes :: UNKNOWN_AGGREGATE_FUNCTION ) \n         return   nullptr ; \n     else \n         throw ;  }   When using functions with response codes or errno, always check the result and throw an exception in case of error.  if   ( 0   !=   close ( fd )) \n     throwFromErrno ( Cannot close file    +   file_name ,   ErrorCodes :: CANNOT_CLOSE_FILE );   Asserts are not used.  4.  Exception types.  There is no need to use complex exception hierarchy in application code. The exception text should be understandable to a system administrator.  5.  Throwing exceptions from destructors.  This is not recommended, but it is allowed.  Use the following options:   Create a (done() or finalize()) function that will do all the work in advance that might lead to an exception. If that function was called, there should be no exceptions in the destructor later.  Tasks that are too complex (such as sending messages over the network) can be put in separate method that the class user will have to call before destruction.  If there is an exception in the destructor, it\u2019s better to log it than to hide it (if the logger is available).  In simple applications, it is acceptable to rely on std::terminate (for cases of noexcept by default in C++11) to handle exceptions.   6.  Anonymous code blocks.  You can create a separate code block inside a single function in order to make certain variables local, so that the destructors are called when exiting the block.  Block   block   =   data . in - read ();  { \n     std :: lock_guard std :: mutex   lock ( mutex ); \n     data . ready   =   true ; \n     data . block   =   block ;  }  ready_any . set ();   7.  Multithreading.  For offline data processing applications:   Try to get the best possible performance on a single CPU core. You can then parallelize your code if necessary.   In server applications:   Use the thread pool to process requests. At this point, we haven't had any tasks that required userspace context switching.   Fork is not used for parallelization.  8.  Synchronizing threads.  Often it is possible to make different threads use different memory cells (even better: different cache lines,) and to not use any thread synchronization (except joinAll).  If synchronization is required, in most cases, it is sufficient to use mutex under lock_guard.  In other cases use system synchronization primitives. Do not use busy wait.  Atomic operations should be used only in the simplest cases.  Do not try to implement lock-free data structures unless it is your primary area of expertise.  9.  Pointers vs references.  In most cases, prefer references.  10.  const.  Use constant references, pointers to constants,  const_iterator ,  const  methods.  Consider  const  to be default and use non-const only when necessary.  When passing variable by value, using  const  usually does not make sense.  11.  unsigned.  Use  unsigned , if needed.  12.  Numeric types  Use  UInt8 ,  UInt16 ,  UInt32 ,  UInt64 ,  Int8 ,  Int16 ,  Int32 ,  Int64 , and  size_t ,  ssize_t ,  ptrdiff_t .  Don't use  signed/unsigned long ,  long long ,  short ,  signed char ,  unsigned char , or  char  types for numbers.  13.  Passing arguments.  Pass complex values by reference (including  std::string ).  If a function captures ownership of an objected created in the heap, make the argument type  shared_ptr  or  unique_ptr .  14.  Returning values.  In most cases, just use return. Do not write  [return std::move(res)]{.strike} .  If the function allocates an object on heap and returns it, use  shared_ptr  or  unique_ptr .  In rare cases you might need to return the value via an argument. In this case, the argument should be a reference.  using   AggregateFunctionPtr   =   std :: shared_ptr IAggregateFunction ;  /** Creates an aggregate function by name.   */  class   AggregateFunctionFactory  {  public : \n    AggregateFunctionFactory (); \n    AggregateFunctionPtr   get ( const   String     name ,   const   DataTypes     argument_types )   const ;   15.  namespace.  There is no need to use a separate namespace for application code or small libraries.  or small libraries.  For medium to large libraries, put everything in the namespace.  You can use the additional detail namespace in a library's  .h  file to hide implementation details.  In a  .cpp  file, you can use the static or anonymous namespace to hide symbols.  You can also use namespace for enums to prevent its names from polluting the outer namespace, but it\u2019s better to use the enum class.  16.  Delayed initialization.  If arguments are required for initialization then do not write a default constructor.  If later you\u2019ll need to delay initialization, you can add a default constructor that will create an invalid object. Or, for a small number of objects, you can use  shared_ptr/unique_ptr .  Loader ( DB :: Connection   *   connection_ ,   const   std :: string     query ,   size_t   max_block_size_ );  /// For delayed initialization  Loader ()   {}   17.  Virtual functions.  If the class is not intended for polymorphic use, you do not need to make functions virtual. This also applies to the destructor.  18.  Encodings.  Use UTF-8 everywhere. Use  std::string and char * . Do not use  std::wstring and wchar_t .  19.  Logging.  See the examples everywhere in the code.  Before committing, delete all meaningless and debug logging, and any other types of debug output.  Logging in cycles should be avoided, even on the Trace level.  Logs must be readable at any logging level.  Logging should only be used in application code, for the most part.  Log messages must be written in English.  The log should preferably be understandable for the system administrator.  Do not use profanity in the log.  Use UTF-8 encoding in the log. In rare cases you can use non-ASCII characters in the log.  20.  I/O.  Don't use iostreams in internal cycles that are critical for application performance (and never use stringstream).  Use the DB/IO library instead.  21.  Date and time.  See the  DateLUT  library.  22.  include.  Always use  #pragma once  instead of include guards.  23.  using.  The  using namespace  is not used.  It's fine if you are 'using' something specific, but make it local inside a class or function.  24.  Do not use trailing return type for functions unless necessary.  [auto f() - gt; void;]{.strike}  25.  Do not declare and init variables like this:  auto   s   =   std :: string { Hello };   Do it like this:  std :: string   s   =   Hello ;  std :: string   s { Hello };   26.  For virtual functions, write  virtual  in the base class, but write  override  in descendent classes.", 
            "title": "How to write code"
        }, 
        {
            "location": "/index.html#unused-features-of-c", 
            "text": "1.  Virtual inheritance is not used.  2.  Exception specifiers from C++03 are not used.  3.  Function try block is not used, except for the main function in tests.", 
            "title": "Unused features of C++"
        }, 
        {
            "location": "/index.html#platform", 
            "text": "1.  We write code for a specific platform.  But other things being equal, cross-platform or portable code is preferred.  2.  The language is C++17.  3.  The compiler is  gcc . At this time (December 2017), the code is compiled using version 7.2. (It can also be compiled using clang 5.)  The standard library is used (implementation of  libstdc++  or  libc++ ).  4.  OS: Linux Ubuntu, not older than Precise.  5.  Code is written for x86_64 CPU architecture.  The CPU instruction set is the minimum supported set among our servers. Currently, it is SSE 4.2.  6.  Use  -Wall -Wextra -Werror  compilation flags.  7.  Use static linking with all libraries except those that are difficult to connect to statically (see the output of the  ldd  command).  8.  Code is developed and debugged with release settings.", 
            "title": "Platform"
        }, 
        {
            "location": "/index.html#tools", 
            "text": "1.   KDevelop  is a good IDE.  2.  For debugging, use  gdb ,  valgrind  ( memcheck ),  strace ,  -fsanitize= , ...,  tcmalloc_minimal_debug .  3.  For profiling, use Linux Perf  valgrind  ( callgrind ),  strace-cf .  4.  Sources are in Git.  5.  Compilation is managed by  CMake .  6.  Releases are in  deb  packages.  7.  Commits to master must not break the build.  Though only selected revisions are considered workable.  8.  Make commits as often as possible, even if the code is only partially ready.  Use branches for this purpose.  If your code is not buildable yet, exclude it from the build before pushing to master. You'll need to finish it or remove it from master within a few days.  9.  For non-trivial changes, used branches and publish them on the server.  10.  Unused code is removed from the repository.", 
            "title": "Tools"
        }, 
        {
            "location": "/index.html#libraries", 
            "text": "1.  The C++14 standard library is used (experimental extensions are fine), as well as boost and Poco frameworks.  2.  If necessary, you can use any well-known libraries available in the OS package.  If there is a good solution already available, then use it, even if it means you have to install another library.  (But be prepared to remove bad libraries from code.)  3.  You can install a library that isn't in the packages, if the packages don't have what you need or have an outdated version or the wrong type of compilation.  4.  If the library is small and doesn't have its own complex build system, put the source files in the contrib folder.  5.  Preference is always given to libraries that are  already used.", 
            "title": "Libraries"
        }, 
        {
            "location": "/index.html#general-recommendations_1", 
            "text": "1.  Write as little code as possible.  2.  Try the simplest solution.  3.  Don't write code until you know how it's going to work and how the inner loop will function.  4.  In the simplest cases, use 'using' instead of classes or structs.  5.  If possible, do not write copy constructors, assignment operators, destructors (other than a virtual one, if the class contains at least one virtual function), mpve-constructors and move assignment operators. In other words, the compiler-generated functions must work correctly. You can use 'default'.  6.  Code simplification is encouraged. Reduce the size of your code where possible.", 
            "title": "General recommendations"
        }, 
        {
            "location": "/index.html#additional-recommendations", 
            "text": "1.  Explicit  std::  for types from  stddef.h  is not recommended.  We recommend writing  size_t  instead  std::size_t  because it's shorter.  But if you prefer,  std::  is acceptable.  2.  Explicit  std::  for functions from the standard C library is not recommended.  Write  memcpy  instead of  std::memcpy .  The reason is that there are similar non-standard functions, such as  memmem . We do use these functions on occasion. These functions do not exist in namespace  std .  If you write  std::memcpy  instead of  memcpy  everywhere, then  memmem  without  std::  will look awkward.  Nevertheless,  std::  is allowed if you prefer it.  3.  Using functions from C when the ones are available in the standard C++ library.  This is acceptable if it is more efficient.  For example, use  memcpy  instead of  std::copy  for copying large chunks of memory.  4.  Multiline function arguments.  Any of the following wrapping styles are allowed:  function ( \n     T1   x1 , \n     T2   x2 )   function ( \n     size_t   left ,   size_t   right , \n     const     RangesInDataParts   ranges , \n     size_t   limit )   function ( size_t   left ,   size_t   right , \n     const     RangesInDataParts   ranges , \n     size_t   limit )   function ( size_t   left ,   size_t   right , \n         const     RangesInDataParts   ranges , \n         size_t   limit )   function ( \n         size_t   left , \n         size_t   right , \n         const     RangesInDataParts   ranges , \n         size_t   limit )", 
            "title": "Additional recommendations"
        }, 
        {
            "location": "/index.html#how-to-run-clickhouse-tests", 
            "text": "The  clickhouse-test  utility that is used for functional testing is written using Python 2.x.It also requires you to have some third-party packages:  $ pip install lxml termcolor  In a nutshell:   Put the  clickhouse  program to  /usr/bin  (or  PATH )  Create a  clickhouse-client  symlink in  /usr/bin  pointing to  clickhouse  Start the  clickhouse  server  cd dbms/tests/  Run  ./clickhouse-test", 
            "title": "How to run ClickHouse tests"
        }, 
        {
            "location": "/index.html#example-usage", 
            "text": "Run  ./clickhouse-test --help  to see available options.  To run tests without having to create a symlink or mess with  PATH :  ./clickhouse-test -c  ../../build/dbms/src/Server/clickhouse --client   To run a single test, i.e.  00395_nullable :  ./clickhouse-test  00395", 
            "title": "Example usage"
        }, 
        {
            "location": "/index.html#roadmap", 
            "text": "", 
            "title": "Roadmap"
        }, 
        {
            "location": "/index.html#q1-2018", 
            "text": "", 
            "title": "Q1 2018"
        }, 
        {
            "location": "/index.html#new-fuctionality", 
            "text": "Support for  UPDATE  and  DELETE .    Multidimensional and nested arrays.    It can look something like this:  CREATE   TABLE   t  ( \n     x   Array ( Array ( String )), \n     z   Nested ( \n         x   Array ( String ), \n         y   Nested (...))  )  ENGINE   =   MergeTree   ORDER   BY   x    External MySQL and ODBC tables.   External tables can be integrated into ClickHouse using external dictionaries. This new functionality is a convenient alternative to connecting external tables.  SELECT   ...  FROM   mysql ( host:port ,   db ,   table ,   user ,   password ) `", 
            "title": "New fuctionality"
        }, 
        {
            "location": "/index.html#improvements", 
            "text": "Effective data copying between ClickHouse clusters.   Now you can copy data with the remote() function. For example:  INSERT INTO t SELECT * FROM remote(...) .  This operation will have improved performance.   O_DIRECT for merges.   This will improve the performance of the OS cache and \"hot\" queries.", 
            "title": "Improvements"
        }, 
        {
            "location": "/index.html#q2-2018", 
            "text": "", 
            "title": "Q2 2018"
        }, 
        {
            "location": "/index.html#new-functionality", 
            "text": "UPDATE/DELETE conform to the EU GDPR.    Protobuf and Parquet input and output formats.    Creating dictionaries using DDL queries.    Currently, dictionaries that are part of the database schema are defined in external XML files. This is inconvenient and counter-intuitive. The new approach should fix it.    Integration with LDAP.    WITH ROLLUP and WITH CUBE for GROUP BY.    Custom encoding and compression for each column individually.    As of now, ClickHouse supports LZ4 and ZSTD compression of columns, and compression settings are global (see the article  Compression in ClickHouse ). Per-column compression and encoding will provide more efficient data storage, which in turn will speed up queries.   Storing data on multiple disks on the same server.   This functionality will make it easier to extend the disk space, since different disk systems can be used for different databases or tables. Currently, users are forced to use symbolic links if the databases and tables must be stored on a different disk.", 
            "title": "New functionality"
        }, 
        {
            "location": "/index.html#improvements_1", 
            "text": "Many improvements and fixes are planned for the query execution system. For example:   Using an index for  in (subquery) .   The index is not used right now, which reduces performance.   Passing predicates from  where  to subqueries, and passing predicates to views.   The predicates must be passed, since the view is changed by the subquery. Performance is still low for view filters, and views can't use the primary key of the original table, which makes views useless for large tables.   Optimizing branching operations (ternary operator, if, multiIf).   ClickHouse currently performs all branches, even if they aren't necessary.   Using a primary key for GROUP BY and ORDER BY.   This will speed up certain types of queries with partially sorted data.", 
            "title": "Improvements"
        }, 
        {
            "location": "/index.html#q3-q4-2018", 
            "text": "We don't have any set plans yet, but the main projects will be:   Resource pools for executing queries.   This will make load management more efficient.   ANSI SQL JOIN syntax.   Improve ClickHouse compatibility with many SQL tools.", 
            "title": "Q3-Q4 2018"
        }
    ]
}