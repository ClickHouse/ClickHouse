---
machine_translated: true
machine_translated_rev: d734a8e46ddd7465886ba4133bff743c55190626
---

行1:
──────
カウント():6344
sym:StackTrace::StackTrace(ucontext\_t const&)
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/Common/StackTrace。cpp:208
DB::(匿名ネームスペース)::writeTraceInfo(DB::TimerType,int,siginfo\_t*,無効*\[クローン。イスラ0\]
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/IO/BufferBase。h:99

読む

DB::ReadBufferFromFileDescriptor::nextImpl()
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/IO/ReadBufferFromFileDescriptor.cpp:56
DB::CompressedReadBufferBase::readCompressedData(unsigned long&,unsigned long&)
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/IO/ReadBuffer.h:54
DB::CompressedReadBufferFromFile::nextImpl()
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/Compression/CompressedReadBufferFromFile。cpp:22
DB::CompressedReadBufferFromFile::seek(unsigned long,unsigned long)
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/Compression/CompressedReadBufferFromFile。cpp:63
DB::Mergetreaderstream::seekToMark(unsigned long)
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/ストレージ/MergeTree/Mergetreaderstream。cpp:200
データベースサブストリングを使用すると、データベースサブストリングを使用してデータベースサブストリングを行うことができます。<DB::IDataType::Substream> \>const&),DB::MergeTreeReader::readData(std::\_\_cxx11::basic\_string\<char,std::char\_traits<char>,std::allocator<char> \>const&,DB::IDataType const&,DB::IColumn&,unsigned long,bool,unsigned long,bool)::{lambda(bool)\#1}::operator(bool)const::{lambda(std::vector\<DB::IDataType::Substream,std:::allocator<DB::IDataType::Substream> \>const&)\#1}\>::\_M\_invoke(std::\_Any\_data const&,std::vector\<DB::IDataType::Substream,std::allocator<DB::IDataType::Substream> \>const&)
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/ストレージ/MergeTree/MergeTreeReader。cpp:212
DB::IDataType::deserializeBinaryBulkWithMultiplestreams(DB::IColumn&,unsigned long,DB::IDataType::DeserializeBinaryBulkSettings&,std::shared\_ptr<DB::IDataType::DeserializeBinaryBulkState>&)const
/usr/local/include/c++/9.1.0/bits/std\_function。h:690
DB::MergeTreeReader::readData(std::\_\_cxx11::basic\_string\<char,std::char\_traits<char>,std::allocator<char> \>const&,DB::IDataType const&,DB::IColumn&,unsigned long,bool,unsigned long,bool)
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/ストレージ/MergeTree/MergeTreeReader。cpp:232
DB::MergeTreeReader::readRows(unsigned long,bool,unsigned long,DB::Block&)
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/ストレージ/MergeTree/MergeTreeReader。cpp:111
DB::MergeTreeRangeReader::DelayedStream::finalize(DB::Block&)
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/ストレージ/MergeTree/MergeTreeRangeReader。cpp:35
DB::MergeTreeRangeReader::continueReadingChain(DB::MergeTreeRangeReader::ReadResult&)
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/ストレージ/MergeTree/MergeTreeRangeReader。cpp:219
DB::MergeTreeRangeReader::read(unsigned long,std::vector\<DB::MarkRange,std:::allocator<DB::MarkRange> \>&)
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/ストレージ/MergeTree/MergeTreeRangeReader。cpp:487
DB::MergeTreeBaseSelectBlockInputStream::readFromPartImpl()
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/ストレージ/MergeTree/MergeTreeBaseSelectBlockInputStream。cpp:158
DB::MergeTreeBaseSelectBlockInputStream::readImpl()
/usr/local/include/c++/9.1.0/bits/stl\_vector。h:108
DB::IBlockInputStream::read()
/usr/local/include/c++/9.1.0/bits/stl\_vector。h:108
DB::ExpressionBlockInputStream::readImpl()
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/データストリーム/ExpressionBlockInputStream.cpp:34
DB::IBlockInputStream::read()
/usr/local/include/c++/9.1.0/bits/stl\_vector。h:108
DB::PartialSortingBlockInputStream::readImpl()
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/データストリーム/PartialSortingBlockInputStream.cpp:13
DB::IBlockInputStream::read()
/usr/local/include/c++/9.1.0/bits/stl\_vector。h:108
DB::ParallelInputsProcessor<DB::UnionBlockInputStream::Handler>::ループ(unsigned long)
/usr/local/include/c++/9.1.0/bits/atomic\_base。h:419
DB::ParallelInputsProcessor<DB::UnionBlockInputStream::Handler>::スレッド(std::shared\_ptr<DB::ThreadGroupStatus>,符号なし長)
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/データストリーム/ParallelInputsProcessor。h:215
次の例では、threadfromglobalpoolについて説明します<DB::UnionBlockInputStream::Handler>::*ﾂつｨﾂ姪"ﾂつ"ﾂ債ﾂづｭﾂつｹﾂ-faq<DB::ThreadGroupStatus>、unsigned long),DB::Parallelinputプロセッサ<DB::UnionBlockInputStream::Handler>* ﾂつｨﾂ姪"ﾂつ"ﾂ債ﾂづｭﾂつｹ<DB::ThreadGroupStatus> コンストラクターです。<DB::UnionBlockInputStream::Handler>::*&&)(std::shared\_ptr<DB::ThreadGroupStatus>、unsigned long),DB::Parallelinputプロセッサ<DB::UnionBlockInputStream::Handler>*&&,std::shared\_ptr<DB::ThreadGroupStatus>&&,unsigned long&)::{lambda()\#1}::operator()()const
/usr/local/include/c++/9.1.0/bits/shared\_ptr\_base。h:729
ThreadPoolImpl<std::thread>::ワーカー(std::\_List\_iterator<std::thread>)
/usr/local/include/c++/9.1.0/bits/unique\_lock。h:69
execute\_native\_thread\_routine
/home/milovidov/ClickHouse/ci/workspace/gcc/gcc-build/x86\_64-pc-linux-gnu/libstdc++-v3/include/bits/unique\_ptr.h:81
start\_thread

\_\_clone

行2:
──────
カウント():3295
sym:StackTrace::StackTrace(ucontext\_t const&)
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/Common/StackTrace。cpp:208
DB::(匿名ネームスペース)::writeTraceInfo(DB::TimerType,int,siginfo\_t*,無効*\[クローン。イスラ0\]
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/IO/BufferBase。h:99

\_\_pthread\_cond\_wait

クライアントコンピューターのパフォーマンスを監視します。<std::mutex>&)
/home/milovidov/ClickHouse/ci/workspace/gcc/gcc-build/x86\_64-pc-linux-gnu/libstdc++-v3/src/c++11/../../../../../gcc-9.1.0/libstdc++-v3/src/c++11/condition\_variable.cc:55
Poco::Semaphore::wait()
/ホーム/milovidov/ClickHouse/build\_gcc9/../contrib/ポコ/財団/src/セマフォ.cpp:61
DB::UnionBlockInputStream::readImpl()
/usr/local/include/c++/9.1.0/x86\_64-pc-linux-gnu/bits/gthr-default.h:748
DB::IBlockInputStream::read()
/usr/local/include/c++/9.1.0/bits/stl\_vector。h:108
DB::MergeSortingBlockInputStream::readImpl()
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/コア/ブロック.h:90
DB::IBlockInputStream::read()
/usr/local/include/c++/9.1.0/bits/stl\_vector。h:108
DB::ExpressionBlockInputStream::readImpl()
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/データストリーム/ExpressionBlockInputStream.cpp:34
DB::IBlockInputStream::read()
/usr/local/include/c++/9.1.0/bits/stl\_vector。h:108
DB::LimitBlockInputStream::readImpl()
/usr/local/include/c++/9.1.0/bits/stl\_vector。h:108
DB::IBlockInputStream::read()
/usr/local/include/c++/9.1.0/bits/stl\_vector。h:108
DB::AsynchronousBlockInputStream::calculate()
/usr/local/include/c++/9.1.0/bits/stl\_vector。h:108
std::\_Function\_handler\<void(),DB::AsynchronousBlockInputStream::next()::{lambda()\#1}\>::\_M\_invoke(std:::\_Any\_data const&)
/usr/local/include/c++/9.1.0/bits/atomic\_base。h:551
ThreadPoolImpl<ThreadFromGlobalPool>::ワーカー(std::\_List\_iterator<ThreadFromGlobalPool>)
/usr/local/include/c++/9.1.0/x86\_64-pc-linux-gnu/bits/gthr-default.h:748
ﾂ環板篠ｮﾂ嘉ｯﾂ偲青ﾂエﾂδﾂ-ﾂアﾂイﾂ-ﾂエﾂス<ThreadFromGlobalPool>::scheduleImpl<void>(std::function\<void()\>,int,std::省略可能<unsigned long>)::{lambda()\#3}\>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function\<void()\>,int,std::省略可能<unsigned long>)::{ラムダ()\#3}&&)::{ラムダ()\#1}::演算子()()const
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/共通/スレッドプール。h:146
ThreadPoolImpl<std::thread>::ワーカー(std::\_List\_iterator<std::thread>)
/usr/local/include/c++/9.1.0/bits/unique\_lock。h:69
execute\_native\_thread\_routine
/home/milovidov/ClickHouse/ci/workspace/gcc/gcc-build/x86\_64-pc-linux-gnu/libstdc++-v3/include/bits/unique\_ptr.h:81
start\_thread

\_\_clone

3行目:
──────
カウント():1978
sym:StackTrace::StackTrace(ucontext\_t const&)
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/Common/StackTrace。cpp:208
DB::(匿名ネームスペース)::writeTraceInfo(DB::TimerType,int,siginfo\_t*,無効*\[クローン。イスラ0\]
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/IO/BufferBase。h:99

DB::VolnitskyBase\<true,true,DB::StringSearcher\<true,true\>\>::search(unsigned char const\*,unsigned long)const
/opt/milovidov/ClickHouse/build\_gcc9/プログラム/clickhouse
DB::MatchImpl\<true,false\>::vector\_constant(DB::PODArray\<unsigned char,4096ul,Allocatorwithint\<false,Allocatorhint,AllocatorHints::DefaultHint,67108864ul\>,15ul,16ul\>const&,DB::PODArray\<long,4096ul,Allocatorhint\<false,Allocatorhint:67108864,15ul\>,\_\_\_\_\_\_\_\_\_\_\_\_\_,cxx11::Basic\_string\<char,std::char\_traits<char>,std::allocator<char> \>const&,DB::PODArray\<unsigned char,4096ul,AllocatorWithHint\<false,AllocatorHints::DefaultHint,67108864ul\>,15ul,16ul\>&)
/opt/milovidov/ClickHouse/build\_gcc9/プログラム/clickhouse
DB::FunctionsStringSearch\<DB::MatchImpl\<true,false\>,DB::NameLike\>::executeImpl(DB::Block&,std::vector\<unsigned long,std::allocator<unsigned long> \>const&、unsigned long、unsigned long)
/opt/milovidov/ClickHouse/build\_gcc9/プログラム/clickhouse
DB::PreparedFunctionImpl::execute(DB::Block&,std::vector\<unsigned long,std::allocator<unsigned long> \>const&,unsigned long,unsigned long,bool)
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/Functions/IFunction.cpp:464
DB::ExpressionAction::execute(DB::Block&,bool)const
/usr/local/include/c++/9.1.0/bits/stl\_vector。h:677
DB::ExpressionActions::execute(DB::Block&,bool)const
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/インタプリタ/ExpressionActions。cpp:739
DB::MergeTreeRangeReader::executePrewhereActionsAndFilterColumns(DB::MergeTreeRangeReader::ReadResult&)
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/ストレージ/MergeTree/MergeTreeRangeReader。cpp:660
DB::MergeTreeRangeReader::read(unsigned long,std::vector\<DB::MarkRange,std:::allocator<DB::MarkRange> \>&)
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/ストレージ/MergeTree/MergeTreeRangeReader。cpp:546
DB::MergeTreeRangeReader::read(unsigned long,std::vector\<DB::MarkRange,std:::allocator<DB::MarkRange> \>&)
/usr/local/include/c++/9.1.0/bits/stl\_vector。h:108
DB::MergeTreeBaseSelectBlockInputStream::readFromPartImpl()
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/ストレージ/MergeTree/MergeTreeBaseSelectBlockInputStream。cpp:158
DB::MergeTreeBaseSelectBlockInputStream::readImpl()
/usr/local/include/c++/9.1.0/bits/stl\_vector。h:108
DB::IBlockInputStream::read()
/usr/local/include/c++/9.1.0/bits/stl\_vector。h:108
DB::ExpressionBlockInputStream::readImpl()
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/データストリーム/ExpressionBlockInputStream.cpp:34
DB::IBlockInputStream::read()
/usr/local/include/c++/9.1.0/bits/stl\_vector。h:108
DB::PartialSortingBlockInputStream::readImpl()
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/データストリーム/PartialSortingBlockInputStream.cpp:13
DB::IBlockInputStream::read()
/usr/local/include/c++/9.1.0/bits/stl\_vector。h:108
DB::ParallelInputsProcessor<DB::UnionBlockInputStream::Handler>::ループ(unsigned long)
/usr/local/include/c++/9.1.0/bits/atomic\_base。h:419
DB::ParallelInputsProcessor<DB::UnionBlockInputStream::Handler>::スレッド(std::shared\_ptr<DB::ThreadGroupStatus>,符号なし長)
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/データストリーム/ParallelInputsProcessor。h:215
次の例では、threadfromglobalpoolについて説明します<DB::UnionBlockInputStream::Handler>::*ﾂつｨﾂ姪"ﾂつ"ﾂ債ﾂづｭﾂつｹﾂ-faq<DB::ThreadGroupStatus>、unsigned long),DB::Parallelinputプロセッサ<DB::UnionBlockInputStream::Handler>* ﾂつｨﾂ姪"ﾂつ"ﾂ債ﾂづｭﾂつｹ<DB::ThreadGroupStatus> コンストラクターです。<DB::UnionBlockInputStream::Handler>::*&&)(std::shared\_ptr<DB::ThreadGroupStatus>、unsigned long),DB::Parallelinputプロセッサ<DB::UnionBlockInputStream::Handler>*&&,std::shared\_ptr<DB::ThreadGroupStatus>&&,unsigned long&)::{lambda()\#1}::operator()()const
/usr/local/include/c++/9.1.0/bits/shared\_ptr\_base。h:729
ThreadPoolImpl<std::thread>::ワーカー(std::\_List\_iterator<std::thread>)
/usr/local/include/c++/9.1.0/bits/unique\_lock。h:69
execute\_native\_thread\_routine
/home/milovidov/ClickHouse/ci/workspace/gcc/gcc-build/x86\_64-pc-linux-gnu/libstdc++-v3/include/bits/unique\_ptr.h:81
start\_thread

\_\_clone

4行目:
──────
カウント():1913
sym:StackTrace::StackTrace(ucontext\_t const&)
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/Common/StackTrace。cpp:208
DB::(匿名ネームスペース)::writeTraceInfo(DB::TimerType,int,siginfo\_t*,無効*\[クローン。イスラ0\]
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/IO/BufferBase。h:99

DB::VolnitskyBase\<true,true,DB::StringSearcher\<true,true\>\>::search(unsigned char const\*,unsigned long)const
/opt/milovidov/ClickHouse/build\_gcc9/プログラム/clickhouse
DB::MatchImpl\<true,false\>::vector\_constant(DB::PODArray\<unsigned char,4096ul,Allocatorwithint\<false,Allocatorhint,AllocatorHints::DefaultHint,67108864ul\>,15ul,16ul\>const&,DB::PODArray\<long,4096ul,Allocatorhint\<false,Allocatorhint:67108864,15ul\>,\_\_\_\_\_\_\_\_\_\_\_\_\_,cxx11::Basic\_string\<char,std::char\_traits<char>,std::allocator<char> \>const&,DB::PODArray\<unsigned char,4096ul,AllocatorWithHint\<false,AllocatorHints::DefaultHint,67108864ul\>,15ul,16ul\>&)
/opt/milovidov/ClickHouse/build\_gcc9/プログラム/clickhouse
DB::FunctionsStringSearch\<DB::MatchImpl\<true,false\>,DB::NameLike\>::executeImpl(DB::Block&,std::vector\<unsigned long,std::allocator<unsigned long> \>const&、unsigned long、unsigned long)
/opt/milovidov/ClickHouse/build\_gcc9/プログラム/clickhouse
DB::PreparedFunctionImpl::execute(DB::Block&,std::vector\<unsigned long,std::allocator<unsigned long> \>const&,unsigned long,unsigned long,bool)
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/Functions/IFunction.cpp:464
DB::ExpressionAction::execute(DB::Block&,bool)const
/usr/local/include/c++/9.1.0/bits/stl\_vector。h:677
DB::ExpressionActions::execute(DB::Block&,bool)const
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/インタプリタ/ExpressionActions。cpp:739
DB::MergeTreeRangeReader::executePrewhereActionsAndFilterColumns(DB::MergeTreeRangeReader::ReadResult&)
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/ストレージ/MergeTree/MergeTreeRangeReader。cpp:660
DB::MergeTreeRangeReader::read(unsigned long,std::vector\<DB::MarkRange,std:::allocator<DB::MarkRange> \>&)
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/ストレージ/MergeTree/MergeTreeRangeReader。cpp:546
DB::MergeTreeRangeReader::read(unsigned long,std::vector\<DB::MarkRange,std:::allocator<DB::MarkRange> \>&)
/usr/local/include/c++/9.1.0/bits/stl\_vector。h:108
DB::MergeTreeBaseSelectBlockInputStream::readFromPartImpl()
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/ストレージ/MergeTree/MergeTreeBaseSelectBlockInputStream。cpp:158
DB::MergeTreeBaseSelectBlockInputStream::readImpl()
/usr/local/include/c++/9.1.0/bits/stl\_vector。h:108
DB::IBlockInputStream::read()
/usr/local/include/c++/9.1.0/bits/stl\_vector。h:108
DB::ExpressionBlockInputStream::readImpl()
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/データストリーム/ExpressionBlockInputStream.cpp:34
DB::IBlockInputStream::read()
/usr/local/include/c++/9.1.0/bits/stl\_vector。h:108
DB::PartialSortingBlockInputStream::readImpl()
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/データストリーム/PartialSortingBlockInputStream.cpp:13
DB::IBlockInputStream::read()
/usr/local/include/c++/9.1.0/bits/stl\_vector。h:108
DB::ParallelInputsProcessor<DB::UnionBlockInputStream::Handler>::ループ(unsigned long)
/usr/local/include/c++/9.1.0/bits/atomic\_base。h:419
DB::ParallelInputsProcessor<DB::UnionBlockInputStream::Handler>::スレッド(std::shared\_ptr<DB::ThreadGroupStatus>,符号なし長)
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/データストリーム/ParallelInputsProcessor。h:215
次の例では、threadfromglobalpoolについて説明します<DB::UnionBlockInputStream::Handler>::*ﾂつｨﾂ姪"ﾂつ"ﾂ債ﾂづｭﾂつｹﾂ-faq<DB::ThreadGroupStatus>、unsigned long),DB::Parallelinputプロセッサ<DB::UnionBlockInputStream::Handler>* ﾂつｨﾂ姪"ﾂつ"ﾂ債ﾂづｭﾂつｹ<DB::ThreadGroupStatus> コンストラクターです。<DB::UnionBlockInputStream::Handler>::*&&)(std::shared\_ptr<DB::ThreadGroupStatus>、unsigned long),DB::Parallelinputプロセッサ<DB::UnionBlockInputStream::Handler>*&&,std::shared\_ptr<DB::ThreadGroupStatus>&&,unsigned long&)::{lambda()\#1}::operator()()const
/usr/local/include/c++/9.1.0/bits/shared\_ptr\_base。h:729
ThreadPoolImpl<std::thread>::ワーカー(std::\_List\_iterator<std::thread>)
/usr/local/include/c++/9.1.0/bits/unique\_lock。h:69
execute\_native\_thread\_routine
/home/milovidov/ClickHouse/ci/workspace/gcc/gcc-build/x86\_64-pc-linux-gnu/libstdc++-v3/include/bits/unique\_ptr.h:81
start\_thread

\_\_clone

5行目:
──────
カウント():1672
sym:StackTrace::StackTrace(ucontext\_t const&)
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/Common/StackTrace。cpp:208
DB::(匿名ネームスペース)::writeTraceInfo(DB::TimerType,int,siginfo\_t*,無効*\[クローン。イスラ0\]
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/IO/BufferBase。h:99

DB::VolnitskyBase\<true,true,DB::StringSearcher\<true,true\>\>::search(unsigned char const\*,unsigned long)const
/opt/milovidov/ClickHouse/build\_gcc9/プログラム/clickhouse
DB::MatchImpl\<true,false\>::vector\_constant(DB::PODArray\<unsigned char,4096ul,Allocatorwithint\<false,Allocatorhint,AllocatorHints::DefaultHint,67108864ul\>,15ul,16ul\>const&,DB::PODArray\<long,4096ul,Allocatorhint\<false,Allocatorhint:67108864,15ul\>,\_\_\_\_\_\_\_\_\_\_\_\_\_,cxx11::Basic\_string\<char,std::char\_traits<char>,std::allocator<char> \>const&,DB::PODArray\<unsigned char,4096ul,AllocatorWithHint\<false,AllocatorHints::DefaultHint,67108864ul\>,15ul,16ul\>&)
/opt/milovidov/ClickHouse/build\_gcc9/プログラム/clickhouse
DB::FunctionsStringSearch\<DB::MatchImpl\<true,false\>,DB::NameLike\>::executeImpl(DB::Block&,std::vector\<unsigned long,std::allocator<unsigned long> \>const&、unsigned long、unsigned long)
/opt/milovidov/ClickHouse/build\_gcc9/プログラム/clickhouse
DB::PreparedFunctionImpl::execute(DB::Block&,std::vector\<unsigned long,std::allocator<unsigned long> \>const&,unsigned long,unsigned long,bool)
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/Functions/IFunction.cpp:464
DB::ExpressionAction::execute(DB::Block&,bool)const
/usr/local/include/c++/9.1.0/bits/stl\_vector。h:677
DB::ExpressionActions::execute(DB::Block&,bool)const
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/インタプリタ/ExpressionActions。cpp:739
DB::MergeTreeRangeReader::executePrewhereActionsAndFilterColumns(DB::MergeTreeRangeReader::ReadResult&)
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/ストレージ/MergeTree/MergeTreeRangeReader。cpp:660
DB::MergeTreeRangeReader::read(unsigned long,std::vector\<DB::MarkRange,std:::allocator<DB::MarkRange> \>&)
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/ストレージ/MergeTree/MergeTreeRangeReader。cpp:546
DB::MergeTreeRangeReader::read(unsigned long,std::vector\<DB::MarkRange,std:::allocator<DB::MarkRange> \>&)
/usr/local/include/c++/9.1.0/bits/stl\_vector。h:108
DB::MergeTreeBaseSelectBlockInputStream::readFromPartImpl()
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/ストレージ/MergeTree/MergeTreeBaseSelectBlockInputStream。cpp:158
DB::MergeTreeBaseSelectBlockInputStream::readImpl()
/usr/local/include/c++/9.1.0/bits/stl\_vector。h:108
DB::IBlockInputStream::read()
/usr/local/include/c++/9.1.0/bits/stl\_vector。h:108
DB::ExpressionBlockInputStream::readImpl()
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/データストリーム/ExpressionBlockInputStream.cpp:34
DB::IBlockInputStream::read()
/usr/local/include/c++/9.1.0/bits/stl\_vector。h:108
DB::PartialSortingBlockInputStream::readImpl()
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/データストリーム/PartialSortingBlockInputStream.cpp:13
DB::IBlockInputStream::read()
/usr/local/include/c++/9.1.0/bits/stl\_vector。h:108
DB::ParallelInputsProcessor<DB::UnionBlockInputStream::Handler>::ループ(unsigned long)
/usr/local/include/c++/9.1.0/bits/atomic\_base。h:419
DB::ParallelInputsProcessor<DB::UnionBlockInputStream::Handler>::スレッド(std::shared\_ptr<DB::ThreadGroupStatus>,符号なし長)
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/データストリーム/ParallelInputsProcessor。h:215
次の例では、threadfromglobalpoolについて説明します<DB::UnionBlockInputStream::Handler>::*ﾂつｨﾂ姪"ﾂつ"ﾂ債ﾂづｭﾂつｹﾂ-faq<DB::ThreadGroupStatus>、unsigned long),DB::Parallelinputプロセッサ<DB::UnionBlockInputStream::Handler>* ﾂつｨﾂ姪"ﾂつ"ﾂ債ﾂづｭﾂつｹ<DB::ThreadGroupStatus> コンストラクターです。<DB::UnionBlockInputStream::Handler>::*&&)(std::shared\_ptr<DB::ThreadGroupStatus>、unsigned long),DB::Parallelinputプロセッサ<DB::UnionBlockInputStream::Handler>*&&,std::shared\_ptr<DB::ThreadGroupStatus>&&,unsigned long&)::{lambda()\#1}::operator()()const
/usr/local/include/c++/9.1.0/bits/shared\_ptr\_base。h:729
ThreadPoolImpl<std::thread>::ワーカー(std::\_List\_iterator<std::thread>)
/usr/local/include/c++/9.1.0/bits/unique\_lock。h:69
execute\_native\_thread\_routine
/home/milovidov/ClickHouse/ci/workspace/gcc/gcc-build/x86\_64-pc-linux-gnu/libstdc++-v3/include/bits/unique\_ptr.h:81
start\_thread

\_\_clone

6行目:
──────
カウント():1531
sym:StackTrace::StackTrace(ucontext\_t const&)
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/Common/StackTrace。cpp:208
DB::(匿名ネームスペース)::writeTraceInfo(DB::TimerType,int,siginfo\_t*,無効*\[クローン。イスラ0\]
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/IO/BufferBase。h:99

読む

DB::ReadBufferFromFileDescriptor::nextImpl()
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/IO/ReadBufferFromFileDescriptor.cpp:56
DB::CompressedReadBufferBase::readCompressedData(unsigned long&,unsigned long&)
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/IO/ReadBuffer.h:54
DB::CompressedReadBufferFromFile::nextImpl()
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/Compression/CompressedReadBufferFromFile。cpp:22
void DB::deserializeBinarySSE2\<4\>(DB::PODArray\<unsigned char,4096ul,Allocatorhint\<false,AllocatorHints::DefaultHint,67108864ul\>,15ul,16ul\>&,DB::PODArray\<unsigned,4096ul,Allocatorhint\<false,Allocatorhint\<false,allocatorhint,67108864,15,unsigned\>,16buff,&)
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/IO/ReadBuffer.h:53
DB::DataTypeString::deserializeBinaryBulk(DB::IColumn&,DB::ReadBuffer&,unsigned long,double)const
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/データタイプ/DataTypeString。cpp:202
DB::MergeTreeReader::readData(std::\_\_cxx11::basic\_string\<char,std::char\_traits<char>,std::allocator<char> \>const&,DB::IDataType const&,DB::IColumn&,unsigned long,bool,unsigned long,bool)
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/ストレージ/MergeTree/MergeTreeReader。cpp:232
DB::MergeTreeReader::readRows(unsigned long,bool,unsigned long,DB::Block&)
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/ストレージ/MergeTree/MergeTreeReader。cpp:111
DB::MergeTreeRangeReader::DelayedStream::finalize(DB::Block&)
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/ストレージ/MergeTree/MergeTreeRangeReader。cpp:35
データベースのメンバーシップは、データベースのメンバーシップに基づいています。<DB::MarkRange> \>&)
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/ストレージ/MergeTree/MergeTreeRangeReader。cpp:219
DB::MergeTreeRangeReader::read(unsigned long,std::vector\<DB::MarkRange,std:::allocator<DB::MarkRange> \>&)
/usr/local/include/c++/9.1.0/bits/stl\_vector。h:108
DB::MergeTreeRangeReader::read(unsigned long,std::vector\<DB::MarkRange,std:::allocator<DB::MarkRange> \>&)
/usr/local/include/c++/9.1.0/bits/stl\_vector。h:108
DB::MergeTreeBaseSelectBlockInputStream::readFromPartImpl()
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/ストレージ/MergeTree/MergeTreeBaseSelectBlockInputStream。cpp:158
DB::MergeTreeBaseSelectBlockInputStream::readImpl()
/usr/local/include/c++/9.1.0/bits/stl\_vector。h:108
DB::IBlockInputStream::read()
/usr/local/include/c++/9.1.0/bits/stl\_vector。h:108
DB::ExpressionBlockInputStream::readImpl()
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/データストリーム/ExpressionBlockInputStream.cpp:34
DB::IBlockInputStream::read()
/usr/local/include/c++/9.1.0/bits/stl\_vector。h:108
DB::PartialSortingBlockInputStream::readImpl()
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/データストリーム/PartialSortingBlockInputStream.cpp:13
DB::IBlockInputStream::read()
/usr/local/include/c++/9.1.0/bits/stl\_vector。h:108
DB::ParallelInputsProcessor<DB::UnionBlockInputStream::Handler>::ループ(unsigned long)
/usr/local/include/c++/9.1.0/bits/atomic\_base。h:419
DB::ParallelInputsProcessor<DB::UnionBlockInputStream::Handler>::スレッド(std::shared\_ptr<DB::ThreadGroupStatus>,符号なし長)
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/データストリーム/ParallelInputsProcessor。h:215
次の例では、threadfromglobalpoolについて説明します<DB::UnionBlockInputStream::Handler>::*ﾂつｨﾂ姪"ﾂつ"ﾂ債ﾂづｭﾂつｹﾂ-faq<DB::ThreadGroupStatus>、unsigned long),DB::Parallelinputプロセッサ<DB::UnionBlockInputStream::Handler>* ﾂつｨﾂ姪"ﾂつ"ﾂ債ﾂづｭﾂつｹ<DB::ThreadGroupStatus> コンストラクターです。<DB::UnionBlockInputStream::Handler>::*&&)(std::shared\_ptr<DB::ThreadGroupStatus>、unsigned long),DB::Parallelinputプロセッサ<DB::UnionBlockInputStream::Handler>*&&,std::shared\_ptr<DB::ThreadGroupStatus>&&,unsigned long&)::{lambda()\#1}::operator()()const
/usr/local/include/c++/9.1.0/bits/shared\_ptr\_base。h:729
ThreadPoolImpl<std::thread>::ワーカー(std::\_List\_iterator<std::thread>)
/usr/local/include/c++/9.1.0/bits/unique\_lock。h:69
execute\_native\_thread\_routine
/home/milovidov/ClickHouse/ci/workspace/gcc/gcc-build/x86\_64-pc-linux-gnu/libstdc++-v3/include/bits/unique\_ptr.h:81
start\_thread

\_\_clone

7行目:
──────
カウント():1034
sym:StackTrace::StackTrace(ucontext\_t const&)
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/Common/StackTrace。cpp:208
DB::(匿名ネームスペース)::writeTraceInfo(DB::TimerType,int,siginfo\_t*,無効*\[クローン。イスラ0\]
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/IO/BufferBase。h:99

DB::VolnitskyBase\<true,true,DB::StringSearcher\<true,true\>\>::search(unsigned char const\*,unsigned long)const
/opt/milovidov/ClickHouse/build\_gcc9/プログラム/clickhouse
DB::MatchImpl\<true,false\>::vector\_constant(DB::PODArray\<unsigned char,4096ul,Allocatorwithint\<false,Allocatorhint,AllocatorHints::DefaultHint,67108864ul\>,15ul,16ul\>const&,DB::PODArray\<long,4096ul,Allocatorhint\<false,Allocatorhint:67108864,15ul\>,\_\_\_\_\_\_\_\_\_\_\_\_\_,cxx11::Basic\_string\<char,std::char\_traits<char>,std::allocator<char> \>const&,DB::PODArray\<unsigned char,4096ul,AllocatorWithHint\<false,AllocatorHints::DefaultHint,67108864ul\>,15ul,16ul\>&)
/opt/milovidov/ClickHouse/build\_gcc9/プログラム/clickhouse
DB::FunctionsStringSearch\<DB::MatchImpl\<true,false\>,DB::NameLike\>::executeImpl(DB::Block&,std::vector\<unsigned long,std::allocator<unsigned long> \>const&、unsigned long、unsigned long)
/opt/milovidov/ClickHouse/build\_gcc9/プログラム/clickhouse
DB::PreparedFunctionImpl::execute(DB::Block&,std::vector\<unsigned long,std::allocator<unsigned long> \>const&,unsigned long,unsigned long,bool)
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/Functions/IFunction.cpp:464
DB::ExpressionAction::execute(DB::Block&,bool)const
/usr/local/include/c++/9.1.0/bits/stl\_vector。h:677
DB::ExpressionActions::execute(DB::Block&,bool)const
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/インタプリタ/ExpressionActions。cpp:739
DB::MergeTreeRangeReader::executePrewhereActionsAndFilterColumns(DB::MergeTreeRangeReader::ReadResult&)
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/ストレージ/MergeTree/MergeTreeRangeReader。cpp:660
DB::MergeTreeRangeReader::read(unsigned long,std::vector\<DB::MarkRange,std:::allocator<DB::MarkRange> \>&)
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/ストレージ/MergeTree/MergeTreeRangeReader。cpp:546
DB::MergeTreeRangeReader::read(unsigned long,std::vector\<DB::MarkRange,std:::allocator<DB::MarkRange> \>&)
/usr/local/include/c++/9.1.0/bits/stl\_vector。h:108
DB::MergeTreeBaseSelectBlockInputStream::readFromPartImpl()
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/ストレージ/MergeTree/MergeTreeBaseSelectBlockInputStream。cpp:158
DB::MergeTreeBaseSelectBlockInputStream::readImpl()
/usr/local/include/c++/9.1.0/bits/stl\_vector。h:108
DB::IBlockInputStream::read()
/usr/local/include/c++/9.1.0/bits/stl\_vector。h:108
DB::ExpressionBlockInputStream::readImpl()
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/データストリーム/ExpressionBlockInputStream.cpp:34
DB::IBlockInputStream::read()
/usr/local/include/c++/9.1.0/bits/stl\_vector。h:108
DB::PartialSortingBlockInputStream::readImpl()
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/データストリーム/PartialSortingBlockInputStream.cpp:13
DB::IBlockInputStream::read()
/usr/local/include/c++/9.1.0/bits/stl\_vector。h:108
DB::ParallelInputsProcessor<DB::UnionBlockInputStream::Handler>::ループ(unsigned long)
/usr/local/include/c++/9.1.0/bits/atomic\_base。h:419
DB::ParallelInputsProcessor<DB::UnionBlockInputStream::Handler>::スレッド(std::shared\_ptr<DB::ThreadGroupStatus>,符号なし長)
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/データストリーム/ParallelInputsProcessor。h:215
次の例では、threadfromglobalpoolについて説明します<DB::UnionBlockInputStream::Handler>::*ﾂつｨﾂ姪"ﾂつ"ﾂ債ﾂづｭﾂつｹﾂ-faq<DB::ThreadGroupStatus>、unsigned long),DB::Parallelinputプロセッサ<DB::UnionBlockInputStream::Handler>* ﾂつｨﾂ姪"ﾂつ"ﾂ債ﾂづｭﾂつｹ<DB::ThreadGroupStatus> コンストラクターです。<DB::UnionBlockInputStream::Handler>::*&&)(std::shared\_ptr<DB::ThreadGroupStatus>、unsigned long),DB::Parallelinputプロセッサ<DB::UnionBlockInputStream::Handler>*&&,std::shared\_ptr<DB::ThreadGroupStatus>&&,unsigned long&)::{lambda()\#1}::operator()()const
/usr/local/include/c++/9.1.0/bits/shared\_ptr\_base。h:729
ThreadPoolImpl<std::thread>::ワーカー(std::\_List\_iterator<std::thread>)
/usr/local/include/c++/9.1.0/bits/unique\_lock。h:69
execute\_native\_thread\_routine
/home/milovidov/ClickHouse/ci/workspace/gcc/gcc-build/x86\_64-pc-linux-gnu/libstdc++-v3/include/bits/unique\_ptr.h:81
start\_thread

\_\_clone

8行目:
──────
カウント():989
sym:StackTrace::StackTrace(ucontext\_t const&)
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/Common/StackTrace。cpp:208
DB::(匿名ネームスペース)::writeTraceInfo(DB::TimerType,int,siginfo\_t*,無効*\[クローン。イスラ0\]
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/IO/BufferBase。h:99

\_\_ll\_lock\_wait

pthread\_mutex\_lock

DB::Mergetreaderstream::ロードマーク()
/usr/local/include/c++/9.1.0/bits/std\_mutex.h:103
DB::MergeTreeReaderStream::MergeTreeReaderStream(std::\_\_cxx11::basic\_string\<char,std:::char\_traits<char>,std::allocator<char> \>const&,std::\_\_cxx11::basic\_string\<char,std::char\_traits<char>,std::allocator<char> \>const&,unsigned long,std::vector\<DB::MarkRange,std::allocator<DB::MarkRange> \>const&,DB:MarkCache*、bool、DB::UncompressedCache*,unsigned long,unsigned long,unsigned long,unsigned long,DB::MergeTreeIndexGranularityInfo const\*,std::function\<void(DB::ReadBufferFromFileBase::ProfileInfo)\>const&,int)
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/ストレージ/MergeTree/Mergetreaderstream。cpp:107
データベースサブストリングを使用すると、データベースサブストリングを使用してデータベースサブストリングを行うことができます。<DB::IDataType::Substream> \>const&),DB::MergeTreeReader::addStreams(std::\_\_cxx11::basic\_string\<char,std::char\_traits<char>,std::allocator<char> \>const&,DB::IDataType const&,std::function\<void(DB::ReadBufferFromFileBase::ProfileInfo)\>const&,int)::{lambda(std::vector\<DB::IDataType::Substream,std:::<DB::IDataType::Substream> \>const&)\#1}\>::\_M\_invoke(std::\_Any\_data const&,std::vector\<DB::IDataType::Substream,std::allocator<DB::IDataType::Substream> \>const&)
/usr/local/include/c++/9.1.0/bits/unique\_ptr。h:147
DB::MergeTreeReader::addStreams(std::\_\_cxx11::basic\_string\<char,std:::char\_traits<char>,std::allocator<char> \>const&,DB::IDataType const&,std::function\<void(DB::ReadBufferFromFileBase::ProfileInfo)\>const&,int)
/usr/local/include/c++/9.1.0/bits/stl\_vector。h:677
DB::MergeTreeReader::MergeTreeReader(std::\_\_cxx11::basic\_string\<char,std:::char\_traits<char>,std::allocator<char> \>const&,std::shared\_ptr<DB::MergeTreeDataPart const> const&,DB::NamesAndTypesList const&,DB::UncompressedCache*,DB::MarkCache*,bool,DB::MergeTreeData const&,std::vector\<DB::MarkRange,std::allocator<DB::MarkRange> \>const&、unsigned long、unsigned long、std::map\<std::\_\_cxx11::basic\_string\<char,std::char\_traits<char>,std::allocator<char> \>,double,std::less\<std::\_\_cxx11::basic\_string\<char,std::char\_traits<char>,std::allocator<char> \>\>,std::allocator\<std::pair\<std::\_\_cxx11::basic\_string\<char,std::char\_traits<char>,std::allocator<char> \>const,double\>\>\>const&,std::function\<void(DB::ReadBufferFromFileBase::ProfileInfo)\>const&,int)
/usr/local/include/c++/9.1.0/bits/stl\_list。h:303
DB::MergeTreeThreadSelectBlockInputStream::getNewTask()
/usr/local/include/c++/9.1.0/bits/std\_function。h:259
DB::MergeTreeBaseSelectBlockInputStream::readImpl()
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/ストレージ/MergeTree/MergeTreeBaseSelectBlockInputStream。cpp:54
DB::IBlockInputStream::read()
/usr/local/include/c++/9.1.0/bits/stl\_vector。h:108
DB::ExpressionBlockInputStream::readImpl()
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/データストリーム/ExpressionBlockInputStream.cpp:34
DB::IBlockInputStream::read()
/usr/local/include/c++/9.1.0/bits/stl\_vector。h:108
DB::PartialSortingBlockInputStream::readImpl()
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/データストリーム/PartialSortingBlockInputStream.cpp:13
DB::IBlockInputStream::read()
/usr/local/include/c++/9.1.0/bits/stl\_vector。h:108
DB::ParallelInputsProcessor<DB::UnionBlockInputStream::Handler>::ループ(unsigned long)
/usr/local/include/c++/9.1.0/bits/atomic\_base。h:419
DB::ParallelInputsProcessor<DB::UnionBlockInputStream::Handler>::スレッド(std::shared\_ptr<DB::ThreadGroupStatus>,符号なし長)
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/データストリーム/ParallelInputsProcessor。h:215
次の例では、threadfromglobalpoolについて説明します<DB::UnionBlockInputStream::Handler>::*ﾂつｨﾂ姪"ﾂつ"ﾂ債ﾂづｭﾂつｹﾂ-faq<DB::ThreadGroupStatus>、unsigned long),DB::Parallelinputプロセッサ<DB::UnionBlockInputStream::Handler>* ﾂつｨﾂ姪"ﾂつ"ﾂ債ﾂづｭﾂつｹ<DB::ThreadGroupStatus> コンストラクターです。<DB::UnionBlockInputStream::Handler>::*&&)(std::shared\_ptr<DB::ThreadGroupStatus>、unsigned long),DB::Parallelinputプロセッサ<DB::UnionBlockInputStream::Handler>*&&,std::shared\_ptr<DB::ThreadGroupStatus>&&,unsigned long&)::{lambda()\#1}::operator()()const
/usr/local/include/c++/9.1.0/bits/shared\_ptr\_base。h:729
ThreadPoolImpl<std::thread>::ワーカー(std::\_List\_iterator<std::thread>)
/usr/local/include/c++/9.1.0/bits/unique\_lock。h:69
execute\_native\_thread\_routine
/home/milovidov/ClickHouse/ci/workspace/gcc/gcc-build/x86\_64-pc-linux-gnu/libstdc++-v3/include/bits/unique\_ptr.h:81
start\_thread

\_\_clone

9行目:
───────
カウント():779
sym:StackTrace::StackTrace(ucontext\_t const&)
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/Common/StackTrace。cpp:208
DB::(匿名ネームスペース)::writeTraceInfo(DB::TimerType,int,siginfo\_t*,無効*\[クローン。イスラ0\]
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/IO/BufferBase。h:99

void DB::deserializeBinarySSE2\<4\>(DB::PODArray\<unsigned char,4096ul,Allocatorhint\<false,AllocatorHints::DefaultHint,67108864ul\>,15ul,16ul\>&,DB::PODArray\<unsigned,4096ul,Allocatorhint\<false,Allocatorhint\<false,allocatorhint,67108864,15,unsigned\>,16buff,&)
/usr/local/lib/gcc/x86\_64-pc-linux-gnu/9.1.0/include/emmintrin.h:727
DB::DataTypeString::deserializeBinaryBulk(DB::IColumn&,DB::ReadBuffer&,unsigned long,double)const
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/データタイプ/DataTypeString。cpp:202
DB::MergeTreeReader::readData(std::\_\_cxx11::basic\_string\<char,std::char\_traits<char>,std::allocator<char> \>const&,DB::IDataType const&,DB::IColumn&,unsigned long,bool,unsigned long,bool)
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/ストレージ/MergeTree/MergeTreeReader。cpp:232
DB::MergeTreeReader::readRows(unsigned long,bool,unsigned long,DB::Block&)
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/ストレージ/MergeTree/MergeTreeReader。cpp:111
DB::MergeTreeRangeReader::DelayedStream::finalize(DB::Block&)
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/ストレージ/MergeTree/MergeTreeRangeReader。cpp:35
データベースのメンバーシップは、データベースのメンバーシップに基づいています。<DB::MarkRange> \>&)
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/ストレージ/MergeTree/MergeTreeRangeReader。cpp:219
DB::MergeTreeRangeReader::read(unsigned long,std::vector\<DB::MarkRange,std:::allocator<DB::MarkRange> \>&)
/usr/local/include/c++/9.1.0/bits/stl\_vector。h:108
DB::MergeTreeRangeReader::read(unsigned long,std::vector\<DB::MarkRange,std:::allocator<DB::MarkRange> \>&)
/usr/local/include/c++/9.1.0/bits/stl\_vector。h:108
DB::MergeTreeBaseSelectBlockInputStream::readFromPartImpl()
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/ストレージ/MergeTree/MergeTreeBaseSelectBlockInputStream。cpp:158
DB::MergeTreeBaseSelectBlockInputStream::readImpl()
/usr/local/include/c++/9.1.0/bits/stl\_vector。h:108
DB::IBlockInputStream::read()
/usr/local/include/c++/9.1.0/bits/stl\_vector。h:108
DB::ExpressionBlockInputStream::readImpl()
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/データストリーム/ExpressionBlockInputStream.cpp:34
DB::IBlockInputStream::read()
/usr/local/include/c++/9.1.0/bits/stl\_vector。h:108
DB::PartialSortingBlockInputStream::readImpl()
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/データストリーム/PartialSortingBlockInputStream.cpp:13
DB::IBlockInputStream::read()
/usr/local/include/c++/9.1.0/bits/stl\_vector。h:108
DB::ParallelInputsProcessor<DB::UnionBlockInputStream::Handler>::ループ(unsigned long)
/usr/local/include/c++/9.1.0/bits/atomic\_base。h:419
DB::ParallelInputsProcessor<DB::UnionBlockInputStream::Handler>::スレッド(std::shared\_ptr<DB::ThreadGroupStatus>,符号なし長)
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/データストリーム/ParallelInputsProcessor。h:215
次の例では、threadfromglobalpoolについて説明します<DB::UnionBlockInputStream::Handler>::*ﾂつｨﾂ姪"ﾂつ"ﾂ債ﾂづｭﾂつｹﾂ-faq<DB::ThreadGroupStatus>、unsigned long),DB::Parallelinputプロセッサ<DB::UnionBlockInputStream::Handler>* ﾂつｨﾂ姪"ﾂつ"ﾂ債ﾂづｭﾂつｹ<DB::ThreadGroupStatus> コンストラクターです。<DB::UnionBlockInputStream::Handler>::*&&)(std::shared\_ptr<DB::ThreadGroupStatus>、unsigned long),DB::Parallelinputプロセッサ<DB::UnionBlockInputStream::Handler>*&&,std::shared\_ptr<DB::ThreadGroupStatus>&&,unsigned long&)::{lambda()\#1}::operator()()const
/usr/local/include/c++/9.1.0/bits/shared\_ptr\_base。h:729
ThreadPoolImpl<std::thread>::ワーカー(std::\_List\_iterator<std::thread>)
/usr/local/include/c++/9.1.0/bits/unique\_lock。h:69
execute\_native\_thread\_routine
/home/milovidov/ClickHouse/ci/workspace/gcc/gcc-build/x86\_64-pc-linux-gnu/libstdc++-v3/include/bits/unique\_ptr.h:81
start\_thread

\_\_clone

10行目:
───────
カウント():666
sym:StackTrace::StackTrace(ucontext\_t const&)
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/Common/StackTrace。cpp:208
DB::(匿名ネームスペース)::writeTraceInfo(DB::TimerType,int,siginfo\_t*,無効*\[クローン。イスラ0\]
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/IO/BufferBase。h:99

void DB::deserializeBinarySSE2\<4\>(DB::PODArray\<unsigned char,4096ul,Allocatorhint\<false,AllocatorHints::DefaultHint,67108864ul\>,15ul,16ul\>&,DB::PODArray\<unsigned,4096ul,Allocatorhint\<false,Allocatorhint\<false,allocatorhint,67108864,15,unsigned\>,16buff,&)
/usr/local/lib/gcc/x86\_64-pc-linux-gnu/9.1.0/include/emmintrin.h:727
DB::DataTypeString::deserializeBinaryBulk(DB::IColumn&,DB::ReadBuffer&,unsigned long,double)const
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/データタイプ/DataTypeString。cpp:202
DB::MergeTreeReader::readData(std::\_\_cxx11::basic\_string\<char,std::char\_traits<char>,std::allocator<char> \>const&,DB::IDataType const&,DB::IColumn&,unsigned long,bool,unsigned long,bool)
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/ストレージ/MergeTree/MergeTreeReader。cpp:232
DB::MergeTreeReader::readRows(unsigned long,bool,unsigned long,DB::Block&)
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/ストレージ/MergeTree/MergeTreeReader。cpp:111
DB::MergeTreeRangeReader::DelayedStream::finalize(DB::Block&)
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/ストレージ/MergeTree/MergeTreeRangeReader。cpp:35
データベースのメンバーシップは、データベースのメンバーシップに基づいています。<DB::MarkRange> \>&)
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/ストレージ/MergeTree/MergeTreeRangeReader。cpp:219
DB::MergeTreeRangeReader::read(unsigned long,std::vector\<DB::MarkRange,std:::allocator<DB::MarkRange> \>&)
/usr/local/include/c++/9.1.0/bits/stl\_vector。h:108
DB::MergeTreeRangeReader::read(unsigned long,std::vector\<DB::MarkRange,std:::allocator<DB::MarkRange> \>&)
/usr/local/include/c++/9.1.0/bits/stl\_vector。h:108
DB::MergeTreeBaseSelectBlockInputStream::readFromPartImpl()
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/ストレージ/MergeTree/MergeTreeBaseSelectBlockInputStream。cpp:158
DB::MergeTreeBaseSelectBlockInputStream::readImpl()
/usr/local/include/c++/9.1.0/bits/stl\_vector。h:108
DB::IBlockInputStream::read()
/usr/local/include/c++/9.1.0/bits/stl\_vector。h:108
DB::ExpressionBlockInputStream::readImpl()
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/データストリーム/ExpressionBlockInputStream.cpp:34
DB::IBlockInputStream::read()
/usr/local/include/c++/9.1.0/bits/stl\_vector。h:108
DB::PartialSortingBlockInputStream::readImpl()
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/データストリーム/PartialSortingBlockInputStream.cpp:13
DB::IBlockInputStream::read()
/usr/local/include/c++/9.1.0/bits/stl\_vector。h:108
DB::ParallelInputsProcessor<DB::UnionBlockInputStream::Handler>::ループ(unsigned long)
/usr/local/include/c++/9.1.0/bits/atomic\_base。h:419
DB::ParallelInputsProcessor<DB::UnionBlockInputStream::Handler>::スレッド(std::shared\_ptr<DB::ThreadGroupStatus>,符号なし長)
/ホーム/milovidov/ClickHouse/build\_gcc9/../dbms/データストリーム/ParallelInputsProcessor。h:215
次の例では、threadfromglobalpoolについて説明します<DB::UnionBlockInputStream::Handler>::*ﾂつｨﾂ姪"ﾂつ"ﾂ債ﾂづｭﾂつｹﾂ-faq<DB::ThreadGroupStatus>、unsigned long),DB::Parallelinputプロセッサ<DB::UnionBlockInputStream::Handler>* ﾂつｨﾂ姪"ﾂつ"ﾂ債ﾂづｭﾂつｹ<DB::ThreadGroupStatus> コンストラクターです。<DB::UnionBlockInputStream::Handler>::*&&)(std::shared\_ptr<DB::ThreadGroupStatus>、unsigned long),DB::Parallelinputプロセッサ<DB::UnionBlockInputStream::Handler>*&&,std::shared\_ptr<DB::ThreadGroupStatus>&&,unsigned long&)::{lambda()\#1}::operator()()const
/usr/local/include/c++/9.1.0/bits/shared\_ptr\_base。h:729
ThreadPoolImpl<std::thread>::ワーカー(std::\_List\_iterator<std::thread>)
/usr/local/include/c++/9.1.0/bits/unique\_lock。h:69
execute\_native\_thread\_routine
/home/milovidov/ClickHouse/ci/workspace/gcc/gcc-build/x86\_64-pc-linux-gnu/libstdc++-v3/include/bits/unique\_ptr.h:81
start\_thread

\_\_clone
