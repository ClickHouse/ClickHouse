# To run clang-tidy from CMake, build ClickHouse with -DENABLE_CLANG_TIDY=1. To show all warnings, it is
# recommended to pass "-k0" to Ninja.

# Enable all checks + disable selected checks. Feel free to remove disabled checks from below list if
# a) the new check is not controversial (this includes many checks in readability-* and google-*) or
# b) too noisy (checks with > 100 new warnings are considered noisy, this includes e.g. cppcoreguidelines-*).

# TODO Let clang-tidy check headers in further directories
#      --> HeaderFilterRegex: '^.*/(src|base|programs|utils)/.*(h|hpp)$'
HeaderFilterRegex: '^.*/(base)/.*(h|hpp)$'

Checks: '*,
    -abseil-*,

    -altera-*,

    -android-*,

    -bugprone-assignment-in-if-condition,
    -bugprone-branch-clone,
    -bugprone-easily-swappable-parameters,
    -bugprone-exception-escape,
    -bugprone-implicit-widening-of-multiplication-result,
    -bugprone-narrowing-conversions,
    -bugprone-not-null-terminated-result,
    -bugprone-reserved-identifier,
    -bugprone-unchecked-optional-access,

    -cert-dcl16-c,
    -cert-dcl37-c,
    -cert-dcl51-cpp,
    -cert-err58-cpp,
    -cert-msc32-c,
    -cert-msc51-cpp,
    -cert-oop54-cpp,
    -cert-oop57-cpp,

    -clang-analyzer-optin.performance.Padding,
    -clang-analyzer-optin.portability.UnixAPI,
    -clang-analyzer-security.insecureAPI.bzero,
    -clang-analyzer-security.insecureAPI.strcpy,

    -cppcoreguidelines-avoid-c-arrays,
    -cppcoreguidelines-avoid-const-or-ref-data-members,
    -cppcoreguidelines-avoid-do-while,
    -cppcoreguidelines-avoid-goto,
    -cppcoreguidelines-avoid-magic-numbers,
    -cppcoreguidelines-avoid-non-const-global-variables,
    -cppcoreguidelines-explicit-virtual-functions,
    -cppcoreguidelines-init-variables,
    -cppcoreguidelines-interfaces-global-init,
    -cppcoreguidelines-macro-usage,
    -cppcoreguidelines-narrowing-conversions,
    -cppcoreguidelines-no-malloc,
    -cppcoreguidelines-non-private-member-variables-in-classes,
    -cppcoreguidelines-owning-memory,
    -cppcoreguidelines-prefer-member-initializer,
    -cppcoreguidelines-pro-bounds-array-to-pointer-decay,
    -cppcoreguidelines-pro-bounds-constant-array-index,
    -cppcoreguidelines-pro-bounds-pointer-arithmetic,
    -cppcoreguidelines-pro-type-const-cast,
    -cppcoreguidelines-pro-type-cstyle-cast,
    -cppcoreguidelines-pro-type-member-init,
    -cppcoreguidelines-pro-type-reinterpret-cast,
    -cppcoreguidelines-pro-type-static-cast-downcast,
    -cppcoreguidelines-pro-type-union-access,
    -cppcoreguidelines-pro-type-vararg,
    -cppcoreguidelines-slicing,
    -cppcoreguidelines-special-member-functions,

    -darwin-*,

    -fuchsia-*,

    -google-build-using-namespace,
    -google-readability-braces-around-statements,
    -google-readability-casting,
    -google-readability-function-size,
    -google-readability-namespace-comments,
    -google-readability-todo,
    -google-upgrade-googletest-case,

    -hicpp-avoid-c-arrays,
    -hicpp-avoid-goto,
    -hicpp-braces-around-statements,
    -hicpp-explicit-conversions,
    -hicpp-function-size,
    -hicpp-member-init,
    -hicpp-move-const-arg,
    -hicpp-multiway-paths-covered,
    -hicpp-named-parameter,
    -hicpp-no-array-decay,
    -hicpp-no-assembler,
    -hicpp-no-malloc,
    -hicpp-signed-bitwise,
    -hicpp-special-member-functions,
    -hicpp-uppercase-literal-suffix,
    -hicpp-use-auto,
    -hicpp-use-emplace,
    -hicpp-vararg,

    -linuxkernel-*,

    -llvm-*,

    -llvmlibc-*,

    -openmp-*,

    -misc-const-correctness,
    -misc-no-recursion,
    -misc-non-private-member-variables-in-classes,
    -misc-confusable-identifiers, # useful but slooow

    -modernize-avoid-c-arrays,
    -modernize-concat-nested-namespaces,
    -modernize-macro-to-enum,
    -modernize-pass-by-value,
    -modernize-return-braced-init-list,
    -modernize-use-auto,
    -modernize-use-default-member-init,
    -modernize-use-emplace,
    -modernize-use-nodiscard,
    -modernize-use-override,
    -modernize-use-trailing-return-type,

    -performance-inefficient-string-concatenation,
    -performance-no-int-to-ptr,
    -performance-unnecessary-value-param,

    -portability-simd-intrinsics,

    -readability-braces-around-statements,
    -readability-convert-member-functions-to-static,
    -readability-else-after-return,
    -readability-function-cognitive-complexity,
    -readability-function-size,
    -readability-identifier-length,
    -readability-identifier-naming,
    -readability-implicit-bool-conversion,
    -readability-isolate-declaration,
    -readability-magic-numbers,
    -readability-named-parameter,
    -readability-redundant-declaration,
    -readability-simplify-boolean-expr,
    -readability-static-accessed-through-instance,
    -readability-suspicious-call-argument,
    -readability-uppercase-literal-suffix,
    -readability-use-anyofallof,

    -zirkon-*,
'

WarningsAsErrors: '*'

CheckOptions:
  readability-identifier-naming.ClassCase: CamelCase
  readability-identifier-naming.EnumCase: CamelCase
  readability-identifier-naming.LocalVariableCase: lower_case
  readability-identifier-naming.StaticConstantCase: aNy_CasE
  readability-identifier-naming.MemberCase: lower_case
  readability-identifier-naming.PrivateMemberPrefix: ''
  readability-identifier-naming.ProtectedMemberPrefix: ''
  readability-identifier-naming.PublicMemberCase: lower_case
  readability-identifier-naming.MethodCase: camelBack
  readability-identifier-naming.PrivateMethodPrefix: ''
  readability-identifier-naming.ProtectedMethodPrefix: ''
  readability-identifier-naming.ParameterPackCase: lower_case
  readability-identifier-naming.StructCase: CamelCase
  readability-identifier-naming.TemplateTemplateParameterCase: CamelCase
  readability-identifier-naming.TemplateUsingCase: lower_case
  readability-identifier-naming.TypeTemplateParameterCase: CamelCase
  readability-identifier-naming.TypedefCase: CamelCase
  readability-identifier-naming.UnionCase: CamelCase
  readability-identifier-naming.UsingCase: CamelCase
  modernize-loop-convert.UseCxx20ReverseRanges: false
  performance-move-const-arg.CheckTriviallyCopyableMove: false
  # Workaround clang-tidy bug: https://github.com/llvm/llvm-project/issues/46097
  readability-identifier-naming.TypeTemplateParameterIgnoredRegexp: expr-type
  cppcoreguidelines-avoid-do-while.IgnoreMacros: true
